
C:\Users\jdaily\AppData\Local\Temp\arduino\sketches\1A5E162EF370CCB3B603332BD36A0DAF/BallastPipeLevelSensor.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
       0:	00 00 03 20 d1 01 00 00 c9 32 00 00 85 32 00 00     ... .....2...2..
	return ret;
      10:	85 32 00 00 85 32 00 00 85 32 00 00 85 32 00 00     .2...2...2...2..
    Can0.enableFIFO();
    Can0.enableFIFOInterrupt();
    Can0.onReceive(canSniff);
    
  }
}
      20:	85 32 00 00 85 32 00 00 85 32 00 00 c9 32 00 00     .2...2...2...2..
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
      30:	c9 32 00 00 85 32 00 00 f5 44 00 00 f9 44 00 00     .2...2...D...D..
      40:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
      50:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
      60:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
	
	// Handle negative numbers
	if (number < 0.0) {
      70:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
	uint8_t sign=0;
      80:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
      90:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
		rounding *= 0.1;
      a0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
	}
	number += rounding;
      b0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
      c0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
	double remainder = number - (double)int_part;
      d0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
      e0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
      f0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
     100:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
			remainder *= 10.0;
     110:	c9 32 00 00 fd 37 00 00 c9 32 00 00 c9 32 00 00     .2...7...2...2..
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
     120:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
			remainder -= n; 
     130:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
			buf[count++] = '0' + n;
     140:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
		}
		count += write(buf, count);
	}
	return count;
}
     150:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
     160:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
		number = -number;
     170:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
	number += rounding;
     180:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
	unsigned long int_part = (unsigned long)number;
     190:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
}
     1a0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
     1b0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..
     1c0:	c9 32 00 00 c9 32 00 00 c9 32 00 00 c9 32 00 00     .2...2...2...2..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5f      	ldr	r3, [pc, #380]	; (350 <ResetHandler+0x180>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
{
     1d6:	b510      	push	{r4, lr}
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	81da      	strh	r2, [r3, #14]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	81da      	strh	r2, [r3, #14]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f003 f874 	bl	32d0 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b5a      	ldr	r3, [pc, #360]	; (354 <ResetHandler+0x184>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	631a      	str	r2, [r3, #48]	; 0x30
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a59      	ldr	r2, [pc, #356]	; (358 <ResetHandler+0x188>)
     1f2:	639a      	str	r2, [r3, #56]	; 0x38
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a59      	ldr	r2, [pc, #356]	; (35c <ResetHandler+0x18c>)
     1f6:	63da      	str	r2, [r3, #60]	; 0x3c
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     1fc:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     200:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     204:	f503 23e8 	add.w	r3, r3, #475136	; 0x74000
     208:	4a55      	ldr	r2, [pc, #340]	; (360 <ResetHandler+0x190>)
     20a:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     20c:	4b55      	ldr	r3, [pc, #340]	; (364 <ResetHandler+0x194>)
     20e:	789a      	ldrb	r2, [r3, #2]
     210:	0711      	lsls	r1, r2, #28
     212:	d503      	bpl.n	21c <ResetHandler+0x4c>
     214:	789a      	ldrb	r2, [r3, #2]
     216:	f042 0208 	orr.w	r2, r2, #8
     21a:	709a      	strb	r2, [r3, #2]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21c:	4b52      	ldr	r3, [pc, #328]	; (368 <ResetHandler+0x198>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     21e:	4853      	ldr	r0, [pc, #332]	; (36c <ResetHandler+0x19c>)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     220:	22aa      	movs	r2, #170	; 0xaa
     222:	701a      	strb	r2, [r3, #0]
	while (dest < &_edata) *dest++ = *src++;
     224:	4b52      	ldr	r3, [pc, #328]	; (370 <ResetHandler+0x1a0>)
     226:	1cda      	adds	r2, r3, #3
     228:	1a12      	subs	r2, r2, r0
     22a:	1ec1      	subs	r1, r0, #3
     22c:	f022 0203 	bic.w	r2, r2, #3
     230:	4299      	cmp	r1, r3
     232:	bf88      	it	hi
     234:	2200      	movhi	r2, #0
     236:	494f      	ldr	r1, [pc, #316]	; (374 <ResetHandler+0x1a4>)
     238:	f002 ff50 	bl	30dc <memcpy>
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     23c:	4b4e      	ldr	r3, [pc, #312]	; (378 <ResetHandler+0x1a8>)
     23e:	484f      	ldr	r0, [pc, #316]	; (37c <ResetHandler+0x1ac>)
     240:	1cda      	adds	r2, r3, #3
     242:	1a12      	subs	r2, r2, r0
     244:	1ec1      	subs	r1, r0, #3
     246:	f022 0203 	bic.w	r2, r2, #3
     24a:	4299      	cmp	r1, r3
     24c:	bf88      	it	hi
     24e:	2200      	movhi	r2, #0
     250:	2100      	movs	r1, #0
     252:	f005 fb09 	bl	5868 <memset>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     256:	494a      	ldr	r1, [pc, #296]	; (380 <ResetHandler+0x1b0>)
     258:	484a      	ldr	r0, [pc, #296]	; (384 <ResetHandler+0x1b4>)
     25a:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
     25e:	f002 ff3d 	bl	30dc <memcpy>
     262:	4b49      	ldr	r3, [pc, #292]	; (388 <ResetHandler+0x1b8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     264:	4a49      	ldr	r2, [pc, #292]	; (38c <ResetHandler+0x1bc>)
     266:	2180      	movs	r1, #128	; 0x80
     268:	f803 1b01 	strb.w	r1, [r3], #1
     26c:	4293      	cmp	r3, r2
     26e:	d1fb      	bne.n	268 <ResetHandler+0x98>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     270:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     274:	4a43      	ldr	r2, [pc, #268]	; (384 <ResetHandler+0x1b4>)
     276:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27a:	4b45      	ldr	r3, [pc, #276]	; (390 <ResetHandler+0x1c0>)
     27c:	228a      	movs	r2, #138	; 0x8a
     27e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     280:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     284:	2224      	movs	r2, #36	; 0x24
     286:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     288:	22a0      	movs	r2, #160	; 0xa0
     28a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28c:	799a      	ldrb	r2, [r3, #6]
     28e:	0792      	lsls	r2, r2, #30
     290:	d5fc      	bpl.n	28c <ResetHandler+0xbc>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     292:	799a      	ldrb	r2, [r3, #6]
     294:	06d4      	lsls	r4, r2, #27
     296:	d4fc      	bmi.n	292 <ResetHandler+0xc2>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     298:	4a3e      	ldr	r2, [pc, #248]	; (394 <ResetHandler+0x1c4>)
     29a:	7993      	ldrb	r3, [r2, #6]
     29c:	f003 030c 	and.w	r3, r3, #12
     2a0:	2b08      	cmp	r3, #8
     2a2:	d1fa      	bne.n	29a <ResetHandler+0xca>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a4:	4b30      	ldr	r3, [pc, #192]	; (368 <ResetHandler+0x198>)
     2a6:	2260      	movs	r2, #96	; 0x60
     2a8:	705a      	strb	r2, [r3, #1]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2aa:	78da      	ldrb	r2, [r3, #3]
     2ac:	2a80      	cmp	r2, #128	; 0x80
     2ae:	d1fc      	bne.n	2aa <ResetHandler+0xda>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b0:	4b38      	ldr	r3, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b2:	2201      	movs	r2, #1
     2b4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2b6:	225d      	movs	r2, #93	; 0x5d
     2b8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2ba:	799a      	ldrb	r2, [r3, #6]
     2bc:	0690      	lsls	r0, r2, #26
     2be:	d5fc      	bpl.n	2ba <ResetHandler+0xea>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c0:	799a      	ldrb	r2, [r3, #6]
     2c2:	0651      	lsls	r1, r2, #25
     2c4:	d5fc      	bpl.n	2c0 <ResetHandler+0xf0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2c6:	4a23      	ldr	r2, [pc, #140]	; (354 <ResetHandler+0x184>)
     2c8:	4933      	ldr	r1, [pc, #204]	; (398 <ResetHandler+0x1c8>)
     2ca:	6451      	str	r1, [r2, #68]	; 0x44
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2cc:	2100      	movs	r1, #0
     2ce:	6491      	str	r1, [r2, #72]	; 0x48
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d0:	2120      	movs	r1, #32
     2d2:	7019      	strb	r1, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2d4:	492f      	ldr	r1, [pc, #188]	; (394 <ResetHandler+0x1c4>)
     2d6:	798b      	ldrb	r3, [r1, #6]
     2d8:	f003 030c 	and.w	r3, r3, #12
     2dc:	2b0c      	cmp	r3, #12
     2de:	d1fa      	bne.n	2d6 <ResetHandler+0x106>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e0:	4b2e      	ldr	r3, [pc, #184]	; (39c <ResetHandler+0x1cc>)
     2e2:	6053      	str	r3, [r2, #4]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2e4:	4a2e      	ldr	r2, [pc, #184]	; (3a0 <ResetHandler+0x1d0>)
     2e6:	6913      	ldr	r3, [r2, #16]
     2e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2ec:	d103      	bne.n	2f6 <ResetHandler+0x126>
		RTC_SR = 0;
     2ee:	6153      	str	r3, [r2, #20]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2f4:	6113      	str	r3, [r2, #16]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2fa:	4a2a      	ldr	r2, [pc, #168]	; (3a4 <ResetHandler+0x1d4>)
     2fc:	615a      	str	r2, [r3, #20]
	SYST_CVR = 0;
     2fe:	2200      	movs	r2, #0
     300:	619a      	str	r2, [r3, #24]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     302:	2207      	movs	r2, #7
     304:	611a      	str	r2, [r3, #16]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     306:	4a28      	ldr	r2, [pc, #160]	; (3a8 <ResetHandler+0x1d8>)
     308:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20

	//init_pins();
	__enable_irq();
     30c:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     30e:	f003 f87b 	bl	3408 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     312:	4b23      	ldr	r3, [pc, #140]	; (3a0 <ResetHandler+0x1d0>)
     314:	695b      	ldr	r3, [r3, #20]
     316:	07da      	lsls	r2, r3, #31
     318:	d505      	bpl.n	326 <ResetHandler+0x156>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31a:	4824      	ldr	r0, [pc, #144]	; (3ac <ResetHandler+0x1dc>)
     31c:	f003 f868 	bl	33f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     320:	4b23      	ldr	r3, [pc, #140]	; (3b0 <ResetHandler+0x1e0>)
     322:	4a24      	ldr	r2, [pc, #144]	; (3b4 <ResetHandler+0x1e4>)
     324:	61da      	str	r2, [r3, #28]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     326:	4b24      	ldr	r3, [pc, #144]	; (3b8 <ResetHandler+0x1e8>)
     328:	781b      	ldrb	r3, [r3, #0]
     32a:	065b      	lsls	r3, r3, #25
     32c:	d509      	bpl.n	342 <ResetHandler+0x172>
     32e:	4c20      	ldr	r4, [pc, #128]	; (3b0 <ResetHandler+0x1e0>)
     330:	4b20      	ldr	r3, [pc, #128]	; (3b4 <ResetHandler+0x1e4>)
     332:	69e2      	ldr	r2, [r4, #28]
     334:	429a      	cmp	r2, r3
     336:	d104      	bne.n	342 <ResetHandler+0x172>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     338:	481c      	ldr	r0, [pc, #112]	; (3ac <ResetHandler+0x1dc>)
     33a:	f003 f859 	bl	33f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     33e:	2300      	movs	r3, #0
     340:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     342:	f002 ffcb 	bl	32dc <startup_late_hook>
	__libc_init_array();
     346:	f005 fb85 	bl	5a54 <__libc_init_array>

	main();
     34a:	f002 febf 	bl	30cc <main>
	
	while (1) ;
     34e:	e7fe      	b.n	34e <ResetHandler+0x17e>
     350:	40052000 	.word	0x40052000
     354:	40048000 	.word	0x40048000
     358:	00043f82 	.word	0x00043f82
     35c:	2b000001 	.word	0x2b000001
     360:	85000003 	.word	0x85000003
     364:	4007d000 	.word	0x4007d000
     368:	4007e000 	.word	0x4007e000
     36c:	1fff0730 	.word	0x1fff0730
     370:	1fff0ec8 	.word	0x1fff0ec8
     374:	0000bd38 	.word	0x0000bd38
     378:	1fff6580 	.word	0x1fff6580
     37c:	1fff0ec8 	.word	0x1fff0ec8
     380:	00000000 	.word	0x00000000
     384:	1fff0200 	.word	0x1fff0200
     388:	e000e400 	.word	0xe000e400
     38c:	e000e464 	.word	0xe000e464
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	02060000 	.word	0x02060000
     39c:	000710c0 	.word	0x000710c0
     3a0:	4003d000 	.word	0x4003d000
     3a4:	0002bf1f 	.word	0x0002bf1f
     3a8:	20200000 	.word	0x20200000
     3ac:	666170fe 	.word	0x666170fe
     3b0:	4003e000 	.word	0x4003e000
     3b4:	5a94c3a5 	.word	0x5a94c3a5
     3b8:	4007f000 	.word	0x4007f000
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff0ec8 	.word	0x1fff0ec8
     42c:	1fff0ec8 	.word	0x1fff0ec8
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff0ec8 	.word	0x1fff0ec8
     454:	0000bd38 	.word	0x0000bd38

00000458 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
#define SIZE_LISTENERS 4

class CANListener {
  public:
    CANListener () { callbacksActive = 0; }
    virtual bool frameHandler (CAN_message_t &frame, int mailbox, uint8_t controller) { return false; }
     458:	2000      	movs	r0, #0
     45a:	4770      	bx	lr

0000045c <flexcan_isr_can0()>:
  if ( _CAN0 ) _CAN0->flexcan_interrupt();
}
#endif
#if defined(__MK66FX1M0__)
static void flexcan_isr_can0() {
  if ( _CAN0 ) _CAN0->flexcan_interrupt();
     45c:	4b03      	ldr	r3, [pc, #12]	; (46c <flexcan_isr_can0()+0x10>)
     45e:	6818      	ldr	r0, [r3, #0]
     460:	b110      	cbz	r0, 468 <flexcan_isr_can0()+0xc>
     462:	6803      	ldr	r3, [r0, #0]
     464:	681b      	ldr	r3, [r3, #0]
     466:	4718      	bx	r3
}
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	1fff6118 	.word	0x1fff6118

00000470 <flexcan_isr_can1()>:
static void flexcan_isr_can1() {
  if ( _CAN1 ) _CAN1->flexcan_interrupt();
     470:	4b03      	ldr	r3, [pc, #12]	; (480 <flexcan_isr_can1()+0x10>)
     472:	6818      	ldr	r0, [r3, #0]
     474:	b110      	cbz	r0, 47c <flexcan_isr_can1()+0xc>
     476:	6803      	ldr	r3, [r0, #0]
     478:	681b      	ldr	r3, [r3, #0]
     47a:	4718      	bx	r3
}
     47c:	4770      	bx	lr
     47e:	bf00      	nop
     480:	1fff611c 	.word	0x1fff611c

00000484 <canSniff(CAN_message_t const&)>:
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     484:	4906      	ldr	r1, [pc, #24]	; (4a0 <canSniff(CAN_message_t const&)+0x1c>)
  LED_state = !LED_state;
     486:	4a07      	ldr	r2, [pc, #28]	; (4a4 <canSniff(CAN_message_t const&)+0x20>)
     488:	6808      	ldr	r0, [r1, #0]
     48a:	7813      	ldrb	r3, [r2, #0]
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
     48c:	4906      	ldr	r1, [pc, #24]	; (4a8 <canSniff(CAN_message_t const&)+0x24>)
void canSniff(const CAN_message_t &msg) {
     48e:	b082      	sub	sp, #8
  LED_state = !LED_state;
     490:	f083 0301 	eor.w	r3, r3, #1
     494:	9001      	str	r0, [sp, #4]
	return ret;
     496:	9801      	ldr	r0, [sp, #4]
     498:	7013      	strb	r3, [r2, #0]
     49a:	6008      	str	r0, [r1, #0]
}
     49c:	b002      	add	sp, #8
     49e:	4770      	bx	lr
     4a0:	1fff612c 	.word	0x1fff612c
     4a4:	1fff0733 	.word	0x1fff0733
     4a8:	1fff6120 	.word	0x1fff6120

000004ac <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
  currentBitrate = baud;
     4ac:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4b4:	4696      	mov	lr, r2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     4b6:	4a4a      	ldr	r2, [pc, #296]	; (5e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
  currentBitrate = baud;
     4b8:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     4bc:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     4be:	6813      	ldr	r3, [r2, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4c0:	4d48      	ldr	r5, [pc, #288]	; (5e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
     4c2:	fbb5 f0f1 	udiv	r0, r5, r1
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     4c6:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     4ca:	fbb5 f5f0 	udiv	r5, r5, r0
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     4ce:	b090      	sub	sp, #64	; 0x40
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     4d0:	1b4d      	subs	r5, r1, r5
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     4d2:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     4d6:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     4d8:	6813      	ldr	r3, [r2, #0]
     4da:	01de      	lsls	r6, r3, #7
     4dc:	d5fc      	bpl.n	4d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x2c>
  while (result > 5) {
     4de:	2805      	cmp	r0, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4e0:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     4e4:	d922      	bls.n	52c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x80>
      error = baud - (clockFreq / (result * (divisor + 1)));
     4e6:	4e3f      	ldr	r6, [pc, #252]	; (5e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4e8:	4663      	mov	r3, ip
    divisor++;
     4ea:	1c5a      	adds	r2, r3, #1
     4ec:	3302      	adds	r3, #2
    result = clockFreq / baud / (divisor + 1);
     4ee:	fbb0 f7f3 	udiv	r7, r0, r3
    if (result <= 25) {
     4f2:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     4f4:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     4f8:	d80f      	bhi.n	51a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
      error = baud - (clockFreq / (result * (divisor + 1)));
     4fa:	fbb6 f3f3 	udiv	r3, r6, r3
     4fe:	1acb      	subs	r3, r1, r3
     500:	2b00      	cmp	r3, #0
     502:	bfb8      	it	lt
     504:	425b      	neglt	r3, r3
      if (error < bestError) {
     506:	42ab      	cmp	r3, r5
     508:	da09      	bge.n	51e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x72>
     50a:	461d      	mov	r5, r3
        bestDivisor = divisor;
     50c:	4694      	mov	ip, r2
      if ((error == bestError) && (result > 11) && (result < 19)) {
     50e:	2f0b      	cmp	r7, #11
     510:	d906      	bls.n	520 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x74>
     512:	2f12      	cmp	r7, #18
     514:	bf9c      	itt	ls
     516:	461d      	movls	r5, r3
     518:	4694      	movls	ip, r2
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     51a:	4613      	mov	r3, r2
     51c:	e7e5      	b.n	4ea <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x3e>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     51e:	d0f6      	beq.n	50e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x62>
  while (result > 5) {
     520:	2f05      	cmp	r7, #5
     522:	d8fa      	bhi.n	51a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
  result = clockFreq / baud / (divisor + 1);
     524:	f10c 0301 	add.w	r3, ip, #1
     528:	fbb0 f0f3 	udiv	r0, r0, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     52c:	3805      	subs	r0, #5
     52e:	2814      	cmp	r0, #20
     530:	d848      	bhi.n	5c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
     532:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     536:	dc45      	bgt.n	5c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     538:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint8_t bitTimingTable[21][3] = {
     53c:	4f2a      	ldr	r7, [pc, #168]	; (5e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x13c>)
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     53e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     542:	f100 0340 	add.w	r3, r0, #64	; 0x40
     546:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     54a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     54c:	466e      	mov	r6, sp
     54e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     550:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     552:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     554:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     556:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     558:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     55c:	c607      	stmia	r6!, {r0, r1, r2}
     55e:	f826 3b02 	strh.w	r3, [r6], #2
     562:	0c1b      	lsrs	r3, r3, #16
     564:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     566:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     56a:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     56e:	f815 1c40 	ldrb.w	r1, [r5, #-64]
     572:	04db      	lsls	r3, r3, #19
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     574:	0412      	lsls	r2, r2, #16
     576:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     57a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     57e:	4313      	orrs	r3, r2
     580:	f001 0207 	and.w	r2, r1, #7
     584:	4313      	orrs	r3, r2
     586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     58a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     58e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     592:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     596:	f8d8 3004 	ldr.w	r3, [r8, #4]
     59a:	f1be 0f02 	cmp.w	lr, #2
     59e:	bf14      	ite	ne
     5a0:	f023 0308 	bicne.w	r3, r3, #8
     5a4:	f043 0308 	orreq.w	r3, r3, #8
     5a8:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     5ac:	b93c      	cbnz	r4, 5be <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     5ae:	4a0c      	ldr	r2, [pc, #48]	; (5e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     5b0:	6813      	ldr	r3, [r2, #0]
     5b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     5b6:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5b8:	6813      	ldr	r3, [r2, #0]
     5ba:	01db      	lsls	r3, r3, #7
     5bc:	d4fc      	bmi.n	5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x10c>
}
     5be:	b010      	add	sp, #64	; 0x40
     5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     5c4:	2c00      	cmp	r4, #0
     5c6:	d1fa      	bne.n	5be <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     5c8:	4a05      	ldr	r2, [pc, #20]	; (5e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     5ca:	6813      	ldr	r3, [r2, #0]
     5cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     5d0:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5d2:	6813      	ldr	r3, [r2, #0]
     5d4:	01d9      	lsls	r1, r3, #7
     5d6:	d4fc      	bmi.n	5d2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x126>
}
     5d8:	b010      	add	sp, #64	; 0x40
     5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5de:	bf00      	nop
     5e0:	40024000 	.word	0x40024000
     5e4:	00f42400 	.word	0x00f42400
     5e8:	0000b658 	.word	0x0000b658

000005ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
  currentBitrate = baud;
     5ec:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5f4:	4696      	mov	lr, r2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5f6:	4a4a      	ldr	r2, [pc, #296]	; (720 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
  currentBitrate = baud;
     5f8:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5fc:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5fe:	6813      	ldr	r3, [r2, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     600:	4d48      	ldr	r5, [pc, #288]	; (724 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
     602:	fbb5 f0f1 	udiv	r0, r5, r1
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     606:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     60a:	fbb5 f5f0 	udiv	r5, r5, r0
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     60e:	b090      	sub	sp, #64	; 0x40
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     610:	1b4d      	subs	r5, r1, r5
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     612:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     616:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     618:	6813      	ldr	r3, [r2, #0]
     61a:	01de      	lsls	r6, r3, #7
     61c:	d5fc      	bpl.n	618 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x2c>
  while (result > 5) {
     61e:	2805      	cmp	r0, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     620:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     624:	d922      	bls.n	66c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x80>
      error = baud - (clockFreq / (result * (divisor + 1)));
     626:	4e3f      	ldr	r6, [pc, #252]	; (724 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     628:	4663      	mov	r3, ip
    divisor++;
     62a:	1c5a      	adds	r2, r3, #1
     62c:	3302      	adds	r3, #2
    result = clockFreq / baud / (divisor + 1);
     62e:	fbb0 f7f3 	udiv	r7, r0, r3
    if (result <= 25) {
     632:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     634:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     638:	d80f      	bhi.n	65a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
      error = baud - (clockFreq / (result * (divisor + 1)));
     63a:	fbb6 f3f3 	udiv	r3, r6, r3
     63e:	1acb      	subs	r3, r1, r3
     640:	2b00      	cmp	r3, #0
     642:	bfb8      	it	lt
     644:	425b      	neglt	r3, r3
      if (error < bestError) {
     646:	42ab      	cmp	r3, r5
     648:	da09      	bge.n	65e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x72>
     64a:	461d      	mov	r5, r3
        bestDivisor = divisor;
     64c:	4694      	mov	ip, r2
      if ((error == bestError) && (result > 11) && (result < 19)) {
     64e:	2f0b      	cmp	r7, #11
     650:	d906      	bls.n	660 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x74>
     652:	2f12      	cmp	r7, #18
     654:	bf9c      	itt	ls
     656:	461d      	movls	r5, r3
     658:	4694      	movls	ip, r2
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     65a:	4613      	mov	r3, r2
     65c:	e7e5      	b.n	62a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x3e>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     65e:	d0f6      	beq.n	64e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x62>
  while (result > 5) {
     660:	2f05      	cmp	r7, #5
     662:	d8fa      	bhi.n	65a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
  result = clockFreq / baud / (divisor + 1);
     664:	f10c 0301 	add.w	r3, ip, #1
     668:	fbb0 f0f3 	udiv	r0, r0, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     66c:	3805      	subs	r0, #5
     66e:	2814      	cmp	r0, #20
     670:	d848      	bhi.n	704 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
     672:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     676:	dc45      	bgt.n	704 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     678:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint8_t bitTimingTable[21][3] = {
     67c:	4f2a      	ldr	r7, [pc, #168]	; (728 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x13c>)
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     67e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 720 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     682:	f100 0340 	add.w	r3, r0, #64	; 0x40
     686:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     68a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     68c:	466e      	mov	r6, sp
     68e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     690:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     692:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     694:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     696:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     698:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     69c:	c607      	stmia	r6!, {r0, r1, r2}
     69e:	f826 3b02 	strh.w	r3, [r6], #2
     6a2:	0c1b      	lsrs	r3, r3, #16
     6a4:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6a6:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     6aa:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6ae:	f815 1c40 	ldrb.w	r1, [r5, #-64]
     6b2:	04db      	lsls	r3, r3, #19
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     6b4:	0412      	lsls	r2, r2, #16
     6b6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6ba:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     6be:	4313      	orrs	r3, r2
     6c0:	f001 0207 	and.w	r2, r1, #7
     6c4:	4313      	orrs	r3, r2
     6c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     6ca:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     6ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6d2:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     6d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
     6da:	f1be 0f02 	cmp.w	lr, #2
     6de:	bf14      	ite	ne
     6e0:	f023 0308 	bicne.w	r3, r3, #8
     6e4:	f043 0308 	orreq.w	r3, r3, #8
     6e8:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     6ec:	b93c      	cbnz	r4, 6fe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     6ee:	4a0c      	ldr	r2, [pc, #48]	; (720 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     6f0:	6813      	ldr	r3, [r2, #0]
     6f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     6f6:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     6f8:	6813      	ldr	r3, [r2, #0]
     6fa:	01db      	lsls	r3, r3, #7
     6fc:	d4fc      	bmi.n	6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x10c>
}
     6fe:	b010      	add	sp, #64	; 0x40
     700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     704:	2c00      	cmp	r4, #0
     706:	d1fa      	bne.n	6fe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     708:	4a05      	ldr	r2, [pc, #20]	; (720 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     70a:	6813      	ldr	r3, [r2, #0]
     70c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     710:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     712:	6813      	ldr	r3, [r2, #0]
     714:	01d9      	lsls	r1, r3, #7
     716:	d4fc      	bmi.n	712 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x126>
}
     718:	b010      	add	sp, #64	; 0x40
     71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     71e:	bf00      	nop
     720:	400a4000 	.word	0x400a4000
     724:	00f42400 	.word	0x00f42400
     728:	0000b658 	.word	0x0000b658

0000072c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3); /* input 3 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4); /* input 4 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4, uint32_t id5); /* input 5 ID's to be filtered */
    bool setMBFilterRange(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2); /* filter a range of ids */
    int write(const CAN_message_t &msg); /* use any available mailbox for transmitting */
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     72c:	2000      	movs	r0, #0
     72e:	4770      	bx	lr

00000730 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     730:	2000      	movs	r0, #0
     732:	4770      	bx	lr

00000734 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
#endif
    void enhanceFilter(FLEXCAN_MAILBOX mb_num);
    void distribute(bool state = 1) { distribution = state; }
    void enableDMA(bool state = 1);
    void disableDMA() { enableDMA(0); }
    uint8_t getFirstTxBoxSize(){ return 8; }
     734:	2008      	movs	r0, #8
     736:	4770      	bx	lr

00000738 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     738:	2000      	movs	r0, #0
     73a:	4770      	bx	lr

0000073c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     73c:	2000      	movs	r0, #0
     73e:	4770      	bx	lr

00000740 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
    uint8_t getFirstTxBoxSize(){ return 8; }
     740:	2008      	movs	r0, #8
     742:	4770      	bx	lr

00000744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     744:	4910      	ldr	r1, [pc, #64]	; (788 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     746:	680b      	ldr	r3, [r1, #0]
     748:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     74a:	680a      	ldr	r2, [r1, #0]
     74c:	6b49      	ldr	r1, [r1, #52]	; 0x34
     74e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     752:	f3c1 6103 	ubfx	r1, r1, #24, #4
     756:	3201      	adds	r2, #1
     758:	3104      	adds	r1, #4
     75a:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     75e:	d310      	bcc.n	782 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     764:	f3c0 6003 	ubfx	r0, r0, #24, #4
     768:	3b05      	subs	r3, #5
     76a:	3001      	adds	r0, #1
     76c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     770:	b2db      	uxtb	r3, r3
     772:	4a05      	ldr	r2, [pc, #20]	; (788 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     774:	6810      	ldr	r0, [r2, #0]
     776:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     77a:	3001      	adds	r0, #1
     77c:	1ac0      	subs	r0, r0, r3
}
     77e:	b2c0      	uxtb	r0, r0
     780:	4770      	bx	lr
     782:	2300      	movs	r3, #0
     784:	e7f5      	b.n	772 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     786:	bf00      	nop
     788:	40024000 	.word	0x40024000

0000078c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     78c:	4910      	ldr	r1, [pc, #64]	; (7d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     78e:	680b      	ldr	r3, [r1, #0]
     790:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     792:	680a      	ldr	r2, [r1, #0]
     794:	6b49      	ldr	r1, [r1, #52]	; 0x34
     796:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     79a:	f3c1 6103 	ubfx	r1, r1, #24, #4
     79e:	3201      	adds	r2, #1
     7a0:	3104      	adds	r1, #4
     7a2:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     7a6:	d310      	bcc.n	7ca <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     7ac:	f3c0 6003 	ubfx	r0, r0, #24, #4
     7b0:	3b05      	subs	r3, #5
     7b2:	3001      	adds	r0, #1
     7b4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     7b8:	b2db      	uxtb	r3, r3
     7ba:	4a05      	ldr	r2, [pc, #20]	; (7d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     7bc:	6810      	ldr	r0, [r2, #0]
     7be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     7c2:	3001      	adds	r0, #1
     7c4:	1ac0      	subs	r0, r0, r3
}
     7c6:	b2c0      	uxtb	r0, r0
     7c8:	4770      	bx	lr
     7ca:	2300      	movs	r3, #0
     7cc:	e7f5      	b.n	7ba <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     7ce:	bf00      	nop
     7d0:	400a4000 	.word	0x400a4000

000007d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7d4:	4a62      	ldr	r2, [pc, #392]	; (960 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7da:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     7dc:	6813      	ldr	r3, [r2, #0]
     7de:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7e2:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     7e6:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     7e8:	6813      	ldr	r3, [r2, #0]
     7ea:	01dd      	lsls	r5, r3, #7
     7ec:	d5fc      	bpl.n	7e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     7ee:	6811      	ldr	r1, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     7f0:	f8df c174 	ldr.w	ip, [pc, #372]	; 968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     7f4:	4f5b      	ldr	r7, [pc, #364]	; (964 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     7f6:	4e5a      	ldr	r6, [pc, #360]	; (960 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
  FLEXCANb_IMASK1(_bus) = value;
     7f8:	2300      	movs	r3, #0
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     7fa:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
     7fe:	6011      	str	r1, [r2, #0]
  FLEXCANb_IMASK1(_bus) = value;
     800:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     802:	6812      	ldr	r2, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     804:	4619      	mov	r1, r3
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     806:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     80a:	19dd      	adds	r5, r3, r7
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     80c:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     80e:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     810:	60d1      	str	r1, [r2, #12]
     812:	6091      	str	r1, [r2, #8]
     814:	6051      	str	r1, [r2, #4]
     816:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     818:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     81a:	6832      	ldr	r2, [r6, #0]
     81c:	3301      	adds	r3, #1
     81e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     822:	b2db      	uxtb	r3, r3
     824:	3201      	adds	r2, #1
     826:	4293      	cmp	r3, r2
     828:	d3ed      	bcc.n	806 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x32>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     82a:	64b1      	str	r1, [r6, #72]	; 0x48
     82c:	6131      	str	r1, [r6, #16]
  return FLEXCANb_IFLAG1(_bus);
     82e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     830:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     832:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     834:	2800      	cmp	r0, #0
     836:	d14b      	bne.n	8d0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfc>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     838:	f8df 812c 	ldr.w	r8, [pc, #300]	; 968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     83c:	4e48      	ldr	r6, [pc, #288]	; (960 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     83e:	4f49      	ldr	r7, [pc, #292]	; (964 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     840:	4605      	mov	r5, r0
     842:	e019      	b.n	878 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xa4>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     844:	6833      	ldr	r3, [r6, #0]
     846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     84a:	3301      	adds	r3, #1
     84c:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     850:	bf34      	ite	cc
     852:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     856:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     85a:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     85c:	6b73      	ldr	r3, [r6, #52]	; 0x34
     85e:	f3c3 4300 	ubfx	r3, r3, #16, #1
     862:	079b      	lsls	r3, r3, #30
     864:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     866:	6833      	ldr	r3, [r6, #0]
     868:	3501      	adds	r5, #1
     86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     86e:	b2ed      	uxtb	r5, r5
     870:	3301      	adds	r3, #1
     872:	429d      	cmp	r5, r3
     874:	4628      	mov	r0, r5
     876:	d220      	bcs.n	8ba <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     878:	6833      	ldr	r3, [r6, #0]
     87a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     87e:	3301      	adds	r3, #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     880:	19e9      	adds	r1, r5, r7
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     882:	eb05 0208 	add.w	r2, r5, r8
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     886:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     88a:	ea4f 0181 	mov.w	r1, r1, lsl #2
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     88e:	ea4f 1202 	mov.w	r2, r2, lsl #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     892:	d3d7      	bcc.n	844 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x70>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     894:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     898:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     89a:	6833      	ldr	r3, [r6, #0]
     89c:	009a      	lsls	r2, r3, #2
     89e:	d503      	bpl.n	8a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd4>
     8a0:	f7ff ff50 	bl	744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     8a4:	42a8      	cmp	r0, r5
     8a6:	d8de      	bhi.n	866 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     8a8:	2301      	movs	r3, #1
     8aa:	2d1f      	cmp	r5, #31
     8ac:	fa03 f305 	lsl.w	r3, r3, r5
     8b0:	d84c      	bhi.n	94c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x178>
     8b2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     8b4:	4313      	orrs	r3, r2
     8b6:	62b3      	str	r3, [r6, #40]	; 0x28
     8b8:	e7d5      	b.n	866 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     8ba:	b93c      	cbnz	r4, 8cc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf8>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     8bc:	4a28      	ldr	r2, [pc, #160]	; (960 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
     8be:	6813      	ldr	r3, [r2, #0]
     8c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     8c4:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     8c6:	6813      	ldr	r3, [r2, #0]
     8c8:	01db      	lsls	r3, r3, #7
     8ca:	d4fc      	bmi.n	8c6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf2>
}
     8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     8d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     8d4:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     8d6:	6835      	ldr	r5, [r6, #0]
     8d8:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     8dc:	d03e      	beq.n	95c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x188>
     8de:	f7ff ff31 	bl	744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     8e2:	6833      	ldr	r3, [r6, #0]
     8e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     8e8:	3301      	adds	r3, #1
     8ea:	4283      	cmp	r3, r0
     8ec:	4605      	mov	r5, r0
     8ee:	d9e4      	bls.n	8ba <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     8f0:	4f1d      	ldr	r7, [pc, #116]	; (968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     8f2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 960 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     8f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
     8fa:	e00d      	b.n	918 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x144>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     8fc:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     900:	4313      	orrs	r3, r2
     902:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     906:	f8d8 3000 	ldr.w	r3, [r8]
     90a:	3501      	adds	r5, #1
     90c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     910:	b2ed      	uxtb	r5, r5
     912:	3301      	adds	r3, #1
     914:	429d      	cmp	r5, r3
     916:	d2d0      	bcs.n	8ba <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     918:	19eb      	adds	r3, r5, r7
     91a:	011b      	lsls	r3, r3, #4
     91c:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     91e:	f8d8 3000 	ldr.w	r3, [r8]
     922:	0099      	lsls	r1, r3, #2
     924:	d503      	bpl.n	92e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15a>
     926:	f7ff ff0d 	bl	744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     92a:	4285      	cmp	r5, r0
     92c:	d3eb      	bcc.n	906 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     92e:	2301      	movs	r3, #1
     930:	2d1f      	cmp	r5, #31
     932:	fa03 f305 	lsl.w	r3, r3, r5
     936:	d9e1      	bls.n	8fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x128>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     938:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     93c:	2301      	movs	r3, #1
     93e:	f1a5 0120 	sub.w	r1, r5, #32
     942:	408b      	lsls	r3, r1
     944:	4313      	orrs	r3, r2
     946:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     94a:	e7dc      	b.n	906 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
     94c:	6a72      	ldr	r2, [r6, #36]	; 0x24
     94e:	f1a5 0120 	sub.w	r1, r5, #32
     952:	2301      	movs	r3, #1
     954:	408b      	lsls	r3, r1
     956:	4313      	orrs	r3, r2
     958:	6273      	str	r3, [r6, #36]	; 0x24
     95a:	e784      	b.n	866 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     95c:	6833      	ldr	r3, [r6, #0]
     95e:	e7c7      	b.n	8f0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11c>
     960:	40024000 	.word	0x40024000
     964:	10009220 	.word	0x10009220
     968:	04002408 	.word	0x04002408

0000096c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]>:
FCTP_FUNC void FCTP_OPT::setMaxMB(uint8_t last) {
     96c:	b570      	push	{r4, r5, r6, lr}
  last = constrain(last,1,64);
     96e:	b328      	cbz	r0, 9bc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x50>
     970:	2840      	cmp	r0, #64	; 0x40
     972:	bfa8      	it	ge
     974:	2040      	movge	r0, #64	; 0x40
  last--;
     976:	3801      	subs	r0, #1
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     978:	b2c5      	uxtb	r5, r0
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     97a:	4c13      	ldr	r4, [pc, #76]	; (9c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x5c>)
     97c:	6823      	ldr	r3, [r4, #0]
     97e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     982:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     984:	6823      	ldr	r3, [r4, #0]
     986:	01d9      	lsls	r1, r3, #7
     988:	d5fc      	bpl.n	984 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x18>
    void disableFIFO() { enableFIFO(0); }
     98a:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
     98c:	6826      	ldr	r6, [r4, #0]
     98e:	f7ff ff21 	bl	7d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return FLEXCANb_IFLAG1(_bus);
     992:	6b23      	ldr	r3, [r4, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     994:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
     996:	6823      	ldr	r3, [r4, #0]
     998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     99c:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     99e:	6823      	ldr	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
     9a0:	00b2      	lsls	r2, r6, #2
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     9a2:	ea43 0305 	orr.w	r3, r3, r5
     9a6:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
     9a8:	d40a      	bmi.n	9c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x54>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     9aa:	4a07      	ldr	r2, [pc, #28]	; (9c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x5c>)
     9ac:	6813      	ldr	r3, [r2, #0]
     9ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     9b2:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     9b4:	6813      	ldr	r3, [r2, #0]
     9b6:	01db      	lsls	r3, r3, #7
     9b8:	d4fc      	bmi.n	9b4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x48>
}
     9ba:	bd70      	pop	{r4, r5, r6, pc}
     9bc:	4605      	mov	r5, r0
     9be:	e7dc      	b.n	97a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0xe>
  if ( fifo_was_cleared ) enableFIFO();
     9c0:	2001      	movs	r0, #1
     9c2:	f7ff ff07 	bl	7d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
     9c6:	e7f0      	b.n	9aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x3e>
     9c8:	40024000 	.word	0x40024000

000009cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     9cc:	4a62      	ldr	r2, [pc, #392]	; (b58 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     9d2:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     9d4:	6813      	ldr	r3, [r2, #0]
     9d6:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     9da:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     9de:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     9e0:	6813      	ldr	r3, [r2, #0]
     9e2:	01dd      	lsls	r5, r3, #7
     9e4:	d5fc      	bpl.n	9e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     9e6:	6811      	ldr	r1, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9e8:	f8df c174 	ldr.w	ip, [pc, #372]	; b60 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     9ec:	4f5b      	ldr	r7, [pc, #364]	; (b5c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9ee:	4e5a      	ldr	r6, [pc, #360]	; (b58 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
  FLEXCANb_IMASK1(_bus) = value;
     9f0:	2300      	movs	r3, #0
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     9f2:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
     9f6:	6011      	str	r1, [r2, #0]
  FLEXCANb_IMASK1(_bus) = value;
     9f8:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9fa:	6812      	ldr	r2, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     9fc:	4619      	mov	r1, r3
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9fe:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     a02:	19dd      	adds	r5, r3, r7
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a04:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     a06:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     a08:	60d1      	str	r1, [r2, #12]
     a0a:	6091      	str	r1, [r2, #8]
     a0c:	6051      	str	r1, [r2, #4]
     a0e:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     a10:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     a12:	6832      	ldr	r2, [r6, #0]
     a14:	3301      	adds	r3, #1
     a16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     a1a:	b2db      	uxtb	r3, r3
     a1c:	3201      	adds	r2, #1
     a1e:	4293      	cmp	r3, r2
     a20:	d3ed      	bcc.n	9fe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x32>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     a22:	64b1      	str	r1, [r6, #72]	; 0x48
     a24:	6131      	str	r1, [r6, #16]
  return FLEXCANb_IFLAG1(_bus);
     a26:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     a28:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     a2a:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     a2c:	2800      	cmp	r0, #0
     a2e:	d14b      	bne.n	ac8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfc>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a30:	f8df 812c 	ldr.w	r8, [pc, #300]	; b60 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a34:	4e48      	ldr	r6, [pc, #288]	; (b58 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a36:	4f49      	ldr	r7, [pc, #292]	; (b5c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     a38:	4605      	mov	r5, r0
     a3a:	e019      	b.n	a70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xa4>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     a3c:	6833      	ldr	r3, [r6, #0]
     a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a42:	3301      	adds	r3, #1
     a44:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     a48:	bf34      	ite	cc
     a4a:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     a4e:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     a52:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a54:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a56:	f3c3 4300 	ubfx	r3, r3, #16, #1
     a5a:	079b      	lsls	r3, r3, #30
     a5c:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     a5e:	6833      	ldr	r3, [r6, #0]
     a60:	3501      	adds	r5, #1
     a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a66:	b2ed      	uxtb	r5, r5
     a68:	3301      	adds	r3, #1
     a6a:	429d      	cmp	r5, r3
     a6c:	4628      	mov	r0, r5
     a6e:	d220      	bcs.n	ab2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a70:	6833      	ldr	r3, [r6, #0]
     a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a76:	3301      	adds	r3, #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a78:	19e9      	adds	r1, r5, r7
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a7a:	eb05 0208 	add.w	r2, r5, r8
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a7e:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a82:	ea4f 0181 	mov.w	r1, r1, lsl #2
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a86:	ea4f 1202 	mov.w	r2, r2, lsl #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a8a:	d3d7      	bcc.n	a3c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x70>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     a90:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     a92:	6833      	ldr	r3, [r6, #0]
     a94:	009a      	lsls	r2, r3, #2
     a96:	d503      	bpl.n	aa0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd4>
     a98:	f7ff fe78 	bl	78c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     a9c:	42a8      	cmp	r0, r5
     a9e:	d8de      	bhi.n	a5e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     aa0:	2301      	movs	r3, #1
     aa2:	2d1f      	cmp	r5, #31
     aa4:	fa03 f305 	lsl.w	r3, r3, r5
     aa8:	d84c      	bhi.n	b44 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x178>
     aaa:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     aac:	4313      	orrs	r3, r2
     aae:	62b3      	str	r3, [r6, #40]	; 0x28
     ab0:	e7d5      	b.n	a5e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     ab2:	b93c      	cbnz	r4, ac4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf8>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     ab4:	4a28      	ldr	r2, [pc, #160]	; (b58 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
     ab6:	6813      	ldr	r3, [r2, #0]
     ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     abc:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     abe:	6813      	ldr	r3, [r2, #0]
     ac0:	01db      	lsls	r3, r3, #7
     ac2:	d4fc      	bmi.n	abe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf2>
}
     ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     acc:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     ace:	6835      	ldr	r5, [r6, #0]
     ad0:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     ad4:	d03e      	beq.n	b54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x188>
     ad6:	f7ff fe59 	bl	78c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     ada:	6833      	ldr	r3, [r6, #0]
     adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     ae0:	3301      	adds	r3, #1
     ae2:	4283      	cmp	r3, r0
     ae4:	4605      	mov	r5, r0
     ae6:	d9e4      	bls.n	ab2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     ae8:	4f1d      	ldr	r7, [pc, #116]	; (b60 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     aea:	f8df 806c 	ldr.w	r8, [pc, #108]	; b58 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     aee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
     af2:	e00d      	b.n	b10 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x144>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     af4:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     af8:	4313      	orrs	r3, r2
     afa:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     afe:	f8d8 3000 	ldr.w	r3, [r8]
     b02:	3501      	adds	r5, #1
     b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     b08:	b2ed      	uxtb	r5, r5
     b0a:	3301      	adds	r3, #1
     b0c:	429d      	cmp	r5, r3
     b0e:	d2d0      	bcs.n	ab2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     b10:	19eb      	adds	r3, r5, r7
     b12:	011b      	lsls	r3, r3, #4
     b14:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     b16:	f8d8 3000 	ldr.w	r3, [r8]
     b1a:	0099      	lsls	r1, r3, #2
     b1c:	d503      	bpl.n	b26 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15a>
     b1e:	f7ff fe35 	bl	78c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     b22:	4285      	cmp	r5, r0
     b24:	d3eb      	bcc.n	afe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     b26:	2301      	movs	r3, #1
     b28:	2d1f      	cmp	r5, #31
     b2a:	fa03 f305 	lsl.w	r3, r3, r5
     b2e:	d9e1      	bls.n	af4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x128>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     b30:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     b34:	2301      	movs	r3, #1
     b36:	f1a5 0120 	sub.w	r1, r5, #32
     b3a:	408b      	lsls	r3, r1
     b3c:	4313      	orrs	r3, r2
     b3e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     b42:	e7dc      	b.n	afe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
     b44:	6a72      	ldr	r2, [r6, #36]	; 0x24
     b46:	f1a5 0120 	sub.w	r1, r5, #32
     b4a:	2301      	movs	r3, #1
     b4c:	408b      	lsls	r3, r1
     b4e:	4313      	orrs	r3, r2
     b50:	6273      	str	r3, [r6, #36]	; 0x24
     b52:	e784      	b.n	a5e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     b54:	6833      	ldr	r3, [r6, #0]
     b56:	e7c7      	b.n	ae8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11c>
     b58:	400a4000 	.word	0x400a4000
     b5c:	10029220 	.word	0x10029220
     b60:	0400a408 	.word	0x0400a408

00000b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]>:
FCTP_FUNC void FCTP_OPT::setMaxMB(uint8_t last) {
     b64:	b570      	push	{r4, r5, r6, lr}
  last = constrain(last,1,64);
     b66:	b328      	cbz	r0, bb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x50>
     b68:	2840      	cmp	r0, #64	; 0x40
     b6a:	bfa8      	it	ge
     b6c:	2040      	movge	r0, #64	; 0x40
  last--;
     b6e:	3801      	subs	r0, #1
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     b70:	b2c5      	uxtb	r5, r0
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     b72:	4c13      	ldr	r4, [pc, #76]	; (bc0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x5c>)
     b74:	6823      	ldr	r3, [r4, #0]
     b76:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     b7a:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     b7c:	6823      	ldr	r3, [r4, #0]
     b7e:	01d9      	lsls	r1, r3, #7
     b80:	d5fc      	bpl.n	b7c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x18>
     b82:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
     b84:	6826      	ldr	r6, [r4, #0]
     b86:	f7ff ff21 	bl	9cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return FLEXCANb_IFLAG1(_bus);
     b8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     b8c:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
     b8e:	6823      	ldr	r3, [r4, #0]
     b90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     b94:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     b96:	6823      	ldr	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
     b98:	00b2      	lsls	r2, r6, #2
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     b9a:	ea43 0305 	orr.w	r3, r3, r5
     b9e:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
     ba0:	d40a      	bmi.n	bb8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x54>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     ba2:	4a07      	ldr	r2, [pc, #28]	; (bc0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x5c>)
     ba4:	6813      	ldr	r3, [r2, #0]
     ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     baa:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     bac:	6813      	ldr	r3, [r2, #0]
     bae:	01db      	lsls	r3, r3, #7
     bb0:	d4fc      	bmi.n	bac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x48>
}
     bb2:	bd70      	pop	{r4, r5, r6, pc}
     bb4:	4605      	mov	r5, r0
     bb6:	e7dc      	b.n	b72 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0xe>
  if ( fifo_was_cleared ) enableFIFO();
     bb8:	2001      	movs	r0, #1
     bba:	f7ff ff07 	bl	9cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
     bbe:	e7f0      	b.n	ba2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]+0x3e>
     bc0:	400a4000 	.word	0x400a4000

00000bc4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     bc4:	b538      	push	{r3, r4, r5, lr}
    nvicIrq = IRQ_CAN0_MESSAGE;
     bc6:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     bca:	2300      	movs	r3, #0
  OSC0_CR |= OSC_ERCLKEN;
     bcc:	4961      	ldr	r1, [pc, #388]	; (d54 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     bce:	6043      	str	r3, [r0, #4]
    nvicIrq = IRQ_CAN0_MESSAGE;
     bd0:	224b      	movs	r2, #75	; 0x4b
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     bd2:	6083      	str	r3, [r0, #8]
     bd4:	60c3      	str	r3, [r0, #12]
     bd6:	6103      	str	r3, [r0, #16]
    nvicIrq = IRQ_CAN0_MESSAGE;
     bd8:	f8c5 290c 	str.w	r2, [r5, #2316]	; 0x90c
    busNumber = 0;
     bdc:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
  OSC0_CR |= OSC_ERCLKEN;
     be0:	780a      	ldrb	r2, [r1, #0]
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     be2:	485d      	ldr	r0, [pc, #372]	; (d58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x194>)
  OSC0_CR |= OSC_ERCLKEN;
     be4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     be8:	700a      	strb	r2, [r1, #0]
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     bea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     bec:	f5a1 2182 	sub.w	r1, r1, #266240	; 0x41000
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     bf0:	f042 0210 	orr.w	r2, r2, #16
     bf4:	63c2      	str	r2, [r0, #60]	; 0x3c
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     bf6:	684a      	ldr	r2, [r1, #4]
    if ( init_pins ) {
     bf8:	4858      	ldr	r0, [pc, #352]	; (d5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x198>)
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
     bfe:	604a      	str	r2, [r1, #4]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can0;
     c00:	4a57      	ldr	r2, [pc, #348]	; (d60 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x19c>)
     c02:	4958      	ldr	r1, [pc, #352]	; (d64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a0>)
     c04:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
    if ( init_pins ) {
     c08:	7802      	ldrb	r2, [r0, #0]
     c0a:	2a00      	cmp	r2, #0
     c0c:	f040 8084 	bne.w	d18 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x154>
      if ( CORE_PIN29_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN29_CONFIG = 0;
     c10:	4b55      	ldr	r3, [pc, #340]	; (d68 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
     c14:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     c18:	bf04      	itt	eq
     c1a:	2200      	moveq	r2, #0
     c1c:	649a      	streq	r2, [r3, #72]	; 0x48
      CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
     c1e:	4b53      	ldr	r3, [pc, #332]	; (d6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     c20:	f44f 7200 	mov.w	r2, #512	; 0x200
     c24:	631a      	str	r2, [r3, #48]	; 0x30
    if ( init_pins ) {
     c26:	4b52      	ldr	r3, [pc, #328]	; (d70 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1ac>)
     c28:	781a      	ldrb	r2, [r3, #0]
     c2a:	2a00      	cmp	r2, #0
     c2c:	f000 8085 	beq.w	d3a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x176>
      pin = ( !CORE_PIN4_CONFIG ) ? DEF : ALT; 
     c30:	4a4e      	ldr	r2, [pc, #312]	; (d6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     c32:	6b51      	ldr	r1, [r2, #52]	; 0x34
     c34:	2900      	cmp	r1, #0
     c36:	d07f      	beq.n	d38 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x174>
      init_pins = 0;
     c38:	2100      	movs	r1, #0
     c3a:	7019      	strb	r1, [r3, #0]
      if ( CORE_PIN4_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN4_CONFIG = 0;
     c3c:	6b53      	ldr	r3, [r2, #52]	; 0x34
     c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      CORE_PIN30_CONFIG = PORT_PCR_MUX(2);
     c42:	4b49      	ldr	r3, [pc, #292]	; (d68 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
      if ( CORE_PIN4_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN4_CONFIG = 0;
     c44:	bf08      	it	eq
     c46:	6351      	streq	r1, [r2, #52]	; 0x34
      CORE_PIN30_CONFIG = PORT_PCR_MUX(2);
     c48:	f44f 7200 	mov.w	r2, #512	; 0x200
     c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     c4e:	4a49      	ldr	r2, [pc, #292]	; (d74 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
     c50:	6813      	ldr	r3, [r2, #0]
     c52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     c56:	6013      	str	r3, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     c58:	6813      	ldr	r3, [r2, #0]
     c5a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     c5e:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     c60:	6813      	ldr	r3, [r2, #0]
     c62:	01dc      	lsls	r4, r3, #7
     c64:	d5fc      	bpl.n	c60 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x9c>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     c66:	6853      	ldr	r3, [r2, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     c68:	4942      	ldr	r1, [pc, #264]	; (d74 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     c6a:	f043 0308 	orr.w	r3, r3, #8
     c6e:	6053      	str	r3, [r2, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     c70:	6813      	ldr	r3, [r2, #0]
     c72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     c76:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     c78:	680b      	ldr	r3, [r1, #0]
     c7a:	02d8      	lsls	r0, r3, #11
     c7c:	d4fc      	bmi.n	c78 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xb4>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     c7e:	680b      	ldr	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     c80:	4a3c      	ldr	r2, [pc, #240]	; (d74 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     c86:	600b      	str	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     c88:	6813      	ldr	r3, [r2, #0]
     c8a:	0199      	lsls	r1, r3, #6
     c8c:	d4fc      	bmi.n	c88 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xc4>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     c8e:	4c39      	ldr	r4, [pc, #228]	; (d74 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
     c90:	6823      	ldr	r3, [r4, #0]
     c92:	01da      	lsls	r2, r3, #7
     c94:	d5fc      	bpl.n	c90 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xcc>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     c96:	6823      	ldr	r3, [r4, #0]
     c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c9c:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     c9e:	6823      	ldr	r3, [r4, #0]
     ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     ca4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     ca6:	6823      	ldr	r3, [r4, #0]
     ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     cac:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     cae:	6823      	ldr	r3, [r4, #0]
     cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     cb4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     cb6:	6823      	ldr	r3, [r4, #0]
     cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     cbc:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     cbe:	6823      	ldr	r3, [r4, #0]
     cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     cc4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     cc6:	6823      	ldr	r3, [r4, #0]
     cc8:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     ccc:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
     cd0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     cd4:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     cd6:	6823      	ldr	r3, [r4, #0]
     cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     cdc:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     cde:	6823      	ldr	r3, [r4, #0]
     ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     ce4:	6023      	str	r3, [r4, #0]
     ce6:	2000      	movs	r0, #0
     ce8:	f7ff fd74 	bl	7d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     cec:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     cee:	4a21      	ldr	r2, [pc, #132]	; (d74 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     cf4:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     cf6:	6813      	ldr	r3, [r2, #0]
     cf8:	01db      	lsls	r3, r3, #7
     cfa:	d4fc      	bmi.n	cf6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x132>
  NVIC_ENABLE_IRQ(nvicIrq);
     cfc:	f8d5 290c 	ldr.w	r2, [r5, #2316]	; 0x90c
     d00:	0953      	lsrs	r3, r2, #5
     d02:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     d06:	3340      	adds	r3, #64	; 0x40
     d08:	2101      	movs	r1, #1
     d0a:	009b      	lsls	r3, r3, #2
     d0c:	f002 021f 	and.w	r2, r2, #31
     d10:	fa01 f202 	lsl.w	r2, r1, r2
     d14:	601a      	str	r2, [r3, #0]
}
     d16:	bd38      	pop	{r3, r4, r5, pc}
      pin = ( !CORE_PIN3_CONFIG ) ? DEF : ALT; 
     d18:	4a14      	ldr	r2, [pc, #80]	; (d6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     d1a:	6b11      	ldr	r1, [r2, #48]	; 0x30
     d1c:	b909      	cbnz	r1, d22 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x15e>
      init_pins = 0;
     d1e:	7001      	strb	r1, [r0, #0]
     d20:	e776      	b.n	c10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x4c>
      if ( CORE_PIN3_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN3_CONFIG = 0;
     d22:	6b11      	ldr	r1, [r2, #48]	; 0x30
      init_pins = 0;
     d24:	7003      	strb	r3, [r0, #0]
      if ( CORE_PIN3_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN3_CONFIG = 0;
     d26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     d2a:	bf08      	it	eq
     d2c:	6313      	streq	r3, [r2, #48]	; 0x30
      CORE_PIN29_CONFIG = PORT_PCR_MUX(2);
     d2e:	4b0e      	ldr	r3, [pc, #56]	; (d68 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     d30:	f44f 7200 	mov.w	r2, #512	; 0x200
     d34:	649a      	str	r2, [r3, #72]	; 0x48
     d36:	e776      	b.n	c26 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x62>
      init_pins = 0;
     d38:	7019      	strb	r1, [r3, #0]
      if ( CORE_PIN30_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN30_CONFIG = 0;
     d3a:	4b0b      	ldr	r3, [pc, #44]	; (d68 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     d3e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     d42:	bf04      	itt	eq
     d44:	2200      	moveq	r2, #0
     d46:	64da      	streq	r2, [r3, #76]	; 0x4c
      CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
     d4e:	635a      	str	r2, [r3, #52]	; 0x34
}
     d50:	e77d      	b.n	c4e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x8a>
     d52:	bf00      	nop
     d54:	40065000 	.word	0x40065000
     d58:	40048000 	.word	0x40048000
     d5c:	1fff0731 	.word	0x1fff0731
     d60:	1fff0200 	.word	0x1fff0200
     d64:	0000045d 	.word	0x0000045d
     d68:	4004a000 	.word	0x4004a000
     d6c:	40049000 	.word	0x40049000
     d70:	1fff0730 	.word	0x1fff0730
     d74:	40024000 	.word	0x40024000

00000d78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     d78:	b538      	push	{r3, r4, r5, lr}
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     d7a:	2300      	movs	r3, #0
    nvicIrq = IRQ_CAN1_MESSAGE;
     d7c:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     d80:	6043      	str	r3, [r0, #4]
     d82:	6083      	str	r3, [r0, #8]
     d84:	60c3      	str	r3, [r0, #12]
     d86:	6103      	str	r3, [r0, #16]
  OSC0_CR |= OSC_ERCLKEN;
     d88:	4a41      	ldr	r2, [pc, #260]	; (e90 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x118>)
    nvicIrq = IRQ_CAN1_MESSAGE;
     d8a:	215e      	movs	r1, #94	; 0x5e
    busNumber = 1;
     d8c:	2301      	movs	r3, #1
    nvicIrq = IRQ_CAN1_MESSAGE;
     d8e:	f8c5 190c 	str.w	r1, [r5, #2316]	; 0x90c
    busNumber = 1;
     d92:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
  OSC0_CR |= OSC_ERCLKEN;
     d96:	7813      	ldrb	r3, [r2, #0]
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     d98:	493e      	ldr	r1, [pc, #248]	; (e94 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x11c>)
  OSC0_CR |= OSC_ERCLKEN;
     d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     d9e:	7013      	strb	r3, [r2, #0]
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     da0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     da2:	4b3d      	ldr	r3, [pc, #244]	; (e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     da4:	f042 0210 	orr.w	r2, r2, #16
     da8:	630a      	str	r2, [r1, #48]	; 0x30
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     daa:	685a      	ldr	r2, [r3, #4]
    CORE_PIN33_CONFIG = PORT_PCR_MUX(2);
     dac:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
     db0:	f44f 7000 	mov.w	r0, #512	; 0x200
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     db4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
     db8:	605a      	str	r2, [r3, #4]
    CORE_PIN33_CONFIG = PORT_PCR_MUX(2);
     dba:	6608      	str	r0, [r1, #96]	; 0x60
    CORE_PIN34_CONFIG = PORT_PCR_MUX(2);
     dbc:	6648      	str	r0, [r1, #100]	; 0x64
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     dbe:	681a      	ldr	r2, [r3, #0]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     dc0:	4936      	ldr	r1, [pc, #216]	; (e9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x124>)
     dc2:	4837      	ldr	r0, [pc, #220]	; (ea0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x128>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     dc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
     dc8:	601a      	str	r2, [r3, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     dca:	681a      	ldr	r2, [r3, #0]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     dcc:	f8c1 01b8 	str.w	r0, [r1, #440]	; 0x1b8
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     dd0:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
     dd4:	601a      	str	r2, [r3, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     dd6:	681a      	ldr	r2, [r3, #0]
     dd8:	01d2      	lsls	r2, r2, #7
     dda:	d5fc      	bpl.n	dd6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x5e>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     ddc:	6859      	ldr	r1, [r3, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     dde:	4a2e      	ldr	r2, [pc, #184]	; (e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     de0:	f041 0108 	orr.w	r1, r1, #8
     de4:	6059      	str	r1, [r3, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     de6:	6819      	ldr	r1, [r3, #0]
     de8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
     dec:	6019      	str	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     dee:	6813      	ldr	r3, [r2, #0]
     df0:	02dc      	lsls	r4, r3, #11
     df2:	d4fc      	bmi.n	dee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x76>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     df4:	6813      	ldr	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     df6:	4928      	ldr	r1, [pc, #160]	; (e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     dfc:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     dfe:	680b      	ldr	r3, [r1, #0]
     e00:	0198      	lsls	r0, r3, #6
     e02:	d4fc      	bmi.n	dfe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x86>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     e04:	4c24      	ldr	r4, [pc, #144]	; (e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
     e06:	6823      	ldr	r3, [r4, #0]
     e08:	01da      	lsls	r2, r3, #7
     e0a:	d5fc      	bpl.n	e06 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x8e>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     e0c:	6823      	ldr	r3, [r4, #0]
     e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     e12:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     e14:	6823      	ldr	r3, [r4, #0]
     e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     e1a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     e1c:	6823      	ldr	r3, [r4, #0]
     e1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     e22:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     e24:	6823      	ldr	r3, [r4, #0]
     e26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e2a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     e2c:	6823      	ldr	r3, [r4, #0]
     e2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     e32:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     e34:	6823      	ldr	r3, [r4, #0]
     e36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     e3a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     e3c:	6823      	ldr	r3, [r4, #0]
     e3e:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     e42:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e46:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     e4a:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     e4c:	6823      	ldr	r3, [r4, #0]
     e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     e52:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     e54:	6823      	ldr	r3, [r4, #0]
     e56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     e5a:	6023      	str	r3, [r4, #0]
     e5c:	2000      	movs	r0, #0
     e5e:	f7ff fdb5 	bl	9cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     e62:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     e64:	4a0c      	ldr	r2, [pc, #48]	; (e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     e6a:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     e6c:	6813      	ldr	r3, [r2, #0]
     e6e:	01db      	lsls	r3, r3, #7
     e70:	d4fc      	bmi.n	e6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xf4>
  NVIC_ENABLE_IRQ(nvicIrq);
     e72:	f8d5 290c 	ldr.w	r2, [r5, #2316]	; 0x90c
     e76:	0953      	lsrs	r3, r2, #5
     e78:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     e7c:	3340      	adds	r3, #64	; 0x40
     e7e:	2101      	movs	r1, #1
     e80:	009b      	lsls	r3, r3, #2
     e82:	f002 021f 	and.w	r2, r2, #31
     e86:	fa01 f202 	lsl.w	r2, r1, r2
     e8a:	601a      	str	r2, [r3, #0]
}
     e8c:	bd38      	pop	{r3, r4, r5, pc}
     e8e:	bf00      	nop
     e90:	40065000 	.word	0x40065000
     e94:	40048000 	.word	0x40048000
     e98:	400a4000 	.word	0x400a4000
     e9c:	1fff0200 	.word	0x1fff0200
     ea0:	00000471 	.word	0x00000471

00000ea4 <setup>:
void setup() {
     ea4:	b538      	push	{r3, r4, r5, lr}
  pinMode(6, OUTPUT); digitalWrite(6, LOW); /* optional tranceiver enable pin */
     ea6:	2101      	movs	r1, #1
     ea8:	2006      	movs	r0, #6
     eaa:	f002 fb61 	bl	3570 <pinMode>
  pinMode(LED_BUILTIN, OUTPUT); digitalWrite(LED_BUILTIN, LED_state); 
     eae:	4c3d      	ldr	r4, [pc, #244]	; (fa4 <setup+0x100>)
  pinMode(6, OUTPUT); digitalWrite(6, LOW); /* optional tranceiver enable pin */
     eb0:	2100      	movs	r1, #0
     eb2:	2006      	movs	r0, #6
     eb4:	f002 fb24 	bl	3500 <digitalWrite>
  pinMode(LED_BUILTIN, OUTPUT); digitalWrite(LED_BUILTIN, LED_state); 
     eb8:	2101      	movs	r1, #1
     eba:	200d      	movs	r0, #13
     ebc:	f002 fb58 	bl	3570 <pinMode>
     ec0:	7821      	ldrb	r1, [r4, #0]
     ec2:	200d      	movs	r0, #13
     ec4:	f002 fb1c 	bl	3500 <digitalWrite>
  pinMode(RED, OUTPUT); digitalWrite(RED, RED_state); 
     ec8:	2101      	movs	r1, #1
     eca:	2015      	movs	r0, #21
     ecc:	f002 fb50 	bl	3570 <pinMode>
     ed0:	4b35      	ldr	r3, [pc, #212]	; (fa8 <setup+0x104>)
     ed2:	2015      	movs	r0, #21
     ed4:	7819      	ldrb	r1, [r3, #0]
     ed6:	f002 fb13 	bl	3500 <digitalWrite>
  pinMode(GREEN, OUTPUT); digitalWrite(GREEN, GREEN_state); 
     eda:	2101      	movs	r1, #1
     edc:	2014      	movs	r0, #20
     ede:	f002 fb47 	bl	3570 <pinMode>
     ee2:	4b32      	ldr	r3, [pc, #200]	; (fac <setup+0x108>)
     ee4:	2014      	movs	r0, #20
     ee6:	7819      	ldrb	r1, [r3, #0]
     ee8:	f002 fb0a 	bl	3500 <digitalWrite>
  pinMode(port_pin, INPUT_PULLUP);
     eec:	2102      	movs	r1, #2
     eee:	2006      	movs	r0, #6
     ef0:	f002 fb3e 	bl	3570 <pinMode>
  pinMode(starboard_pin, INPUT_PULLUP);
     ef4:	2102      	movs	r1, #2
     ef6:	2007      	movs	r0, #7
     ef8:	f002 fb3a 	bl	3570 <pinMode>
  pinMode(center_pin, INPUT_PULLUP);
     efc:	2102      	movs	r1, #2
     efe:	2008      	movs	r0, #8
     f00:	f002 fb36 	bl	3570 <pinMode>
  Can0.begin();
     f04:	482a      	ldr	r0, [pc, #168]	; (fb0 <setup+0x10c>)
     f06:	f7ff fe5d 	bl	bc4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can0.setBaudRate(250000);
     f0a:	2200      	movs	r2, #0
     f0c:	4929      	ldr	r1, [pc, #164]	; (fb4 <setup+0x110>)
     f0e:	4828      	ldr	r0, [pc, #160]	; (fb0 <setup+0x10c>)
     f10:	f7ff facc 	bl	4ac <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
  Can0.setMaxMB(16);
     f14:	2010      	movs	r0, #16
     f16:	f7ff fd29 	bl	96c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]>
  Can0.enableFIFO();
     f1a:	2001      	movs	r0, #1
     f1c:	f7ff fc5a 	bl	7d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
     f20:	4b25      	ldr	r3, [pc, #148]	; (fb8 <setup+0x114>)
     f22:	681a      	ldr	r2, [r3, #0]
     f24:	0095      	lsls	r5, r2, #2
     f26:	d50a      	bpl.n	f3e <setup+0x9a>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
     f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f2a:	0690      	lsls	r0, r2, #26
     f2c:	d407      	bmi.n	f3e <setup+0x9a>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
     f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f30:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
     f34:	629a      	str	r2, [r3, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
     f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f38:	f042 0220 	orr.w	r2, r2, #32
     f3c:	629a      	str	r2, [r3, #40]	; 0x28
  _mainHandler = handler;
     f3e:	4b1f      	ldr	r3, [pc, #124]	; (fbc <setup+0x118>)
  Can1.begin();
     f40:	481f      	ldr	r0, [pc, #124]	; (fc0 <setup+0x11c>)
     f42:	4d20      	ldr	r5, [pc, #128]	; (fc4 <setup+0x120>)
     f44:	f8c3 5804 	str.w	r5, [r3, #2052]	; 0x804
     f48:	f7ff ff16 	bl	d78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can1.setBaudRate(250000);
     f4c:	4919      	ldr	r1, [pc, #100]	; (fb4 <setup+0x110>)
     f4e:	481c      	ldr	r0, [pc, #112]	; (fc0 <setup+0x11c>)
     f50:	2200      	movs	r2, #0
     f52:	f7ff fb4b 	bl	5ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
  Can1.setMaxMB(16);
     f56:	2010      	movs	r0, #16
     f58:	f7ff fe04 	bl	b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]>
  Can1.enableFIFO();
     f5c:	2001      	movs	r0, #1
     f5e:	f7ff fd35 	bl	9cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
     f62:	4b19      	ldr	r3, [pc, #100]	; (fc8 <setup+0x124>)
     f64:	681a      	ldr	r2, [r3, #0]
     f66:	0091      	lsls	r1, r2, #2
     f68:	d50a      	bpl.n	f80 <setup+0xdc>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
     f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f6c:	0692      	lsls	r2, r2, #26
     f6e:	d407      	bmi.n	f80 <setup+0xdc>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
     f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
     f76:	629a      	str	r2, [r3, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
     f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f7a:	f042 0220 	orr.w	r2, r2, #32
     f7e:	629a      	str	r2, [r3, #40]	; 0x28
  msg.id = CAN_ID;
     f80:	4b12      	ldr	r3, [pc, #72]	; (fcc <setup+0x128>)
  _mainHandler = handler;
     f82:	4a13      	ldr	r2, [pc, #76]	; (fd0 <setup+0x12c>)
     f84:	4813      	ldr	r0, [pc, #76]	; (fd4 <setup+0x130>)
     f86:	6018      	str	r0, [r3, #0]
     f88:	f8c2 5804 	str.w	r5, [r2, #2052]	; 0x804
  msg.len = 8;
     f8c:	2108      	movs	r1, #8
  msg.flags.extended = true;
     f8e:	2201      	movs	r2, #1
  delay(1000);
     f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  msg.len = 8;
     f94:	72d9      	strb	r1, [r3, #11]
  msg.flags.extended = true;
     f96:	71da      	strb	r2, [r3, #7]
  delay(1000);
     f98:	f002 fb26 	bl	35e8 <delay>
  LED_state = LOW;
     f9c:	2300      	movs	r3, #0
     f9e:	7023      	strb	r3, [r4, #0]
}
     fa0:	bd38      	pop	{r3, r4, r5, pc}
     fa2:	bf00      	nop
     fa4:	1fff0733 	.word	0x1fff0733
     fa8:	1fff0734 	.word	0x1fff0734
     fac:	1fff0732 	.word	0x1fff0732
     fb0:	1fff0ee8 	.word	0x1fff0ee8
     fb4:	0003d090 	.word	0x0003d090
     fb8:	40024000 	.word	0x40024000
     fbc:	1fff2ee8 	.word	0x1fff2ee8
     fc0:	1fff3800 	.word	0x1fff3800
     fc4:	00000485 	.word	0x00000485
     fc8:	400a4000 	.word	0x400a4000
     fcc:	1fff0738 	.word	0x1fff0738
     fd0:	1fff5800 	.word	0x1fff5800
     fd4:	19f21139 	.word	0x19f21139

00000fd8 <checkAndRestartCAN() [clone .part.0]>:
void checkAndRestartCAN() {
     fd8:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     fda:	212d      	movs	r1, #45	; 0x2d
     fdc:	b082      	sub	sp, #8
     fde:	4827      	ldr	r0, [pc, #156]	; (107c <checkAndRestartCAN() [clone .part.0]+0xa4>)
     fe0:	f003 f8e6 	bl	41b0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     fe4:	4826      	ldr	r0, [pc, #152]	; (1080 <checkAndRestartCAN() [clone .part.0]+0xa8>)
     fe6:	f002 f84b 	bl	3080 <Print::println()>
    Can1.begin();
     fea:	4826      	ldr	r0, [pc, #152]	; (1084 <checkAndRestartCAN() [clone .part.0]+0xac>)
     fec:	f7ff fec4 	bl	d78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
    Can1.setBaudRate(250000);
     ff0:	2200      	movs	r2, #0
     ff2:	4925      	ldr	r1, [pc, #148]	; (1088 <checkAndRestartCAN() [clone .part.0]+0xb0>)
     ff4:	4823      	ldr	r0, [pc, #140]	; (1084 <checkAndRestartCAN() [clone .part.0]+0xac>)
     ff6:	f7ff faf9 	bl	5ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    Can1.setMaxMB(16);
     ffa:	2010      	movs	r0, #16
     ffc:	f7ff fdb2 	bl	b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]>
    Can1.enableFIFO();
    1000:	2001      	movs	r0, #1
    1002:	f7ff fce3 	bl	9cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
    1006:	4b21      	ldr	r3, [pc, #132]	; (108c <checkAndRestartCAN() [clone .part.0]+0xb4>)
    1008:	681a      	ldr	r2, [r3, #0]
    100a:	0094      	lsls	r4, r2, #2
    100c:	d50a      	bpl.n	1024 <checkAndRestartCAN() [clone .part.0]+0x4c>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
    100e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1010:	0690      	lsls	r0, r2, #26
    1012:	d407      	bmi.n	1024 <checkAndRestartCAN() [clone .part.0]+0x4c>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
    1014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    101a:	629a      	str	r2, [r3, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
    101c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    101e:	f042 0220 	orr.w	r2, r2, #32
    1022:	629a      	str	r2, [r3, #40]	; 0x28
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1024:	4b1a      	ldr	r3, [pc, #104]	; (1090 <checkAndRestartCAN() [clone .part.0]+0xb8>)
  _mainHandler = handler;
    1026:	491b      	ldr	r1, [pc, #108]	; (1094 <checkAndRestartCAN() [clone .part.0]+0xbc>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	9301      	str	r3, [sp, #4]
    102c:	4b1a      	ldr	r3, [pc, #104]	; (1098 <checkAndRestartCAN() [clone .part.0]+0xc0>)
	return ret;
    102e:	9a01      	ldr	r2, [sp, #4]
    Can0.begin();
    1030:	481a      	ldr	r0, [pc, #104]	; (109c <checkAndRestartCAN() [clone .part.0]+0xc4>)
    1032:	4c1b      	ldr	r4, [pc, #108]	; (10a0 <checkAndRestartCAN() [clone .part.0]+0xc8>)
    1034:	601a      	str	r2, [r3, #0]
    1036:	f8c1 4804 	str.w	r4, [r1, #2052]	; 0x804
    103a:	f7ff fdc3 	bl	bc4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
    Can0.setBaudRate(250000);
    103e:	4912      	ldr	r1, [pc, #72]	; (1088 <checkAndRestartCAN() [clone .part.0]+0xb0>)
    1040:	4816      	ldr	r0, [pc, #88]	; (109c <checkAndRestartCAN() [clone .part.0]+0xc4>)
    1042:	2200      	movs	r2, #0
    1044:	f7ff fa32 	bl	4ac <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    Can0.setMaxMB(16);
    1048:	2010      	movs	r0, #16
    104a:	f7ff fc8f 	bl	96c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setMaxMB(unsigned char) [clone .isra.0]>
    Can0.enableFIFO();
    104e:	2001      	movs	r0, #1
    1050:	f7ff fbc0 	bl	7d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
    1054:	4b13      	ldr	r3, [pc, #76]	; (10a4 <checkAndRestartCAN() [clone .part.0]+0xcc>)
    1056:	681a      	ldr	r2, [r3, #0]
    1058:	0091      	lsls	r1, r2, #2
    105a:	d50a      	bpl.n	1072 <checkAndRestartCAN() [clone .part.0]+0x9a>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
    105c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    105e:	0692      	lsls	r2, r2, #26
    1060:	d407      	bmi.n	1072 <checkAndRestartCAN() [clone .part.0]+0x9a>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
    1062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1064:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1068:	629a      	str	r2, [r3, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
    106a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    106c:	f042 0220 	orr.w	r2, r2, #32
    1070:	629a      	str	r2, [r3, #40]	; 0x28
  _mainHandler = handler;
    1072:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <checkAndRestartCAN() [clone .part.0]+0xd0>)
    1074:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
}
    1078:	b002      	add	sp, #8
    107a:	bd10      	pop	{r4, pc}
    107c:	0000b5a0 	.word	0x0000b5a0
    1080:	1fff0758 	.word	0x1fff0758
    1084:	1fff3800 	.word	0x1fff3800
    1088:	0003d090 	.word	0x0003d090
    108c:	400a4000 	.word	0x400a4000
    1090:	1fff612c 	.word	0x1fff612c
    1094:	1fff5800 	.word	0x1fff5800
    1098:	1fff6120 	.word	0x1fff6120
    109c:	1fff0ee8 	.word	0x1fff0ee8
    10a0:	00000485 	.word	0x00000485
    10a4:	40024000 	.word	0x40024000
    10a8:	1fff2ee8 	.word	0x1fff2ee8

000010ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
#endif


FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    10ac:	b510      	push	{r4, lr}
  if ( mb_num == FIFO ) {
    10ae:	780b      	ldrb	r3, [r1, #0]
    10b0:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    10b2:	4604      	mov	r4, r0
    10b4:	b082      	sub	sp, #8
    10b6:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    10b8:	d013      	beq.n	10e2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    if ( _mainHandler ) _mainHandler(msg);
    return;
  }
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    10ba:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
    10be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    10c2:	685b      	ldr	r3, [r3, #4]
    10c4:	b113      	cbz	r3, 10cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    10c6:	9201      	str	r2, [sp, #4]
    10c8:	4798      	blx	r3
    10ca:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    10cc:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    10d0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
    10d4:	b11b      	cbz	r3, 10de <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    10d6:	b002      	add	sp, #8
    10d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    10dc:	4718      	bx	r3
}
    10de:	b002      	add	sp, #8
    10e0:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    10e2:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    10e6:	f8d4 3704 	ldr.w	r3, [r4, #1796]	; 0x704
    10ea:	2b00      	cmp	r3, #0
    10ec:	d0f0      	beq.n	10d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    10ee:	9201      	str	r2, [sp, #4]
    10f0:	4798      	blx	r3
    10f2:	9801      	ldr	r0, [sp, #4]
    10f4:	e7ec      	b.n	10d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    10f6:	bf00      	nop

000010f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    10f8:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    10fa:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    10fc:	481b      	ldr	r0, [pc, #108]	; (116c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
    10fe:	d823      	bhi.n	1148 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    1100:	6b04      	ldr	r4, [r0, #48]	; 0x30
    1102:	2301      	movs	r3, #1
    1104:	408b      	lsls	r3, r1
    1106:	4323      	orrs	r3, r4
    1108:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    110a:	4b19      	ldr	r3, [pc, #100]	; (1170 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    110c:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    110e:	440b      	add	r3, r1
    1110:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1112:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1116:	6019      	str	r1, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1118:	b1f8      	cbz	r0, 115a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
    111a:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    111c:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    111e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    1122:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1124:	6058      	str	r0, [r3, #4]
  if ( msg.flags.extended ) code |= (3UL << 21);
    1126:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    112a:	68d0      	ldr	r0, [r2, #12]
}
    112c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1130:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1132:	6098      	str	r0, [r3, #8]
    1134:	6910      	ldr	r0, [r2, #16]
    1136:	ba00      	rev	r0, r0
    1138:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    113a:	7ad2      	ldrb	r2, [r2, #11]
    113c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    1140:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    1144:	601a      	str	r2, [r3, #0]
}
    1146:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    1148:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    114a:	f1a1 0c20 	sub.w	ip, r1, #32
    114e:	2301      	movs	r3, #1
    1150:	fa03 f30c 	lsl.w	r3, r3, ip
    1154:	4323      	orrs	r3, r4
    1156:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    1158:	e7d7      	b.n	110a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    115a:	6814      	ldr	r4, [r2, #0]
    115c:	4805      	ldr	r0, [pc, #20]	; (1174 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    115e:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1160:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    1164:	6058      	str	r0, [r3, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1166:	0509      	lsls	r1, r1, #20
    1168:	e7df      	b.n	112a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    116a:	bf00      	nop
    116c:	400a4000 	.word	0x400a4000
    1170:	0400a408 	.word	0x0400a408
    1174:	1ffc0000 	.word	0x1ffc0000

00001178 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    117c:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1180:	b08f      	sub	sp, #60	; 0x3c
  if ( !isEventsUsed ) isEventsUsed = 1;
    1182:	f897 3700 	ldrb.w	r3, [r7, #1792]	; 0x700
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1186:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    1188:	b913      	cbnz	r3, 1190 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    118a:	2301      	movs	r3, #1
    118c:	f887 3700 	strb.w	r3, [r7, #1792]	; 0x700
        T readBytes(T *buffer, uint16_t length);
        void flush() { clear(); }
        void clear() { head = tail = _available = 0; }
        void print(const char *p);
        void println(const char *p);
        uint16_t size() { return _available; }
    1190:	8b23      	ldrh	r3, [r4, #24]
    1192:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    1194:	2b00      	cmp	r3, #0
    1196:	d14f      	bne.n	1238 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xc0>
  NVIC_DISABLE_IRQ(nvicIrq);
    1198:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    119c:	0953      	lsrs	r3, r2, #5
    119e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    11a2:	3360      	adds	r3, #96	; 0x60
    11a4:	009b      	lsls	r3, r3, #2
    11a6:	f002 021f 	and.w	r2, r2, #31
    11aa:	2101      	movs	r1, #1
    11ac:	fa01 f202 	lsl.w	r2, r1, r2
    11b0:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    11b4:	601a      	str	r2, [r3, #0]
    11b6:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    11ba:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    11bc:	b323      	cbz	r3, 1208 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>


template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::peek_front(T *buffer, uint16_t length, uint32_t entry) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    11be:	f8b6 1b1a 	ldrh.w	r1, [r6, #2842]	; 0xb1a
    11c2:	231a      	movs	r3, #26
    11c4:	f001 010f 	and.w	r1, r1, #15
    11c8:	fb03 4101 	mla	r1, r3, r1, r4
    11cc:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    11d0:	3112      	adds	r1, #18
    11d2:	2218      	movs	r2, #24
    11d4:	a808      	add	r0, sp, #32
    memmove(&frame, buf, sizeof(frame));
    11d6:	ad08      	add	r5, sp, #32
    11d8:	f001 ff80 	bl	30dc <memcpy>
    11dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    11de:	f10d 0c08 	add.w	ip, sp, #8
    11e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    11e6:	e895 0003 	ldmia.w	r5, {r0, r1}
    11ea:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    11ee:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    11f2:	1c4b      	adds	r3, r1, #1
    11f4:	d04a      	beq.n	128c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x114>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    11f6:	4b53      	ldr	r3, [pc, #332]	; (1344 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>)
    11f8:	440b      	add	r3, r1
    11fa:	011b      	lsls	r3, r3, #4
    11fc:	681b      	ldr	r3, [r3, #0]
    11fe:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1202:	2b08      	cmp	r3, #8
    1204:	f000 8081 	beq.w	130a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x192>
  NVIC_ENABLE_IRQ(nvicIrq);
    1208:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    120c:	0953      	lsrs	r3, r2, #5
    120e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    1212:	3340      	adds	r3, #64	; 0x40
    1214:	009b      	lsls	r3, r3, #2
    1216:	2101      	movs	r1, #1
    1218:	f002 021f 	and.w	r2, r2, #31
    121c:	fa01 f202 	lsl.w	r2, r1, r2
    1220:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    1222:	8b23      	ldrh	r3, [r4, #24]
    1224:	f8b6 0b1e 	ldrh.w	r0, [r6, #2846]	; 0xb1e
    1228:	b29b      	uxth	r3, r3
    122a:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    122c:	2100      	movs	r1, #0
    122e:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    1232:	b00f      	add	sp, #60	; 0x3c
    1234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1238:	8aa1      	ldrh	r1, [r4, #20]
    123a:	231a      	movs	r3, #26
    123c:	b2c9      	uxtb	r1, r1
    123e:	fb03 4101 	mla	r1, r3, r1, r4
    1242:	2218      	movs	r2, #24
    1244:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    1248:	a808      	add	r0, sp, #32
    124a:	f001 ff47 	bl	30dc <memcpy>
    head = ((head + 1)&(2*_size-1));
    124e:	8aa3      	ldrh	r3, [r4, #20]
    1250:	3301      	adds	r3, #1
    1252:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1256:	82a3      	strh	r3, [r4, #20]
    if ( _available ) _available--;
    1258:	8b23      	ldrh	r3, [r4, #24]
    125a:	b29b      	uxth	r3, r3
    125c:	b11b      	cbz	r3, 1266 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xee>
    125e:	8b23      	ldrh	r3, [r4, #24]
    1260:	3b01      	subs	r3, #1
    1262:	b29b      	uxth	r3, r3
    1264:	8323      	strh	r3, [r4, #24]
    memmove(&frame, buf, sizeof(frame));
    1266:	ad08      	add	r5, sp, #32
    1268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    126a:	ae02      	add	r6, sp, #8
    126c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    126e:	e895 0003 	ldmia.w	r5, {r0, r1}
    1272:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    1276:	aa02      	add	r2, sp, #8
    1278:	f89d 301c 	ldrb.w	r3, [sp, #28]
    127c:	f88d 3007 	strb.w	r3, [sp, #7]
    1280:	f10d 0107 	add.w	r1, sp, #7
    1284:	4620      	mov	r0, r4
    1286:	f7ff ff11 	bl	10ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    128a:	e785      	b.n	1198 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    128c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1348 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    1290:	f8d8 5000 	ldr.w	r5, [r8]
    1294:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    1298:	d050      	beq.n	133c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1c4>
    129a:	f7ff fa77 	bl	78c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    129e:	f8d8 3000 	ldr.w	r3, [r8]
    12a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    12a6:	3301      	adds	r3, #1
    12a8:	4283      	cmp	r3, r0
    12aa:	4605      	mov	r5, r0
    12ac:	d9ac      	bls.n	1208 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    12ae:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1344 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    12b2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1348 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    12b6:	e008      	b.n	12ca <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x152>
    12b8:	f8d8 3000 	ldr.w	r3, [r8]
    12bc:	3501      	adds	r5, #1
    12be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    12c2:	b2ed      	uxtb	r5, r5
    12c4:	3301      	adds	r3, #1
    12c6:	429d      	cmp	r5, r3
    12c8:	d29e      	bcs.n	1208 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    12ca:	eb05 0309 	add.w	r3, r5, r9
    12ce:	011b      	lsls	r3, r3, #4
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	f3c3 6303 	ubfx	r3, r3, #24, #4
    12d6:	2b08      	cmp	r3, #8
    12d8:	d1ee      	bne.n	12b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
          writeTxMailbox(i, frame);
    12da:	aa02      	add	r2, sp, #8
    12dc:	4629      	mov	r1, r5
    12de:	4620      	mov	r0, r4
    12e0:	f7ff ff0a 	bl	10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    12e4:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    12e8:	3301      	adds	r3, #1
    12ea:	f003 031f 	and.w	r3, r3, #31
    12ee:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    12f2:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    12f6:	b29b      	uxth	r3, r3
    12f8:	2b00      	cmp	r3, #0
    12fa:	d0dd      	beq.n	12b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
    12fc:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1300:	3b01      	subs	r3, #1
    1302:	b29b      	uxth	r3, r3
    1304:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    1308:	e7d6      	b.n	12b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
      writeTxMailbox(frame.mb, frame);
    130a:	aa02      	add	r2, sp, #8
    130c:	b2c9      	uxtb	r1, r1
    130e:	4620      	mov	r0, r4
    1310:	f7ff fef2 	bl	10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    1314:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    1318:	3301      	adds	r3, #1
    131a:	f003 031f 	and.w	r3, r3, #31
    131e:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    1322:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1326:	b29b      	uxth	r3, r3
    1328:	2b00      	cmp	r3, #0
    132a:	f43f af6d 	beq.w	1208 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    132e:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1332:	3b01      	subs	r3, #1
    1334:	b29b      	uxth	r3, r3
    1336:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    133a:	e765      	b.n	1208 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    133c:	f8d8 3000 	ldr.w	r3, [r8]
    1340:	e7b5      	b.n	12ae <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x136>
    1342:	bf00      	nop
    1344:	0400a408 	.word	0x0400a408
    1348:	400a4000 	.word	0x400a4000

0000134c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    134c:	b510      	push	{r4, lr}
  if ( mb_num == FIFO ) {
    134e:	780b      	ldrb	r3, [r1, #0]
    1350:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    1352:	4604      	mov	r4, r0
    1354:	b082      	sub	sp, #8
    1356:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    1358:	d013      	beq.n	1382 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    135a:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
    135e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1362:	685b      	ldr	r3, [r3, #4]
    1364:	b113      	cbz	r3, 136c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    1366:	9201      	str	r2, [sp, #4]
    1368:	4798      	blx	r3
    136a:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    136c:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1370:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
    1374:	b11b      	cbz	r3, 137e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    1376:	b002      	add	sp, #8
    1378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    137c:	4718      	bx	r3
}
    137e:	b002      	add	sp, #8
    1380:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    1382:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1386:	f8d4 3704 	ldr.w	r3, [r4, #1796]	; 0x704
    138a:	2b00      	cmp	r3, #0
    138c:	d0f0      	beq.n	1370 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    138e:	9201      	str	r2, [sp, #4]
    1390:	4798      	blx	r3
    1392:	9801      	ldr	r0, [sp, #4]
    1394:	e7ec      	b.n	1370 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1396:	bf00      	nop

00001398 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1398:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    139a:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    139c:	481b      	ldr	r0, [pc, #108]	; (140c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
    139e:	d823      	bhi.n	13e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    13a0:	6b04      	ldr	r4, [r0, #48]	; 0x30
    13a2:	2301      	movs	r3, #1
    13a4:	408b      	lsls	r3, r1
    13a6:	4323      	orrs	r3, r4
    13a8:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    13aa:	4b19      	ldr	r3, [pc, #100]	; (1410 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    13ac:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    13ae:	440b      	add	r3, r1
    13b0:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    13b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    13b6:	6019      	str	r1, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    13b8:	b1f8      	cbz	r0, 13fa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
    13ba:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    13bc:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    13be:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    13c2:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    13c4:	6058      	str	r0, [r3, #4]
  if ( msg.flags.extended ) code |= (3UL << 21);
    13c6:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    13ca:	68d0      	ldr	r0, [r2, #12]
}
    13cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    13d0:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    13d2:	6098      	str	r0, [r3, #8]
    13d4:	6910      	ldr	r0, [r2, #16]
    13d6:	ba00      	rev	r0, r0
    13d8:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    13da:	7ad2      	ldrb	r2, [r2, #11]
    13dc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    13e0:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    13e4:	601a      	str	r2, [r3, #0]
}
    13e6:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    13e8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    13ea:	f1a1 0c20 	sub.w	ip, r1, #32
    13ee:	2301      	movs	r3, #1
    13f0:	fa03 f30c 	lsl.w	r3, r3, ip
    13f4:	4323      	orrs	r3, r4
    13f6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    13f8:	e7d7      	b.n	13aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    13fa:	6814      	ldr	r4, [r2, #0]
    13fc:	4805      	ldr	r0, [pc, #20]	; (1414 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    13fe:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1400:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    1404:	6058      	str	r0, [r3, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1406:	0509      	lsls	r1, r1, #20
    1408:	e7df      	b.n	13ca <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    140a:	bf00      	nop
    140c:	40024000 	.word	0x40024000
    1410:	04002408 	.word	0x04002408
    1414:	1ffc0000 	.word	0x1ffc0000

00001418 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    141c:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1420:	b08f      	sub	sp, #60	; 0x3c
  if ( !isEventsUsed ) isEventsUsed = 1;
    1422:	f897 3700 	ldrb.w	r3, [r7, #1792]	; 0x700
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1426:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    1428:	b913      	cbnz	r3, 1430 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    142a:	2301      	movs	r3, #1
    142c:	f887 3700 	strb.w	r3, [r7, #1792]	; 0x700
        uint16_t size() { return _available; }
    1430:	8b23      	ldrh	r3, [r4, #24]
    1432:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    1434:	2b00      	cmp	r3, #0
    1436:	d14f      	bne.n	14d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xc0>
  NVIC_DISABLE_IRQ(nvicIrq);
    1438:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    143c:	0953      	lsrs	r3, r2, #5
    143e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    1442:	3360      	adds	r3, #96	; 0x60
    1444:	009b      	lsls	r3, r3, #2
    1446:	f002 021f 	and.w	r2, r2, #31
    144a:	2101      	movs	r1, #1
    144c:	fa01 f202 	lsl.w	r2, r1, r2
    1450:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    1454:	601a      	str	r2, [r3, #0]
    1456:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    145a:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    145c:	b323      	cbz	r3, 14a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    145e:	f8b6 1b1a 	ldrh.w	r1, [r6, #2842]	; 0xb1a
    1462:	231a      	movs	r3, #26
    1464:	f001 010f 	and.w	r1, r1, #15
    1468:	fb03 4101 	mla	r1, r3, r1, r4
    146c:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    1470:	3112      	adds	r1, #18
    1472:	2218      	movs	r2, #24
    1474:	a808      	add	r0, sp, #32
    memmove(&frame, buf, sizeof(frame));
    1476:	ad08      	add	r5, sp, #32
    1478:	f001 fe30 	bl	30dc <memcpy>
    147c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    147e:	f10d 0c08 	add.w	ip, sp, #8
    1482:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1486:	e895 0003 	ldmia.w	r5, {r0, r1}
    148a:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    148e:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    1492:	1c4b      	adds	r3, r1, #1
    1494:	d04a      	beq.n	152c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x114>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1496:	4b53      	ldr	r3, [pc, #332]	; (15e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>)
    1498:	440b      	add	r3, r1
    149a:	011b      	lsls	r3, r3, #4
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    14a2:	2b08      	cmp	r3, #8
    14a4:	f000 8081 	beq.w	15aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x192>
  NVIC_ENABLE_IRQ(nvicIrq);
    14a8:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    14ac:	0953      	lsrs	r3, r2, #5
    14ae:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    14b2:	3340      	adds	r3, #64	; 0x40
    14b4:	009b      	lsls	r3, r3, #2
    14b6:	2101      	movs	r1, #1
    14b8:	f002 021f 	and.w	r2, r2, #31
    14bc:	fa01 f202 	lsl.w	r2, r1, r2
    14c0:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    14c2:	8b23      	ldrh	r3, [r4, #24]
    14c4:	f8b6 0b1e 	ldrh.w	r0, [r6, #2846]	; 0xb1e
    14c8:	b29b      	uxth	r3, r3
    14ca:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    14cc:	2100      	movs	r1, #0
    14ce:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    14d2:	b00f      	add	sp, #60	; 0x3c
    14d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    14d8:	8aa1      	ldrh	r1, [r4, #20]
    14da:	231a      	movs	r3, #26
    14dc:	b2c9      	uxtb	r1, r1
    14de:	fb03 4101 	mla	r1, r3, r1, r4
    14e2:	2218      	movs	r2, #24
    14e4:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    14e8:	a808      	add	r0, sp, #32
    14ea:	f001 fdf7 	bl	30dc <memcpy>
    head = ((head + 1)&(2*_size-1));
    14ee:	8aa3      	ldrh	r3, [r4, #20]
    14f0:	3301      	adds	r3, #1
    14f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    14f6:	82a3      	strh	r3, [r4, #20]
    if ( _available ) _available--;
    14f8:	8b23      	ldrh	r3, [r4, #24]
    14fa:	b29b      	uxth	r3, r3
    14fc:	b11b      	cbz	r3, 1506 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xee>
    14fe:	8b23      	ldrh	r3, [r4, #24]
    1500:	3b01      	subs	r3, #1
    1502:	b29b      	uxth	r3, r3
    1504:	8323      	strh	r3, [r4, #24]
    memmove(&frame, buf, sizeof(frame));
    1506:	ad08      	add	r5, sp, #32
    1508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    150a:	ae02      	add	r6, sp, #8
    150c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    150e:	e895 0003 	ldmia.w	r5, {r0, r1}
    1512:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    1516:	aa02      	add	r2, sp, #8
    1518:	f89d 301c 	ldrb.w	r3, [sp, #28]
    151c:	f88d 3007 	strb.w	r3, [sp, #7]
    1520:	f10d 0107 	add.w	r1, sp, #7
    1524:	4620      	mov	r0, r4
    1526:	f7ff ff11 	bl	134c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    152a:	e785      	b.n	1438 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    152c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 15e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    1530:	f8d8 5000 	ldr.w	r5, [r8]
    1534:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    1538:	d050      	beq.n	15dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1c4>
    153a:	f7ff f903 	bl	744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    153e:	f8d8 3000 	ldr.w	r3, [r8]
    1542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1546:	3301      	adds	r3, #1
    1548:	4283      	cmp	r3, r0
    154a:	4605      	mov	r5, r0
    154c:	d9ac      	bls.n	14a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    154e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 15e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1552:	f8df 8094 	ldr.w	r8, [pc, #148]	; 15e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    1556:	e008      	b.n	156a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x152>
    1558:	f8d8 3000 	ldr.w	r3, [r8]
    155c:	3501      	adds	r5, #1
    155e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1562:	b2ed      	uxtb	r5, r5
    1564:	3301      	adds	r3, #1
    1566:	429d      	cmp	r5, r3
    1568:	d29e      	bcs.n	14a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    156a:	eb05 0309 	add.w	r3, r5, r9
    156e:	011b      	lsls	r3, r3, #4
    1570:	681b      	ldr	r3, [r3, #0]
    1572:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1576:	2b08      	cmp	r3, #8
    1578:	d1ee      	bne.n	1558 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
          writeTxMailbox(i, frame);
    157a:	aa02      	add	r2, sp, #8
    157c:	4629      	mov	r1, r5
    157e:	4620      	mov	r0, r4
    1580:	f7ff ff0a 	bl	1398 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    1584:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    1588:	3301      	adds	r3, #1
    158a:	f003 031f 	and.w	r3, r3, #31
    158e:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    1592:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1596:	b29b      	uxth	r3, r3
    1598:	2b00      	cmp	r3, #0
    159a:	d0dd      	beq.n	1558 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
    159c:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    15a0:	3b01      	subs	r3, #1
    15a2:	b29b      	uxth	r3, r3
    15a4:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    15a8:	e7d6      	b.n	1558 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
      writeTxMailbox(frame.mb, frame);
    15aa:	aa02      	add	r2, sp, #8
    15ac:	b2c9      	uxtb	r1, r1
    15ae:	4620      	mov	r0, r4
    15b0:	f7ff fef2 	bl	1398 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    15b4:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    15b8:	3301      	adds	r3, #1
    15ba:	f003 031f 	and.w	r3, r3, #31
    15be:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    15c2:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    15c6:	b29b      	uxth	r3, r3
    15c8:	2b00      	cmp	r3, #0
    15ca:	f43f af6d 	beq.w	14a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    15ce:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    15d2:	3b01      	subs	r3, #1
    15d4:	b29b      	uxth	r3, r3
    15d6:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    15da:	e765      	b.n	14a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    15dc:	f8d8 3000 	ldr.w	r3, [r8]
    15e0:	e7b5      	b.n	154e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x136>
    15e2:	bf00      	nop
    15e4:	04002408 	.word	0x04002408
    15e8:	40024000 	.word	0x40024000

000015ec <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    15ec:	8843      	ldrh	r3, [r0, #2]
    15ee:	f04f 0c1a 	mov.w	ip, #26
    15f2:	f003 030f 	and.w	r3, r3, #15
    15f6:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    15fa:	b510      	push	{r4, lr}
    15fc:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    15fe:	2000      	movs	r0, #0
    1600:	7598      	strb	r0, [r3, #22]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    1602:	8863      	ldrh	r3, [r4, #2]
    1604:	f003 030f 	and.w	r3, r3, #15
    1608:	fb0c 4303 	mla	r3, ip, r3, r4
    160c:	75da      	strb	r2, [r3, #23]
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    160e:	8860      	ldrh	r0, [r4, #2]
    1610:	f000 000f 	and.w	r0, r0, #15
    1614:	fb0c 4000 	mla	r0, ip, r0, r4
    1618:	3018      	adds	r0, #24
    161a:	f004 f8a9 	bl	5770 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    161e:	8862      	ldrh	r2, [r4, #2]
    1620:	8823      	ldrh	r3, [r4, #0]
    1622:	b29b      	uxth	r3, r3
    1624:	b292      	uxth	r2, r2
    1626:	f083 0310 	eor.w	r3, r3, #16
    162a:	429a      	cmp	r2, r3
    162c:	d104      	bne.n	1638 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    162e:	8823      	ldrh	r3, [r4, #0]
    1630:	3301      	adds	r3, #1
    1632:	f003 031f 	and.w	r3, r3, #31
    1636:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    1638:	8863      	ldrh	r3, [r4, #2]
    163a:	3301      	adds	r3, #1
    163c:	f003 031f 	and.w	r3, r3, #31
    1640:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    1642:	88a3      	ldrh	r3, [r4, #4]
    1644:	b29b      	uxth	r3, r3
    1646:	2b0f      	cmp	r3, #15
    1648:	d803      	bhi.n	1652 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    164a:	88a3      	ldrh	r3, [r4, #4]
    164c:	3301      	adds	r3, #1
    164e:	b29b      	uxth	r3, r3
    1650:	80a3      	strh	r3, [r4, #4]
}
    1652:	bd10      	pop	{r4, pc}

00001654 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    1654:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( msg.seq ) {
    1656:	7d8b      	ldrb	r3, [r1, #22]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1658:	4e4d      	ldr	r6, [pc, #308]	; (1790 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    165a:	b08d      	sub	sp, #52	; 0x34
    165c:	460d      	mov	r5, r1
    165e:	4604      	mov	r4, r0
  if ( msg.seq ) {
    1660:	2b00      	cmp	r3, #0
    1662:	d14b      	bne.n	16fc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1664:	6833      	ldr	r3, [r6, #0]
    1666:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    166a:	d025      	beq.n	16b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    166c:	f7ff f88e 	bl	78c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1670:	6833      	ldr	r3, [r6, #0]
    1672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1676:	3301      	adds	r3, #1
    1678:	4298      	cmp	r0, r3
    167a:	4684      	mov	ip, r0
    167c:	d21e      	bcs.n	16bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    167e:	4945      	ldr	r1, [pc, #276]	; (1794 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1680:	4843      	ldr	r0, [pc, #268]	; (1790 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    1682:	e007      	b.n	1694 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    1684:	6803      	ldr	r3, [r0, #0]
    1686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    168a:	fa5f fc82 	uxtb.w	ip, r2
    168e:	3301      	adds	r3, #1
    1690:	459c      	cmp	ip, r3
    1692:	d213      	bcs.n	16bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1694:	eb0c 0301 	add.w	r3, ip, r1
    1698:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    169a:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	f3c3 6303 	ubfx	r3, r3, #24, #4
    16a4:	2b08      	cmp	r3, #8
    16a6:	d1ed      	bne.n	1684 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    16a8:	4620      	mov	r0, r4
    16aa:	462a      	mov	r2, r5
    16ac:	4661      	mov	r1, ip
    16ae:	f7ff fd23 	bl	10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    16b2:	2001      	movs	r0, #1
}
    16b4:	b00d      	add	sp, #52	; 0x34
    16b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    16b8:	6833      	ldr	r3, [r6, #0]
    16ba:	e7e0      	b.n	167e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    16bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    16be:	46ec      	mov	ip, sp
    16c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    16c4:	e895 0003 	ldmia.w	r5, {r0, r1}
    16c8:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    16cc:	f04f 0eff 	mov.w	lr, #255	; 0xff
    16d0:	f88d e014 	strb.w	lr, [sp, #20]
    16d4:	466f      	mov	r7, sp
    16d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    16d8:	ae06      	add	r6, sp, #24
    16da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    16dc:	e89c 0003 	ldmia.w	ip, {r0, r1}
    16e0:	e886 0003 	stmia.w	r6, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    16e4:	2218      	movs	r2, #24
    16e6:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
    16ea:	eb0d 0102 	add.w	r1, sp, r2
    16ee:	301a      	adds	r0, #26
    16f0:	f7ff ff7c 	bl	15ec <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    16f4:	f04f 30ff 	mov.w	r0, #4294967295
}
    16f8:	b00d      	add	sp, #52	; 0x34
    16fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    16fc:	6830      	ldr	r0, [r6, #0]
    16fe:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    1702:	d042      	beq.n	178a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x136>
    1704:	f7ff f842 	bl	78c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1708:	6833      	ldr	r3, [r6, #0]
    170a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    170e:	3301      	adds	r3, #1
    1710:	4283      	cmp	r3, r0
    1712:	d929      	bls.n	1768 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    1714:	4e1f      	ldr	r6, [pc, #124]	; (1794 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1716:	4f1e      	ldr	r7, [pc, #120]	; (1790 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    1718:	e005      	b.n	1726 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd2>
    171a:	683b      	ldr	r3, [r7, #0]
    171c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1720:	3301      	adds	r3, #1
    1722:	4298      	cmp	r0, r3
    1724:	d220      	bcs.n	1768 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    1726:	1983      	adds	r3, r0, r6
    1728:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    172a:	1c41      	adds	r1, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    172c:	681a      	ldr	r2, [r3, #0]
    172e:	0112      	lsls	r2, r2, #4
    1730:	4684      	mov	ip, r0
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1732:	b2c8      	uxtb	r0, r1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    1734:	d5f1      	bpl.n	171a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc6>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1736:	681b      	ldr	r3, [r3, #0]
    1738:	f3c3 6303 	ubfx	r3, r3, #24, #4
    173c:	2b08      	cmp	r3, #8
    173e:	d01b      	beq.n	1778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x124>
      CAN_message_t msg_copy = msg;
    1740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1742:	466e      	mov	r6, sp
    1744:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1746:	e895 0003 	ldmia.w	r5, {r0, r1}
    174a:	e886 0003 	stmia.w	r6, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    174e:	46ee      	mov	lr, sp
      msg_copy.mb = first_tx_mb;
    1750:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    1754:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1758:	af06      	add	r7, sp, #24
    175a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    175c:	e896 0003 	ldmia.w	r6, {r0, r1}
    1760:	2218      	movs	r2, #24
    1762:	e887 0003 	stmia.w	r7, {r0, r1}
    1766:	e7be      	b.n	16e6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x92>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1768:	4b0b      	ldr	r3, [pc, #44]	; (1798 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x144>)
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    176a:	681b      	ldr	r3, [r3, #0]
    176c:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1770:	2b08      	cmp	r3, #8
  return -1;
    1772:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1776:	d1e3      	bne.n	1740 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xec>
      writeTxMailbox(first_tx_mb, msg);
    1778:	4620      	mov	r0, r4
    177a:	462a      	mov	r2, r5
    177c:	fa5f f18c 	uxtb.w	r1, ip
    1780:	f7ff fcba 	bl	10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    1784:	2001      	movs	r0, #1
}
    1786:	b00d      	add	sp, #52	; 0x34
    1788:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    178a:	6833      	ldr	r3, [r6, #0]
    178c:	e7c2      	b.n	1714 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc0>
    178e:	bf00      	nop
    1790:	400a4000 	.word	0x400a4000
    1794:	0400a408 	.word	0x0400a408
    1798:	400a4070 	.word	0x400a4070

0000179c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    179c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( msg.seq ) {
    179e:	7d8b      	ldrb	r3, [r1, #22]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    17a0:	4e4d      	ldr	r6, [pc, #308]	; (18d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    17a2:	b08d      	sub	sp, #52	; 0x34
    17a4:	460d      	mov	r5, r1
    17a6:	4604      	mov	r4, r0
  if ( msg.seq ) {
    17a8:	2b00      	cmp	r3, #0
    17aa:	d14b      	bne.n	1844 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    17ac:	6833      	ldr	r3, [r6, #0]
    17ae:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    17b2:	d025      	beq.n	1800 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    17b4:	f7fe ffc6 	bl	744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    17b8:	6833      	ldr	r3, [r6, #0]
    17ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    17be:	3301      	adds	r3, #1
    17c0:	4298      	cmp	r0, r3
    17c2:	4684      	mov	ip, r0
    17c4:	d21e      	bcs.n	1804 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    17c6:	4945      	ldr	r1, [pc, #276]	; (18dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    17c8:	4843      	ldr	r0, [pc, #268]	; (18d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    17ca:	e007      	b.n	17dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    17cc:	6803      	ldr	r3, [r0, #0]
    17ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    17d2:	fa5f fc82 	uxtb.w	ip, r2
    17d6:	3301      	adds	r3, #1
    17d8:	459c      	cmp	ip, r3
    17da:	d213      	bcs.n	1804 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    17dc:	eb0c 0301 	add.w	r3, ip, r1
    17e0:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    17e2:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    17e6:	681b      	ldr	r3, [r3, #0]
    17e8:	f3c3 6303 	ubfx	r3, r3, #24, #4
    17ec:	2b08      	cmp	r3, #8
    17ee:	d1ed      	bne.n	17cc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    17f0:	4620      	mov	r0, r4
    17f2:	462a      	mov	r2, r5
    17f4:	4661      	mov	r1, ip
    17f6:	f7ff fdcf 	bl	1398 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    17fa:	2001      	movs	r0, #1
}
    17fc:	b00d      	add	sp, #52	; 0x34
    17fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1800:	6833      	ldr	r3, [r6, #0]
    1802:	e7e0      	b.n	17c6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    1804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1806:	46ec      	mov	ip, sp
    1808:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    180c:	e895 0003 	ldmia.w	r5, {r0, r1}
    1810:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    1814:	f04f 0eff 	mov.w	lr, #255	; 0xff
    1818:	f88d e014 	strb.w	lr, [sp, #20]
    181c:	466f      	mov	r7, sp
    181e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1820:	ae06      	add	r6, sp, #24
    1822:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1824:	e89c 0003 	ldmia.w	ip, {r0, r1}
    1828:	e886 0003 	stmia.w	r6, {r0, r1}
    182c:	2218      	movs	r2, #24
    182e:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
    1832:	eb0d 0102 	add.w	r1, sp, r2
    1836:	301a      	adds	r0, #26
    1838:	f7ff fed8 	bl	15ec <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    183c:	f04f 30ff 	mov.w	r0, #4294967295
}
    1840:	b00d      	add	sp, #52	; 0x34
    1842:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1844:	6830      	ldr	r0, [r6, #0]
    1846:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    184a:	d042      	beq.n	18d2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x136>
    184c:	f7fe ff7a 	bl	744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1850:	6833      	ldr	r3, [r6, #0]
    1852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1856:	3301      	adds	r3, #1
    1858:	4283      	cmp	r3, r0
    185a:	d929      	bls.n	18b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    185c:	4e1f      	ldr	r6, [pc, #124]	; (18dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    185e:	4f1e      	ldr	r7, [pc, #120]	; (18d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    1860:	e005      	b.n	186e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd2>
    1862:	683b      	ldr	r3, [r7, #0]
    1864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1868:	3301      	adds	r3, #1
    186a:	4298      	cmp	r0, r3
    186c:	d220      	bcs.n	18b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    186e:	1983      	adds	r3, r0, r6
    1870:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1872:	1c41      	adds	r1, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    1874:	681a      	ldr	r2, [r3, #0]
    1876:	0112      	lsls	r2, r2, #4
    1878:	4684      	mov	ip, r0
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    187a:	b2c8      	uxtb	r0, r1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    187c:	d5f1      	bpl.n	1862 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc6>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    187e:	681b      	ldr	r3, [r3, #0]
    1880:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1884:	2b08      	cmp	r3, #8
    1886:	d01b      	beq.n	18c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x124>
      CAN_message_t msg_copy = msg;
    1888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    188a:	466e      	mov	r6, sp
    188c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    188e:	e895 0003 	ldmia.w	r5, {r0, r1}
    1892:	e886 0003 	stmia.w	r6, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    1896:	46ee      	mov	lr, sp
      msg_copy.mb = first_tx_mb;
    1898:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    189c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    18a0:	af06      	add	r7, sp, #24
    18a2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    18a4:	e896 0003 	ldmia.w	r6, {r0, r1}
    18a8:	2218      	movs	r2, #24
    18aa:	e887 0003 	stmia.w	r7, {r0, r1}
    18ae:	e7be      	b.n	182e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x92>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    18b0:	4b0b      	ldr	r3, [pc, #44]	; (18e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x144>)
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    18b2:	681b      	ldr	r3, [r3, #0]
    18b4:	f3c3 6303 	ubfx	r3, r3, #24, #4
    18b8:	2b08      	cmp	r3, #8
  return -1;
    18ba:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    18be:	d1e3      	bne.n	1888 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xec>
      writeTxMailbox(first_tx_mb, msg);
    18c0:	4620      	mov	r0, r4
    18c2:	462a      	mov	r2, r5
    18c4:	fa5f f18c 	uxtb.w	r1, ip
    18c8:	f7ff fd66 	bl	1398 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    18cc:	2001      	movs	r0, #1
}
    18ce:	b00d      	add	sp, #52	; 0x34
    18d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    18d2:	6833      	ldr	r3, [r6, #0]
    18d4:	e7c2      	b.n	185c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc0>
    18d6:	bf00      	nop
    18d8:	40024000 	.word	0x40024000
    18dc:	04002408 	.word	0x04002408
    18e0:	40024070 	.word	0x40024070

000018e4 <loop>:
void loop() {
    18e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  center_value = digitalRead(center_pin); //0 = Open, 1 = Closed
    18e8:	2008      	movs	r0, #8
void loop() {
    18ea:	b088      	sub	sp, #32
  center_value = digitalRead(center_pin); //0 = Open, 1 = Closed
    18ec:	f001 fe32 	bl	3554 <digitalRead>
    18f0:	4f44      	ldr	r7, [pc, #272]	; (1a04 <loop+0x120>)
  port_value = digitalRead(port_pin); 
    18f2:	4c45      	ldr	r4, [pc, #276]	; (1a08 <loop+0x124>)
  starboard_value = digitalRead(starboard_pin);
    18f4:	4d45      	ldr	r5, [pc, #276]	; (1a0c <loop+0x128>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18f6:	4e46      	ldr	r6, [pc, #280]	; (1a10 <loop+0x12c>)
  center_value = digitalRead(center_pin); //0 = Open, 1 = Closed
    18f8:	1e03      	subs	r3, r0, #0
    18fa:	bf18      	it	ne
    18fc:	2301      	movne	r3, #1
  port_value = digitalRead(port_pin); 
    18fe:	2006      	movs	r0, #6
  center_value = digitalRead(center_pin); //0 = Open, 1 = Closed
    1900:	703b      	strb	r3, [r7, #0]
  port_value = digitalRead(port_pin); 
    1902:	f001 fe27 	bl	3554 <digitalRead>
    1906:	1e03      	subs	r3, r0, #0
    1908:	bf18      	it	ne
    190a:	2301      	movne	r3, #1
  starboard_value = digitalRead(starboard_pin);
    190c:	2007      	movs	r0, #7
  port_value = digitalRead(port_pin); 
    190e:	7023      	strb	r3, [r4, #0]
  starboard_value = digitalRead(starboard_pin);
    1910:	f001 fe20 	bl	3554 <digitalRead>
    1914:	3800      	subs	r0, #0
    1916:	bf18      	it	ne
    1918:	2001      	movne	r0, #1
  digitalWrite(RED, port_value); 
    191a:	7821      	ldrb	r1, [r4, #0]
  starboard_value = digitalRead(starboard_pin);
    191c:	7028      	strb	r0, [r5, #0]
  digitalWrite(RED, port_value); 
    191e:	2015      	movs	r0, #21
    1920:	f001 fdee 	bl	3500 <digitalWrite>
  digitalWrite(GREEN, starboard_value); 
    1924:	7829      	ldrb	r1, [r5, #0]
    1926:	2014      	movs	r0, #20
    1928:	f001 fdea 	bl	3500 <digitalWrite>
  digitalWrite(LED_BUILTIN, LED_state);
    192c:	4b39      	ldr	r3, [pc, #228]	; (1a14 <loop+0x130>)
    192e:	200d      	movs	r0, #13
    1930:	7819      	ldrb	r1, [r3, #0]
    1932:	f001 fde5 	bl	3500 <digitalWrite>
  Can1.events();
    1936:	4838      	ldr	r0, [pc, #224]	; (1a18 <loop+0x134>)
    1938:	f7ff fc1e 	bl	1178 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
  Can0.events();
    193c:	4837      	ldr	r0, [pc, #220]	; (1a1c <loop+0x138>)
    193e:	f7ff fd6b 	bl	1418 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
    1942:	6833      	ldr	r3, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    1944:	4936      	ldr	r1, [pc, #216]	; (1a20 <loop+0x13c>)
    1946:	9303      	str	r3, [sp, #12]
	return ret;
    1948:	9b03      	ldr	r3, [sp, #12]
    194a:	680a      	ldr	r2, [r1, #0]
    194c:	1a9b      	subs	r3, r3, r2
  if ( output_timer >= output_period  ) {
    194e:	2b63      	cmp	r3, #99	; 0x63
    1950:	d80b      	bhi.n	196a <loop+0x86>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1952:	6833      	ldr	r3, [r6, #0]
    1954:	4a33      	ldr	r2, [pc, #204]	; (1a24 <loop+0x140>)
    1956:	9305      	str	r3, [sp, #20]
	return ret;
    1958:	9b05      	ldr	r3, [sp, #20]
    195a:	6811      	ldr	r1, [r2, #0]
    195c:	1a5b      	subs	r3, r3, r1
  if (can_check_timer >= can_check_period) {
    195e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    1962:	d23c      	bcs.n	19de <loop+0xfa>
}
    1964:	b008      	add	sp, #32
    1966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    196a:	6833      	ldr	r3, [r6, #0]
    196c:	9304      	str	r3, [sp, #16]
	return ret;
    196e:	9b04      	ldr	r3, [sp, #16]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    1970:	600b      	str	r3, [r1, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1972:	6833      	ldr	r3, [r6, #0]
    msg.buf[0] = center_value;
    1974:	f897 8000 	ldrb.w	r8, [r7]
    1978:	9302      	str	r3, [sp, #8]
    msg.buf[1] = port_value;
    197a:	7827      	ldrb	r7, [r4, #0]
    msg.buf[0] = center_value;
    197c:	4c2a      	ldr	r4, [pc, #168]	; (1a28 <loop+0x144>)
	return ret;
    197e:	9b02      	ldr	r3, [sp, #8]
    msg.buf[2] = starboard_value;
    1980:	782d      	ldrb	r5, [r5, #0]
    memcpy(&msg.buf[4], &count, 4); // little endian, 2's Compliment
    1982:	6123      	str	r3, [r4, #16]
    msg.buf[3] = 0xFF;
    1984:	23ff      	movs	r3, #255	; 0xff
    1986:	73e3      	strb	r3, [r4, #15]
    Can0.write(msg);
    1988:	4621      	mov	r1, r4
    198a:	4824      	ldr	r0, [pc, #144]	; (1a1c <loop+0x138>)
    msg.buf[0] = center_value;
    198c:	f884 800c 	strb.w	r8, [r4, #12]
    msg.buf[1] = port_value;
    1990:	7367      	strb	r7, [r4, #13]
    msg.buf[2] = starboard_value;
    1992:	73a5      	strb	r5, [r4, #14]
    Can0.write(msg);
    1994:	f7ff ff02 	bl	179c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>
    Can1.write(msg);
    1998:	4621      	mov	r1, r4
    199a:	481f      	ldr	r0, [pc, #124]	; (1a18 <loop+0x134>)
    199c:	f7ff fe5a 	bl	1654 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>
    Serial.printf("Port:  %d, Center: %d, Starboard: %d  - CAN1:  %08X ", port_value, center_value, starboard_value, msg.id);
    19a0:	9500      	str	r5, [sp, #0]
    19a2:	6820      	ldr	r0, [r4, #0]
    19a4:	9001      	str	r0, [sp, #4]
    19a6:	4643      	mov	r3, r8
    19a8:	4920      	ldr	r1, [pc, #128]	; (1a2c <loop+0x148>)
    19aa:	4821      	ldr	r0, [pc, #132]	; (1a30 <loop+0x14c>)
    19ac:	463a      	mov	r2, r7
    19ae:	f001 fb7f 	bl	30b0 <Print::printf(char const*, ...)>
    for ( uint8_t i = 0; i < msg.len; i++ ) {
    19b2:	7ae3      	ldrb	r3, [r4, #11]
    19b4:	b17b      	cbz	r3, 19d6 <loop+0xf2>
    19b6:	2500      	movs	r5, #0
      Serial.printf("%02X ", msg.buf[i]);
    19b8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1a38 <loop+0x154>
    19bc:	4f1c      	ldr	r7, [pc, #112]	; (1a30 <loop+0x14c>)
    19be:	462b      	mov	r3, r5
    19c0:	4423      	add	r3, r4
    19c2:	4641      	mov	r1, r8
    19c4:	7b1a      	ldrb	r2, [r3, #12]
    19c6:	4638      	mov	r0, r7
    19c8:	f001 fb72 	bl	30b0 <Print::printf(char const*, ...)>
    for ( uint8_t i = 0; i < msg.len; i++ ) {
    19cc:	3501      	adds	r5, #1
    19ce:	7ae2      	ldrb	r2, [r4, #11]
    19d0:	b2eb      	uxtb	r3, r5
    19d2:	429a      	cmp	r2, r3
    19d4:	d8f4      	bhi.n	19c0 <loop+0xdc>
    Serial.println();
    19d6:	4816      	ldr	r0, [pc, #88]	; (1a30 <loop+0x14c>)
    19d8:	f001 fb52 	bl	3080 <Print::println()>
    19dc:	e7b9      	b.n	1952 <loop+0x6e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19de:	6833      	ldr	r3, [r6, #0]
    19e0:	9306      	str	r3, [sp, #24]
	return ret;
    19e2:	9806      	ldr	r0, [sp, #24]
	operator unsigned long () const { return millis() - ms; }
    19e4:	4913      	ldr	r1, [pc, #76]	; (1a34 <loop+0x150>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19e6:	6833      	ldr	r3, [r6, #0]
    19e8:	9307      	str	r3, [sp, #28]
    19ea:	680c      	ldr	r4, [r1, #0]
	return ret;
    19ec:	9b07      	ldr	r3, [sp, #28]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    19ee:	6010      	str	r0, [r2, #0]
  if (can1_last_msg_time >= can_timeout) {
    19f0:	f241 3187 	movw	r1, #4999	; 0x1387
	operator unsigned long () const { return millis() - ms; }
    19f4:	1b1b      	subs	r3, r3, r4
    19f6:	428b      	cmp	r3, r1
    19f8:	d9b4      	bls.n	1964 <loop+0x80>
}
    19fa:	b008      	add	sp, #32
    19fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1a00:	f7ff baea 	b.w	fd8 <checkAndRestartCAN() [clone .part.0]>
    1a04:	1fff0735 	.word	0x1fff0735
    1a08:	1fff0750 	.word	0x1fff0750
    1a0c:	1fff0751 	.word	0x1fff0751
    1a10:	1fff612c 	.word	0x1fff612c
    1a14:	1fff0733 	.word	0x1fff0733
    1a18:	1fff3800 	.word	0x1fff3800
    1a1c:	1fff0ee8 	.word	0x1fff0ee8
    1a20:	1fff6128 	.word	0x1fff6128
    1a24:	1fff6124 	.word	0x1fff6124
    1a28:	1fff0738 	.word	0x1fff0738
    1a2c:	0000b5d0 	.word	0x0000b5d0
    1a30:	1fff0758 	.word	0x1fff0758
    1a34:	1fff6120 	.word	0x1fff6120
    1a38:	0000b608 	.word	0x0000b608

00001a3c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( mb_num == FIFO ) fifo_filter_table[0][0] |= (1UL << 28); /* enable fifo enhancement */
  else mb_filter_table[mb_num][0] |= (1UL << 28); /* enable mb enhancement */
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1a3c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    1a40:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    1a44:	00db      	lsls	r3, r3, #3
    1a46:	d56b      	bpl.n	1b20 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1a48:	4b38      	ldr	r3, [pc, #224]	; (1b2c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xf0>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    1a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1a4e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    1a50:	f3c7 6703 	ubfx	r7, r7, #24, #4
    1a54:	00ff      	lsls	r7, r7, #3
    1a56:	2200      	movs	r2, #0
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    }
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1a58:	f641 6b14 	movw	fp, #7700	; 0x1e14
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1a5c:	3708      	adds	r7, #8
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    1a5e:	f641 6904 	movw	r9, #7684	; 0x1e04
    1a62:	f641 6a08 	movw	sl, #7688	; 0x1e08
    1a66:	e007      	b.n	1a78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x3c>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    1a68:	681d      	ldr	r5, [r3, #0]
    1a6a:	0f6d      	lsrs	r5, r5, #29
    1a6c:	2d05      	cmp	r5, #5
    1a6e:	d034      	beq.n	1ada <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x9e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    1a70:	3201      	adds	r2, #1
    1a72:	b2d3      	uxtb	r3, r2
    1a74:	429f      	cmp	r7, r3
    1a76:	d955      	bls.n	1b24 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe8>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    1a78:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    1a7c:	eb00 04ce 	add.w	r4, r0, lr, lsl #3
    1a80:	f504 53f0 	add.w	r3, r4, #7680	; 0x1e00
    1a84:	681d      	ldr	r5, [r3, #0]
    1a86:	0f6d      	lsrs	r5, r5, #29
    1a88:	2d01      	cmp	r5, #1
    1a8a:	d00e      	beq.n	1aaa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    1a8c:	681d      	ldr	r5, [r3, #0]
    1a8e:	0f6d      	lsrs	r5, r5, #29
    1a90:	2d02      	cmp	r5, #2
    1a92:	d1e9      	bne.n	1a68 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2c>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    1a94:	f854 3009 	ldr.w	r3, [r4, r9]
    1a98:	428b      	cmp	r3, r1
    1a9a:	d8e9      	bhi.n	1a70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1a9c:	f854 300a 	ldr.w	r3, [r4, sl]
    1aa0:	428b      	cmp	r3, r1
    1aa2:	d3e5      	bcc.n	1a70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1aa4:	2001      	movs	r0, #1
      }
    }
  }
  return 0;
}
    1aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    1aaa:	681c      	ldr	r4, [r3, #0]
    1aac:	f414 7f60 	tst.w	r4, #896	; 0x380
    1ab0:	d0de      	beq.n	1a70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1ab2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    1ab6:	2400      	movs	r4, #0
    1ab8:	e004      	b.n	1ac4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x88>
    1aba:	681d      	ldr	r5, [r3, #0]
    1abc:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    1ac0:	42ac      	cmp	r4, r5
    1ac2:	d2d5      	bcs.n	1a70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1ac4:	3401      	adds	r4, #1
    1ac6:	eb0e 0504 	add.w	r5, lr, r4
    1aca:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    1ace:	b2e4      	uxtb	r4, r4
    1ad0:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    1ad4:	428d      	cmp	r5, r1
    1ad6:	d1f0      	bne.n	1aba <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x7e>
    1ad8:	e7e4      	b.n	1aa4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1ada:	681d      	ldr	r5, [r3, #0]
    1adc:	f415 7f60 	tst.w	r5, #896	; 0x380
    1ae0:	d0c6      	beq.n	1a70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1ae2:	445c      	add	r4, fp
    1ae4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1ae8:	f04f 0c01 	mov.w	ip, #1
    1aec:	e005      	b.n	1afa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbe>
    1aee:	681d      	ldr	r5, [r3, #0]
    1af0:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    1af4:	3501      	adds	r5, #1
    1af6:	45ac      	cmp	ip, r5
    1af8:	d2ba      	bcs.n	1a70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1afa:	eb0e 050c 	add.w	r5, lr, ip
    1afe:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    1b02:	6826      	ldr	r6, [r4, #0]
    1b04:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    1b08:	f8d4 8000 	ldr.w	r8, [r4]
    1b0c:	400e      	ands	r6, r1
    1b0e:	ea05 0508 	and.w	r5, r5, r8
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1b12:	f10c 0c01 	add.w	ip, ip, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1b16:	42ae      	cmp	r6, r5
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1b18:	fa5f fc8c 	uxtb.w	ip, ip
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1b1c:	d1e7      	bne.n	1aee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb2>
    1b1e:	e7c1      	b.n	1aa4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1b20:	2001      	movs	r0, #1
}
    1b22:	4770      	bx	lr
  return 0;
    1b24:	2000      	movs	r0, #0
}
    1b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b2a:	bf00      	nop
    1b2c:	400a4000 	.word	0x400a4000

00001b30 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:

FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1b30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    1b34:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1b36:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    1b3a:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    1b3e:	f8de 3000 	ldr.w	r3, [lr]
    1b42:	00db      	lsls	r3, r3, #3
    1b44:	d528      	bpl.n	1b98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    1b46:	f8de 3000 	ldr.w	r3, [lr]
    1b4a:	0f5b      	lsrs	r3, r3, #29
    1b4c:	2b01      	cmp	r3, #1
    1b4e:	d00b      	beq.n	1b68 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    1b50:	f8de 3000 	ldr.w	r3, [lr]
    1b54:	0f5b      	lsrs	r3, r3, #29
    1b56:	2b02      	cmp	r3, #2
    1b58:	d042      	beq.n	1be0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    1b5a:	f8de 3000 	ldr.w	r3, [lr]
    1b5e:	0f5b      	lsrs	r3, r3, #29
    1b60:	2b05      	cmp	r3, #5
    1b62:	d01b      	beq.n	1b9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    }
  }
  return 0;
    1b64:	2000      	movs	r0, #0
}
    1b66:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    1b68:	f8de 4000 	ldr.w	r4, [lr]
    1b6c:	f414 7f60 	tst.w	r4, #896	; 0x380
    1b70:	d0f8      	beq.n	1b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1b72:	2300      	movs	r3, #0
    1b74:	004d      	lsls	r5, r1, #1
    1b76:	e005      	b.n	1b84 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    1b78:	f8de 1000 	ldr.w	r1, [lr]
    1b7c:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    1b80:	4563      	cmp	r3, ip
    1b82:	d2ef      	bcs.n	1b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1b84:	3301      	adds	r3, #1
    1b86:	eb05 0c03 	add.w	ip, r5, r3
    1b8a:	f50c 6c04 	add.w	ip, ip, #2112	; 0x840
    1b8e:	b2db      	uxtb	r3, r3
    1b90:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    1b94:	4294      	cmp	r4, r2
    1b96:	d1ef      	bne.n	1b78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1b98:	2001      	movs	r0, #1
}
    1b9a:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1b9c:	f8de 4000 	ldr.w	r4, [lr]
    1ba0:	f414 7f60 	tst.w	r4, #896	; 0x380
    1ba4:	d0de      	beq.n	1b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1ba6:	f505 5504 	add.w	r5, r5, #8448	; 0x2100
    1baa:	3514      	adds	r5, #20
    1bac:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1bae:	2301      	movs	r3, #1
    1bb0:	e007      	b.n	1bc2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    1bb2:	f8de 4000 	ldr.w	r4, [lr]
    1bb6:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    1bba:	f10c 0c01 	add.w	ip, ip, #1
    1bbe:	4563      	cmp	r3, ip
    1bc0:	d2d0      	bcs.n	1b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1bc2:	682c      	ldr	r4, [r5, #0]
    1bc4:	ea04 0c02 	and.w	ip, r4, r2
    1bc8:	18cc      	adds	r4, r1, r3
    1bca:	f504 6404 	add.w	r4, r4, #2112	; 0x840
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1bce:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1bd0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    1bd4:	682e      	ldr	r6, [r5, #0]
    1bd6:	4034      	ands	r4, r6
    1bd8:	45a4      	cmp	ip, r4
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1bda:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1bdc:	d1e9      	bne.n	1bb2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    1bde:	e7db      	b.n	1b98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    1be0:	f242 1304 	movw	r3, #8452	; 0x2104
    1be4:	58eb      	ldr	r3, [r5, r3]
    1be6:	4293      	cmp	r3, r2
    1be8:	d8bc      	bhi.n	1b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1bea:	f242 1308 	movw	r3, #8456	; 0x2108
    1bee:	58e8      	ldr	r0, [r5, r3]
    1bf0:	4290      	cmp	r0, r2
    1bf2:	bf34      	ite	cc
    1bf4:	2000      	movcc	r0, #0
    1bf6:	2001      	movcs	r0, #1
}
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
    1bfa:	bf00      	nop

00001bfc <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>:
  if ( _available < _size ) _available++;
    1bfc:	8883      	ldrh	r3, [r0, #4]
    1bfe:	b29b      	uxth	r3, r3
    1c00:	2b0f      	cmp	r3, #15
    1c02:	d803      	bhi.n	1c0c <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)+0x10>
    1c04:	8883      	ldrh	r3, [r0, #4]
    1c06:	3301      	adds	r3, #1
    1c08:	b29b      	uxth	r3, r3
    1c0a:	8083      	strh	r3, [r0, #4]
  _cbuf[((tail)&(_size-1))] = value;
    1c0c:	8842      	ldrh	r2, [r0, #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1c0e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    1c12:	8803      	ldrh	r3, [r0, #0]
  _cbuf[((tail)&(_size-1))] = value;
    1c14:	f002 020f 	and.w	r2, r2, #15
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1c18:	b29b      	uxth	r3, r3
  _cbuf[((tail)&(_size-1))] = value;
    1c1a:	3202      	adds	r2, #2
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1c1c:	fa1f fc8c 	uxth.w	ip, ip
    1c20:	f083 0310 	eor.w	r3, r3, #16
    1c24:	459c      	cmp	ip, r3
  _cbuf[((tail)&(_size-1))] = value;
    1c26:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1c2a:	d104      	bne.n	1c36 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)+0x3a>
    1c2c:	8803      	ldrh	r3, [r0, #0]
    1c2e:	3301      	adds	r3, #1
    1c30:	f003 031f 	and.w	r3, r3, #31
    1c34:	8003      	strh	r3, [r0, #0]
  tail = ((tail + 1)&(2*_size-1));
    1c36:	8843      	ldrh	r3, [r0, #2]
    1c38:	3301      	adds	r3, #1
    1c3a:	f003 031f 	and.w	r3, r3, #31
    1c3e:	8043      	strh	r3, [r0, #2]
}
    1c40:	4770      	bx	lr
    1c42:	bf00      	nop

00001c44 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>:
  if ( _available < _size ) _available++;
    1c44:	8883      	ldrh	r3, [r0, #4]
    1c46:	b29b      	uxth	r3, r3
    1c48:	2b0f      	cmp	r3, #15
    1c4a:	d803      	bhi.n	1c54 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)+0x10>
    1c4c:	8883      	ldrh	r3, [r0, #4]
    1c4e:	3301      	adds	r3, #1
    1c50:	b29b      	uxth	r3, r3
    1c52:	8083      	strh	r3, [r0, #4]
  _cbuf[((tail)&(_size-1))] = value;
    1c54:	8842      	ldrh	r2, [r0, #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1c56:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    1c5a:	8803      	ldrh	r3, [r0, #0]
  _cbuf[((tail)&(_size-1))] = value;
    1c5c:	f002 020f 	and.w	r2, r2, #15
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1c60:	b29b      	uxth	r3, r3
  _cbuf[((tail)&(_size-1))] = value;
    1c62:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1c66:	fa1f fc8c 	uxth.w	ip, ip
    1c6a:	f083 0310 	eor.w	r3, r3, #16
    1c6e:	459c      	cmp	ip, r3
  _cbuf[((tail)&(_size-1))] = value;
    1c70:	80d1      	strh	r1, [r2, #6]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1c72:	d104      	bne.n	1c7e <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)+0x3a>
    1c74:	8803      	ldrh	r3, [r0, #0]
    1c76:	3301      	adds	r3, #1
    1c78:	f003 031f 	and.w	r3, r3, #31
    1c7c:	8003      	strh	r3, [r0, #0]
  tail = ((tail + 1)&(2*_size-1));
    1c7e:	8843      	ldrh	r3, [r0, #2]
    1c80:	3301      	adds	r3, #1
    1c82:	f003 031f 	and.w	r3, r3, #31
    1c86:	8043      	strh	r3, [r0, #2]
}
    1c88:	4770      	bx	lr
    1c8a:	bf00      	nop

00001c8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1c8c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    1c90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    1c94:	00db      	lsls	r3, r3, #3
    1c96:	d56b      	bpl.n	1d70 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1c98:	4b38      	ldr	r3, [pc, #224]	; (1d7c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xf0>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    1c9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1c9e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    1ca0:	f3c7 6703 	ubfx	r7, r7, #24, #4
    1ca4:	00ff      	lsls	r7, r7, #3
    1ca6:	2200      	movs	r2, #0
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1ca8:	f641 6b14 	movw	fp, #7700	; 0x1e14
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1cac:	3708      	adds	r7, #8
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    1cae:	f641 6904 	movw	r9, #7684	; 0x1e04
    1cb2:	f641 6a08 	movw	sl, #7688	; 0x1e08
    1cb6:	e007      	b.n	1cc8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x3c>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    1cb8:	681d      	ldr	r5, [r3, #0]
    1cba:	0f6d      	lsrs	r5, r5, #29
    1cbc:	2d05      	cmp	r5, #5
    1cbe:	d034      	beq.n	1d2a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x9e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    1cc0:	3201      	adds	r2, #1
    1cc2:	b2d3      	uxtb	r3, r2
    1cc4:	429f      	cmp	r7, r3
    1cc6:	d955      	bls.n	1d74 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe8>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    1cc8:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    1ccc:	eb00 04ce 	add.w	r4, r0, lr, lsl #3
    1cd0:	f504 53f0 	add.w	r3, r4, #7680	; 0x1e00
    1cd4:	681d      	ldr	r5, [r3, #0]
    1cd6:	0f6d      	lsrs	r5, r5, #29
    1cd8:	2d01      	cmp	r5, #1
    1cda:	d00e      	beq.n	1cfa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    1cdc:	681d      	ldr	r5, [r3, #0]
    1cde:	0f6d      	lsrs	r5, r5, #29
    1ce0:	2d02      	cmp	r5, #2
    1ce2:	d1e9      	bne.n	1cb8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2c>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    1ce4:	f854 3009 	ldr.w	r3, [r4, r9]
    1ce8:	428b      	cmp	r3, r1
    1cea:	d8e9      	bhi.n	1cc0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1cec:	f854 300a 	ldr.w	r3, [r4, sl]
    1cf0:	428b      	cmp	r3, r1
    1cf2:	d3e5      	bcc.n	1cc0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1cf4:	2001      	movs	r0, #1
}
    1cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    1cfa:	681c      	ldr	r4, [r3, #0]
    1cfc:	f414 7f60 	tst.w	r4, #896	; 0x380
    1d00:	d0de      	beq.n	1cc0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1d02:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    1d06:	2400      	movs	r4, #0
    1d08:	e004      	b.n	1d14 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x88>
    1d0a:	681d      	ldr	r5, [r3, #0]
    1d0c:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    1d10:	42ac      	cmp	r4, r5
    1d12:	d2d5      	bcs.n	1cc0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1d14:	3401      	adds	r4, #1
    1d16:	eb0e 0504 	add.w	r5, lr, r4
    1d1a:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    1d1e:	b2e4      	uxtb	r4, r4
    1d20:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    1d24:	428d      	cmp	r5, r1
    1d26:	d1f0      	bne.n	1d0a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x7e>
    1d28:	e7e4      	b.n	1cf4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1d2a:	681d      	ldr	r5, [r3, #0]
    1d2c:	f415 7f60 	tst.w	r5, #896	; 0x380
    1d30:	d0c6      	beq.n	1cc0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1d32:	445c      	add	r4, fp
    1d34:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1d38:	f04f 0c01 	mov.w	ip, #1
    1d3c:	e005      	b.n	1d4a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbe>
    1d3e:	681d      	ldr	r5, [r3, #0]
    1d40:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    1d44:	3501      	adds	r5, #1
    1d46:	45ac      	cmp	ip, r5
    1d48:	d2ba      	bcs.n	1cc0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1d4a:	eb0e 050c 	add.w	r5, lr, ip
    1d4e:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    1d52:	6826      	ldr	r6, [r4, #0]
    1d54:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    1d58:	f8d4 8000 	ldr.w	r8, [r4]
    1d5c:	400e      	ands	r6, r1
    1d5e:	ea05 0508 	and.w	r5, r5, r8
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1d62:	f10c 0c01 	add.w	ip, ip, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1d66:	42ae      	cmp	r6, r5
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1d68:	fa5f fc8c 	uxtb.w	ip, ip
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1d6c:	d1e7      	bne.n	1d3e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb2>
    1d6e:	e7c1      	b.n	1cf4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1d70:	2001      	movs	r0, #1
}
    1d72:	4770      	bx	lr
  return 0;
    1d74:	2000      	movs	r0, #0
}
    1d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d7a:	bf00      	nop
    1d7c:	40024000 	.word	0x40024000

00001d80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1d80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    1d84:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1d86:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    1d8a:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    1d8e:	f8de 3000 	ldr.w	r3, [lr]
    1d92:	00db      	lsls	r3, r3, #3
    1d94:	d528      	bpl.n	1de8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    1d96:	f8de 3000 	ldr.w	r3, [lr]
    1d9a:	0f5b      	lsrs	r3, r3, #29
    1d9c:	2b01      	cmp	r3, #1
    1d9e:	d00b      	beq.n	1db8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    1da0:	f8de 3000 	ldr.w	r3, [lr]
    1da4:	0f5b      	lsrs	r3, r3, #29
    1da6:	2b02      	cmp	r3, #2
    1da8:	d042      	beq.n	1e30 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    1daa:	f8de 3000 	ldr.w	r3, [lr]
    1dae:	0f5b      	lsrs	r3, r3, #29
    1db0:	2b05      	cmp	r3, #5
    1db2:	d01b      	beq.n	1dec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
  return 0;
    1db4:	2000      	movs	r0, #0
}
    1db6:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    1db8:	f8de 4000 	ldr.w	r4, [lr]
    1dbc:	f414 7f60 	tst.w	r4, #896	; 0x380
    1dc0:	d0f8      	beq.n	1db4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1dc2:	2300      	movs	r3, #0
    1dc4:	004d      	lsls	r5, r1, #1
    1dc6:	e005      	b.n	1dd4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    1dc8:	f8de 1000 	ldr.w	r1, [lr]
    1dcc:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    1dd0:	4563      	cmp	r3, ip
    1dd2:	d2ef      	bcs.n	1db4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1dd4:	3301      	adds	r3, #1
    1dd6:	eb05 0c03 	add.w	ip, r5, r3
    1dda:	f50c 6c04 	add.w	ip, ip, #2112	; 0x840
    1dde:	b2db      	uxtb	r3, r3
    1de0:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    1de4:	4294      	cmp	r4, r2
    1de6:	d1ef      	bne.n	1dc8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1de8:	2001      	movs	r0, #1
}
    1dea:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1dec:	f8de 4000 	ldr.w	r4, [lr]
    1df0:	f414 7f60 	tst.w	r4, #896	; 0x380
    1df4:	d0de      	beq.n	1db4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1df6:	f505 5504 	add.w	r5, r5, #8448	; 0x2100
    1dfa:	3514      	adds	r5, #20
    1dfc:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1dfe:	2301      	movs	r3, #1
    1e00:	e007      	b.n	1e12 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    1e02:	f8de 4000 	ldr.w	r4, [lr]
    1e06:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    1e0a:	f10c 0c01 	add.w	ip, ip, #1
    1e0e:	4563      	cmp	r3, ip
    1e10:	d2d0      	bcs.n	1db4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1e12:	682c      	ldr	r4, [r5, #0]
    1e14:	ea04 0c02 	and.w	ip, r4, r2
    1e18:	18cc      	adds	r4, r1, r3
    1e1a:	f504 6404 	add.w	r4, r4, #2112	; 0x840
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1e1e:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1e20:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    1e24:	682e      	ldr	r6, [r5, #0]
    1e26:	4034      	ands	r4, r6
    1e28:	45a4      	cmp	ip, r4
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1e2a:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1e2c:	d1e9      	bne.n	1e02 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    1e2e:	e7db      	b.n	1de8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    1e30:	f242 1304 	movw	r3, #8452	; 0x2104
    1e34:	58eb      	ldr	r3, [r5, r3]
    1e36:	4293      	cmp	r3, r2
    1e38:	d8bc      	bhi.n	1db4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1e3a:	f242 1308 	movw	r3, #8456	; 0x2108
    1e3e:	58e8      	ldr	r0, [r5, r3]
    1e40:	4290      	cmp	r0, r2
    1e42:	bf34      	ite	cc
    1e44:	2000      	movcc	r0, #0
    1e46:	2001      	movcs	r0, #1
}
    1e48:	bd70      	pop	{r4, r5, r6, pc}
    1e4a:	bf00      	nop

00001e4c <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    1e4c:	8843      	ldrh	r3, [r0, #2]
    1e4e:	f04f 0c1a 	mov.w	ip, #26
    1e52:	b2db      	uxtb	r3, r3
    1e54:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    1e58:	b510      	push	{r4, lr}
    1e5a:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    1e5c:	2000      	movs	r0, #0
    1e5e:	f883 0106 	strb.w	r0, [r3, #262]	; 0x106
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    1e62:	8863      	ldrh	r3, [r4, #2]
    1e64:	b2db      	uxtb	r3, r3
    1e66:	fb0c 4303 	mla	r3, ip, r3, r4
    1e6a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    1e6e:	8860      	ldrh	r0, [r4, #2]
    1e70:	b2c0      	uxtb	r0, r0
    1e72:	fb0c 4000 	mla	r0, ip, r0, r4
    1e76:	f500 7084 	add.w	r0, r0, #264	; 0x108
    1e7a:	f003 fc79 	bl	5770 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1e7e:	8862      	ldrh	r2, [r4, #2]
    1e80:	8823      	ldrh	r3, [r4, #0]
    1e82:	b29b      	uxth	r3, r3
    1e84:	b292      	uxth	r2, r2
    1e86:	f483 7380 	eor.w	r3, r3, #256	; 0x100
    1e8a:	429a      	cmp	r2, r3
    1e8c:	d104      	bne.n	1e98 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    1e8e:	8823      	ldrh	r3, [r4, #0]
    1e90:	3301      	adds	r3, #1
    1e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1e96:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    1e98:	8863      	ldrh	r3, [r4, #2]
    1e9a:	3301      	adds	r3, #1
    1e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1ea0:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    1ea2:	88a3      	ldrh	r3, [r4, #4]
    1ea4:	b29b      	uxth	r3, r3
    1ea6:	2bff      	cmp	r3, #255	; 0xff
    1ea8:	d803      	bhi.n	1eb2 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    1eaa:	88a3      	ldrh	r3, [r4, #4]
    1eac:	3301      	adds	r3, #1
    1eae:	b29b      	uxth	r3, r3
    1eb0:	80a3      	strh	r3, [r4, #4]
}
    1eb2:	bd10      	pop	{r4, pc}

00001eb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    1eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t cl = msg;
    1eb8:	468c      	mov	ip, r1
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    1eba:	460f      	mov	r7, r1
    1ebc:	4606      	mov	r6, r0
    1ebe:	4605      	mov	r5, r0
    1ec0:	f100 0810 	add.w	r8, r0, #16
  CAN_message_t cl = msg;
    1ec4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    1ec8:	b08d      	sub	sp, #52	; 0x34
  CAN_message_t cl = msg;
    1eca:	466c      	mov	r4, sp
    1ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1ece:	e89c 0003 	ldmia.w	ip, {r0, r1}
    1ed2:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    1ed6:	f8df a094 	ldr.w	sl, [pc, #148]	; 1f6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xb8>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    1eda:	f04f 0901 	mov.w	r9, #1
    thisListener = listener[listenerPos];
    1ede:	f855 4f04 	ldr.w	r4, [r5, #4]!
    if (thisListener != nullptr) {
    1ee2:	b15c      	cbz	r4, 1efc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    1ee4:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    1ee8:	68a3      	ldr	r3, [r4, #8]
    1eea:	fa09 f102 	lsl.w	r1, r9, r2
    1eee:	4219      	tst	r1, r3
    1ef0:	d020      	beq.n	1f34 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x80>
    1ef2:	6823      	ldr	r3, [r4, #0]
    1ef4:	f8d3 b000 	ldr.w	fp, [r3]
    1ef8:	45d3      	cmp	fp, sl
    1efa:	d116      	bne.n	1f2a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x76>
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    1efc:	4545      	cmp	r5, r8
    1efe:	d1ee      	bne.n	1ede <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x2a>
  if ( !isEventsUsed ) {
    1f00:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    1f04:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
    1f08:	b323      	cbz	r3, 1f54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xa0>
  memmove(buf, &msg, sizeof(msg));
    1f0a:	2218      	movs	r2, #24
    1f0c:	4639      	mov	r1, r7
    1f0e:	eb0d 0002 	add.w	r0, sp, r2
    1f12:	f001 f8e3 	bl	30dc <memcpy>
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    1f16:	2218      	movs	r2, #24
    1f18:	eb0d 0102 	add.w	r1, sp, r2
    1f1c:	f106 0014 	add.w	r0, r6, #20
    1f20:	f7ff ff94 	bl	1e4c <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
}
    1f24:	b00d      	add	sp, #52	; 0x34
    1f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    1f2a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1f2e:	4669      	mov	r1, sp
    1f30:	4620      	mov	r0, r4
    1f32:	47d8      	blx	fp
      if (thisListener->generalCallbackActive) thisListener->frameHandler (cl, -1, cl.bus);
    1f34:	7c23      	ldrb	r3, [r4, #16]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d0e0      	beq.n	1efc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    1f3a:	6823      	ldr	r3, [r4, #0]
    1f3c:	f8d3 b000 	ldr.w	fp, [r3]
    1f40:	f89d 3015 	ldrb.w	r3, [sp, #21]
    1f44:	45d3      	cmp	fp, sl
    1f46:	d0d9      	beq.n	1efc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    1f48:	4620      	mov	r0, r4
    1f4a:	f04f 32ff 	mov.w	r2, #4294967295
    1f4e:	4669      	mov	r1, sp
    1f50:	47d8      	blx	fp
    1f52:	e7d3      	b.n	1efc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    1f54:	7d3b      	ldrb	r3, [r7, #20]
    1f56:	f88d 3018 	strb.w	r3, [sp, #24]
    1f5a:	463a      	mov	r2, r7
    1f5c:	a906      	add	r1, sp, #24
    1f5e:	4630      	mov	r0, r6
    1f60:	f7ff f8a4 	bl	10ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
}
    1f64:	b00d      	add	sp, #52	; 0x34
    1f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f6a:	bf00      	nop
    1f6c:	00000459 	.word	0x00000459

00001f70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  mb_filter_table[mb_num][4] = id4; // id4
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
  if ( !distribution ) return; /* distribution not enabled */
    1f70:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    1f74:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
    1f78:	2b00      	cmp	r3, #0
    1f7a:	f000 80db 	beq.w	2134 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c4>
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    1f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t frame = msg;
    1f82:	460f      	mov	r7, r1
    1f84:	4605      	mov	r5, r0
    1f86:	460e      	mov	r6, r1
    1f88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    1f8a:	b089      	sub	sp, #36	; 0x24
  CAN_message_t frame = msg;
    1f8c:	ac02      	add	r4, sp, #8
    1f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f90:	e897 0003 	ldmia.w	r7, {r0, r1}
    1f94:	e884 0003 	stmia.w	r4, {r0, r1}

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    1f98:	f8df c250 	ldr.w	ip, [pc, #592]	; 21ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
    1f9c:	f8dc 3000 	ldr.w	r3, [ip]
    1fa0:	009b      	lsls	r3, r3, #2
    1fa2:	d552      	bpl.n	204a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1fa4:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    1fa8:	f3c3 6a03 	ubfx	sl, r3, #24, #4
    1fac:	2400      	movs	r4, #0
    1fae:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    1fb2:	f10a 0a08 	add.w	sl, sl, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    1fb6:	4622      	mov	r2, r4
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
            frame.mb = FIFO;
    1fb8:	f04f 0963 	mov.w	r9, #99	; 0x63
    1fbc:	e00c      	b.n	1fd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    1fbe:	0f5b      	lsrs	r3, r3, #29
    1fc0:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    1fc2:	683b      	ldr	r3, [r7, #0]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    1fc4:	f000 809a 	beq.w	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    1fc8:	0f5b      	lsrs	r3, r3, #29
    1fca:	2b05      	cmp	r3, #5
    1fcc:	f000 80dd 	beq.w	218a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x21a>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    1fd0:	3401      	adds	r4, #1
    1fd2:	b2e2      	uxtb	r2, r4
    1fd4:	4592      	cmp	sl, r2
    1fd6:	d938      	bls.n	204a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    1fd8:	f996 3014 	ldrsb.w	r3, [r6, #20]
    1fdc:	2b63      	cmp	r3, #99	; 0x63
    1fde:	d034      	beq.n	204a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    1fe0:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    1fe4:	eb05 0bc8 	add.w	fp, r5, r8, lsl #3
    1fe8:	f50b 57f0 	add.w	r7, fp, #7680	; 0x1e00
    1fec:	683b      	ldr	r3, [r7, #0]
    1fee:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    1ff2:	d0ed      	beq.n	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    1ff4:	683b      	ldr	r3, [r7, #0]
    1ff6:	0f5b      	lsrs	r3, r3, #29
    1ff8:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    1ffa:	683b      	ldr	r3, [r7, #0]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    1ffc:	d1df      	bne.n	1fbe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4e>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    1ffe:	79f2      	ldrb	r2, [r6, #7]
    2000:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2004:	429a      	cmp	r2, r3
    2006:	d1e3      	bne.n	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2008:	683b      	ldr	r3, [r7, #0]
    200a:	f413 7f60 	tst.w	r3, #896	; 0x380
    200e:	d0df      	beq.n	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2010:	ea4f 0b48 	mov.w	fp, r8, lsl #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2014:	2300      	movs	r3, #0
    2016:	e006      	b.n	2026 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb6>
    2018:	683a      	ldr	r2, [r7, #0]
    201a:	fa5f f388 	uxtb.w	r3, r8
    201e:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    2022:	4293      	cmp	r3, r2
    2024:	d2d4      	bcs.n	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2026:	f103 0801 	add.w	r8, r3, #1
    202a:	eb0b 0308 	add.w	r3, fp, r8
    202e:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    2032:	9a02      	ldr	r2, [sp, #8]
    2034:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    2038:	429a      	cmp	r2, r3
    203a:	d1ed      	bne.n	2018 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
            struct2queueRx(frame);
    203c:	a902      	add	r1, sp, #8
    203e:	4628      	mov	r0, r5
            frame.mb = FIFO;
    2040:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    2044:	f7ff ff36 	bl	1eb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2048:	e7e6      	b.n	2018 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    204a:	4f68      	ldr	r7, [pc, #416]	; (21ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>)
        }
      }
    } /* end of fifo scan */
  } /* end of fifo checking */

  frame.idhit = 0;
    204c:	2300      	movs	r3, #0
    204e:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2052:	683c      	ldr	r4, [r7, #0]
    2054:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    2058:	d03f      	beq.n	20da <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16a>
    205a:	f7fe fb97 	bl	78c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>

  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    205e:	683b      	ldr	r3, [r7, #0]
    2060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2064:	3301      	adds	r3, #1
    2066:	4283      	cmp	r3, r0
    2068:	4604      	mov	r4, r0
    206a:	d933      	bls.n	20d4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x164>
    206c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 21ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
          struct2queueRx(frame);
        }
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    2070:	f242 1704 	movw	r7, #8452	; 0x2104
    2074:	f242 1808 	movw	r8, #8456	; 0x2108
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    2078:	f996 3014 	ldrsb.w	r3, [r6, #20]
    207c:	42a3      	cmp	r3, r4
    207e:	d020      	beq.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    2080:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2084:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
    2088:	f502 5a04 	add.w	sl, r2, #8448	; 0x2100
    208c:	f8da 3000 	ldr.w	r3, [sl]
    2090:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    2094:	d015      	beq.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    2096:	f8da 3000 	ldr.w	r3, [sl]
    209a:	79f0      	ldrb	r0, [r6, #7]
    209c:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    20a0:	4298      	cmp	r0, r3
    20a2:	d10e      	bne.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    20a4:	f8da 3000 	ldr.w	r3, [sl]
    20a8:	0f5b      	lsrs	r3, r3, #29
    20aa:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    20ac:	f8da 3000 	ldr.w	r3, [sl]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    20b0:	d041      	beq.n	2136 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c6>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    20b2:	0f5b      	lsrs	r3, r3, #29
    20b4:	2b02      	cmp	r3, #2
    20b6:	d012      	beq.n	20de <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16e>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    20b8:	f8da 3000 	ldr.w	r3, [sl]
    20bc:	0f5b      	lsrs	r3, r3, #29
    20be:	2b05      	cmp	r3, #5
    20c0:	d05b      	beq.n	217a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x20a>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    20c2:	f8d9 3000 	ldr.w	r3, [r9]
    20c6:	3401      	adds	r4, #1
    20c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    20cc:	b2e4      	uxtb	r4, r4
    20ce:	3301      	adds	r3, #1
    20d0:	429c      	cmp	r4, r3
    20d2:	d3d1      	bcc.n	2078 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x108>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
  } /* end of mb scan */
}
    20d4:	b009      	add	sp, #36	; 0x24
    20d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    20da:	683b      	ldr	r3, [r7, #0]
    20dc:	e7c6      	b.n	206c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xfc>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    20de:	59d1      	ldr	r1, [r2, r7]
    20e0:	9b02      	ldr	r3, [sp, #8]
    20e2:	428b      	cmp	r3, r1
    20e4:	d3ed      	bcc.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    20e6:	f852 2008 	ldr.w	r2, [r2, r8]
    20ea:	4293      	cmp	r3, r2
    20ec:	d8e9      	bhi.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        struct2queueRx(frame);
    20ee:	a902      	add	r1, sp, #8
    20f0:	4628      	mov	r0, r5
        frame.mb = i;
    20f2:	f88d 401c 	strb.w	r4, [sp, #28]
        struct2queueRx(frame);
    20f6:	f7ff fedd 	bl	1eb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    20fa:	e7e2      	b.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    20fc:	79f2      	ldrb	r2, [r6, #7]
    20fe:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2102:	429a      	cmp	r2, r3
    2104:	f47f af64 	bne.w	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    2108:	f641 6304 	movw	r3, #7684	; 0x1e04
    210c:	f85b 2003 	ldr.w	r2, [fp, r3]
    2110:	9b02      	ldr	r3, [sp, #8]
    2112:	4293      	cmp	r3, r2
    2114:	f4ff af5c 	bcc.w	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2118:	f641 6208 	movw	r2, #7688	; 0x1e08
    211c:	f85b 2002 	ldr.w	r2, [fp, r2]
    2120:	4293      	cmp	r3, r2
    2122:	f63f af55 	bhi.w	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          struct2queueRx(frame);
    2126:	a902      	add	r1, sp, #8
    2128:	4628      	mov	r0, r5
          frame.mb = FIFO;
    212a:	f88d 901c 	strb.w	r9, [sp, #28]
          struct2queueRx(frame);
    212e:	f7ff fec1 	bl	1eb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2132:	e74d      	b.n	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2134:	4770      	bx	lr
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2136:	f413 7f60 	tst.w	r3, #896	; 0x380
    213a:	d0c2      	beq.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    213c:	004a      	lsls	r2, r1, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    213e:	2300      	movs	r3, #0
    2140:	e007      	b.n	2152 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e2>
    2142:	f8da 1000 	ldr.w	r1, [sl]
    2146:	fa5f f38b 	uxtb.w	r3, fp
    214a:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    214e:	428b      	cmp	r3, r1
    2150:	d2b7      	bcs.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2152:	f103 0b01 	add.w	fp, r3, #1
    2156:	eb02 030b 	add.w	r3, r2, fp
    215a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
    215e:	9902      	ldr	r1, [sp, #8]
    2160:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    2164:	4299      	cmp	r1, r3
    2166:	d1ec      	bne.n	2142 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
          struct2queueRx(frame);
    2168:	a902      	add	r1, sp, #8
    216a:	4628      	mov	r0, r5
    216c:	9200      	str	r2, [sp, #0]
          frame.mb = i;
    216e:	f88d 401c 	strb.w	r4, [sp, #28]
          struct2queueRx(frame);
    2172:	f7ff fe9f 	bl	1eb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2176:	9a00      	ldr	r2, [sp, #0]
    2178:	e7e3      	b.n	2142 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    217a:	9a02      	ldr	r2, [sp, #8]
    217c:	4621      	mov	r1, r4
    217e:	4628      	mov	r0, r5
    2180:	f7ff fcd6 	bl	1b30 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2184:	2800      	cmp	r0, #0
    2186:	d09c      	beq.n	20c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    2188:	e7b1      	b.n	20ee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17e>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    218a:	683b      	ldr	r3, [r7, #0]
    218c:	f413 7f60 	tst.w	r3, #896	; 0x380
    2190:	f43f af1e 	beq.w	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2194:	f50b 53f0 	add.w	r3, fp, #7680	; 0x1e00
    2198:	3314      	adds	r3, #20
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    219a:	2701      	movs	r7, #1
    219c:	e00a      	b.n	21b4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x244>
    219e:	f50b 51f0 	add.w	r1, fp, #7680	; 0x1e00
    21a2:	3701      	adds	r7, #1
    21a4:	6809      	ldr	r1, [r1, #0]
    21a6:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    21aa:	b2ff      	uxtb	r7, r7
    21ac:	3101      	adds	r1, #1
    21ae:	428f      	cmp	r7, r1
    21b0:	f4bf af0e 	bcs.w	1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    21b4:	eb07 0148 	add.w	r1, r7, r8, lsl #1
    21b8:	f501 61f0 	add.w	r1, r1, #1920	; 0x780
    21bc:	6818      	ldr	r0, [r3, #0]
    21be:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
    21c2:	9902      	ldr	r1, [sp, #8]
    21c4:	f8d3 c000 	ldr.w	ip, [r3]
    21c8:	4008      	ands	r0, r1
    21ca:	ea0e 010c 	and.w	r1, lr, ip
    21ce:	4288      	cmp	r0, r1
    21d0:	d1e5      	bne.n	219e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
            struct2queueRx(frame);
    21d2:	a902      	add	r1, sp, #8
    21d4:	4628      	mov	r0, r5
    21d6:	9301      	str	r3, [sp, #4]
            frame.idhit = i;
    21d8:	f88d 200e 	strb.w	r2, [sp, #14]
    21dc:	9200      	str	r2, [sp, #0]
            frame.mb = FIFO;
    21de:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    21e2:	f7ff fe67 	bl	1eb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    21e6:	e9dd 2300 	ldrd	r2, r3, [sp]
    21ea:	e7d8      	b.n	219e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
    21ec:	400a4000 	.word	0x400a4000

000021f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    21f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    21f4:	4db9      	ldr	r5, [pc, #740]	; (24dc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
  return FLEXCANb_IMASK1(_bus);
    21f6:	4fba      	ldr	r7, [pc, #744]	; (24e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    21f8:	4681      	mov	r9, r0
  CAN_message_t msg; // setup a temporary storage buffer
    21fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    21fc:	b097      	sub	sp, #92	; 0x5c
  CAN_message_t msg; // setup a temporary storage buffer
    21fe:	ac04      	add	r4, sp, #16
    2200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2202:	e895 0003 	ldmia.w	r5, {r0, r1}
    2206:	e884 0003 	stmia.w	r4, {r0, r1}
  return FLEXCANb_IMASK1(_bus);
    220a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return FLEXCANb_IFLAG1(_bus);
    220c:	6b38      	ldr	r0, [r7, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    220e:	683b      	ldr	r3, [r7, #0]
  return FLEXCANb_IFLAG1(_bus);
    2210:	9001      	str	r0, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2212:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  return FLEXCANb_IMASK1(_bus);
    2216:	f04f 0600 	mov.w	r6, #0
    221a:	468b      	mov	fp, r1
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    221c:	d103      	bne.n	2226 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    221e:	683a      	ldr	r2, [r7, #0]
    2220:	0094      	lsls	r4, r2, #2
    2222:	f100 80eb 	bmi.w	23fc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2226:	4dae      	ldr	r5, [pc, #696]	; (24e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2228:	9b01      	ldr	r3, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    222a:	682c      	ldr	r4, [r5, #0]
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    222c:	f043 0301 	orr.w	r3, r3, #1
    2230:	fab3 f383 	clz	r3, r3
    2234:	f1c3 0320 	rsb	r3, r3, #32
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2238:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    223c:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2240:	f000 824f 	beq.w	26e2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f2>
    2244:	f7fe faa2 	bl	78c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2248:	682b      	ldr	r3, [r5, #0]
    224a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    224e:	3301      	adds	r3, #1
    2250:	4283      	cmp	r3, r0
    2252:	4604      	mov	r4, r0
    2254:	f240 809e 	bls.w	2394 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2258:	4582      	cmp	sl, r0
    225a:	f240 809b 	bls.w	2394 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    225e:	1c67      	adds	r7, r4, #1
      (void)FLEXCANb_TIMER(_bus);
    2260:	f8df 827c 	ldr.w	r8, [pc, #636]	; 24e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
    2264:	b2fd      	uxtb	r5, r7
    2266:	e016      	b.n	2296 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    2268:	2906      	cmp	r1, #6
    226a:	f000 80ad 	beq.w	23c8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1d8>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    226e:	2904      	cmp	r1, #4
    2270:	f000 813e 	beq.w	24f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x300>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2274:	2908      	cmp	r1, #8
    2276:	f000 81d7 	beq.w	2628 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x438>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    227a:	f8d8 3000 	ldr.w	r3, [r8]
    227e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2282:	3301      	adds	r3, #1
    2284:	42ab      	cmp	r3, r5
    2286:	b2fc      	uxtb	r4, r7
    2288:	f240 8084 	bls.w	2394 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    228c:	45a2      	cmp	sl, r4
    228e:	f105 0501 	add.w	r5, r5, #1
    2292:	d97f      	bls.n	2394 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    2294:	1c67      	adds	r7, r4, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    2296:	f1c4 0220 	rsb	r2, r4, #32
    229a:	f1a4 0320 	sub.w	r3, r4, #32
    229e:	fa06 f202 	lsl.w	r2, r6, r2
    22a2:	fa2b f104 	lsr.w	r1, fp, r4
    22a6:	fa26 f303 	lsr.w	r3, r6, r3
    22aa:	4311      	orrs	r1, r2
    22ac:	4319      	orrs	r1, r3
    22ae:	07c9      	lsls	r1, r1, #31
    22b0:	d5e3      	bpl.n	227a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    22b2:	9901      	ldr	r1, [sp, #4]
    22b4:	40e1      	lsrs	r1, r4
    22b6:	4311      	orrs	r1, r2
    22b8:	4319      	orrs	r1, r3
    22ba:	07c9      	lsls	r1, r1, #31
    22bc:	d5dd      	bpl.n	227a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    22be:	4b89      	ldr	r3, [pc, #548]	; (24e4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f4>)
    22c0:	18e3      	adds	r3, r4, r3
    22c2:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    22c4:	681a      	ldr	r2, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    22c6:	f3c2 6103 	ubfx	r1, r2, #24, #4
    22ca:	2902      	cmp	r1, #2
    22cc:	d1cc      	bne.n	2268 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x78>
      msg.flags.extended = (bool)(code & (1UL << 21));
    22ce:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    22d2:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    22d4:	2900      	cmp	r1, #0
    22d6:	bf14      	ite	ne
    22d8:	f04f 0c01 	movne.w	ip, #1
    22dc:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    22e0:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    22e4:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    22e8:	d17f      	bne.n	23ea <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    22ea:	0c80      	lsrs	r0, r0, #18
    22ec:	9004      	str	r0, [sp, #16]
      msg.timestamp = code & 0xFFFF;
    22ee:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    22f2:	f3c2 4203 	ubfx	r2, r2, #16, #4
    22f6:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    22fa:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.mb = mb_num;
    22fe:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2302:	f892 2915 	ldrb.w	r2, [r2, #2325]	; 0x915
    2306:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    230a:	689a      	ldr	r2, [r3, #8]
    230c:	f88d 201f 	strb.w	r2, [sp, #31]
    2310:	689a      	ldr	r2, [r3, #8]
    2312:	0a12      	lsrs	r2, r2, #8
    2314:	f88d 201e 	strb.w	r2, [sp, #30]
    2318:	689a      	ldr	r2, [r3, #8]
    231a:	0c12      	lsrs	r2, r2, #16
    231c:	f88d 201d 	strb.w	r2, [sp, #29]
    2320:	689a      	ldr	r2, [r3, #8]
    2322:	0e12      	lsrs	r2, r2, #24
    2324:	f88d 201c 	strb.w	r2, [sp, #28]
    2328:	68da      	ldr	r2, [r3, #12]
    232a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    232e:	68da      	ldr	r2, [r3, #12]
    2330:	0a12      	lsrs	r2, r2, #8
    2332:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2336:	68da      	ldr	r2, [r3, #12]
    2338:	0c12      	lsrs	r2, r2, #16
    233a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    233e:	68da      	ldr	r2, [r3, #12]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2340:	2900      	cmp	r1, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2342:	ea4f 6212 	mov.w	r2, r2, lsr #24
    2346:	f88d 2020 	strb.w	r2, [sp, #32]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    234a:	bf14      	ite	ne
    234c:	f04f 628c 	movne.w	r2, #73400320	; 0x4600000
    2350:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
    2354:	601a      	str	r2, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    2356:	f8d8 3008 	ldr.w	r3, [r8, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    235a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    235e:	2301      	movs	r3, #1
    2360:	40a3      	lsls	r3, r4
    2362:	4313      	orrs	r3, r2
    2364:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2368:	9a04      	ldr	r2, [sp, #16]
    236a:	4621      	mov	r1, r4
    236c:	4648      	mov	r0, r9
    236e:	f7ff fbdf 	bl	1b30 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2372:	2800      	cmp	r0, #0
    2374:	f040 8153 	bne.w	261e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42e>
      frame_distribution(msg);
    2378:	a904      	add	r1, sp, #16
    237a:	4648      	mov	r0, r9
    237c:	f7ff fdf8 	bl	1f70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    2380:	a804      	add	r0, sp, #16
    2382:	f3af 8000 	nop.w
      ext_output2(msg);
    2386:	a804      	add	r0, sp, #16
    2388:	f3af 8000 	nop.w
      ext_output3(msg);
    238c:	a804      	add	r0, sp, #16
    238e:	f3af 8000 	nop.w
    }
    2392:	e772      	b.n	227a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    2394:	4e52      	ldr	r6, [pc, #328]	; (24e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    2396:	4d54      	ldr	r5, [pc, #336]	; (24e8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f8>)
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    2398:	6a34      	ldr	r4, [r6, #32]
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    239a:	682b      	ldr	r3, [r5, #0]
    239c:	ea84 0203 	eor.w	r2, r4, r3
    23a0:	4b52      	ldr	r3, [pc, #328]	; (24ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2fc>)
    23a2:	4013      	ands	r3, r2
    23a4:	b13b      	cbz	r3, 23b6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
        uint16_t size() { return _available; }
    23a6:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    23aa:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
    23ae:	b29b      	uxth	r3, r3
    if ( busESR1.size() < busESR1.capacity() ) {
    23b0:	2b0f      	cmp	r3, #15
    23b2:	f240 8198 	bls.w	26e6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f6>
  FLEXCANb_ESR1(_bus) |= esr1;
    23b6:	4a4a      	ldr	r2, [pc, #296]	; (24e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    23b8:	6a13      	ldr	r3, [r2, #32]
    23ba:	4323      	orrs	r3, r4
    23bc:	6213      	str	r3, [r2, #32]
  asm volatile ("dsb");	
    23be:	f3bf 8f4f 	dsb	sy
}
    23c2:	b017      	add	sp, #92	; 0x5c
    23c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg.flags.extended = (bool)(code & (1UL << 21));
    23c8:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    23cc:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    23ce:	2900      	cmp	r1, #0
    23d0:	bf14      	ite	ne
    23d2:	f04f 0c01 	movne.w	ip, #1
    23d6:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    23da:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    23de:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    23e2:	d105      	bne.n	23f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x200>
    23e4:	0c80      	lsrs	r0, r0, #18
    23e6:	9004      	str	r0, [sp, #16]
    23e8:	e004      	b.n	23f4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x204>
    23ea:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    23ec:	2101      	movs	r1, #1
    23ee:	e77e      	b.n	22ee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    23f0:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    23f2:	2101      	movs	r1, #1
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    23f4:	2001      	movs	r0, #1
    23f6:	f88d 0019 	strb.w	r0, [sp, #25]
    23fa:	e778      	b.n	22ee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    23fc:	068a      	lsls	r2, r1, #26
    23fe:	f57f af12 	bpl.w	2226 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    2402:	0685      	lsls	r5, r0, #26
    2404:	f57f af0f 	bpl.w	2226 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    2408:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
      msg.timestamp = code & 0xFFFF;
    240c:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2410:	f3c2 4103 	ubfx	r1, r2, #16, #4
    2414:	f88d 101b 	strb.w	r1, [sp, #27]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2418:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    241c:	4c30      	ldr	r4, [pc, #192]	; (24e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    241e:	f402 1000 	and.w	r0, r2, #2097152	; 0x200000
    2422:	42b0      	cmp	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2424:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.remote = (bool)(code & (1UL << 20));
    2428:	f3c2 5000 	ubfx	r0, r2, #20, #1
    242c:	f88d 0018 	strb.w	r0, [sp, #24]
      msg.idhit = code >> 23;
    2430:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.flags.extended = (bool)(code & (1UL << 21));
    2434:	bf12      	itee	ne
    2436:	2001      	movne	r0, #1
    2438:	4630      	moveq	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    243a:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    243c:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.idhit = code >> 23;
    2440:	f88d 2016 	strb.w	r2, [sp, #22]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2444:	9104      	str	r1, [sp, #16]
    2446:	a808      	add	r0, sp, #32
      msg.idhit = code >> 23;
    2448:	2200      	movs	r2, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    244a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    244e:	40d1      	lsrs	r1, r2
    2450:	3208      	adds	r2, #8
    2452:	2a20      	cmp	r2, #32
    2454:	f800 1d01 	strb.w	r1, [r0, #-1]!
    2458:	d1f7      	bne.n	244a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x25a>
    245a:	4821      	ldr	r0, [pc, #132]	; (24e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    245c:	a909      	add	r1, sp, #36	; 0x24
    245e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    2462:	40da      	lsrs	r2, r3
    2464:	3308      	adds	r3, #8
    2466:	2b20      	cmp	r3, #32
    2468:	f801 2d01 	strb.w	r2, [r1, #-1]!
    246c:	d1f7      	bne.n	245e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26e>
      msg.bus = busNumber;
    246e:	f509 5300 	add.w	r3, r9, #8192	; 0x2000
    2472:	f893 3915 	ldrb.w	r3, [r3, #2325]	; 0x915
    2476:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    247a:	2363      	movs	r3, #99	; 0x63
    247c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      (void)FLEXCANb_TIMER(_bus);
    2480:	6883      	ldr	r3, [r0, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2482:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2484:	f043 0320 	orr.w	r3, r3, #32
    2488:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    248a:	9b01      	ldr	r3, [sp, #4]
    248c:	065c      	lsls	r4, r3, #25
    248e:	d503      	bpl.n	2498 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2a8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2490:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2496:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    2498:	9b01      	ldr	r3, [sp, #4]
    249a:	0618      	lsls	r0, r3, #24
    249c:	d504      	bpl.n	24a8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2b8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    249e:	4a10      	ldr	r2, [pc, #64]	; (24e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    24a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    24a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    24a6:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    24a8:	a904      	add	r1, sp, #16
    24aa:	4648      	mov	r0, r9
    24ac:	f7ff fd60 	bl	1f70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    24b0:	a804      	add	r0, sp, #16
    24b2:	f3af 8000 	nop.w
      ext_output2(msg);
    24b6:	a804      	add	r0, sp, #16
    24b8:	f3af 8000 	nop.w
      ext_output3(msg);
    24bc:	a804      	add	r0, sp, #16
    24be:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    24c2:	9904      	ldr	r1, [sp, #16]
    24c4:	4648      	mov	r0, r9
    24c6:	f7ff fab9 	bl	1a3c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    24ca:	2800      	cmp	r0, #0
    24cc:	f43f aeab 	beq.w	2226 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    24d0:	a904      	add	r1, sp, #16
    24d2:	4648      	mov	r0, r9
    24d4:	f7ff fcee 	bl	1eb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    24d8:	e6a5      	b.n	2226 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    24da:	bf00      	nop
    24dc:	0000b698 	.word	0x0000b698
    24e0:	400a4000 	.word	0x400a4000
    24e4:	0400a408 	.word	0x0400a408
    24e8:	1fff0ee4 	.word	0x1fff0ee4
    24ec:	0007ffbf 	.word	0x0007ffbf
      msg.flags.extended = (bool)(code & (1UL << 21));
    24f0:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    24f4:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    24f6:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    24f8:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    24fc:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2500:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2504:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2508:	bf14      	ite	ne
    250a:	2001      	movne	r0, #1
    250c:	2000      	moveq	r0, #0
    250e:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    2512:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    2516:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    251a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    251e:	6898      	ldr	r0, [r3, #8]
    2520:	f88d 001f 	strb.w	r0, [sp, #31]
    2524:	6898      	ldr	r0, [r3, #8]
    2526:	ea4f 2010 	mov.w	r0, r0, lsr #8
    252a:	f88d 001e 	strb.w	r0, [sp, #30]
    252e:	6898      	ldr	r0, [r3, #8]
    2530:	ea4f 4010 	mov.w	r0, r0, lsr #16
    2534:	f88d 001d 	strb.w	r0, [sp, #29]
    2538:	6898      	ldr	r0, [r3, #8]
    253a:	ea4f 6010 	mov.w	r0, r0, lsr #24
    253e:	f88d 001c 	strb.w	r0, [sp, #28]
    2542:	68d8      	ldr	r0, [r3, #12]
    2544:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    2548:	68d8      	ldr	r0, [r3, #12]
    254a:	ea4f 2010 	mov.w	r0, r0, lsr #8
    254e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    2552:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2554:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    2558:	bf08      	it	eq
    255a:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    255c:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    255e:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2560:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2564:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2568:	68d8      	ldr	r0, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    256a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    256e:	0e00      	lsrs	r0, r0, #24
    2570:	f88d 0020 	strb.w	r0, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2574:	b129      	cbz	r1, 2582 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x392>
    2576:	a804      	add	r0, sp, #16
    2578:	9203      	str	r2, [sp, #12]
    257a:	9302      	str	r3, [sp, #8]
    257c:	4788      	blx	r1
    257e:	9a03      	ldr	r2, [sp, #12]
    2580:	9b02      	ldr	r3, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    2582:	f8d2 2908 	ldr.w	r2, [r2, #2312]	; 0x908
    2586:	b11a      	cbz	r2, 2590 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a0>
    2588:	a804      	add	r0, sp, #16
    258a:	9302      	str	r3, [sp, #8]
    258c:	4790      	blx	r2
    258e:	9b02      	ldr	r3, [sp, #8]
    2590:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    2594:	9202      	str	r2, [sp, #8]
    2596:	f8b2 2b1e 	ldrh.w	r2, [r2, #2846]	; 0xb1e
    259a:	b292      	uxth	r2, r2
      if ( txBuffer.size() ) {
    259c:	2a00      	cmp	r2, #0
    259e:	f000 80b1 	beq.w	2704 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x514>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    25a2:	9b02      	ldr	r3, [sp, #8]
    25a4:	f8b3 1b1a 	ldrh.w	r1, [r3, #2842]	; 0xb1a
    25a8:	231a      	movs	r3, #26
    25aa:	f001 010f 	and.w	r1, r1, #15
    25ae:	fb03 9101 	mla	r1, r3, r1, r9
    25b2:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    25b6:	3112      	adds	r1, #18
    25b8:	2218      	movs	r2, #24
    25ba:	a810      	add	r0, sp, #64	; 0x40
    25bc:	f000 fd8e 	bl	30dc <memcpy>
        memmove(&frame, buf, sizeof(frame));
    25c0:	ab0a      	add	r3, sp, #40	; 0x28
    25c2:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    25c6:	469e      	mov	lr, r3
    25c8:	9303      	str	r3, [sp, #12]
    25ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    25ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    25d2:	e89c 0003 	ldmia.w	ip, {r0, r1}
    25d6:	e88e 0003 	stmia.w	lr, {r0, r1}
        if ( frame.mb == -1 ) {
    25da:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
    25de:	1c5a      	adds	r2, r3, #1
    25e0:	f000 809b 	beq.w	271a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x52a>
        else if ( frame.mb == mb_num ) {
    25e4:	429c      	cmp	r4, r3
    25e6:	f47f ae48 	bne.w	227a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(frame.mb, frame);
    25ea:	9a03      	ldr	r2, [sp, #12]
    25ec:	b2e1      	uxtb	r1, r4
    25ee:	4648      	mov	r0, r9
    25f0:	f7fe fd82 	bl	10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    25f4:	9a02      	ldr	r2, [sp, #8]
    25f6:	f8b2 3b1a 	ldrh.w	r3, [r2, #2842]	; 0xb1a
    25fa:	3301      	adds	r3, #1
    25fc:	f003 031f 	and.w	r3, r3, #31
    2600:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    if ( _available ) _available--;
    2604:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    2608:	b29b      	uxth	r3, r3
    260a:	2b00      	cmp	r3, #0
    260c:	f43f ae35 	beq.w	227a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    2610:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    2614:	3b01      	subs	r3, #1
    2616:	b29b      	uxth	r3, r3
    2618:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    261c:	e62d      	b.n	227a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    261e:	a904      	add	r1, sp, #16
    2620:	4648      	mov	r0, r9
    2622:	f7ff fc47 	bl	1eb4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2626:	e6a7      	b.n	2378 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x188>
      msg.flags.extended = (bool)(code & (1UL << 21));
    2628:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    262c:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    262e:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    2630:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2634:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2638:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    263c:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2640:	bf14      	ite	ne
    2642:	2001      	movne	r0, #1
    2644:	2000      	moveq	r0, #0
    2646:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    264a:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    264e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2652:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2656:	6898      	ldr	r0, [r3, #8]
    2658:	f88d 001f 	strb.w	r0, [sp, #31]
    265c:	6898      	ldr	r0, [r3, #8]
    265e:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2662:	f88d 001e 	strb.w	r0, [sp, #30]
    2666:	6898      	ldr	r0, [r3, #8]
    2668:	ea4f 4010 	mov.w	r0, r0, lsr #16
    266c:	f88d 001d 	strb.w	r0, [sp, #29]
    2670:	6898      	ldr	r0, [r3, #8]
    2672:	ea4f 6010 	mov.w	r0, r0, lsr #24
    2676:	f88d 001c 	strb.w	r0, [sp, #28]
    267a:	68d8      	ldr	r0, [r3, #12]
    267c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    2680:	68d8      	ldr	r0, [r3, #12]
    2682:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2686:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    268a:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    268c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    2690:	bf08      	it	eq
    2692:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2694:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2696:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2698:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    269c:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    26a0:	68db      	ldr	r3, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    26a2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    26a6:	0e1b      	lsrs	r3, r3, #24
    26a8:	f88d 3020 	strb.w	r3, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    26ac:	b119      	cbz	r1, 26b6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4c6>
    26ae:	a804      	add	r0, sp, #16
    26b0:	9202      	str	r2, [sp, #8]
    26b2:	4788      	blx	r1
    26b4:	9a02      	ldr	r2, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    26b6:	f8d2 3908 	ldr.w	r3, [r2, #2312]	; 0x908
    26ba:	b10b      	cbz	r3, 26c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4d0>
    26bc:	a804      	add	r0, sp, #16
    26be:	4798      	blx	r3
        uint16_t size() { return _available; }
    26c0:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    26c4:	9302      	str	r3, [sp, #8]
    26c6:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
    26ca:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    26cc:	2b00      	cmp	r3, #0
    26ce:	f47f af68 	bne.w	25a2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b2>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    26d2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    26d6:	2301      	movs	r3, #1
    26d8:	40a3      	lsls	r3, r4
    26da:	4313      	orrs	r3, r2
    26dc:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    26e0:	e5cb      	b.n	227a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    26e2:	682b      	ldr	r3, [r5, #0]
    26e4:	e5bb      	b.n	225e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6e>
      busESR1.write(esr1);
    26e6:	f509 50e6 	add.w	r0, r9, #7360	; 0x1cc0
    26ea:	4621      	mov	r1, r4
    26ec:	3010      	adds	r0, #16
    26ee:	f7ff fa85 	bl	1bfc <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>
      busECR.write(FLEXCANb_ECR(_bus));
    26f2:	69f1      	ldr	r1, [r6, #28]
    26f4:	f509 50ec 	add.w	r0, r9, #7552	; 0x1d80
    26f8:	b289      	uxth	r1, r1
    26fa:	3018      	adds	r0, #24
    26fc:	f7ff faa2 	bl	1c44 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>
      last_esr1 = esr1;
    2700:	602c      	str	r4, [r5, #0]
    2702:	e658      	b.n	23b6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2704:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    2708:	2201      	movs	r2, #1
    270a:	40a2      	lsls	r2, r4
    270c:	430a      	orrs	r2, r1
    270e:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    2712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    2716:	601a      	str	r2, [r3, #0]
    2718:	e5af      	b.n	227a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(mb_num, frame);
    271a:	9a03      	ldr	r2, [sp, #12]
    271c:	4621      	mov	r1, r4
    271e:	e766      	b.n	25ee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>

00002720 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t cl = msg;
    2724:	468c      	mov	ip, r1
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2726:	460f      	mov	r7, r1
    2728:	4606      	mov	r6, r0
    272a:	4605      	mov	r5, r0
    272c:	f100 0810 	add.w	r8, r0, #16
  CAN_message_t cl = msg;
    2730:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2734:	b08d      	sub	sp, #52	; 0x34
  CAN_message_t cl = msg;
    2736:	466c      	mov	r4, sp
    2738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    273a:	e89c 0003 	ldmia.w	ip, {r0, r1}
    273e:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    2742:	f8df a094 	ldr.w	sl, [pc, #148]	; 27d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xb8>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2746:	f04f 0901 	mov.w	r9, #1
    thisListener = listener[listenerPos];
    274a:	f855 4f04 	ldr.w	r4, [r5, #4]!
    if (thisListener != nullptr) {
    274e:	b15c      	cbz	r4, 2768 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2750:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    2754:	68a3      	ldr	r3, [r4, #8]
    2756:	fa09 f102 	lsl.w	r1, r9, r2
    275a:	4219      	tst	r1, r3
    275c:	d020      	beq.n	27a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x80>
    275e:	6823      	ldr	r3, [r4, #0]
    2760:	f8d3 b000 	ldr.w	fp, [r3]
    2764:	45d3      	cmp	fp, sl
    2766:	d116      	bne.n	2796 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x76>
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    2768:	4545      	cmp	r5, r8
    276a:	d1ee      	bne.n	274a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x2a>
  if ( !isEventsUsed ) {
    276c:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    2770:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
    2774:	b323      	cbz	r3, 27c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xa0>
  memmove(buf, &msg, sizeof(msg));
    2776:	2218      	movs	r2, #24
    2778:	4639      	mov	r1, r7
    277a:	eb0d 0002 	add.w	r0, sp, r2
    277e:	f000 fcad 	bl	30dc <memcpy>
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    2782:	2218      	movs	r2, #24
    2784:	eb0d 0102 	add.w	r1, sp, r2
    2788:	f106 0014 	add.w	r0, r6, #20
    278c:	f7ff fb5e 	bl	1e4c <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
}
    2790:	b00d      	add	sp, #52	; 0x34
    2792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2796:	f89d 3015 	ldrb.w	r3, [sp, #21]
    279a:	4669      	mov	r1, sp
    279c:	4620      	mov	r0, r4
    279e:	47d8      	blx	fp
      if (thisListener->generalCallbackActive) thisListener->frameHandler (cl, -1, cl.bus);
    27a0:	7c23      	ldrb	r3, [r4, #16]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d0e0      	beq.n	2768 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    27a6:	6823      	ldr	r3, [r4, #0]
    27a8:	f8d3 b000 	ldr.w	fp, [r3]
    27ac:	f89d 3015 	ldrb.w	r3, [sp, #21]
    27b0:	45d3      	cmp	fp, sl
    27b2:	d0d9      	beq.n	2768 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    27b4:	4620      	mov	r0, r4
    27b6:	f04f 32ff 	mov.w	r2, #4294967295
    27ba:	4669      	mov	r1, sp
    27bc:	47d8      	blx	fp
    27be:	e7d3      	b.n	2768 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    27c0:	7d3b      	ldrb	r3, [r7, #20]
    27c2:	f88d 3018 	strb.w	r3, [sp, #24]
    27c6:	463a      	mov	r2, r7
    27c8:	a906      	add	r1, sp, #24
    27ca:	4630      	mov	r0, r6
    27cc:	f7fe fdbe 	bl	134c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
}
    27d0:	b00d      	add	sp, #52	; 0x34
    27d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27d6:	bf00      	nop
    27d8:	00000459 	.word	0x00000459

000027dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  if ( !distribution ) return; /* distribution not enabled */
    27dc:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    27e0:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
    27e4:	2b00      	cmp	r3, #0
    27e6:	f000 80db 	beq.w	29a0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c4>
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    27ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t frame = msg;
    27ee:	460f      	mov	r7, r1
    27f0:	4605      	mov	r5, r0
    27f2:	460e      	mov	r6, r1
    27f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    27f6:	b089      	sub	sp, #36	; 0x24
  CAN_message_t frame = msg;
    27f8:	ac02      	add	r4, sp, #8
    27fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    27fc:	e897 0003 	ldmia.w	r7, {r0, r1}
    2800:	e884 0003 	stmia.w	r4, {r0, r1}
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    2804:	f8df c250 	ldr.w	ip, [pc, #592]	; 2a58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
    2808:	f8dc 3000 	ldr.w	r3, [ip]
    280c:	009b      	lsls	r3, r3, #2
    280e:	d552      	bpl.n	28b6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    2810:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    2814:	f3c3 6a03 	ubfx	sl, r3, #24, #4
    2818:	2400      	movs	r4, #0
    281a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    281e:	f10a 0a08 	add.w	sl, sl, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    2822:	4622      	mov	r2, r4
            frame.mb = FIFO;
    2824:	f04f 0963 	mov.w	r9, #99	; 0x63
    2828:	e00c      	b.n	2844 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    282a:	0f5b      	lsrs	r3, r3, #29
    282c:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    282e:	683b      	ldr	r3, [r7, #0]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    2830:	f000 809a 	beq.w	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    2834:	0f5b      	lsrs	r3, r3, #29
    2836:	2b05      	cmp	r3, #5
    2838:	f000 80dd 	beq.w	29f6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x21a>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    283c:	3401      	adds	r4, #1
    283e:	b2e2      	uxtb	r2, r4
    2840:	4592      	cmp	sl, r2
    2842:	d938      	bls.n	28b6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    2844:	f996 3014 	ldrsb.w	r3, [r6, #20]
    2848:	2b63      	cmp	r3, #99	; 0x63
    284a:	d034      	beq.n	28b6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    284c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    2850:	eb05 0bc8 	add.w	fp, r5, r8, lsl #3
    2854:	f50b 57f0 	add.w	r7, fp, #7680	; 0x1e00
    2858:	683b      	ldr	r3, [r7, #0]
    285a:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    285e:	d0ed      	beq.n	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2860:	683b      	ldr	r3, [r7, #0]
    2862:	0f5b      	lsrs	r3, r3, #29
    2864:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2866:	683b      	ldr	r3, [r7, #0]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2868:	d1df      	bne.n	282a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4e>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    286a:	79f2      	ldrb	r2, [r6, #7]
    286c:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2870:	429a      	cmp	r2, r3
    2872:	d1e3      	bne.n	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2874:	683b      	ldr	r3, [r7, #0]
    2876:	f413 7f60 	tst.w	r3, #896	; 0x380
    287a:	d0df      	beq.n	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    287c:	ea4f 0b48 	mov.w	fp, r8, lsl #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2880:	2300      	movs	r3, #0
    2882:	e006      	b.n	2892 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb6>
    2884:	683a      	ldr	r2, [r7, #0]
    2886:	fa5f f388 	uxtb.w	r3, r8
    288a:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    288e:	4293      	cmp	r3, r2
    2890:	d2d4      	bcs.n	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2892:	f103 0801 	add.w	r8, r3, #1
    2896:	eb0b 0308 	add.w	r3, fp, r8
    289a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    289e:	9a02      	ldr	r2, [sp, #8]
    28a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    28a4:	429a      	cmp	r2, r3
    28a6:	d1ed      	bne.n	2884 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
            struct2queueRx(frame);
    28a8:	a902      	add	r1, sp, #8
    28aa:	4628      	mov	r0, r5
            frame.mb = FIFO;
    28ac:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    28b0:	f7ff ff36 	bl	2720 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    28b4:	e7e6      	b.n	2884 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    28b6:	4f68      	ldr	r7, [pc, #416]	; (2a58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>)
  frame.idhit = 0;
    28b8:	2300      	movs	r3, #0
    28ba:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    28be:	683c      	ldr	r4, [r7, #0]
    28c0:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    28c4:	d03f      	beq.n	2946 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16a>
    28c6:	f7fd ff3d 	bl	744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    28ca:	683b      	ldr	r3, [r7, #0]
    28cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    28d0:	3301      	adds	r3, #1
    28d2:	4283      	cmp	r3, r0
    28d4:	4604      	mov	r4, r0
    28d6:	d933      	bls.n	2940 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x164>
    28d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2a58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    28dc:	f242 1704 	movw	r7, #8452	; 0x2104
    28e0:	f242 1808 	movw	r8, #8456	; 0x2108
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    28e4:	f996 3014 	ldrsb.w	r3, [r6, #20]
    28e8:	42a3      	cmp	r3, r4
    28ea:	d020      	beq.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    28ec:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    28f0:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
    28f4:	f502 5a04 	add.w	sl, r2, #8448	; 0x2100
    28f8:	f8da 3000 	ldr.w	r3, [sl]
    28fc:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    2900:	d015      	beq.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    2902:	f8da 3000 	ldr.w	r3, [sl]
    2906:	79f0      	ldrb	r0, [r6, #7]
    2908:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    290c:	4298      	cmp	r0, r3
    290e:	d10e      	bne.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2910:	f8da 3000 	ldr.w	r3, [sl]
    2914:	0f5b      	lsrs	r3, r3, #29
    2916:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2918:	f8da 3000 	ldr.w	r3, [sl]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    291c:	d041      	beq.n	29a2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c6>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    291e:	0f5b      	lsrs	r3, r3, #29
    2920:	2b02      	cmp	r3, #2
    2922:	d012      	beq.n	294a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16e>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    2924:	f8da 3000 	ldr.w	r3, [sl]
    2928:	0f5b      	lsrs	r3, r3, #29
    292a:	2b05      	cmp	r3, #5
    292c:	d05b      	beq.n	29e6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x20a>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    292e:	f8d9 3000 	ldr.w	r3, [r9]
    2932:	3401      	adds	r4, #1
    2934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2938:	b2e4      	uxtb	r4, r4
    293a:	3301      	adds	r3, #1
    293c:	429c      	cmp	r4, r3
    293e:	d3d1      	bcc.n	28e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x108>
}
    2940:	b009      	add	sp, #36	; 0x24
    2942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2946:	683b      	ldr	r3, [r7, #0]
    2948:	e7c6      	b.n	28d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xfc>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    294a:	59d1      	ldr	r1, [r2, r7]
    294c:	9b02      	ldr	r3, [sp, #8]
    294e:	428b      	cmp	r3, r1
    2950:	d3ed      	bcc.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    2952:	f852 2008 	ldr.w	r2, [r2, r8]
    2956:	4293      	cmp	r3, r2
    2958:	d8e9      	bhi.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        struct2queueRx(frame);
    295a:	a902      	add	r1, sp, #8
    295c:	4628      	mov	r0, r5
        frame.mb = i;
    295e:	f88d 401c 	strb.w	r4, [sp, #28]
        struct2queueRx(frame);
    2962:	f7ff fedd 	bl	2720 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2966:	e7e2      	b.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2968:	79f2      	ldrb	r2, [r6, #7]
    296a:	f3c3 4300 	ubfx	r3, r3, #16, #1
    296e:	429a      	cmp	r2, r3
    2970:	f47f af64 	bne.w	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    2974:	f641 6304 	movw	r3, #7684	; 0x1e04
    2978:	f85b 2003 	ldr.w	r2, [fp, r3]
    297c:	9b02      	ldr	r3, [sp, #8]
    297e:	4293      	cmp	r3, r2
    2980:	f4ff af5c 	bcc.w	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2984:	f641 6208 	movw	r2, #7688	; 0x1e08
    2988:	f85b 2002 	ldr.w	r2, [fp, r2]
    298c:	4293      	cmp	r3, r2
    298e:	f63f af55 	bhi.w	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          struct2queueRx(frame);
    2992:	a902      	add	r1, sp, #8
    2994:	4628      	mov	r0, r5
          frame.mb = FIFO;
    2996:	f88d 901c 	strb.w	r9, [sp, #28]
          struct2queueRx(frame);
    299a:	f7ff fec1 	bl	2720 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    299e:	e74d      	b.n	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    29a0:	4770      	bx	lr
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    29a2:	f413 7f60 	tst.w	r3, #896	; 0x380
    29a6:	d0c2      	beq.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    29a8:	004a      	lsls	r2, r1, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    29aa:	2300      	movs	r3, #0
    29ac:	e007      	b.n	29be <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e2>
    29ae:	f8da 1000 	ldr.w	r1, [sl]
    29b2:	fa5f f38b 	uxtb.w	r3, fp
    29b6:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    29ba:	428b      	cmp	r3, r1
    29bc:	d2b7      	bcs.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    29be:	f103 0b01 	add.w	fp, r3, #1
    29c2:	eb02 030b 	add.w	r3, r2, fp
    29c6:	f503 6304 	add.w	r3, r3, #2112	; 0x840
    29ca:	9902      	ldr	r1, [sp, #8]
    29cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    29d0:	4299      	cmp	r1, r3
    29d2:	d1ec      	bne.n	29ae <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
          struct2queueRx(frame);
    29d4:	a902      	add	r1, sp, #8
    29d6:	4628      	mov	r0, r5
    29d8:	9200      	str	r2, [sp, #0]
          frame.mb = i;
    29da:	f88d 401c 	strb.w	r4, [sp, #28]
          struct2queueRx(frame);
    29de:	f7ff fe9f 	bl	2720 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    29e2:	9a00      	ldr	r2, [sp, #0]
    29e4:	e7e3      	b.n	29ae <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    29e6:	9a02      	ldr	r2, [sp, #8]
    29e8:	4621      	mov	r1, r4
    29ea:	4628      	mov	r0, r5
    29ec:	f7ff f9c8 	bl	1d80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    29f0:	2800      	cmp	r0, #0
    29f2:	d09c      	beq.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    29f4:	e7b1      	b.n	295a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17e>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    29f6:	683b      	ldr	r3, [r7, #0]
    29f8:	f413 7f60 	tst.w	r3, #896	; 0x380
    29fc:	f43f af1e 	beq.w	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2a00:	f50b 53f0 	add.w	r3, fp, #7680	; 0x1e00
    2a04:	3314      	adds	r3, #20
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    2a06:	2701      	movs	r7, #1
    2a08:	e00a      	b.n	2a20 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x244>
    2a0a:	f50b 51f0 	add.w	r1, fp, #7680	; 0x1e00
    2a0e:	3701      	adds	r7, #1
    2a10:	6809      	ldr	r1, [r1, #0]
    2a12:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    2a16:	b2ff      	uxtb	r7, r7
    2a18:	3101      	adds	r1, #1
    2a1a:	428f      	cmp	r7, r1
    2a1c:	f4bf af0e 	bcs.w	283c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2a20:	eb07 0148 	add.w	r1, r7, r8, lsl #1
    2a24:	f501 61f0 	add.w	r1, r1, #1920	; 0x780
    2a28:	6818      	ldr	r0, [r3, #0]
    2a2a:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
    2a2e:	9902      	ldr	r1, [sp, #8]
    2a30:	f8d3 c000 	ldr.w	ip, [r3]
    2a34:	4008      	ands	r0, r1
    2a36:	ea0e 010c 	and.w	r1, lr, ip
    2a3a:	4288      	cmp	r0, r1
    2a3c:	d1e5      	bne.n	2a0a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
            struct2queueRx(frame);
    2a3e:	a902      	add	r1, sp, #8
    2a40:	4628      	mov	r0, r5
    2a42:	9301      	str	r3, [sp, #4]
            frame.idhit = i;
    2a44:	f88d 200e 	strb.w	r2, [sp, #14]
    2a48:	9200      	str	r2, [sp, #0]
            frame.mb = FIFO;
    2a4a:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    2a4e:	f7ff fe67 	bl	2720 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2a52:	e9dd 2300 	ldrd	r2, r3, [sp]
    2a56:	e7d8      	b.n	2a0a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
    2a58:	40024000 	.word	0x40024000

00002a5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    2a60:	4db9      	ldr	r5, [pc, #740]	; (2d48 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
  return FLEXCANb_IMASK1(_bus);
    2a62:	4fba      	ldr	r7, [pc, #744]	; (2d4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2a64:	4681      	mov	r9, r0
  CAN_message_t msg; // setup a temporary storage buffer
    2a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2a68:	b097      	sub	sp, #92	; 0x5c
  CAN_message_t msg; // setup a temporary storage buffer
    2a6a:	ac04      	add	r4, sp, #16
    2a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2a6e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2a72:	e884 0003 	stmia.w	r4, {r0, r1}
  return FLEXCANb_IMASK1(_bus);
    2a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return FLEXCANb_IFLAG1(_bus);
    2a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2a7a:	683b      	ldr	r3, [r7, #0]
  return FLEXCANb_IFLAG1(_bus);
    2a7c:	9001      	str	r0, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2a7e:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  return FLEXCANb_IMASK1(_bus);
    2a82:	f04f 0600 	mov.w	r6, #0
    2a86:	468b      	mov	fp, r1
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2a88:	d103      	bne.n	2a92 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    2a8a:	683a      	ldr	r2, [r7, #0]
    2a8c:	0094      	lsls	r4, r2, #2
    2a8e:	f100 80eb 	bmi.w	2c68 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2a92:	4dae      	ldr	r5, [pc, #696]	; (2d4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2a94:	9b01      	ldr	r3, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2a96:	682c      	ldr	r4, [r5, #0]
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2a98:	f043 0301 	orr.w	r3, r3, #1
    2a9c:	fab3 f383 	clz	r3, r3
    2aa0:	f1c3 0320 	rsb	r3, r3, #32
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2aa4:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2aa8:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2aac:	f000 824f 	beq.w	2f4e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f2>
    2ab0:	f7fd fe48 	bl	744 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2ab4:	682b      	ldr	r3, [r5, #0]
    2ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2aba:	3301      	adds	r3, #1
    2abc:	4283      	cmp	r3, r0
    2abe:	4604      	mov	r4, r0
    2ac0:	f240 809e 	bls.w	2c00 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2ac4:	4582      	cmp	sl, r0
    2ac6:	f240 809b 	bls.w	2c00 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    2aca:	1c67      	adds	r7, r4, #1
      (void)FLEXCANb_TIMER(_bus);
    2acc:	f8df 827c 	ldr.w	r8, [pc, #636]	; 2d4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
    2ad0:	b2fd      	uxtb	r5, r7
    2ad2:	e016      	b.n	2b02 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    2ad4:	2906      	cmp	r1, #6
    2ad6:	f000 80ad 	beq.w	2c34 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1d8>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    2ada:	2904      	cmp	r1, #4
    2adc:	f000 813e 	beq.w	2d5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x300>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2ae0:	2908      	cmp	r1, #8
    2ae2:	f000 81d7 	beq.w	2e94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x438>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2ae6:	f8d8 3000 	ldr.w	r3, [r8]
    2aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2aee:	3301      	adds	r3, #1
    2af0:	42ab      	cmp	r3, r5
    2af2:	b2fc      	uxtb	r4, r7
    2af4:	f240 8084 	bls.w	2c00 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2af8:	45a2      	cmp	sl, r4
    2afa:	f105 0501 	add.w	r5, r5, #1
    2afe:	d97f      	bls.n	2c00 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    2b00:	1c67      	adds	r7, r4, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    2b02:	f1c4 0220 	rsb	r2, r4, #32
    2b06:	f1a4 0320 	sub.w	r3, r4, #32
    2b0a:	fa06 f202 	lsl.w	r2, r6, r2
    2b0e:	fa2b f104 	lsr.w	r1, fp, r4
    2b12:	fa26 f303 	lsr.w	r3, r6, r3
    2b16:	4311      	orrs	r1, r2
    2b18:	4319      	orrs	r1, r3
    2b1a:	07c9      	lsls	r1, r1, #31
    2b1c:	d5e3      	bpl.n	2ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    2b1e:	9901      	ldr	r1, [sp, #4]
    2b20:	40e1      	lsrs	r1, r4
    2b22:	4311      	orrs	r1, r2
    2b24:	4319      	orrs	r1, r3
    2b26:	07c9      	lsls	r1, r1, #31
    2b28:	d5dd      	bpl.n	2ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    2b2a:	4b89      	ldr	r3, [pc, #548]	; (2d50 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f4>)
    2b2c:	18e3      	adds	r3, r4, r3
    2b2e:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    2b30:	681a      	ldr	r2, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    2b32:	f3c2 6103 	ubfx	r1, r2, #24, #4
    2b36:	2902      	cmp	r1, #2
    2b38:	d1cc      	bne.n	2ad4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x78>
      msg.flags.extended = (bool)(code & (1UL << 21));
    2b3a:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2b3e:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2b40:	2900      	cmp	r1, #0
    2b42:	bf14      	ite	ne
    2b44:	f04f 0c01 	movne.w	ip, #1
    2b48:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2b4c:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2b50:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2b54:	d17f      	bne.n	2c56 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    2b56:	0c80      	lsrs	r0, r0, #18
    2b58:	9004      	str	r0, [sp, #16]
      msg.timestamp = code & 0xFFFF;
    2b5a:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2b5e:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2b62:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2b66:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.mb = mb_num;
    2b6a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2b6e:	f892 2915 	ldrb.w	r2, [r2, #2325]	; 0x915
    2b72:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2b76:	689a      	ldr	r2, [r3, #8]
    2b78:	f88d 201f 	strb.w	r2, [sp, #31]
    2b7c:	689a      	ldr	r2, [r3, #8]
    2b7e:	0a12      	lsrs	r2, r2, #8
    2b80:	f88d 201e 	strb.w	r2, [sp, #30]
    2b84:	689a      	ldr	r2, [r3, #8]
    2b86:	0c12      	lsrs	r2, r2, #16
    2b88:	f88d 201d 	strb.w	r2, [sp, #29]
    2b8c:	689a      	ldr	r2, [r3, #8]
    2b8e:	0e12      	lsrs	r2, r2, #24
    2b90:	f88d 201c 	strb.w	r2, [sp, #28]
    2b94:	68da      	ldr	r2, [r3, #12]
    2b96:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    2b9a:	68da      	ldr	r2, [r3, #12]
    2b9c:	0a12      	lsrs	r2, r2, #8
    2b9e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2ba2:	68da      	ldr	r2, [r3, #12]
    2ba4:	0c12      	lsrs	r2, r2, #16
    2ba6:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    2baa:	68da      	ldr	r2, [r3, #12]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2bac:	2900      	cmp	r1, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2bae:	ea4f 6212 	mov.w	r2, r2, lsr #24
    2bb2:	f88d 2020 	strb.w	r2, [sp, #32]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2bb6:	bf14      	ite	ne
    2bb8:	f04f 628c 	movne.w	r2, #73400320	; 0x4600000
    2bbc:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
    2bc0:	601a      	str	r2, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    2bc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2bc6:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    2bca:	2301      	movs	r3, #1
    2bcc:	40a3      	lsls	r3, r4
    2bce:	4313      	orrs	r3, r2
    2bd0:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2bd4:	9a04      	ldr	r2, [sp, #16]
    2bd6:	4621      	mov	r1, r4
    2bd8:	4648      	mov	r0, r9
    2bda:	f7ff f8d1 	bl	1d80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2bde:	2800      	cmp	r0, #0
    2be0:	f040 8153 	bne.w	2e8a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42e>
      frame_distribution(msg);
    2be4:	a904      	add	r1, sp, #16
    2be6:	4648      	mov	r0, r9
    2be8:	f7ff fdf8 	bl	27dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    2bec:	a804      	add	r0, sp, #16
    2bee:	f3af 8000 	nop.w
      ext_output2(msg);
    2bf2:	a804      	add	r0, sp, #16
    2bf4:	f3af 8000 	nop.w
      ext_output3(msg);
    2bf8:	a804      	add	r0, sp, #16
    2bfa:	f3af 8000 	nop.w
    }
    2bfe:	e772      	b.n	2ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    2c00:	4e52      	ldr	r6, [pc, #328]	; (2d4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    2c02:	4d54      	ldr	r5, [pc, #336]	; (2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f8>)
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    2c04:	6a34      	ldr	r4, [r6, #32]
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    2c06:	682b      	ldr	r3, [r5, #0]
    2c08:	ea84 0203 	eor.w	r2, r4, r3
    2c0c:	4b52      	ldr	r3, [pc, #328]	; (2d58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2fc>)
    2c0e:	4013      	ands	r3, r2
    2c10:	b13b      	cbz	r3, 2c22 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
        uint16_t size() { return _available; }
    2c12:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    2c16:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
    2c1a:	b29b      	uxth	r3, r3
    if ( busESR1.size() < busESR1.capacity() ) {
    2c1c:	2b0f      	cmp	r3, #15
    2c1e:	f240 8198 	bls.w	2f52 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f6>
  FLEXCANb_ESR1(_bus) |= esr1;
    2c22:	4a4a      	ldr	r2, [pc, #296]	; (2d4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    2c24:	6a13      	ldr	r3, [r2, #32]
    2c26:	4323      	orrs	r3, r4
    2c28:	6213      	str	r3, [r2, #32]
  asm volatile ("dsb");	
    2c2a:	f3bf 8f4f 	dsb	sy
}
    2c2e:	b017      	add	sp, #92	; 0x5c
    2c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c34:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c38:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c3a:	2900      	cmp	r1, #0
    2c3c:	bf14      	ite	ne
    2c3e:	f04f 0c01 	movne.w	ip, #1
    2c42:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c46:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c4a:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c4e:	d105      	bne.n	2c5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x200>
    2c50:	0c80      	lsrs	r0, r0, #18
    2c52:	9004      	str	r0, [sp, #16]
    2c54:	e004      	b.n	2c60 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x204>
    2c56:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c58:	2101      	movs	r1, #1
    2c5a:	e77e      	b.n	2b5a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c5c:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c5e:	2101      	movs	r1, #1
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    2c60:	2001      	movs	r0, #1
    2c62:	f88d 0019 	strb.w	r0, [sp, #25]
    2c66:	e778      	b.n	2b5a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    2c68:	068a      	lsls	r2, r1, #26
    2c6a:	f57f af12 	bpl.w	2a92 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    2c6e:	0685      	lsls	r5, r0, #26
    2c70:	f57f af0f 	bpl.w	2a92 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    2c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
      msg.timestamp = code & 0xFFFF;
    2c78:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2c7c:	f3c2 4103 	ubfx	r1, r2, #16, #4
    2c80:	f88d 101b 	strb.w	r1, [sp, #27]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c84:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2c88:	4c30      	ldr	r4, [pc, #192]	; (2d4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c8a:	f402 1000 	and.w	r0, r2, #2097152	; 0x200000
    2c8e:	42b0      	cmp	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c90:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.remote = (bool)(code & (1UL << 20));
    2c94:	f3c2 5000 	ubfx	r0, r2, #20, #1
    2c98:	f88d 0018 	strb.w	r0, [sp, #24]
      msg.idhit = code >> 23;
    2c9c:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.flags.extended = (bool)(code & (1UL << 21));
    2ca0:	bf12      	itee	ne
    2ca2:	2001      	movne	r0, #1
    2ca4:	4630      	moveq	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2ca6:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    2ca8:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.idhit = code >> 23;
    2cac:	f88d 2016 	strb.w	r2, [sp, #22]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2cb0:	9104      	str	r1, [sp, #16]
    2cb2:	a808      	add	r0, sp, #32
      msg.idhit = code >> 23;
    2cb4:	2200      	movs	r2, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2cb6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    2cba:	40d1      	lsrs	r1, r2
    2cbc:	3208      	adds	r2, #8
    2cbe:	2a20      	cmp	r2, #32
    2cc0:	f800 1d01 	strb.w	r1, [r0, #-1]!
    2cc4:	d1f7      	bne.n	2cb6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x25a>
    2cc6:	4821      	ldr	r0, [pc, #132]	; (2d4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    2cc8:	a909      	add	r1, sp, #36	; 0x24
    2cca:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    2cce:	40da      	lsrs	r2, r3
    2cd0:	3308      	adds	r3, #8
    2cd2:	2b20      	cmp	r3, #32
    2cd4:	f801 2d01 	strb.w	r2, [r1, #-1]!
    2cd8:	d1f7      	bne.n	2cca <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26e>
      msg.bus = busNumber;
    2cda:	f509 5300 	add.w	r3, r9, #8192	; 0x2000
    2cde:	f893 3915 	ldrb.w	r3, [r3, #2325]	; 0x915
    2ce2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    2ce6:	2363      	movs	r3, #99	; 0x63
    2ce8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      (void)FLEXCANb_TIMER(_bus);
    2cec:	6883      	ldr	r3, [r0, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2cee:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2cf0:	f043 0320 	orr.w	r3, r3, #32
    2cf4:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    2cf6:	9b01      	ldr	r3, [sp, #4]
    2cf8:	065c      	lsls	r4, r3, #25
    2cfa:	d503      	bpl.n	2d04 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2a8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2cfc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d02:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	0618      	lsls	r0, r3, #24
    2d08:	d504      	bpl.n	2d14 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2b8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2d0a:	4a10      	ldr	r2, [pc, #64]	; (2d4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    2d0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2d12:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    2d14:	a904      	add	r1, sp, #16
    2d16:	4648      	mov	r0, r9
    2d18:	f7ff fd60 	bl	27dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    2d1c:	a804      	add	r0, sp, #16
    2d1e:	f3af 8000 	nop.w
      ext_output2(msg);
    2d22:	a804      	add	r0, sp, #16
    2d24:	f3af 8000 	nop.w
      ext_output3(msg);
    2d28:	a804      	add	r0, sp, #16
    2d2a:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    2d2e:	9904      	ldr	r1, [sp, #16]
    2d30:	4648      	mov	r0, r9
    2d32:	f7fe ffab 	bl	1c8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    2d36:	2800      	cmp	r0, #0
    2d38:	f43f aeab 	beq.w	2a92 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    2d3c:	a904      	add	r1, sp, #16
    2d3e:	4648      	mov	r0, r9
    2d40:	f7ff fcee 	bl	2720 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2d44:	e6a5      	b.n	2a92 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    2d46:	bf00      	nop
    2d48:	0000b698 	.word	0x0000b698
    2d4c:	40024000 	.word	0x40024000
    2d50:	04002408 	.word	0x04002408
    2d54:	1fff0ee0 	.word	0x1fff0ee0
    2d58:	0007ffbf 	.word	0x0007ffbf
      msg.flags.extended = (bool)(code & (1UL << 21));
    2d5c:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    2d60:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2d62:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    2d64:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2d68:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2d6c:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2d70:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2d74:	bf14      	ite	ne
    2d76:	2001      	movne	r0, #1
    2d78:	2000      	moveq	r0, #0
    2d7a:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    2d7e:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    2d82:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2d86:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2d8a:	6898      	ldr	r0, [r3, #8]
    2d8c:	f88d 001f 	strb.w	r0, [sp, #31]
    2d90:	6898      	ldr	r0, [r3, #8]
    2d92:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2d96:	f88d 001e 	strb.w	r0, [sp, #30]
    2d9a:	6898      	ldr	r0, [r3, #8]
    2d9c:	ea4f 4010 	mov.w	r0, r0, lsr #16
    2da0:	f88d 001d 	strb.w	r0, [sp, #29]
    2da4:	6898      	ldr	r0, [r3, #8]
    2da6:	ea4f 6010 	mov.w	r0, r0, lsr #24
    2daa:	f88d 001c 	strb.w	r0, [sp, #28]
    2dae:	68d8      	ldr	r0, [r3, #12]
    2db0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    2db4:	68d8      	ldr	r0, [r3, #12]
    2db6:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2dba:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    2dbe:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2dc0:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    2dc4:	bf08      	it	eq
    2dc6:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2dc8:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2dca:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2dcc:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2dd0:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2dd4:	68d8      	ldr	r0, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2dd6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2dda:	0e00      	lsrs	r0, r0, #24
    2ddc:	f88d 0020 	strb.w	r0, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2de0:	b129      	cbz	r1, 2dee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x392>
    2de2:	a804      	add	r0, sp, #16
    2de4:	9203      	str	r2, [sp, #12]
    2de6:	9302      	str	r3, [sp, #8]
    2de8:	4788      	blx	r1
    2dea:	9a03      	ldr	r2, [sp, #12]
    2dec:	9b02      	ldr	r3, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    2dee:	f8d2 2908 	ldr.w	r2, [r2, #2312]	; 0x908
    2df2:	b11a      	cbz	r2, 2dfc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a0>
    2df4:	a804      	add	r0, sp, #16
    2df6:	9302      	str	r3, [sp, #8]
    2df8:	4790      	blx	r2
    2dfa:	9b02      	ldr	r3, [sp, #8]
    2dfc:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    2e00:	9202      	str	r2, [sp, #8]
    2e02:	f8b2 2b1e 	ldrh.w	r2, [r2, #2846]	; 0xb1e
    2e06:	b292      	uxth	r2, r2
      if ( txBuffer.size() ) {
    2e08:	2a00      	cmp	r2, #0
    2e0a:	f000 80b1 	beq.w	2f70 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x514>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2e0e:	9b02      	ldr	r3, [sp, #8]
    2e10:	f8b3 1b1a 	ldrh.w	r1, [r3, #2842]	; 0xb1a
    2e14:	231a      	movs	r3, #26
    2e16:	f001 010f 	and.w	r1, r1, #15
    2e1a:	fb03 9101 	mla	r1, r3, r1, r9
    2e1e:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    2e22:	3112      	adds	r1, #18
    2e24:	2218      	movs	r2, #24
    2e26:	a810      	add	r0, sp, #64	; 0x40
    2e28:	f000 f958 	bl	30dc <memcpy>
        memmove(&frame, buf, sizeof(frame));
    2e2c:	ab0a      	add	r3, sp, #40	; 0x28
    2e2e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    2e32:	469e      	mov	lr, r3
    2e34:	9303      	str	r3, [sp, #12]
    2e36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2e3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2e3e:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2e42:	e88e 0003 	stmia.w	lr, {r0, r1}
        if ( frame.mb == -1 ) {
    2e46:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
    2e4a:	1c5a      	adds	r2, r3, #1
    2e4c:	f000 809b 	beq.w	2f86 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x52a>
        else if ( frame.mb == mb_num ) {
    2e50:	429c      	cmp	r4, r3
    2e52:	f47f ae48 	bne.w	2ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(frame.mb, frame);
    2e56:	9a03      	ldr	r2, [sp, #12]
    2e58:	b2e1      	uxtb	r1, r4
    2e5a:	4648      	mov	r0, r9
    2e5c:	f7fe fa9c 	bl	1398 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2e60:	9a02      	ldr	r2, [sp, #8]
    2e62:	f8b2 3b1a 	ldrh.w	r3, [r2, #2842]	; 0xb1a
    2e66:	3301      	adds	r3, #1
    2e68:	f003 031f 	and.w	r3, r3, #31
    2e6c:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    if ( _available ) _available--;
    2e70:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    2e74:	b29b      	uxth	r3, r3
    2e76:	2b00      	cmp	r3, #0
    2e78:	f43f ae35 	beq.w	2ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    2e7c:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    2e80:	3b01      	subs	r3, #1
    2e82:	b29b      	uxth	r3, r3
    2e84:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    2e88:	e62d      	b.n	2ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2e8a:	a904      	add	r1, sp, #16
    2e8c:	4648      	mov	r0, r9
    2e8e:	f7ff fc47 	bl	2720 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2e92:	e6a7      	b.n	2be4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x188>
      msg.flags.extended = (bool)(code & (1UL << 21));
    2e94:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    2e98:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2e9a:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    2e9c:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2ea0:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2ea4:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2ea8:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2eac:	bf14      	ite	ne
    2eae:	2001      	movne	r0, #1
    2eb0:	2000      	moveq	r0, #0
    2eb2:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    2eb6:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    2eba:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2ebe:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2ec2:	6898      	ldr	r0, [r3, #8]
    2ec4:	f88d 001f 	strb.w	r0, [sp, #31]
    2ec8:	6898      	ldr	r0, [r3, #8]
    2eca:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2ece:	f88d 001e 	strb.w	r0, [sp, #30]
    2ed2:	6898      	ldr	r0, [r3, #8]
    2ed4:	ea4f 4010 	mov.w	r0, r0, lsr #16
    2ed8:	f88d 001d 	strb.w	r0, [sp, #29]
    2edc:	6898      	ldr	r0, [r3, #8]
    2ede:	ea4f 6010 	mov.w	r0, r0, lsr #24
    2ee2:	f88d 001c 	strb.w	r0, [sp, #28]
    2ee6:	68d8      	ldr	r0, [r3, #12]
    2ee8:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    2eec:	68d8      	ldr	r0, [r3, #12]
    2eee:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2ef2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    2ef6:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2ef8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    2efc:	bf08      	it	eq
    2efe:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2f00:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2f02:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2f04:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2f08:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2f0c:	68db      	ldr	r3, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2f0e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2f12:	0e1b      	lsrs	r3, r3, #24
    2f14:	f88d 3020 	strb.w	r3, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2f18:	b119      	cbz	r1, 2f22 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4c6>
    2f1a:	a804      	add	r0, sp, #16
    2f1c:	9202      	str	r2, [sp, #8]
    2f1e:	4788      	blx	r1
    2f20:	9a02      	ldr	r2, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    2f22:	f8d2 3908 	ldr.w	r3, [r2, #2312]	; 0x908
    2f26:	b10b      	cbz	r3, 2f2c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4d0>
    2f28:	a804      	add	r0, sp, #16
    2f2a:	4798      	blx	r3
        uint16_t size() { return _available; }
    2f2c:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    2f30:	9302      	str	r3, [sp, #8]
    2f32:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
    2f36:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    2f38:	2b00      	cmp	r3, #0
    2f3a:	f47f af68 	bne.w	2e0e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b2>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2f3e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    2f42:	2301      	movs	r3, #1
    2f44:	40a3      	lsls	r3, r4
    2f46:	4313      	orrs	r3, r2
    2f48:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    2f4c:	e5cb      	b.n	2ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2f4e:	682b      	ldr	r3, [r5, #0]
    2f50:	e5bb      	b.n	2aca <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6e>
      busESR1.write(esr1);
    2f52:	f509 50e6 	add.w	r0, r9, #7360	; 0x1cc0
    2f56:	4621      	mov	r1, r4
    2f58:	3010      	adds	r0, #16
    2f5a:	f7fe fe4f 	bl	1bfc <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>
      busECR.write(FLEXCANb_ECR(_bus));
    2f5e:	69f1      	ldr	r1, [r6, #28]
    2f60:	f509 50ec 	add.w	r0, r9, #7552	; 0x1d80
    2f64:	b289      	uxth	r1, r1
    2f66:	3018      	adds	r0, #24
    2f68:	f7fe fe6c 	bl	1c44 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>
      last_esr1 = esr1;
    2f6c:	602c      	str	r4, [r5, #0]
    2f6e:	e658      	b.n	2c22 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2f70:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    2f74:	2201      	movs	r2, #1
    2f76:	40a2      	lsls	r2, r4
    2f78:	430a      	orrs	r2, r1
    2f7a:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    2f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    2f82:	601a      	str	r2, [r3, #0]
    2f84:	e5af      	b.n	2ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(mb_num, frame);
    2f86:	9a03      	ldr	r2, [sp, #12]
    2f88:	4621      	mov	r1, r4
    2f8a:	e766      	b.n	2e5a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>

00002f8c <_GLOBAL__sub_I_Can0>:
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    2f8c:	4832      	ldr	r0, [pc, #200]	; (3058 <_GLOBAL__sub_I_Can0+0xcc>)
    2f8e:	4933      	ldr	r1, [pc, #204]	; (305c <_GLOBAL__sub_I_Can0+0xd0>)
}
    2f90:	b430      	push	{r4, r5}
class Circular_Buffer {
    2f92:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
  if ( _bus == CAN0 ) _CAN0 = this;
    2f96:	4c32      	ldr	r4, [pc, #200]	; (3060 <_GLOBAL__sub_I_Can0+0xd4>)
  if ( _bus == CAN1 ) _CAN1 = this;
    2f98:	4d32      	ldr	r5, [pc, #200]	; (3064 <_GLOBAL__sub_I_Can0+0xd8>)
  if ( _bus == CAN0 ) _CAN0 = this;
    2f9a:	6020      	str	r0, [r4, #0]
    2f9c:	2300      	movs	r3, #0
    2f9e:	8283      	strh	r3, [r0, #20]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    2fa0:	f500 5c00 	add.w	ip, r0, #8192	; 0x2000
    2fa4:	82c3      	strh	r3, [r0, #22]
    2fa6:	4c30      	ldr	r4, [pc, #192]	; (3068 <_GLOBAL__sub_I_Can0+0xdc>)
    2fa8:	8303      	strh	r3, [r0, #24]
    2faa:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    2fae:	f8a2 3b1c 	strh.w	r3, [r2, #2844]	; 0xb1c
    2fb2:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    2fb6:	f8a2 3cd0 	strh.w	r3, [r2, #3280]	; 0xcd0
    2fba:	f8a2 3cd2 	strh.w	r3, [r2, #3282]	; 0xcd2
    2fbe:	f8a2 3cd4 	strh.w	r3, [r2, #3284]	; 0xcd4
    2fc2:	f8a2 3d98 	strh.w	r3, [r2, #3480]	; 0xd98
    2fc6:	f8a2 3d9a 	strh.w	r3, [r2, #3482]	; 0xd9a
    2fca:	f8a2 3d9c 	strh.w	r3, [r2, #3484]	; 0xd9c
    2fce:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    2fd2:	6004      	str	r4, [r0, #0]
    2fd4:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
    2fd8:	4c24      	ldr	r4, [pc, #144]	; (306c <_GLOBAL__sub_I_Can0+0xe0>)
    2fda:	f88c 3700 	strb.w	r3, [ip, #1792]	; 0x700
    2fde:	f8cc 390c 	str.w	r3, [ip, #2316]	; 0x90c
    2fe2:	f88c 3701 	strb.w	r3, [ip, #1793]	; 0x701
    2fe6:	f8cc 3910 	str.w	r3, [ip, #2320]	; 0x910
    2fea:	828b      	strh	r3, [r1, #20]
    2fec:	f88c 3914 	strb.w	r3, [ip, #2324]	; 0x914
    2ff0:	82cb      	strh	r3, [r1, #22]
    2ff2:	600c      	str	r4, [r1, #0]
    2ff4:	830b      	strh	r3, [r1, #24]
    2ff6:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    2ffa:	f8a2 3b1c 	strh.w	r3, [r2, #2844]	; 0xb1c
    2ffe:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    3002:	f8a2 3cd0 	strh.w	r3, [r2, #3280]	; 0xcd0
    3006:	f8a2 3cd2 	strh.w	r3, [r2, #3282]	; 0xcd2
    300a:	f8a2 3cd4 	strh.w	r3, [r2, #3284]	; 0xcd4
    300e:	f8a2 3d98 	strh.w	r3, [r2, #3480]	; 0xd98
    3012:	f8a2 3d9a 	strh.w	r3, [r2, #3482]	; 0xd9a
    3016:	f8a2 3d9c 	strh.w	r3, [r2, #3484]	; 0xd9c
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    301a:	4a15      	ldr	r2, [pc, #84]	; (3070 <_GLOBAL__sub_I_Can0+0xe4>)
    301c:	f880 3700 	strb.w	r3, [r0, #1792]	; 0x700
    3020:	b084      	sub	sp, #16
    3022:	f880 3701 	strb.w	r3, [r0, #1793]	; 0x701
    3026:	6814      	ldr	r4, [r2, #0]
    3028:	9401      	str	r4, [sp, #4]
	return ret;
    302a:	9c01      	ldr	r4, [sp, #4]
    302c:	f8c0 390c 	str.w	r3, [r0, #2316]	; 0x90c
    3030:	f8c0 3910 	str.w	r3, [r0, #2320]	; 0x910
    3034:	f880 3914 	strb.w	r3, [r0, #2324]	; 0x914
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3038:	6813      	ldr	r3, [r2, #0]
    303a:	9302      	str	r3, [sp, #8]
  if ( _bus == CAN1 ) _CAN1 = this;
    303c:	6029      	str	r1, [r5, #0]
	elapsedMillis(void) { ms = millis(); }
    303e:	4b0d      	ldr	r3, [pc, #52]	; (3074 <_GLOBAL__sub_I_Can0+0xe8>)
	return ret;
    3040:	9902      	ldr	r1, [sp, #8]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3042:	6812      	ldr	r2, [r2, #0]
    3044:	9203      	str	r2, [sp, #12]
    3046:	6019      	str	r1, [r3, #0]
    3048:	480b      	ldr	r0, [pc, #44]	; (3078 <_GLOBAL__sub_I_Can0+0xec>)
	return ret;
    304a:	9a03      	ldr	r2, [sp, #12]
    304c:	4b0b      	ldr	r3, [pc, #44]	; (307c <_GLOBAL__sub_I_Can0+0xf0>)
    304e:	6004      	str	r4, [r0, #0]
    3050:	601a      	str	r2, [r3, #0]
    3052:	b004      	add	sp, #16
    3054:	bc30      	pop	{r4, r5}
    3056:	4770      	bx	lr
    3058:	1fff0ee8 	.word	0x1fff0ee8
    305c:	1fff3800 	.word	0x1fff3800
    3060:	1fff6118 	.word	0x1fff6118
    3064:	1fff611c 	.word	0x1fff611c
    3068:	0000b618 	.word	0x0000b618
    306c:	0000b63c 	.word	0x0000b63c
    3070:	1fff612c 	.word	0x1fff612c
    3074:	1fff6124 	.word	0x1fff6124
    3078:	1fff6128 	.word	0x1fff6128
    307c:	1fff6120 	.word	0x1fff6120

00003080 <Print::println()>:
{
    3080:	b500      	push	{lr}
	return write(buf, 2);
    3082:	6803      	ldr	r3, [r0, #0]
{
    3084:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    3086:	f640 220d 	movw	r2, #2573	; 0xa0d
    308a:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    308e:	685b      	ldr	r3, [r3, #4]
    3090:	2202      	movs	r2, #2
    3092:	a901      	add	r1, sp, #4
    3094:	4798      	blx	r3
}
    3096:	b003      	add	sp, #12
    3098:	f85d fb04 	ldr.w	pc, [sp], #4

0000309c <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    309c:	4b03      	ldr	r3, [pc, #12]	; (30ac <_write+0x10>)
    309e:	2802      	cmp	r0, #2
    30a0:	bf88      	it	hi
    30a2:	4603      	movhi	r3, r0
    30a4:	4618      	mov	r0, r3
    30a6:	681b      	ldr	r3, [r3, #0]
    30a8:	685b      	ldr	r3, [r3, #4]
    30aa:	4718      	bx	r3
    30ac:	1fff0758 	.word	0x1fff0758

000030b0 <Print::printf(char const*, ...)>:
{
    30b0:	b40e      	push	{r1, r2, r3}
    30b2:	b500      	push	{lr}
    30b4:	b082      	sub	sp, #8
    30b6:	aa03      	add	r2, sp, #12
    30b8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    30bc:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    30be:	f002 fb17 	bl	56f0 <vdprintf>
}
    30c2:	b002      	add	sp, #8
    30c4:	f85d eb04 	ldr.w	lr, [sp], #4
    30c8:	b003      	add	sp, #12
    30ca:	4770      	bx	lr

000030cc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    30cc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    30ce:	f7fd fee9 	bl	ea4 <setup>
	while (1) {
		loop();
    30d2:	f7fe fc07 	bl	18e4 <loop>
		yield();
    30d6:	f001 f973 	bl	43c0 <yield>
	while (1) {
    30da:	e7fa      	b.n	30d2 <main+0x6>

000030dc <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    30dc:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    30de:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    30e2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    30e6:	d16f      	bne.n	31c8 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    30e8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    30ea:	d341      	bcc.n	3170 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    30ec:	f851 3b04 	ldr.w	r3, [r1], #4
    30f0:	f840 3b04 	str.w	r3, [r0], #4
    30f4:	f851 3b04 	ldr.w	r3, [r1], #4
    30f8:	f840 3b04 	str.w	r3, [r0], #4
    30fc:	f851 3b04 	ldr.w	r3, [r1], #4
    3100:	f840 3b04 	str.w	r3, [r0], #4
    3104:	f851 3b04 	ldr.w	r3, [r1], #4
    3108:	f840 3b04 	str.w	r3, [r0], #4
    310c:	f851 3b04 	ldr.w	r3, [r1], #4
    3110:	f840 3b04 	str.w	r3, [r0], #4
    3114:	f851 3b04 	ldr.w	r3, [r1], #4
    3118:	f840 3b04 	str.w	r3, [r0], #4
    311c:	f851 3b04 	ldr.w	r3, [r1], #4
    3120:	f840 3b04 	str.w	r3, [r0], #4
    3124:	f851 3b04 	ldr.w	r3, [r1], #4
    3128:	f840 3b04 	str.w	r3, [r0], #4
    312c:	f851 3b04 	ldr.w	r3, [r1], #4
    3130:	f840 3b04 	str.w	r3, [r0], #4
    3134:	f851 3b04 	ldr.w	r3, [r1], #4
    3138:	f840 3b04 	str.w	r3, [r0], #4
    313c:	f851 3b04 	ldr.w	r3, [r1], #4
    3140:	f840 3b04 	str.w	r3, [r0], #4
    3144:	f851 3b04 	ldr.w	r3, [r1], #4
    3148:	f840 3b04 	str.w	r3, [r0], #4
    314c:	f851 3b04 	ldr.w	r3, [r1], #4
    3150:	f840 3b04 	str.w	r3, [r0], #4
    3154:	f851 3b04 	ldr.w	r3, [r1], #4
    3158:	f840 3b04 	str.w	r3, [r0], #4
    315c:	f851 3b04 	ldr.w	r3, [r1], #4
    3160:	f840 3b04 	str.w	r3, [r0], #4
    3164:	f851 3b04 	ldr.w	r3, [r1], #4
    3168:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    316c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    316e:	d2bd      	bcs.n	30ec <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3170:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3172:	d311      	bcc.n	3198 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3174:	f851 3b04 	ldr.w	r3, [r1], #4
    3178:	f840 3b04 	str.w	r3, [r0], #4
    317c:	f851 3b04 	ldr.w	r3, [r1], #4
    3180:	f840 3b04 	str.w	r3, [r0], #4
    3184:	f851 3b04 	ldr.w	r3, [r1], #4
    3188:	f840 3b04 	str.w	r3, [r0], #4
    318c:	f851 3b04 	ldr.w	r3, [r1], #4
    3190:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3194:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3196:	d2ed      	bcs.n	3174 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3198:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    319a:	d305      	bcc.n	31a8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    319c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    31a0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    31a4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    31a6:	d2f9      	bcs.n	319c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    31a8:	3204      	adds	r2, #4
	beq	.Ldone
    31aa:	d00a      	beq.n	31c2 <memcpy+0xe6>

	lsls	r2, r2, #31
    31ac:	07d2      	lsls	r2, r2, #31
	itt ne
    31ae:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    31b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    31b4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    31b8:	d303      	bcc.n	31c2 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    31ba:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    31bc:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    31be:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    31c0:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    31c2:	bc01      	pop	{r0}
#endif
	bx	lr
    31c4:	4770      	bx	lr
    31c6:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    31c8:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    31ca:	d34a      	bcc.n	3262 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    31cc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    31d0:	d011      	beq.n	31f6 <memcpy+0x11a>

	rsb	r3, #4
    31d2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    31d6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    31d8:	07db      	lsls	r3, r3, #31
	itt ne
    31da:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    31dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    31e0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    31e4:	d307      	bcc.n	31f6 <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    31e6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    31ea:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    31ee:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    31f2:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    31f6:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    31fa:	f43f af75 	beq.w	30e8 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    31fe:	b430      	push	{r4, r5}
	subs	r2, #4
    3200:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    3202:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    3204:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    3208:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    320c:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    320e:	d019      	beq.n	3244 <memcpy+0x168>
	cmp	r3, #3
    3210:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    3212:	d00b      	beq.n	322c <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    3214:	0a24      	lsrs	r4, r4, #8
    3216:	f851 3b04 	ldr.w	r3, [r1], #4
    321a:	061d      	lsls	r5, r3, #24
    321c:	ea44 0405 	orr.w	r4, r4, r5
    3220:	f840 4b04 	str.w	r4, [r0], #4
    3224:	461c      	mov	r4, r3
    3226:	3a04      	subs	r2, #4
    3228:	d2f4      	bcs.n	3214 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    322a:	e016      	b.n	325a <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    322c:	0e24      	lsrs	r4, r4, #24
    322e:	f851 3b04 	ldr.w	r3, [r1], #4
    3232:	021d      	lsls	r5, r3, #8
    3234:	ea44 0405 	orr.w	r4, r4, r5
    3238:	f840 4b04 	str.w	r4, [r0], #4
    323c:	461c      	mov	r4, r3
    323e:	3a04      	subs	r2, #4
    3240:	d2f4      	bcs.n	322c <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    3242:	e00a      	b.n	325a <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    3244:	0c24      	lsrs	r4, r4, #16
    3246:	f851 3b04 	ldr.w	r3, [r1], #4
    324a:	041d      	lsls	r5, r3, #16
    324c:	ea44 0405 	orr.w	r4, r4, r5
    3250:	f840 4b04 	str.w	r4, [r0], #4
    3254:	461c      	mov	r4, r3
    3256:	3a04      	subs	r2, #4
    3258:	d2f4      	bcs.n	3244 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    325a:	3204      	adds	r2, #4
	subs	r1, ip
    325c:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    3260:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3262:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3264:	d3a0      	bcc.n	31a8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3266:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3268:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    326c:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    3270:	d2f9      	bcs.n	3266 <memcpy+0x18a>

	ldrb	r3, [r1]
    3272:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3274:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3276:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3278:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    327a:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    327c:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    327e:	bc01      	pop	{r0}
#endif
	bx	lr
    3280:	4770      	bx	lr
    3282:	bf00      	nop

00003284 <fault_isr>:
{
    3284:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3286:	4c0f      	ldr	r4, [pc, #60]	; (32c4 <fault_isr+0x40>)
    3288:	6b63      	ldr	r3, [r4, #52]	; 0x34
    328a:	0358      	lsls	r0, r3, #13
    328c:	d40d      	bmi.n	32aa <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    328e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3290:	0559      	lsls	r1, r3, #21
    3292:	d40f      	bmi.n	32b4 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3294:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3296:	051a      	lsls	r2, r3, #20
    3298:	d411      	bmi.n	32be <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    329a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    329c:	04db      	lsls	r3, r3, #19
    329e:	d5f3      	bpl.n	3288 <fault_isr+0x4>
    32a0:	f000 f812 	bl	32c8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    32a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    32a6:	0358      	lsls	r0, r3, #13
    32a8:	d5f1      	bpl.n	328e <fault_isr+0xa>
    32aa:	f000 faa7 	bl	37fc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    32ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    32b0:	0559      	lsls	r1, r3, #21
    32b2:	d5ef      	bpl.n	3294 <fault_isr+0x10>
    32b4:	f000 f808 	bl	32c8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    32b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    32ba:	051a      	lsls	r2, r3, #20
    32bc:	d5ed      	bpl.n	329a <fault_isr+0x16>
    32be:	f000 f803 	bl	32c8 <unused_isr>
    32c2:	e7ea      	b.n	329a <fault_isr+0x16>
    32c4:	40048000 	.word	0x40048000

000032c8 <unused_isr>:
{
    32c8:	b508      	push	{r3, lr}
	fault_isr();
    32ca:	f7ff ffdb 	bl	3284 <fault_isr>
    32ce:	bf00      	nop

000032d0 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    32d0:	4b01      	ldr	r3, [pc, #4]	; (32d8 <startup_early_hook+0x8>)
    32d2:	2210      	movs	r2, #16
    32d4:	801a      	strh	r2, [r3, #0]
}
    32d6:	4770      	bx	lr
    32d8:	40052000 	.word	0x40052000

000032dc <startup_late_hook>:
static void startup_default_late_hook(void) {}
    32dc:	4770      	bx	lr
    32de:	bf00      	nop

000032e0 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    32e0:	490b      	ldr	r1, [pc, #44]	; (3310 <_sbrk+0x30>)
    32e2:	680a      	ldr	r2, [r1, #0]
	if (incr != 0) {
    32e4:	b148      	cbz	r0, 32fa <_sbrk+0x1a>
{
    32e6:	b508      	push	{r3, lr}
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    32e8:	46ec      	mov	ip, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    32ea:	1813      	adds	r3, r2, r0
    32ec:	f5ac 5000 	sub.w	r0, ip, #8192	; 0x2000
    32f0:	4283      	cmp	r3, r0
    32f2:	d204      	bcs.n	32fe <_sbrk+0x1e>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    32f4:	600b      	str	r3, [r1, #0]
	}
	return prev;
}
    32f6:	4610      	mov	r0, r2
    32f8:	bd08      	pop	{r3, pc}
    32fa:	4610      	mov	r0, r2
    32fc:	4770      	bx	lr
			errno = ENOMEM;
    32fe:	f002 fba3 	bl	5a48 <__errno>
    3302:	230c      	movs	r3, #12
			return (void *)-1;
    3304:	f04f 32ff 	mov.w	r2, #4294967295
			errno = ENOMEM;
    3308:	6003      	str	r3, [r0, #0]
}
    330a:	4610      	mov	r0, r2
    330c:	bd08      	pop	{r3, pc}
    330e:	bf00      	nop
    3310:	1fff0754 	.word	0x1fff0754

00003314 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    3314:	2000      	movs	r0, #0
    3316:	4770      	bx	lr

00003318 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    3318:	f04f 30ff 	mov.w	r0, #4294967295
    331c:	4770      	bx	lr
    331e:	bf00      	nop

00003320 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3324:	604b      	str	r3, [r1, #4]
	return 0;
}
    3326:	2000      	movs	r0, #0
    3328:	4770      	bx	lr
    332a:	bf00      	nop

0000332c <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    332c:	2001      	movs	r0, #1
    332e:	4770      	bx	lr

00003330 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    3330:	f04f 30ff 	mov.w	r0, #4294967295
    3334:	4770      	bx	lr
    3336:	bf00      	nop

00003338 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    3338:	e7fe      	b.n	3338 <abort>
    333a:	Address 0x0000333a is out of bounds.


0000333c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    333c:	4b07      	ldr	r3, [pc, #28]	; (335c <kinetis_hsrun_disable+0x20>)
    333e:	78da      	ldrb	r2, [r3, #3]
    3340:	2a80      	cmp	r2, #128	; 0x80
    3342:	d001      	beq.n	3348 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3344:	2000      	movs	r0, #0
}
    3346:	4770      	bx	lr
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3348:	4905      	ldr	r1, [pc, #20]	; (3360 <kinetis_hsrun_disable+0x24>)
    334a:	4806      	ldr	r0, [pc, #24]	; (3364 <kinetis_hsrun_disable+0x28>)
    334c:	6448      	str	r0, [r1, #68]	; 0x44
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    334e:	2200      	movs	r2, #0
    3350:	705a      	strb	r2, [r3, #1]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3352:	78da      	ldrb	r2, [r3, #3]
    3354:	2a80      	cmp	r2, #128	; 0x80
    3356:	d0fc      	beq.n	3352 <kinetis_hsrun_disable+0x16>
		return 1;
    3358:	2001      	movs	r0, #1
    335a:	4770      	bx	lr
    335c:	4007e000 	.word	0x4007e000
    3360:	40048000 	.word	0x40048000
    3364:	22280000 	.word	0x22280000

00003368 <kinetis_hsrun_enable>:

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3368:	4b07      	ldr	r3, [pc, #28]	; (3388 <kinetis_hsrun_enable+0x20>)
    336a:	78da      	ldrb	r2, [r3, #3]
    336c:	2a01      	cmp	r2, #1
    336e:	d001      	beq.n	3374 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3370:	2000      	movs	r0, #0
}
    3372:	4770      	bx	lr
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3374:	2260      	movs	r2, #96	; 0x60
    3376:	705a      	strb	r2, [r3, #1]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3378:	78da      	ldrb	r2, [r3, #3]
    337a:	2a80      	cmp	r2, #128	; 0x80
    337c:	d1fc      	bne.n	3378 <kinetis_hsrun_enable+0x10>
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    337e:	4b03      	ldr	r3, [pc, #12]	; (338c <kinetis_hsrun_enable+0x24>)
    3380:	4a03      	ldr	r2, [pc, #12]	; (3390 <kinetis_hsrun_enable+0x28>)
    3382:	645a      	str	r2, [r3, #68]	; 0x44
		return 1;
    3384:	2001      	movs	r0, #1
    3386:	4770      	bx	lr
    3388:	4007e000 	.word	0x4007e000
    338c:	40048000 	.word	0x40048000
    3390:	02060000 	.word	0x02060000

00003394 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    3394:	f101 3cff 	add.w	ip, r1, #4294967295
{
    3398:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    339a:	4665      	mov	r5, ip
	int i=0, j;
    339c:	2400      	movs	r4, #0
    339e:	e001      	b.n	33a4 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    33a0:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    33a2:	3401      	adds	r4, #1
		digit = val % radix;
    33a4:	fbb0 fef2 	udiv	lr, r0, r2
    33a8:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    33ac:	2b09      	cmp	r3, #9
    33ae:	f103 0630 	add.w	r6, r3, #48	; 0x30
    33b2:	bf8a      	itet	hi
    33b4:	3337      	addhi	r3, #55	; 0x37
    33b6:	b2f3      	uxtbls	r3, r6
    33b8:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    33ba:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    33bc:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    33c0:	d2ee      	bcs.n	33a0 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    33c2:	1c63      	adds	r3, r4, #1
    33c4:	2200      	movs	r2, #0
    33c6:	54ca      	strb	r2, [r1, r3]
    33c8:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    33ca:	b17c      	cbz	r4, 33ec <ultoa+0x58>
		t = buf[j];
    33cc:	4662      	mov	r2, ip
    33ce:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    33d2:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    33d6:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    33da:	eba1 030c 	sub.w	r3, r1, ip
    33de:	3202      	adds	r2, #2
    33e0:	3b01      	subs	r3, #1
    33e2:	1a52      	subs	r2, r2, r1
    33e4:	4423      	add	r3, r4
    33e6:	429a      	cmp	r2, r3
		buf[i] = t;
    33e8:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    33ea:	dbef      	blt.n	33cc <ultoa+0x38>
	}
	return buf;
}
    33ec:	4608      	mov	r0, r1
    33ee:	bd70      	pop	{r4, r5, r6, pc}

000033f0 <rtc_set>:
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    33f0:	4b03      	ldr	r3, [pc, #12]	; (3400 <rtc_set+0x10>)
    33f2:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    33f4:	2110      	movs	r1, #16
	RTC_SR = 0;
    33f6:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    33f8:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    33fa:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    33fc:	6159      	str	r1, [r3, #20]
}
    33fe:	4770      	bx	lr
    3400:	4003d000 	.word	0x4003d000

00003404 <startup_middle_hook>:
}
#endif

extern void usb_init(void);

static void startup_default_middle_hook(void) {}
    3404:	4770      	bx	lr
    3406:	bf00      	nop

00003408 <_init_Teensyduino_internal_>:
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3408:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
{
    340c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3410:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    3414:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    3418:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
    341c:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    3420:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
    3424:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    3428:	4a2f      	ldr	r2, [pc, #188]	; (34e8 <_init_Teensyduino_internal_+0xe0>)
	FTM0_CNT = 0;
    342a:	4930      	ldr	r1, [pc, #192]	; (34ec <_init_Teensyduino_internal_+0xe4>)
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    342c:	4c30      	ldr	r4, [pc, #192]	; (34f0 <_init_Teensyduino_internal_+0xe8>)
	FTM1_CNT = 0;
    342e:	4d31      	ldr	r5, [pc, #196]	; (34f4 <_init_Teensyduino_internal_+0xec>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    3430:	4e31      	ldr	r6, [pc, #196]	; (34f8 <_init_Teensyduino_internal_+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    3432:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3436:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    343a:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    343c:	2000      	movs	r0, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    343e:	f64e 7eff 	movw	lr, #61439	; 0xefff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3442:	2709      	movs	r7, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    3444:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    3448:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM0_CNT = 0;
    344c:	6048      	str	r0, [r1, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    344e:	f8c1 e008 	str.w	lr, [r1, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3452:	60cb      	str	r3, [r1, #12]
	FTM0_C1SC = 0x28;
    3454:	614b      	str	r3, [r1, #20]
	FTM0_C2SC = 0x28;
    3456:	61cb      	str	r3, [r1, #28]
	FTM0_C3SC = 0x28;
    3458:	624b      	str	r3, [r1, #36]	; 0x24
	FTM0_C4SC = 0x28;
    345a:	62cb      	str	r3, [r1, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    345c:	634b      	str	r3, [r1, #52]	; 0x34
	FTM0_C6SC = 0x28;
    345e:	63cb      	str	r3, [r1, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    3460:	644b      	str	r3, [r1, #68]	; 0x44
	FTM3_C0SC = 0x28;
    3462:	60d3      	str	r3, [r2, #12]
	FTM3_C1SC = 0x28;
    3464:	6153      	str	r3, [r2, #20]
	FTM3_C2SC = 0x28;
    3466:	61d3      	str	r3, [r2, #28]
	FTM3_C3SC = 0x28;
    3468:	6253      	str	r3, [r2, #36]	; 0x24
	FTM3_C4SC = 0x28;
    346a:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM3_C5SC = 0x28;
    346c:	6353      	str	r3, [r2, #52]	; 0x34
	FTM3_C6SC = 0x28;
    346e:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM3_C7SC = 0x28;
    3470:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3472:	600f      	str	r7, [r1, #0]
	FTM1_CNT = 0;
    3474:	6068      	str	r0, [r5, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    3476:	f8c5 e008 	str.w	lr, [r5, #8]
	FTM1_C0SC = 0x28;
    347a:	60eb      	str	r3, [r5, #12]
	FTM1_C1SC = 0x28;
    347c:	616b      	str	r3, [r5, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    347e:	602f      	str	r7, [r5, #0]
	FTM2_CNT = 0;
    3480:	6060      	str	r0, [r4, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    3482:	f8c4 e008 	str.w	lr, [r4, #8]
	FTM2_C0SC = 0x28;
    3486:	60e3      	str	r3, [r4, #12]
	FTM2_C1SC = 0x28;
    3488:	6163      	str	r3, [r4, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    348a:	6027      	str	r7, [r4, #0]
	FTM3_CNT = 0;
    348c:	6050      	str	r0, [r2, #4]
	FTM3_MOD = DEFAULT_FTM_MOD;
    348e:	f8c2 e008 	str.w	lr, [r2, #8]
	FTM3_C0SC = 0x28;
    3492:	60d3      	str	r3, [r2, #12]
	FTM3_C1SC = 0x28;
    3494:	6153      	str	r3, [r2, #20]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3496:	6017      	str	r7, [r2, #0]
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    3498:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    349a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    349e:	62f1      	str	r1, [r6, #44]	; 0x2c
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    34a0:	6871      	ldr	r1, [r6, #4]
	TPM1_CNT = 0;
    34a2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    34a6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    34aa:	6071      	str	r1, [r6, #4]
	TPM1_MOD = 32767;
    34ac:	f647 74ff 	movw	r4, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    34b0:	2108      	movs	r1, #8
	TPM1_CNT = 0;
    34b2:	6050      	str	r0, [r2, #4]
{
    34b4:	b082      	sub	sp, #8
	TPM1_MOD = 32767;
    34b6:	6094      	str	r4, [r2, #8]
	TPM1_C0SC = 0x28;
    34b8:	60d3      	str	r3, [r2, #12]
	TPM1_C1SC = 0x28;
    34ba:	6153      	str	r3, [r2, #20]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    34bc:	6011      	str	r1, [r2, #0]
#endif
	analog_init();
    34be:	f001 f823 	bl	4508 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	startup_middle_hook();
    34c2:	f7ff ff9f 	bl	3404 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    34c6:	4c0d      	ldr	r4, [pc, #52]	; (34fc <_init_Teensyduino_internal_+0xf4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34c8:	6823      	ldr	r3, [r4, #0]
    34ca:	9300      	str	r3, [sp, #0]
	return ret;
    34cc:	9b00      	ldr	r3, [sp, #0]
    34ce:	2b13      	cmp	r3, #19
    34d0:	d9fa      	bls.n	34c8 <_init_Teensyduino_internal_+0xc0>
	usb_init();
    34d2:	f000 fd4d 	bl	3f70 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34d6:	6823      	ldr	r3, [r4, #0]
    34d8:	9301      	str	r3, [sp, #4]
	return ret;
    34da:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    34dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    34e0:	d3f9      	bcc.n	34d6 <_init_Teensyduino_internal_+0xce>
}
    34e2:	b002      	add	sp, #8
    34e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34e8:	400b9000 	.word	0x400b9000
    34ec:	40038000 	.word	0x40038000
    34f0:	400b8000 	.word	0x400b8000
    34f4:	40039000 	.word	0x40039000
    34f8:	40048000 	.word	0x40048000
    34fc:	1fff612c 	.word	0x1fff612c

00003500 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    3500:	283f      	cmp	r0, #63	; 0x3f
    3502:	d818      	bhi.n	3536 <digitalWrite+0x36>
{
    3504:	b410      	push	{r4}
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    3506:	4b12      	ldr	r3, [pc, #72]	; (3550 <digitalWrite+0x50>)
    3508:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    350c:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    3510:	b134      	cbz	r4, 3520 <digitalWrite+0x20>
		if (val) {
			*portSetRegister(pin) = 1;
    3512:	2301      	movs	r3, #1
		if (val) {
    3514:	b981      	cbnz	r1, 3538 <digitalWrite+0x38>
		} else {
			*portClearRegister(pin) = 1;
    3516:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    351a:	f85d 4b04 	ldr.w	r4, [sp], #4
    351e:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    3520:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    3524:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3526:	681a      	ldr	r2, [r3, #0]
		if (val) {
    3528:	b159      	cbz	r1, 3542 <digitalWrite+0x42>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    352a:	f042 0203 	orr.w	r2, r2, #3
}
    352e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3532:	601a      	str	r2, [r3, #0]
}
    3534:	4770      	bx	lr
    3536:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    3538:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    353c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3540:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    3542:	f022 0202 	bic.w	r2, r2, #2
}
    3546:	f85d 4b04 	ldr.w	r4, [sp], #4
			*config &= ~(PORT_PCR_PE);
    354a:	601a      	str	r2, [r3, #0]
}
    354c:	4770      	bx	lr
    354e:	bf00      	nop
    3550:	0000b6b0 	.word	0x0000b6b0

00003554 <digitalRead>:
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3554:	283f      	cmp	r0, #63	; 0x3f
    3556:	d806      	bhi.n	3566 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    3558:	4b04      	ldr	r3, [pc, #16]	; (356c <digitalRead+0x18>)
    355a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    355e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    3562:	b2c0      	uxtb	r0, r0
    3564:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3566:	2000      	movs	r0, #0
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    3568:	4770      	bx	lr
    356a:	bf00      	nop
    356c:	0000b6b0 	.word	0x0000b6b0

00003570 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    3570:	283f      	cmp	r0, #63	; 0x3f
    3572:	d820      	bhi.n	35b6 <pinMode+0x46>
	config = portConfigRegister(pin);
    3574:	4a1b      	ldr	r2, [pc, #108]	; (35e4 <pinMode+0x74>)
    3576:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    357a:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    357c:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    357e:	d00f      	beq.n	35a0 <pinMode+0x30>
    3580:	2904      	cmp	r1, #4
    3582:	d01d      	beq.n	35c0 <pinMode+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    3584:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    3588:	2200      	movs	r2, #0
    358a:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    358e:	b199      	cbz	r1, 35b8 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    3590:	2902      	cmp	r1, #2
    3592:	d022      	beq.n	35da <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    3594:	2903      	cmp	r1, #3
    3596:	d10d      	bne.n	35b4 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    3598:	f44f 7281 	mov.w	r2, #258	; 0x102
    359c:	601a      	str	r2, [r3, #0]
    359e:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    35a0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    35a4:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    35a8:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    35ac:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    35ae:	681a      	ldr	r2, [r3, #0]
    35b0:	f022 0220 	bic.w	r2, r2, #32
    35b4:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    35b6:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    35b8:	f44f 7280 	mov.w	r2, #256	; 0x100
    35bc:	601a      	str	r2, [r3, #0]
    35be:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    35c0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    35c4:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    35c8:	2001      	movs	r0, #1
    35ca:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    35ce:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    35d0:	681a      	ldr	r2, [r3, #0]
    35d2:	f042 0220 	orr.w	r2, r2, #32
    35d6:	601a      	str	r2, [r3, #0]
    35d8:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    35da:	f240 1203 	movw	r2, #259	; 0x103
    35de:	601a      	str	r2, [r3, #0]
    35e0:	4770      	bx	lr
    35e2:	bf00      	nop
    35e4:	0000b6b0 	.word	0x0000b6b0

000035e8 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    35e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    35ec:	4604      	mov	r4, r0
	__disable_irq();
    35ee:	b672      	cpsid	i
	count = systick_millis_count;
    35f0:	4f21      	ldr	r7, [pc, #132]	; (3678 <delay+0x90>)
	current = SYST_CVR;
    35f2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    35f6:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    35f8:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    35fa:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    35fe:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3600:	0152      	lsls	r2, r2, #5
    3602:	d502      	bpl.n	360a <delay+0x22>
    3604:	2b32      	cmp	r3, #50	; 0x32
    3606:	bf88      	it	hi
    3608:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    360a:	b90c      	cbnz	r4, 3610 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    360c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    3610:	f8df 9068 	ldr.w	r9, [pc, #104]	; 367c <delay+0x94>
	return count * 1000 + current / (F_CPU / 1000000);
    3614:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3680 <delay+0x98>
	current = ((F_CPU / 1000) - 1) - current;
    3618:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    361c:	089b      	lsrs	r3, r3, #2
    361e:	fba8 2303 	umull	r2, r3, r8, r3
    3622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3626:	fb02 f505 	mul.w	r5, r2, r5
    362a:	eb05 0593 	add.w	r5, r5, r3, lsr #2
	current = SYST_CVR;
    362e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    3632:	b672      	cpsid	i
	current = SYST_CVR;
    3634:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    3636:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3638:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    363c:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    363e:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    3642:	089b      	lsrs	r3, r3, #2
    3644:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3648:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    364c:	ebc5 0393 	rsb	r3, r5, r3, lsr #2
	return count * 1000 + current / (F_CPU / 1000000);
    3650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3654:	d002      	beq.n	365c <delay+0x74>
    3656:	2932      	cmp	r1, #50	; 0x32
    3658:	bf88      	it	hi
    365a:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    365c:	fb00 3302 	mla	r3, r0, r2, r3
    3660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    3664:	d304      	bcc.n	3670 <delay+0x88>
				if (ms == 0) return;
    3666:	3c01      	subs	r4, #1
    3668:	d0d0      	beq.n	360c <delay+0x24>
				start += 1000;
    366a:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    366e:	e7e0      	b.n	3632 <delay+0x4a>
			yield();
    3670:	f000 fea6 	bl	43c0 <yield>
			while ((micros() - start) >= 1000) {
    3674:	e7dd      	b.n	3632 <delay+0x4a>
    3676:	bf00      	nop
    3678:	1fff612c 	.word	0x1fff612c
    367c:	0002bf1f 	.word	0x0002bf1f
    3680:	16c16c17 	.word	0x16c16c17

00003684 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    3684:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3686:	2b03      	cmp	r3, #3
    3688:	d816      	bhi.n	36b8 <usb_rx+0x34>
	__disable_irq();
    368a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    368c:	490b      	ldr	r1, [pc, #44]	; (36bc <usb_rx+0x38>)
    368e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    3692:	b178      	cbz	r0, 36b4 <usb_rx+0x30>
{
    3694:	b430      	push	{r4, r5}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3696:	4c0a      	ldr	r4, [pc, #40]	; (36c0 <usb_rx+0x3c>)
    3698:	f8b0 c000 	ldrh.w	ip, [r0]
    369c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
		rx_first[endpoint] = ret->next;
    36a0:	6845      	ldr	r5, [r0, #4]
    36a2:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    36a6:	eba2 020c 	sub.w	r2, r2, ip
    36aa:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    36ae:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    36b0:	bc30      	pop	{r4, r5}
    36b2:	4770      	bx	lr
	__enable_irq();
    36b4:	b662      	cpsie	i
}
    36b6:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    36b8:	2000      	movs	r0, #0
    36ba:	4770      	bx	lr
    36bc:	1fff61c0 	.word	0x1fff61c0
    36c0:	1fff6210 	.word	0x1fff6210

000036c4 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    36c4:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    36c6:	2803      	cmp	r0, #3
    36c8:	d80b      	bhi.n	36e2 <usb_tx_packet_count+0x1e>
	__disable_irq();
    36ca:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    36cc:	4b07      	ldr	r3, [pc, #28]	; (36ec <usb_tx_packet_count+0x28>)
    36ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    36d2:	b143      	cbz	r3, 36e6 <usb_tx_packet_count+0x22>
	uint32_t count=0;
    36d4:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    36d6:	685b      	ldr	r3, [r3, #4]
    36d8:	3001      	adds	r0, #1
    36da:	2b00      	cmp	r3, #0
    36dc:	d1fb      	bne.n	36d6 <usb_tx_packet_count+0x12>
	__enable_irq();
    36de:	b662      	cpsie	i
	return count;
    36e0:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    36e2:	2000      	movs	r0, #0
}
    36e4:	4770      	bx	lr
	uint32_t count=0;
    36e6:	4618      	mov	r0, r3
    36e8:	e7f9      	b.n	36de <usb_tx_packet_count+0x1a>
    36ea:	bf00      	nop
    36ec:	1fff61e8 	.word	0x1fff61e8

000036f0 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    36f0:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    36f2:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    36f4:	4a1a      	ldr	r2, [pc, #104]	; (3760 <usb_rx_memory+0x70>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    36f6:	4c1b      	ldr	r4, [pc, #108]	; (3764 <usb_rx_memory+0x74>)
	__disable_irq();
    36f8:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    36fa:	f812 1b01 	ldrb.w	r1, [r2], #1
    36fe:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3700:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3704:	d505      	bpl.n	3712 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3706:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    370a:	b169      	cbz	r1, 3728 <usb_rx_memory+0x38>
			if (table[index(i, RX, ODD)].desc == 0) {
    370c:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    3710:	b1c9      	cbz	r1, 3746 <usb_rx_memory+0x56>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    3712:	3304      	adds	r3, #4
    3714:	2b14      	cmp	r3, #20
    3716:	d1f0      	bne.n	36fa <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    3718:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    371a:	4b13      	ldr	r3, [pc, #76]	; (3768 <usb_rx_memory+0x78>)
    371c:	2200      	movs	r2, #0
    371e:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    3720:	f85d 4b04 	ldr.w	r4, [sp], #4
	usb_free(packet);
    3724:	f000 bcae 	b.w	4084 <usb_free>
				usb_rx_memory_needed--;
    3728:	490f      	ldr	r1, [pc, #60]	; (3768 <usb_rx_memory+0x78>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    372a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    372e:	3008      	adds	r0, #8
    3730:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    3732:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3734:	480d      	ldr	r0, [pc, #52]	; (376c <usb_rx_memory+0x7c>)
    3736:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    373a:	3a01      	subs	r2, #1
    373c:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    373e:	b662      	cpsie	i
}
    3740:	f85d 4b04 	ldr.w	r4, [sp], #4
    3744:	4770      	bx	lr
				usb_rx_memory_needed--;
    3746:	4a08      	ldr	r2, [pc, #32]	; (3768 <usb_rx_memory+0x78>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3748:	4909      	ldr	r1, [pc, #36]	; (3770 <usb_rx_memory+0x80>)
				table[index(i, RX, ODD)].addr = packet->buf;
    374a:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    374e:	3008      	adds	r0, #8
    3750:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    3752:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3754:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    3758:	3b01      	subs	r3, #1
    375a:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    375c:	b662      	cpsie	i
				return;
    375e:	e7ef      	b.n	3740 <usb_rx_memory+0x50>
    3760:	0000b930 	.word	0x0000b930
    3764:	1fff0000 	.word	0x1fff0000
    3768:	1fff6218 	.word	0x1fff6218
    376c:	00400088 	.word	0x00400088
    3770:	004000c8 	.word	0x004000c8

00003774 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3774:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3776:	2a03      	cmp	r2, #3
    3778:	d80e      	bhi.n	3798 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    377a:	4b1c      	ldr	r3, [pc, #112]	; (37ec <usb_tx+0x78>)
    377c:	0140      	lsls	r0, r0, #5
    377e:	f040 0010 	orr.w	r0, r0, #16
{
    3782:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3784:	4403      	add	r3, r0
	__disable_irq();
    3786:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3788:	4c19      	ldr	r4, [pc, #100]	; (37f0 <usb_tx+0x7c>)
    378a:	5ca0      	ldrb	r0, [r4, r2]
    378c:	2803      	cmp	r0, #3
    378e:	d81d      	bhi.n	37cc <usb_tx+0x58>
    3790:	e8df f000 	tbb	[pc, r0]
    3794:	19031614 	.word	0x19031614
    3798:	4770      	bx	lr
    379a:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    379c:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    379e:	f013 0f08 	tst.w	r3, #8
    37a2:	8808      	ldrh	r0, [r1, #0]
    37a4:	bf14      	ite	ne
    37a6:	22c8      	movne	r2, #200	; 0xc8
    37a8:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    37aa:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    37ac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    37b0:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    37b2:	601a      	str	r2, [r3, #0]
	__enable_irq();
    37b4:	b662      	cpsie	i
}
    37b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    37ba:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    37bc:	2003      	movs	r0, #3
    37be:	e7ed      	b.n	379c <usb_tx+0x28>
		b++;
    37c0:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    37c2:	2002      	movs	r0, #2
		break;
    37c4:	e7ea      	b.n	379c <usb_tx+0x28>
		b++;
    37c6:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    37c8:	2004      	movs	r0, #4
		break;
    37ca:	e7e7      	b.n	379c <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    37cc:	4b09      	ldr	r3, [pc, #36]	; (37f4 <usb_tx+0x80>)
    37ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    37d2:	b138      	cbz	r0, 37e4 <usb_tx+0x70>
			tx_last[endpoint]->next = packet;
    37d4:	4b08      	ldr	r3, [pc, #32]	; (37f8 <usb_tx+0x84>)
    37d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    37da:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    37dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    37e0:	b662      	cpsie	i
		return;
    37e2:	e7e8      	b.n	37b6 <usb_tx+0x42>
			tx_first[endpoint] = packet;
    37e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    37e8:	4b03      	ldr	r3, [pc, #12]	; (37f8 <usb_tx+0x84>)
    37ea:	e7f7      	b.n	37dc <usb_tx+0x68>
    37ec:	1fff0000 	.word	0x1fff0000
    37f0:	1fff6208 	.word	0x1fff6208
    37f4:	1fff61e8 	.word	0x1fff61e8
    37f8:	1fff61f8 	.word	0x1fff61f8

000037fc <usb_isr>:
}



void usb_isr(void)
{
    37fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3800:	f8df a30c 	ldr.w	sl, [pc, #780]	; 3b10 <usb_isr+0x314>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3804:	f8df b30c 	ldr.w	fp, [pc, #780]	; 3b14 <usb_isr+0x318>
{
    3808:	b085      	sub	sp, #20
    380a:	e03d      	b.n	3888 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    380c:	4db0      	ldr	r5, [pc, #704]	; (3ad0 <usb_isr+0x2d4>)
    380e:	089e      	lsrs	r6, r3, #2
    3810:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    3814:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3816:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    3818:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    381c:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    381e:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    3822:	f040 80b8 	bne.w	3996 <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    3826:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    382a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    382e:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    3830:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    3834:	f000 80a7 	beq.w	3986 <usb_isr+0x18a>
					packet->index = 0;
    3838:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    383c:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    3840:	4ba4      	ldr	r3, [pc, #656]	; (3ad4 <usb_isr+0x2d8>)
    3842:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    3846:	2a00      	cmp	r2, #0
    3848:	f000 8201 	beq.w	3c4e <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    384c:	4ba2      	ldr	r3, [pc, #648]	; (3ad8 <usb_isr+0x2dc>)
    384e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    3852:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    3854:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3858:	4ba0      	ldr	r3, [pc, #640]	; (3adc <usb_isr+0x2e0>)
    385a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    385e:	4494      	add	ip, r2
    3860:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    3864:	f000 fbee 	bl	4044 <usb_malloc>
					if (packet) {
    3868:	2800      	cmp	r0, #0
    386a:	f000 81e9 	beq.w	3c40 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    386e:	f017 0f08 	tst.w	r7, #8
    3872:	4b9b      	ldr	r3, [pc, #620]	; (3ae0 <usb_isr+0x2e4>)
						b->addr = packet->buf;
    3874:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3878:	bf18      	it	ne
    387a:	465b      	movne	r3, fp
						b->addr = packet->buf;
    387c:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    387e:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3882:	2308      	movs	r3, #8
    3884:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    3888:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    388c:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    388e:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3890:	d51b      	bpl.n	38ca <usb_isr+0xce>
		if (usb_configuration) {
    3892:	4b94      	ldr	r3, [pc, #592]	; (3ae4 <usb_isr+0x2e8>)
    3894:	781b      	ldrb	r3, [r3, #0]
    3896:	b1ab      	cbz	r3, 38c4 <usb_isr+0xc8>
			t = usb_reboot_timer;
    3898:	4993      	ldr	r1, [pc, #588]	; (3ae8 <usb_isr+0x2ec>)
    389a:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    389c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    38a0:	b12a      	cbz	r2, 38ae <usb_isr+0xb2>
				usb_reboot_timer = --t;
    38a2:	3b01      	subs	r3, #1
    38a4:	b2db      	uxtb	r3, r3
    38a6:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    38a8:	2b00      	cmp	r3, #0
    38aa:	f000 8346 	beq.w	3f3a <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    38ae:	498f      	ldr	r1, [pc, #572]	; (3aec <usb_isr+0x2f0>)
    38b0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    38b2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    38b6:	b12a      	cbz	r2, 38c4 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    38b8:	3b01      	subs	r3, #1
    38ba:	b2db      	uxtb	r3, r3
    38bc:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    38be:	2b00      	cmp	r3, #0
    38c0:	f000 81eb 	beq.w	3c9a <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    38c4:	2304      	movs	r3, #4
    38c6:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    38ca:	f014 0208 	ands.w	r2, r4, #8
    38ce:	f000 81cc 	beq.w	3c6a <usb_isr+0x46e>
		stat = USB0_STAT;
    38d2:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    38d6:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    38d8:	0912      	lsrs	r2, r2, #4
    38da:	d197      	bne.n	380c <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    38dc:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 3ad0 <usb_isr+0x2d4>
    38e0:	089b      	lsrs	r3, r3, #2
    38e2:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    38e6:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    38ea:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    38ec:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    38f0:	2809      	cmp	r0, #9
    38f2:	d07c      	beq.n	39ee <usb_isr+0x1f2>
    38f4:	d80f      	bhi.n	3916 <usb_isr+0x11a>
    38f6:	3801      	subs	r0, #1
    38f8:	2801      	cmp	r0, #1
    38fa:	d808      	bhi.n	390e <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    38fc:	4a7c      	ldr	r2, [pc, #496]	; (3af0 <usb_isr+0x2f4>)
    38fe:	8815      	ldrh	r5, [r2, #0]
    3900:	f242 0021 	movw	r0, #8225	; 0x2021
    3904:	4285      	cmp	r5, r0
    3906:	f000 81fb 	beq.w	3d00 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    390a:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    390e:	2301      	movs	r3, #1
    3910:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    3914:	e7b5      	b.n	3882 <usb_isr+0x86>
	switch (pid) {
    3916:	280d      	cmp	r0, #13
    3918:	d1f9      	bne.n	390e <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    391a:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    391e:	4d75      	ldr	r5, [pc, #468]	; (3af4 <usb_isr+0x2f8>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3920:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    3924:	4e72      	ldr	r6, [pc, #456]	; (3af0 <usb_isr+0x2f4>)
		ep0_tx_data_toggle = 1;
    3926:	4c74      	ldr	r4, [pc, #464]	; (3af8 <usb_isr+0x2fc>)
		table[index(0, TX, EVEN)].desc = 0;
    3928:	f8c9 2010 	str.w	r2, [r9, #16]
    392c:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    392e:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    3932:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    3936:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    3938:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    393a:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    393e:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    3942:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    3944:	f200 80ff 	bhi.w	3b46 <usb_isr+0x34a>
    3948:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    394c:	f080 82cb 	bcs.w	3ee6 <usb_isr+0x6ea>
    3950:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    3954:	f000 8226 	beq.w	3da4 <usb_isr+0x5a8>
    3958:	f240 80de 	bls.w	3b18 <usb_isr+0x31c>
    395c:	f240 3202 	movw	r2, #770	; 0x302
    3960:	4293      	cmp	r3, r2
    3962:	d17b      	bne.n	3a5c <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    3964:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3968:	2f04      	cmp	r7, #4
    396a:	f200 8108 	bhi.w	3b7e <usb_isr+0x382>
    396e:	0c02      	lsrs	r2, r0, #16
    3970:	f040 8105 	bne.w	3b7e <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3974:	4961      	ldr	r1, [pc, #388]	; (3afc <usb_isr+0x300>)
    3976:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    397a:	f043 0302 	orr.w	r3, r3, #2
    397e:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    3982:	4613      	mov	r3, r2
		break;
    3984:	e070      	b.n	3a68 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3986:	f017 0f08 	tst.w	r7, #8
    398a:	4b55      	ldr	r3, [pc, #340]	; (3ae0 <usb_isr+0x2e4>)
    398c:	bf18      	it	ne
    398e:	465b      	movne	r3, fp
    3990:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    3994:	e775      	b.n	3882 <usb_isr+0x86>
				usb_free(packet);
    3996:	f000 fb75 	bl	4084 <usb_free>
				packet = tx_first[endpoint];
    399a:	4959      	ldr	r1, [pc, #356]	; (3b00 <usb_isr+0x304>)
					switch (tx_state[endpoint]) {
    399c:	4a59      	ldr	r2, [pc, #356]	; (3b04 <usb_isr+0x308>)
				packet = tx_first[endpoint];
    399e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    39a2:	2b00      	cmp	r3, #0
    39a4:	f000 8157 	beq.w	3c56 <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    39a8:	6858      	ldr	r0, [r3, #4]
    39aa:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    39ae:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    39b0:	f103 0008 	add.w	r0, r3, #8
    39b4:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    39b6:	2903      	cmp	r1, #3
    39b8:	d805      	bhi.n	39c6 <usb_isr+0x1ca>
    39ba:	e8df f001 	tbb	[pc, r1]
    39be:	0f12      	.short	0x0f12
    39c0:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    39c2:	2104      	movs	r1, #4
    39c4:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    39c6:	881a      	ldrh	r2, [r3, #0]
    39c8:	f017 0f08 	tst.w	r7, #8
    39cc:	bf14      	ite	ne
    39ce:	23c8      	movne	r3, #200	; 0xc8
    39d0:	2388      	moveq	r3, #136	; 0x88
    39d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    39d6:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    39da:	e752      	b.n	3882 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    39dc:	2102      	movs	r1, #2
    39de:	5511      	strb	r1, [r2, r4]
						break;
    39e0:	e7f1      	b.n	39c6 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    39e2:	2103      	movs	r1, #3
    39e4:	5511      	strb	r1, [r2, r4]
						break;
    39e6:	e7ee      	b.n	39c6 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    39e8:	2105      	movs	r1, #5
    39ea:	5511      	strb	r1, [r2, r4]
						break;
    39ec:	e7eb      	b.n	39c6 <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    39ee:	4d41      	ldr	r5, [pc, #260]	; (3af4 <usb_isr+0x2f8>)
    39f0:	682a      	ldr	r2, [r5, #0]
		if (data) {
    39f2:	b33a      	cbz	r2, 3a44 <usb_isr+0x248>
			size = ep0_tx_len;
    39f4:	4944      	ldr	r1, [pc, #272]	; (3b08 <usb_isr+0x30c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39f6:	4c40      	ldr	r4, [pc, #256]	; (3af8 <usb_isr+0x2fc>)
			size = ep0_tx_len;
    39f8:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    39fa:	4844      	ldr	r0, [pc, #272]	; (3b0c <usb_isr+0x310>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39fc:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a00:	7806      	ldrb	r6, [r0, #0]
    3a02:	2f40      	cmp	r7, #64	; 0x40
    3a04:	463b      	mov	r3, r7
    3a06:	bf28      	it	cs
    3a08:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a0a:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    3a0e:	f08e 0e01 	eor.w	lr, lr, #1
    3a12:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a16:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    3a1a:	f086 0601 	eor.w	r6, r6, #1
    3a1e:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a20:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    3a24:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a26:	bf14      	ite	ne
    3a28:	20c8      	movne	r0, #200	; 0xc8
    3a2a:	2088      	moveq	r0, #136	; 0x88
    3a2c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    3a30:	441a      	add	r2, r3
			ep0_tx_len -= size;
    3a32:	1afb      	subs	r3, r7, r3
    3a34:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a36:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    3a3a:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	f000 8136 	beq.w	3cae <usb_isr+0x4b2>
    3a42:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3a44:	4b2a      	ldr	r3, [pc, #168]	; (3af0 <usb_isr+0x2f4>)
    3a46:	881a      	ldrh	r2, [r3, #0]
    3a48:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3a4c:	f47f af5f 	bne.w	390e <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    3a50:	789a      	ldrb	r2, [r3, #2]
    3a52:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    3a56:	2200      	movs	r2, #0
    3a58:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    3a5a:	e758      	b.n	390e <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    3a5c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    3a60:	f040 808d 	bne.w	3b7e <usb_isr+0x382>
	uint32_t datalen = 0;
    3a64:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    3a66:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    3a68:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a6c:	4827      	ldr	r0, [pc, #156]	; (3b0c <usb_isr+0x310>)
    3a6e:	4594      	cmp	ip, r2
    3a70:	bf28      	it	cs
    3a72:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    3a74:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a76:	7802      	ldrb	r2, [r0, #0]
    3a78:	2f40      	cmp	r7, #64	; 0x40
    3a7a:	bf28      	it	cs
    3a7c:	2740      	movcs	r7, #64	; 0x40
    3a7e:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a82:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a84:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a88:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a8c:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a90:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3a94:	2600      	movs	r6, #0
	data += size;
    3a96:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    3a98:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    3a9a:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    3a9e:	f082 0601 	eor.w	r6, r2, #1
    3aa2:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    3aa4:	f040 8111 	bne.w	3cca <usb_isr+0x4ce>
    3aa8:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    3aac:	f04f 0501 	mov.w	r5, #1
    3ab0:	d909      	bls.n	3ac6 <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ab2:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    3ab6:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ab8:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    3abc:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3abe:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ac0:	2388      	movs	r3, #136	; 0x88
    3ac2:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3ac6:	2301      	movs	r3, #1
    3ac8:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    3acc:	e71f      	b.n	390e <usb_isr+0x112>
    3ace:	bf00      	nop
    3ad0:	1fff0000 	.word	0x1fff0000
    3ad4:	1fff61c0 	.word	0x1fff61c0
    3ad8:	1fff61d0 	.word	0x1fff61d0
    3adc:	1fff6210 	.word	0x1fff6210
    3ae0:	00400088 	.word	0x00400088
    3ae4:	1fff620c 	.word	0x1fff620c
    3ae8:	1fff620d 	.word	0x1fff620d
    3aec:	1fff6238 	.word	0x1fff6238
    3af0:	1fff61e0 	.word	0x1fff61e0
    3af4:	1fff61b4 	.word	0x1fff61b4
    3af8:	1fff61b1 	.word	0x1fff61b1
    3afc:	400720c0 	.word	0x400720c0
    3b00:	1fff61e8 	.word	0x1fff61e8
    3b04:	1fff6208 	.word	0x1fff6208
    3b08:	1fff61b2 	.word	0x1fff61b2
    3b0c:	1fff61b0 	.word	0x1fff61b0
    3b10:	40072000 	.word	0x40072000
    3b14:	004000c8 	.word	0x004000c8
	switch (setup.wRequestAndType) {
    3b18:	2b80      	cmp	r3, #128	; 0x80
    3b1a:	f000 818b 	beq.w	3e34 <usb_isr+0x638>
    3b1e:	2b82      	cmp	r3, #130	; 0x82
    3b20:	d12d      	bne.n	3b7e <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    3b22:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    3b26:	2f04      	cmp	r7, #4
    3b28:	d829      	bhi.n	3b7e <usb_isr+0x382>
		reply_buffer[0] = 0;
    3b2a:	4aa7      	ldr	r2, [pc, #668]	; (3dc8 <usb_isr+0x5cc>)
    3b2c:	2300      	movs	r3, #0
    3b2e:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3b30:	4ba6      	ldr	r3, [pc, #664]	; (3dcc <usb_isr+0x5d0>)
    3b32:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    3b36:	079f      	lsls	r7, r3, #30
    3b38:	f140 81fc 	bpl.w	3f34 <usb_isr+0x738>
    3b3c:	2301      	movs	r3, #1
    3b3e:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    3b40:	4ba1      	ldr	r3, [pc, #644]	; (3dc8 <usb_isr+0x5cc>)
		datalen = 2;
    3b42:	2202      	movs	r2, #2
    3b44:	e790      	b.n	3a68 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    3b46:	f242 0c21 	movw	ip, #8225	; 0x2021
    3b4a:	4563      	cmp	r3, ip
    3b4c:	d0bb      	beq.n	3ac6 <usb_isr+0x2ca>
    3b4e:	d91d      	bls.n	3b8c <usb_isr+0x390>
    3b50:	f242 2221 	movw	r2, #8737	; 0x2221
    3b54:	4293      	cmp	r3, r2
    3b56:	d10d      	bne.n	3b74 <usb_isr+0x378>
		switch (setup.wIndex) {
    3b58:	b2bf      	uxth	r7, r7
    3b5a:	2f00      	cmp	r7, #0
    3b5c:	d182      	bne.n	3a64 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3b5e:	4b9c      	ldr	r3, [pc, #624]	; (3dd0 <usb_isr+0x5d4>)
    3b60:	681a      	ldr	r2, [r3, #0]
    3b62:	4b9c      	ldr	r3, [pc, #624]	; (3dd4 <usb_isr+0x5d8>)
    3b64:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    3b66:	4b9c      	ldr	r3, [pc, #624]	; (3dd8 <usb_isr+0x5dc>)
    3b68:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    3b6c:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    3b6e:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    3b70:	4613      	mov	r3, r2
			break;
    3b72:	e779      	b.n	3a68 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    3b74:	f242 3221 	movw	r2, #8993	; 0x2321
    3b78:	4293      	cmp	r3, r2
    3b7a:	f43f af73 	beq.w	3a64 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b7e:	230f      	movs	r3, #15
    3b80:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3b84:	2301      	movs	r3, #1
    3b86:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    3b8a:	e6c0      	b.n	390e <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    3b8c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    3b90:	f000 814a 	beq.w	3e28 <usb_isr+0x62c>
    3b94:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3b98:	d1f1      	bne.n	3b7e <usb_isr+0x382>
		usb_configuration = setup.wValue;
    3b9a:	4b90      	ldr	r3, [pc, #576]	; (3ddc <usb_isr+0x5e0>)
    3b9c:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3ba0:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    3ba2:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    3ba4:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    3ba8:	061a      	lsls	r2, r3, #24
    3baa:	d406      	bmi.n	3bba <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3bac:	3501      	adds	r5, #1
    3bae:	2d14      	cmp	r5, #20
    3bb0:	d00c      	beq.n	3bcc <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    3bb2:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    3bb6:	061a      	lsls	r2, r3, #24
    3bb8:	d5f8      	bpl.n	3bac <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3bba:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3bbe:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3bc0:	6858      	ldr	r0, [r3, #4]
    3bc2:	3808      	subs	r0, #8
    3bc4:	f000 fa5e 	bl	4084 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3bc8:	2d14      	cmp	r5, #20
    3bca:	d1f2      	bne.n	3bb2 <usb_isr+0x3b6>
    3bcc:	4a84      	ldr	r2, [pc, #528]	; (3de0 <usb_isr+0x5e4>)
    3bce:	4b85      	ldr	r3, [pc, #532]	; (3de4 <usb_isr+0x5e8>)
    3bd0:	9202      	str	r2, [sp, #8]
    3bd2:	4a85      	ldr	r2, [pc, #532]	; (3de8 <usb_isr+0x5ec>)
    3bd4:	9201      	str	r2, [sp, #4]
    3bd6:	4e85      	ldr	r6, [pc, #532]	; (3dec <usb_isr+0x5f0>)
    3bd8:	4a85      	ldr	r2, [pc, #532]	; (3df0 <usb_isr+0x5f4>)
    3bda:	f8df 8248 	ldr.w	r8, [pc, #584]	; 3e24 <usb_isr+0x628>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3bde:	9403      	str	r4, [sp, #12]
    3be0:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    3be2:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3be4:	461c      	mov	r4, r3
			p = rx_first[i];
    3be6:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    3bea:	b12f      	cbz	r7, 3bf8 <usb_isr+0x3fc>
				n = p->next;
    3bec:	4638      	mov	r0, r7
    3bee:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    3bf0:	f000 fa48 	bl	4084 <usb_free>
			while (p) {
    3bf4:	2f00      	cmp	r7, #0
    3bf6:	d1f9      	bne.n	3bec <usb_isr+0x3f0>
			rx_last[i] = NULL;
    3bf8:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    3bfa:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    3bfe:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    3c02:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    3c06:	9300      	str	r3, [sp, #0]
			while (p) {
    3c08:	b12f      	cbz	r7, 3c16 <usb_isr+0x41a>
				n = p->next;
    3c0a:	4638      	mov	r0, r7
    3c0c:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    3c0e:	f000 fa39 	bl	4084 <usb_free>
			while (p) {
    3c12:	2f00      	cmp	r7, #0
    3c14:	d1f9      	bne.n	3c0a <usb_isr+0x40e>
			tx_last[i] = NULL;
    3c16:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    3c18:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    3c1c:	f843 5b04 	str.w	r5, [r3], #4
    3c20:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    3c22:	9b01      	ldr	r3, [sp, #4]
    3c24:	f823 5b02 	strh.w	r5, [r3], #2
    3c28:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    3c2a:	7823      	ldrb	r3, [r4, #0]
    3c2c:	3b02      	subs	r3, #2
    3c2e:	2b03      	cmp	r3, #3
    3c30:	f200 8109 	bhi.w	3e46 <usb_isr+0x64a>
    3c34:	e8df f013 	tbh	[pc, r3, lsl #1]
    3c38:	0104013f 	.word	0x0104013f
    3c3c:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    3c40:	4a6c      	ldr	r2, [pc, #432]	; (3df4 <usb_isr+0x5f8>)
						b->desc = 0;
    3c42:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    3c46:	7813      	ldrb	r3, [r2, #0]
    3c48:	3301      	adds	r3, #1
    3c4a:	7013      	strb	r3, [r2, #0]
    3c4c:	e619      	b.n	3882 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    3c4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    3c52:	4b67      	ldr	r3, [pc, #412]	; (3df0 <usb_isr+0x5f4>)
    3c54:	e5fe      	b.n	3854 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    3c56:	5d11      	ldrb	r1, [r2, r4]
    3c58:	2902      	cmp	r1, #2
    3c5a:	d026      	beq.n	3caa <usb_isr+0x4ae>
    3c5c:	f67f ae11 	bls.w	3882 <usb_isr+0x86>
    3c60:	2903      	cmp	r1, #3
    3c62:	d11d      	bne.n	3ca0 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3c64:	2301      	movs	r3, #1
    3c66:	5513      	strb	r3, [r2, r4]
						break;
    3c68:	e60b      	b.n	3882 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3c6a:	07e0      	lsls	r0, r4, #31
    3c6c:	d46e      	bmi.n	3d4c <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3c6e:	0621      	lsls	r1, r4, #24
    3c70:	d421      	bmi.n	3cb6 <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3c72:	07a2      	lsls	r2, r4, #30
    3c74:	d508      	bpl.n	3c88 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    3c76:	4b60      	ldr	r3, [pc, #384]	; (3df8 <usb_isr+0x5fc>)
    3c78:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3c7c:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    3c7e:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    3c80:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    3c84:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3c88:	06e3      	lsls	r3, r4, #27
    3c8a:	d503      	bpl.n	3c94 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3c8c:	4b5a      	ldr	r3, [pc, #360]	; (3df8 <usb_isr+0x5fc>)
    3c8e:	2210      	movs	r2, #16
    3c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    3c94:	b005      	add	sp, #20
    3c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    3c9a:	f000 fb6d 	bl	4378 <usb_serial_flush_callback>
    3c9e:	e611      	b.n	38c4 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3ca0:	f017 0f08 	tst.w	r7, #8
    3ca4:	bf14      	ite	ne
    3ca6:	2303      	movne	r3, #3
    3ca8:	2302      	moveq	r3, #2
    3caa:	5513      	strb	r3, [r2, r4]
						break;
    3cac:	e5e9      	b.n	3882 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3cae:	2f3f      	cmp	r7, #63	; 0x3f
    3cb0:	bf98      	it	ls
    3cb2:	2200      	movls	r2, #0
    3cb4:	e6c5      	b.n	3a42 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3cb6:	4b50      	ldr	r3, [pc, #320]	; (3df8 <usb_isr+0x5fc>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3cb8:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3cba:	210d      	movs	r1, #13
    3cbc:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    3cc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3cc4:	07a2      	lsls	r2, r4, #30
    3cc6:	d5df      	bpl.n	3c88 <usb_isr+0x48c>
    3cc8:	e7d5      	b.n	3c76 <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3cca:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    3cce:	7002      	strb	r2, [r0, #0]
    3cd0:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3cd2:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    3cd6:	463a      	mov	r2, r7
    3cd8:	bf28      	it	cs
    3cda:	2240      	movcs	r2, #64	; 0x40
    3cdc:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cde:	0410      	lsls	r0, r2, #16
	data += size;
    3ce0:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ce2:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3ce6:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    3ce8:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cea:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3cee:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    3cf0:	d055      	beq.n	3d9e <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    3cf2:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    3cf4:	4b41      	ldr	r3, [pc, #260]	; (3dfc <usb_isr+0x600>)
    3cf6:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3cf8:	2301      	movs	r3, #1
    3cfa:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    3cfe:	e606      	b.n	390e <usb_isr+0x112>
			switch (setup.wIndex) {
    3d00:	8892      	ldrh	r2, [r2, #4]
    3d02:	b95a      	cbnz	r2, 3d1c <usb_isr+0x520>
    3d04:	4a3e      	ldr	r2, [pc, #248]	; (3e00 <usb_isr+0x604>)
    3d06:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    3d08:	f814 1b01 	ldrb.w	r1, [r4], #1
    3d0c:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    3d10:	42ac      	cmp	r4, r5
    3d12:	d1f9      	bne.n	3d08 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    3d14:	4a3b      	ldr	r2, [pc, #236]	; (3e04 <usb_isr+0x608>)
    3d16:	6812      	ldr	r2, [r2, #0]
    3d18:	2a86      	cmp	r2, #134	; 0x86
    3d1a:	d03c      	beq.n	3d96 <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3d1c:	4c3a      	ldr	r4, [pc, #232]	; (3e08 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3d1e:	483b      	ldr	r0, [pc, #236]	; (3e0c <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3d20:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3d22:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3d24:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    3d26:	f085 0501 	eor.w	r5, r5, #1
    3d2a:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3d2c:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    3d30:	f082 0201 	eor.w	r2, r2, #1
    3d34:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3d36:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    3d3a:	f04f 0000 	mov.w	r0, #0
    3d3e:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3d40:	bf14      	ite	ne
    3d42:	22c8      	movne	r2, #200	; 0xc8
    3d44:	2288      	moveq	r2, #136	; 0x88
    3d46:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    3d4a:	e5de      	b.n	390a <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    3d4c:	4b2a      	ldr	r3, [pc, #168]	; (3df8 <usb_isr+0x5fc>)
		ep0_tx_bdt_bank = 0;
    3d4e:	482f      	ldr	r0, [pc, #188]	; (3e0c <usb_isr+0x610>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3d50:	492f      	ldr	r1, [pc, #188]	; (3e10 <usb_isr+0x614>)
    3d52:	4c30      	ldr	r4, [pc, #192]	; (3e14 <usb_isr+0x618>)
		USB0_CTL = USB_CTL_ODDRST;
    3d54:	2502      	movs	r5, #2
    3d56:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    3d5a:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3d5c:	482e      	ldr	r0, [pc, #184]	; (3e18 <usb_isr+0x61c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3d5e:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3d60:	4d2e      	ldr	r5, [pc, #184]	; (3e1c <usb_isr+0x620>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3d62:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3d64:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3d66:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3d68:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    3d6a:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    3d6c:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    3d6e:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3d70:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    3d74:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3d76:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    3d78:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    3d7c:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    3d80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    3d84:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3d88:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    3d8c:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    3d90:	b005      	add	sp, #20
    3d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    3d96:	4a22      	ldr	r2, [pc, #136]	; (3e20 <usb_isr+0x624>)
    3d98:	200f      	movs	r0, #15
    3d9a:	7010      	strb	r0, [r2, #0]
    3d9c:	e7be      	b.n	3d1c <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    3d9e:	2f3f      	cmp	r7, #63	; 0x3f
    3da0:	d8a7      	bhi.n	3cf2 <usb_isr+0x4f6>
    3da2:	e690      	b.n	3ac6 <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    3da4:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3da8:	2f04      	cmp	r7, #4
    3daa:	f63f aee8 	bhi.w	3b7e <usb_isr+0x382>
    3dae:	0c00      	lsrs	r0, r0, #16
    3db0:	f47f aee5 	bne.w	3b7e <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3db4:	4a05      	ldr	r2, [pc, #20]	; (3dcc <usb_isr+0x5d0>)
    3db6:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    3dba:	f023 0302 	bic.w	r3, r3, #2
    3dbe:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    3dc2:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    3dc4:	4613      	mov	r3, r2
		break;
    3dc6:	e64f      	b.n	3a68 <usb_isr+0x26c>
    3dc8:	1fff61b8 	.word	0x1fff61b8
    3dcc:	400720c0 	.word	0x400720c0
    3dd0:	1fff612c 	.word	0x1fff612c
    3dd4:	1fff6234 	.word	0x1fff6234
    3dd8:	1fff6230 	.word	0x1fff6230
    3ddc:	1fff620c 	.word	0x1fff620c
    3de0:	1fff61f8 	.word	0x1fff61f8
    3de4:	1fff6208 	.word	0x1fff6208
    3de8:	1fff6210 	.word	0x1fff6210
    3dec:	1fff61c0 	.word	0x1fff61c0
    3df0:	1fff61d0 	.word	0x1fff61d0
    3df4:	1fff6218 	.word	0x1fff6218
    3df8:	40072000 	.word	0x40072000
    3dfc:	1fff61b2 	.word	0x1fff61b2
    3e00:	1fff6227 	.word	0x1fff6227
    3e04:	1fff6228 	.word	0x1fff6228
    3e08:	1fff61b1 	.word	0x1fff61b1
    3e0c:	1fff61b0 	.word	0x1fff61b0
    3e10:	1fff0000 	.word	0x1fff0000
    3e14:	00400088 	.word	0x00400088
    3e18:	1fff6130 	.word	0x1fff6130
    3e1c:	1fff6170 	.word	0x1fff6170
    3e20:	1fff620d 	.word	0x1fff620d
    3e24:	1fff61e8 	.word	0x1fff61e8
		reply_buffer[0] = usb_configuration;
    3e28:	4b48      	ldr	r3, [pc, #288]	; (3f4c <usb_isr+0x750>)
    3e2a:	4949      	ldr	r1, [pc, #292]	; (3f50 <usb_isr+0x754>)
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    3e30:	460b      	mov	r3, r1
		break;
    3e32:	e619      	b.n	3a68 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    3e34:	4a46      	ldr	r2, [pc, #280]	; (3f50 <usb_isr+0x754>)
    3e36:	2300      	movs	r3, #0
    3e38:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    3e3a:	4b45      	ldr	r3, [pc, #276]	; (3f50 <usb_isr+0x754>)
		datalen = 2;
    3e3c:	2202      	movs	r2, #2
		break;
    3e3e:	e613      	b.n	3a68 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3e40:	f04f 0301 	mov.w	r3, #1
    3e44:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3e46:	4b43      	ldr	r3, [pc, #268]	; (3f54 <usb_isr+0x758>)
    3e48:	42b3      	cmp	r3, r6
    3e4a:	f104 0401 	add.w	r4, r4, #1
    3e4e:	f47f aeca 	bne.w	3be6 <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    3e52:	4e41      	ldr	r6, [pc, #260]	; (3f58 <usb_isr+0x75c>)
    3e54:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    3e56:	f8df 8114 	ldr.w	r8, [pc, #276]	; 3f6c <usb_isr+0x770>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3e5a:	4f40      	ldr	r7, [pc, #256]	; (3f5c <usb_isr+0x760>)
		usb_rx_memory_needed = 0;
    3e5c:	2300      	movs	r3, #0
    3e5e:	7033      	strb	r3, [r6, #0]
    3e60:	2504      	movs	r5, #4
			epconf = *cfg++;
    3e62:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    3e66:	4a3e      	ldr	r2, [pc, #248]	; (3f60 <usb_isr+0x764>)
    3e68:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    3e6a:	071b      	lsls	r3, r3, #28
    3e6c:	d425      	bmi.n	3eba <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    3e6e:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    3e72:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3e76:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    3e78:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3e7a:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    3e7c:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    3e80:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    3e84:	d1ed      	bne.n	3e62 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3e86:	4f37      	ldr	r7, [pc, #220]	; (3f64 <usb_isr+0x768>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e88:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3e8a:	783a      	ldrb	r2, [r7, #0]
    3e8c:	f042 0002 	orr.w	r0, r2, #2
    3e90:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    3e94:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3e98:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e9c:	2d00      	cmp	r5, #0
    3e9e:	d14d      	bne.n	3f3c <usb_isr+0x740>
    3ea0:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    3ea2:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    3ea6:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    3ea8:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3eaa:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3eae:	2301      	movs	r3, #1
    3eb0:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    3eb4:	e52b      	b.n	390e <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3eb6:	7025      	strb	r5, [r4, #0]
				break;
    3eb8:	e7c5      	b.n	3e46 <usb_isr+0x64a>
				p = usb_malloc();
    3eba:	f000 f8c3 	bl	4044 <usb_malloc>
				if (p) {
    3ebe:	2800      	cmp	r0, #0
    3ec0:	d032      	beq.n	3f28 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ec2:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    3ec6:	3008      	adds	r0, #8
    3ec8:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3eca:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    3ece:	f000 f8b9 	bl	4044 <usb_malloc>
				if (p) {
    3ed2:	b308      	cbz	r0, 3f18 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    3ed4:	f045 0301 	orr.w	r3, r5, #1
    3ed8:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    3edc:	3008      	adds	r0, #8
    3ede:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ee0:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    3ee4:	e7c3      	b.n	3e6e <usb_isr+0x672>
			if (list->addr == NULL) break;
    3ee6:	4a20      	ldr	r2, [pc, #128]	; (3f68 <usb_isr+0x76c>)
    3ee8:	6853      	ldr	r3, [r2, #4]
    3eea:	2b00      	cmp	r3, #0
    3eec:	f43f ae47 	beq.w	3b7e <usb_isr+0x382>
    3ef0:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3ef2:	b2bf      	uxth	r7, r7
    3ef4:	e004      	b.n	3f00 <usb_isr+0x704>
			if (list->addr == NULL) break;
    3ef6:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    3ef8:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    3efa:	2b00      	cmp	r3, #0
    3efc:	f43f ae3f 	beq.w	3b7e <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3f00:	8811      	ldrh	r1, [r2, #0]
    3f02:	4281      	cmp	r1, r0
    3f04:	d1f7      	bne.n	3ef6 <usb_isr+0x6fa>
    3f06:	8851      	ldrh	r1, [r2, #2]
    3f08:	42b9      	cmp	r1, r7
    3f0a:	d1f4      	bne.n	3ef6 <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    3f0c:	0a00      	lsrs	r0, r0, #8
    3f0e:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    3f10:	bf0c      	ite	eq
    3f12:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    3f14:	8912      	ldrhne	r2, [r2, #8]
    3f16:	e5a7      	b.n	3a68 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    3f18:	7833      	ldrb	r3, [r6, #0]
    3f1a:	3301      	adds	r3, #1
    3f1c:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    3f1e:	f045 0301 	orr.w	r3, r5, #1
    3f22:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    3f26:	e7a2      	b.n	3e6e <usb_isr+0x672>
					usb_rx_memory_needed++;
    3f28:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    3f2a:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    3f2e:	3301      	adds	r3, #1
    3f30:	7033      	strb	r3, [r6, #0]
    3f32:	e7cc      	b.n	3ece <usb_isr+0x6d2>
		data = reply_buffer;
    3f34:	4b06      	ldr	r3, [pc, #24]	; (3f50 <usb_isr+0x754>)
		datalen = 2;
    3f36:	2202      	movs	r2, #2
    3f38:	e596      	b.n	3a68 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    3f3a:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    3f3c:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3f3e:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    3f40:	f082 0601 	eor.w	r6, r2, #1
    3f44:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3f46:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    3f4a:	e5bc      	b.n	3ac6 <usb_isr+0x2ca>
    3f4c:	1fff620c 	.word	0x1fff620c
    3f50:	1fff61b8 	.word	0x1fff61b8
    3f54:	1fff61d0 	.word	0x1fff61d0
    3f58:	1fff6218 	.word	0x1fff6218
    3f5c:	00400088 	.word	0x00400088
    3f60:	400720c0 	.word	0x400720c0
    3f64:	1fff61b0 	.word	0x1fff61b0
    3f68:	0000b8dc 	.word	0x0000b8dc
    3f6c:	0000b930 	.word	0x0000b930

00003f70 <usb_init>:



void usb_init(void)
{
    3f70:	b510      	push	{r4, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3f72:	f000 fb2f 	bl	45d4 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    3f76:	2300      	movs	r3, #0
    3f78:	4a23      	ldr	r2, [pc, #140]	; (4008 <usb_init+0x98>)
		table[i].desc = 0;
    3f7a:	4619      	mov	r1, r3
    3f7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    3f80:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    3f84:	3301      	adds	r3, #1
    3f86:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    3f88:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    3f8a:	d1f7      	bne.n	3f7c <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3f8c:	481f      	ldr	r0, [pc, #124]	; (400c <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3f8e:	4c20      	ldr	r4, [pc, #128]	; (4010 <usb_init+0xa0>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3f90:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3f96:	6343      	str	r3, [r0, #52]	; 0x34
	MPU_RGDAAC0 |= 0x03000000;
    3f98:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3f9c:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
    3fa0:	f500 7080 	add.w	r0, r0, #256	; 0x100
	MPU_RGDAAC0 |= 0x03000000;
    3fa4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    3fa8:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3fac:	2403      	movs	r4, #3
    3fae:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3fb2:	4b18      	ldr	r3, [pc, #96]	; (4014 <usb_init+0xa4>)
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3fb4:	24a0      	movs	r4, #160	; 0xa0
    3fb6:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3fba:	f3c2 2407 	ubfx	r4, r2, #8, #8
    3fbe:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3fc2:	f3c2 4407 	ubfx	r4, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3fc6:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3fc8:	f883 40b0 	strb.w	r4, [r3, #176]	; 0xb0

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3fcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3fd0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3fd4:	2201      	movs	r2, #1
	USB0_ISTAT = 0xFF;
    3fd6:	f883 c080 	strb.w	ip, [r3, #128]	; 0x80

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3fda:	4c0f      	ldr	r4, [pc, #60]	; (4018 <usb_init+0xa8>)
	USB0_ERRSTAT = 0xFF;
    3fdc:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    3fe0:	f883 c010 	strb.w	ip, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    3fe4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    3fe8:	7001      	strb	r1, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3fea:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3ff2:	f04f 0c70 	mov.w	ip, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3ff6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3ffa:	2310      	movs	r3, #16
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3ffc:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4000:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4004:	7203      	strb	r3, [r0, #8]
}
    4006:	bd10      	pop	{r4, pc}
    4008:	1fff0000 	.word	0x1fff0000
    400c:	40048000 	.word	0x40048000
    4010:	4000d000 	.word	0x4000d000
    4014:	40072000 	.word	0x40072000
    4018:	e000e400 	.word	0xe000e400

0000401c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    401c:	f000 b8ac 	b.w	4178 <usb_serial_flush_input>

00004020 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    4020:	f000 b87c 	b.w	411c <usb_serial_peekchar>

00004024 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    4024:	f000 b856 	b.w	40d4 <usb_serial_getchar>

00004028 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    4028:	f000 b890 	b.w	414c <usb_serial_available>

0000402c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    402c:	f000 b978 	b.w	4320 <usb_serial_flush_output>

00004030 <usb_serial_class::availableForWrite()>:
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4030:	f000 b952 	b.w	42d8 <usb_serial_write_buffer_free>

00004034 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4034:	4608      	mov	r0, r1
    4036:	4611      	mov	r1, r2
    4038:	f000 b8ba 	b.w	41b0 <usb_serial_write>

0000403c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    403c:	4608      	mov	r0, r1
    403e:	f000 b93d 	b.w	42bc <usb_serial_putchar>
    4042:	bf00      	nop

00004044 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    4044:	b672      	cpsid	i
	avail = usb_buffer_available;
    4046:	490d      	ldr	r1, [pc, #52]	; (407c <usb_malloc+0x38>)
    4048:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    404a:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    404e:	280b      	cmp	r0, #11
    4050:	dc10      	bgt.n	4074 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    4052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4056:	40c2      	lsrs	r2, r0
    4058:	ea23 0302 	bic.w	r3, r3, r2
    405c:	600b      	str	r3, [r1, #0]
	__enable_irq();
    405e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    4060:	4a07      	ldr	r2, [pc, #28]	; (4080 <usb_malloc+0x3c>)
    4062:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    4066:	00c1      	lsls	r1, r0, #3
    4068:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    406c:	2300      	movs	r3, #0
    406e:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    4070:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    4072:	4770      	bx	lr
		__enable_irq();
    4074:	b662      	cpsie	i
		return NULL;
    4076:	2000      	movs	r0, #0
    4078:	4770      	bx	lr
    407a:	bf00      	nop
    407c:	1fff0768 	.word	0x1fff0768
    4080:	1fff03d0 	.word	0x1fff03d0

00004084 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    4084:	4b0e      	ldr	r3, [pc, #56]	; (40c0 <usb_free+0x3c>)
    4086:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    4088:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    408c:	d210      	bcs.n	40b0 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    408e:	4a0d      	ldr	r2, [pc, #52]	; (40c4 <usb_free+0x40>)
    4090:	7812      	ldrb	r2, [r2, #0]
    4092:	b972      	cbnz	r2, 40b2 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    4094:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    4096:	4a0c      	ldr	r2, [pc, #48]	; (40c8 <usb_free+0x44>)
	usb_buffer_available |= mask;
    4098:	490c      	ldr	r1, [pc, #48]	; (40cc <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    409a:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    409e:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    40a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    40a4:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    40a6:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    40aa:	4303      	orrs	r3, r0
    40ac:	600b      	str	r3, [r1, #0]
	__enable_irq();
    40ae:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    40b0:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    40b2:	4a07      	ldr	r2, [pc, #28]	; (40d0 <usb_free+0x4c>)
    40b4:	7812      	ldrb	r2, [r2, #0]
    40b6:	2a00      	cmp	r2, #0
    40b8:	d0ec      	beq.n	4094 <usb_free+0x10>
		usb_rx_memory(p);
    40ba:	f7ff bb19 	b.w	36f0 <usb_rx_memory>
    40be:	bf00      	nop
    40c0:	1fff03d0 	.word	0x1fff03d0
    40c4:	1fff6218 	.word	0x1fff6218
    40c8:	38e38e39 	.word	0x38e38e39
    40cc:	1fff0768 	.word	0x1fff0768
    40d0:	1fff620c 	.word	0x1fff620c

000040d4 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    40d4:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    40d6:	4c0f      	ldr	r4, [pc, #60]	; (4114 <usb_serial_getchar+0x40>)
    40d8:	6820      	ldr	r0, [r4, #0]
    40da:	b178      	cbz	r0, 40fc <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    40dc:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    40de:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    40e0:	18c1      	adds	r1, r0, r3
    40e2:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    40e4:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    40e6:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    40e8:	d902      	bls.n	40f0 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    40ea:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    40ec:	4628      	mov	r0, r5
    40ee:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    40f0:	f7ff ffc8 	bl	4084 <usb_free>
		rx_packet = NULL;
    40f4:	2300      	movs	r3, #0
    40f6:	6023      	str	r3, [r4, #0]
}
    40f8:	4628      	mov	r0, r5
    40fa:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    40fc:	4b06      	ldr	r3, [pc, #24]	; (4118 <usb_serial_getchar+0x44>)
    40fe:	781b      	ldrb	r3, [r3, #0]
    4100:	b12b      	cbz	r3, 410e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    4102:	2003      	movs	r0, #3
    4104:	f7ff fabe 	bl	3684 <usb_rx>
    4108:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    410a:	2800      	cmp	r0, #0
    410c:	d1e6      	bne.n	40dc <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    410e:	f04f 35ff 	mov.w	r5, #4294967295
    4112:	e7eb      	b.n	40ec <usb_serial_getchar+0x18>
    4114:	1fff621c 	.word	0x1fff621c
    4118:	1fff620c 	.word	0x1fff620c

0000411c <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    411c:	b510      	push	{r4, lr}
	if (!rx_packet) {
    411e:	4c09      	ldr	r4, [pc, #36]	; (4144 <usb_serial_peekchar+0x28>)
    4120:	6820      	ldr	r0, [r4, #0]
    4122:	b118      	cbz	r0, 412c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    4124:	8843      	ldrh	r3, [r0, #2]
    4126:	4418      	add	r0, r3
    4128:	7a00      	ldrb	r0, [r0, #8]
}
    412a:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    412c:	4b06      	ldr	r3, [pc, #24]	; (4148 <usb_serial_peekchar+0x2c>)
    412e:	781b      	ldrb	r3, [r3, #0]
    4130:	b12b      	cbz	r3, 413e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    4132:	2003      	movs	r0, #3
    4134:	f7ff faa6 	bl	3684 <usb_rx>
    4138:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    413a:	2800      	cmp	r0, #0
    413c:	d1f2      	bne.n	4124 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    413e:	f04f 30ff 	mov.w	r0, #4294967295
}
    4142:	bd10      	pop	{r4, pc}
    4144:	1fff621c 	.word	0x1fff621c
    4148:	1fff620c 	.word	0x1fff620c

0000414c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    414c:	4b08      	ldr	r3, [pc, #32]	; (4170 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    414e:	4a09      	ldr	r2, [pc, #36]	; (4174 <usb_serial_available+0x28>)
    4150:	681b      	ldr	r3, [r3, #0]
{
    4152:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    4154:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    4156:	b11b      	cbz	r3, 4160 <usb_serial_available+0x14>
    4158:	881a      	ldrh	r2, [r3, #0]
    415a:	885b      	ldrh	r3, [r3, #2]
    415c:	1ad3      	subs	r3, r2, r3
    415e:	441c      	add	r4, r3
	if (count == 0) yield();
    4160:	b10c      	cbz	r4, 4166 <usb_serial_available+0x1a>
	return count;
}
    4162:	4620      	mov	r0, r4
    4164:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    4166:	f000 f92b 	bl	43c0 <yield>
}
    416a:	4620      	mov	r0, r4
    416c:	bd10      	pop	{r4, pc}
    416e:	bf00      	nop
    4170:	1fff621c 	.word	0x1fff621c
    4174:	1fff6210 	.word	0x1fff6210

00004178 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    4178:	4b0b      	ldr	r3, [pc, #44]	; (41a8 <usb_serial_flush_input+0x30>)
    417a:	781b      	ldrb	r3, [r3, #0]
    417c:	b19b      	cbz	r3, 41a6 <usb_serial_flush_input+0x2e>
{
    417e:	b510      	push	{r4, lr}
	if (rx_packet) {
    4180:	4c0a      	ldr	r4, [pc, #40]	; (41ac <usb_serial_flush_input+0x34>)
    4182:	6820      	ldr	r0, [r4, #0]
    4184:	b148      	cbz	r0, 419a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    4186:	f7ff ff7d 	bl	4084 <usb_free>
		rx_packet = NULL;
    418a:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    418c:	2003      	movs	r0, #3
		rx_packet = NULL;
    418e:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    4190:	f7ff fa78 	bl	3684 <usb_rx>
		if (!rx) break;
    4194:	b130      	cbz	r0, 41a4 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    4196:	f7ff ff75 	bl	4084 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    419a:	2003      	movs	r0, #3
    419c:	f7ff fa72 	bl	3684 <usb_rx>
		if (!rx) break;
    41a0:	2800      	cmp	r0, #0
    41a2:	d1f8      	bne.n	4196 <usb_serial_flush_input+0x1e>
	}
}
    41a4:	bd10      	pop	{r4, pc}
    41a6:	4770      	bx	lr
    41a8:	1fff620c 	.word	0x1fff620c
    41ac:	1fff621c 	.word	0x1fff621c

000041b0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    41b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    41b4:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 42b0 <usb_serial_write+0x100>
{
    41b8:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    41ba:	2201      	movs	r2, #1
    41bc:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    41c0:	9101      	str	r1, [sp, #4]
    41c2:	b379      	cbz	r1, 4224 <usb_serial_write+0x74>
    41c4:	4f37      	ldr	r7, [pc, #220]	; (42a4 <usb_serial_write+0xf4>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    41c6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 42b4 <usb_serial_write+0x104>
	while (size > 0) {
    41ca:	9d01      	ldr	r5, [sp, #4]
    41cc:	4e36      	ldr	r6, [pc, #216]	; (42a8 <usb_serial_write+0xf8>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    41ce:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 42b8 <usb_serial_write+0x108>
    41d2:	4683      	mov	fp, r0
		if (!tx_packet) {
    41d4:	6838      	ldr	r0, [r7, #0]
    41d6:	b3a8      	cbz	r0, 4244 <usb_serial_write+0x94>
		len = CDC_TX_SIZE - tx_packet->index;
    41d8:	f8b0 e002 	ldrh.w	lr, [r0, #2]
    41dc:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    41e0:	45ac      	cmp	ip, r5
    41e2:	bf28      	it	cs
    41e4:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    41e6:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    41ea:	2200      	movs	r2, #0
		tx_packet->index += len;
    41ec:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    41ee:	7032      	strb	r2, [r6, #0]
		size -= len;
    41f0:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    41f4:	8044      	strh	r4, [r0, #2]
		dest = tx_packet->buf + tx_packet->index;
    41f6:	f100 0208 	add.w	r2, r0, #8
		while (len-- > 0) *dest++ = *src++;
    41fa:	f1bc 0f00 	cmp.w	ip, #0
    41fe:	d00a      	beq.n	4216 <usb_serial_write+0x66>
    4200:	f10e 3eff 	add.w	lr, lr, #4294967295
    4204:	4472      	add	r2, lr
    4206:	44dc      	add	ip, fp
    4208:	f81b 4b01 	ldrb.w	r4, [fp], #1
    420c:	f802 4f01 	strb.w	r4, [r2, #1]!
    4210:	45dc      	cmp	ip, fp
    4212:	d1f9      	bne.n	4208 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    4214:	8844      	ldrh	r4, [r0, #2]
    4216:	2c3f      	cmp	r4, #63	; 0x3f
    4218:	d80b      	bhi.n	4232 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    421a:	2205      	movs	r2, #5
    421c:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    4220:	2d00      	cmp	r5, #0
    4222:	d1d7      	bne.n	41d4 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    4224:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    4226:	2300      	movs	r3, #0
    4228:	f889 3000 	strb.w	r3, [r9]
}
    422c:	b003      	add	sp, #12
    422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    4232:	2240      	movs	r2, #64	; 0x40
    4234:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4236:	4601      	mov	r1, r0
    4238:	2004      	movs	r0, #4
    423a:	f7ff fa9b 	bl	3774 <usb_tx>
			tx_packet = NULL;
    423e:	2200      	movs	r2, #0
    4240:	603a      	str	r2, [r7, #0]
    4242:	e7ea      	b.n	421a <usb_serial_write+0x6a>
				if (!usb_configuration) {
    4244:	f898 2000 	ldrb.w	r2, [r8]
    4248:	b31a      	cbz	r2, 4292 <usb_serial_write+0xe2>
    424a:	4c18      	ldr	r4, [pc, #96]	; (42ac <usb_serial_write+0xfc>)
    424c:	e008      	b.n	4260 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    424e:	3c01      	subs	r4, #1
    4250:	d018      	beq.n	4284 <usb_serial_write+0xd4>
    4252:	7832      	ldrb	r2, [r6, #0]
    4254:	b9b2      	cbnz	r2, 4284 <usb_serial_write+0xd4>
				yield();
    4256:	f000 f8b3 	bl	43c0 <yield>
				if (!usb_configuration) {
    425a:	f898 2000 	ldrb.w	r2, [r8]
    425e:	b1c2      	cbz	r2, 4292 <usb_serial_write+0xe2>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    4260:	2004      	movs	r0, #4
    4262:	f7ff fa2f 	bl	36c4 <usb_tx_packet_count>
    4266:	2807      	cmp	r0, #7
    4268:	d8f1      	bhi.n	424e <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    426a:	f04f 0301 	mov.w	r3, #1
    426e:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    4272:	f7ff fee7 	bl	4044 <usb_malloc>
    4276:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    4278:	2800      	cmp	r0, #0
    427a:	d1ad      	bne.n	41d8 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    427c:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    427e:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    4282:	d1e6      	bne.n	4252 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    4284:	2301      	movs	r3, #1
					return -1;
    4286:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    428a:	7033      	strb	r3, [r6, #0]
}
    428c:	b003      	add	sp, #12
    428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    4292:	2300      	movs	r3, #0
					return -1;
    4294:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    4298:	f889 3000 	strb.w	r3, [r9]
}
    429c:	b003      	add	sp, #12
    429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42a2:	bf00      	nop
    42a4:	1fff6224 	.word	0x1fff6224
    42a8:	1fff6220 	.word	0x1fff6220
    42ac:	00014821 	.word	0x00014821
    42b0:	1fff6221 	.word	0x1fff6221
    42b4:	1fff620c 	.word	0x1fff620c
    42b8:	1fff6238 	.word	0x1fff6238

000042bc <usb_serial_putchar>:
{
    42bc:	b500      	push	{lr}
    42be:	b083      	sub	sp, #12
    42c0:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    42c2:	2101      	movs	r1, #1
    42c4:	f10d 0007 	add.w	r0, sp, #7
{
    42c8:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    42cc:	f7ff ff70 	bl	41b0 <usb_serial_write>
}
    42d0:	b003      	add	sp, #12
    42d2:	f85d fb04 	ldr.w	pc, [sp], #4
    42d6:	bf00      	nop

000042d8 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    42d8:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    42da:	4d0e      	ldr	r5, [pc, #56]	; (4314 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    42dc:	4c0e      	ldr	r4, [pc, #56]	; (4318 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    42de:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    42e0:	2301      	movs	r3, #1
    42e2:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    42e4:	b128      	cbz	r0, 42f2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    42e6:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    42e8:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    42ea:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    42ee:	7023      	strb	r3, [r4, #0]
	return len;
}
    42f0:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    42f2:	4b0a      	ldr	r3, [pc, #40]	; (431c <usb_serial_write_buffer_free+0x44>)
    42f4:	781b      	ldrb	r3, [r3, #0]
    42f6:	b913      	cbnz	r3, 42fe <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    42f8:	2000      	movs	r0, #0
    42fa:	7020      	strb	r0, [r4, #0]
}
    42fc:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    42fe:	2004      	movs	r0, #4
    4300:	f7ff f9e0 	bl	36c4 <usb_tx_packet_count>
		if (!usb_configuration ||
    4304:	2807      	cmp	r0, #7
    4306:	d8f7      	bhi.n	42f8 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    4308:	f7ff fe9c 	bl	4044 <usb_malloc>
    430c:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    430e:	2800      	cmp	r0, #0
    4310:	d1e9      	bne.n	42e6 <usb_serial_write_buffer_free+0xe>
    4312:	e7f1      	b.n	42f8 <usb_serial_write_buffer_free+0x20>
    4314:	1fff6224 	.word	0x1fff6224
    4318:	1fff6221 	.word	0x1fff6221
    431c:	1fff620c 	.word	0x1fff620c

00004320 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    4320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    4322:	4b11      	ldr	r3, [pc, #68]	; (4368 <usb_serial_flush_output+0x48>)
    4324:	781b      	ldrb	r3, [r3, #0]
    4326:	b18b      	cbz	r3, 434c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    4328:	4e10      	ldr	r6, [pc, #64]	; (436c <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    432a:	4d11      	ldr	r5, [pc, #68]	; (4370 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    432c:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    432e:	2701      	movs	r7, #1
    4330:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    4332:	b164      	cbz	r4, 434e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    4334:	4b0f      	ldr	r3, [pc, #60]	; (4374 <usb_serial_flush_output+0x54>)
    4336:	2700      	movs	r7, #0
    4338:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    433a:	8863      	ldrh	r3, [r4, #2]
    433c:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    433e:	4621      	mov	r1, r4
    4340:	2004      	movs	r0, #4
    4342:	f7ff fa17 	bl	3774 <usb_tx>
		tx_packet = NULL;
    4346:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    4348:	2300      	movs	r3, #0
    434a:	702b      	strb	r3, [r5, #0]
}
    434c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    434e:	f7ff fe79 	bl	4044 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    4352:	4b08      	ldr	r3, [pc, #32]	; (4374 <usb_serial_flush_output+0x54>)
		if (tx) {
    4354:	4601      	mov	r1, r0
    4356:	b120      	cbz	r0, 4362 <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    4358:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    435a:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    435c:	f7ff fa0a 	bl	3774 <usb_tx>
    4360:	e7f2      	b.n	4348 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    4362:	701f      	strb	r7, [r3, #0]
    4364:	e7f0      	b.n	4348 <usb_serial_flush_output+0x28>
    4366:	bf00      	nop
    4368:	1fff620c 	.word	0x1fff620c
    436c:	1fff6224 	.word	0x1fff6224
    4370:	1fff6221 	.word	0x1fff6221
    4374:	1fff6238 	.word	0x1fff6238

00004378 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    4378:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    437a:	4b0e      	ldr	r3, [pc, #56]	; (43b4 <usb_serial_flush_callback+0x3c>)
    437c:	781b      	ldrb	r3, [r3, #0]
    437e:	b953      	cbnz	r3, 4396 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    4380:	4c0d      	ldr	r4, [pc, #52]	; (43b8 <usb_serial_flush_callback+0x40>)
    4382:	6821      	ldr	r1, [r4, #0]
    4384:	b141      	cbz	r1, 4398 <usb_serial_flush_callback+0x20>
    4386:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    438a:	884b      	ldrh	r3, [r1, #2]
    438c:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    438e:	2004      	movs	r0, #4
    4390:	f7ff f9f0 	bl	3774 <usb_tx>
		tx_packet = NULL;
    4394:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    4396:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    4398:	f7ff fe54 	bl	4044 <usb_malloc>
		if (tx) {
    439c:	4601      	mov	r1, r0
    439e:	b120      	cbz	r0, 43aa <usb_serial_flush_callback+0x32>
}
    43a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    43a4:	2004      	movs	r0, #4
    43a6:	f7ff b9e5 	b.w	3774 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    43aa:	4b04      	ldr	r3, [pc, #16]	; (43bc <usb_serial_flush_callback+0x44>)
    43ac:	2201      	movs	r2, #1
    43ae:	701a      	strb	r2, [r3, #0]
}
    43b0:	bd38      	pop	{r3, r4, r5, pc}
    43b2:	bf00      	nop
    43b4:	1fff6221 	.word	0x1fff6221
    43b8:	1fff6224 	.word	0x1fff6224
    43bc:	1fff6238 	.word	0x1fff6238

000043c0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    43c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    43c4:	4e32      	ldr	r6, [pc, #200]	; (4490 <yield+0xd0>)
    43c6:	7833      	ldrb	r3, [r6, #0]
    43c8:	b163      	cbz	r3, 43e4 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    43ca:	4f32      	ldr	r7, [pc, #200]	; (4494 <yield+0xd4>)
    43cc:	783a      	ldrb	r2, [r7, #0]
    43ce:	b94a      	cbnz	r2, 43e4 <yield+0x24>
	running = 1;
    43d0:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    43d2:	07d9      	lsls	r1, r3, #31
	running = 1;
    43d4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    43d6:	d443      	bmi.n	4460 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    43d8:	079a      	lsls	r2, r3, #30
    43da:	d426      	bmi.n	442a <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    43dc:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    43de:	075b      	lsls	r3, r3, #29
	running = 0;
    43e0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    43e2:	d401      	bmi.n	43e8 <yield+0x28>
	
};
    43e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    43e8:	4b2b      	ldr	r3, [pc, #172]	; (4498 <yield+0xd8>)
    43ea:	681a      	ldr	r2, [r3, #0]
    43ec:	2a00      	cmp	r2, #0
    43ee:	d0f9      	beq.n	43e4 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    43f0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    43f4:	2a00      	cmp	r2, #0
    43f6:	d1f5      	bne.n	43e4 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    43f8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    43fc:	b672      	cpsid	i
		EventResponder *first = firstYield;
    43fe:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4400:	2800      	cmp	r0, #0
    4402:	d03a      	beq.n	447a <yield+0xba>
		if (runningFromYield) {
    4404:	4c25      	ldr	r4, [pc, #148]	; (449c <yield+0xdc>)
    4406:	7821      	ldrb	r1, [r4, #0]
    4408:	2900      	cmp	r1, #0
    440a:	d136      	bne.n	447a <yield+0xba>
		firstYield = first->_next;
    440c:	6942      	ldr	r2, [r0, #20]
    440e:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    4410:	2301      	movs	r3, #1
    4412:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    4414:	2a00      	cmp	r2, #0
    4416:	d037      	beq.n	4488 <yield+0xc8>
			firstYield->_prev = nullptr;
    4418:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    441a:	b905      	cbnz	r5, 441e <yield+0x5e>
    441c:	b662      	cpsie	i
		first->_triggered = false;
    441e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    4420:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    4422:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4424:	4798      	blx	r3
		runningFromYield = false;
    4426:	7025      	strb	r5, [r4, #0]
    4428:	e7dc      	b.n	43e4 <yield+0x24>
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    442a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 44a8 <yield+0xe8>
    442e:	f898 2000 	ldrb.w	r2, [r8]
    4432:	2a00      	cmp	r2, #0
    4434:	d0d2      	beq.n	43dc <yield+0x1c>
    4436:	2500      	movs	r5, #0
    4438:	f8df 9070 	ldr.w	r9, [pc, #112]	; 44ac <yield+0xec>
    443c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    443e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    4442:	6823      	ldr	r3, [r4, #0]
    4444:	4620      	mov	r0, r4
    4446:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4448:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    444a:	4798      	blx	r3
    444c:	b108      	cbz	r0, 4452 <yield+0x92>
    444e:	6923      	ldr	r3, [r4, #16]
    4450:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4452:	f898 2000 	ldrb.w	r2, [r8]
    4456:	b2eb      	uxtb	r3, r5
    4458:	429a      	cmp	r2, r3
    445a:	d8f0      	bhi.n	443e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    445c:	7833      	ldrb	r3, [r6, #0]
    445e:	e7bd      	b.n	43dc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    4460:	f7ff fe74 	bl	414c <usb_serial_available>
		if (Serial.available()) serialEvent();
    4464:	b968      	cbnz	r0, 4482 <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    4466:	4b0e      	ldr	r3, [pc, #56]	; (44a0 <yield+0xe0>)
    4468:	781b      	ldrb	r3, [r3, #0]
    446a:	b90b      	cbnz	r3, 4470 <yield+0xb0>
    446c:	7833      	ldrb	r3, [r6, #0]
    446e:	e7b3      	b.n	43d8 <yield+0x18>
    4470:	7833      	ldrb	r3, [r6, #0]
    4472:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4476:	7033      	strb	r3, [r6, #0]
    4478:	e7ae      	b.n	43d8 <yield+0x18>
		if (doit) __enable_irq();
    447a:	2d00      	cmp	r5, #0
    447c:	d1b2      	bne.n	43e4 <yield+0x24>
    447e:	b662      	cpsie	i
    4480:	e7b0      	b.n	43e4 <yield+0x24>
		if (Serial.available()) serialEvent();
    4482:	f000 f8a5 	bl	45d0 <serialEvent()>
    4486:	e7ee      	b.n	4466 <yield+0xa6>
			lastYield = nullptr;
    4488:	4b06      	ldr	r3, [pc, #24]	; (44a4 <yield+0xe4>)
    448a:	601a      	str	r2, [r3, #0]
    448c:	e7c5      	b.n	441a <yield+0x5a>
    448e:	bf00      	nop
    4490:	1fff076c 	.word	0x1fff076c
    4494:	1fff6239 	.word	0x1fff6239
    4498:	1fff623c 	.word	0x1fff623c
    449c:	1fff6248 	.word	0x1fff6248
    44a0:	0000b8d8 	.word	0x0000b8d8
    44a4:	1fff624c 	.word	0x1fff624c
    44a8:	1fff6268 	.word	0x1fff6268
    44ac:	1fff6250 	.word	0x1fff6250

000044b0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    44b0:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    44b2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    44b6:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    44b8:	4c0c      	ldr	r4, [pc, #48]	; (44ec <EventResponder::runFromInterrupt()+0x3c>)
    44ba:	6820      	ldr	r0, [r4, #0]
		if (first) {
    44bc:	b180      	cbz	r0, 44e0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    44be:	4e0c      	ldr	r6, [pc, #48]	; (44f0 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    44c0:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    44c2:	6943      	ldr	r3, [r0, #20]
    44c4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    44c6:	b173      	cbz	r3, 44e6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    44c8:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    44ca:	b902      	cbnz	r2, 44ce <EventResponder::runFromInterrupt()+0x1e>
    44cc:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    44ce:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    44d0:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    44d2:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    44d4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    44d8:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    44da:	6820      	ldr	r0, [r4, #0]
		if (first) {
    44dc:	2800      	cmp	r0, #0
    44de:	d1f0      	bne.n	44c2 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    44e0:	b902      	cbnz	r2, 44e4 <EventResponder::runFromInterrupt()+0x34>
    44e2:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    44e4:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    44e6:	6033      	str	r3, [r6, #0]
    44e8:	e7ef      	b.n	44ca <EventResponder::runFromInterrupt()+0x1a>
    44ea:	bf00      	nop
    44ec:	1fff6244 	.word	0x1fff6244
    44f0:	1fff6240 	.word	0x1fff6240

000044f4 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    44f4:	f7ff bfdc 	b.w	44b0 <EventResponder::runFromInterrupt()>

000044f8 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    44f8:	4a02      	ldr	r2, [pc, #8]	; (4504 <systick_isr+0xc>)
    44fa:	6813      	ldr	r3, [r2, #0]
    44fc:	3301      	adds	r3, #1
    44fe:	6013      	str	r3, [r2, #0]
}
    4500:	4770      	bx	lr
    4502:	bf00      	nop
    4504:	1fff612c 	.word	0x1fff612c

00004508 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4508:	4b2a      	ldr	r3, [pc, #168]	; (45b4 <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    450a:	4a2b      	ldr	r2, [pc, #172]	; (45b8 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    450c:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    450e:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    4510:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4512:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    4514:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4516:	4829      	ldr	r0, [pc, #164]	; (45bc <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    4518:	2b08      	cmp	r3, #8
    451a:	d034      	beq.n	4586 <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    451c:	2b0a      	cmp	r3, #10
    451e:	d020      	beq.n	4562 <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    4520:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    4522:	4b27      	ldr	r3, [pc, #156]	; (45c0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    4524:	bf0c      	ite	eq
    4526:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4528:	215d      	movne	r1, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    452a:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    452c:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    452e:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4530:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4532:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4534:	4b23      	ldr	r3, [pc, #140]	; (45c4 <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4536:	4921      	ldr	r1, [pc, #132]	; (45bc <analog_init+0xb4>)
	if (analog_reference_internal) {
    4538:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    453a:	4a21      	ldr	r2, [pc, #132]	; (45c0 <analog_init+0xb8>)
	if (analog_reference_internal) {
    453c:	b1cb      	cbz	r3, 4572 <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    453e:	2301      	movs	r3, #1
    4540:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4542:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4544:	4b20      	ldr	r3, [pc, #128]	; (45c8 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4546:	491d      	ldr	r1, [pc, #116]	; (45bc <analog_init+0xb4>)
	num = analog_num_average;
    4548:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    454a:	4a1d      	ldr	r2, [pc, #116]	; (45c0 <analog_init+0xb8>)
	if (num <= 1) {
    454c:	2b01      	cmp	r3, #1
    454e:	d913      	bls.n	4578 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    4550:	2b04      	cmp	r3, #4
    4552:	d81b      	bhi.n	458c <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4554:	2384      	movs	r3, #132	; 0x84
    4556:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4558:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    455a:	4b1c      	ldr	r3, [pc, #112]	; (45cc <analog_init+0xc4>)
    455c:	2201      	movs	r2, #1
    455e:	701a      	strb	r2, [r3, #0]
}
    4560:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4562:	4b17      	ldr	r3, [pc, #92]	; (45c0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4564:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4566:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4568:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    456a:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    456c:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    456e:	60da      	str	r2, [r3, #12]
    4570:	e7e0      	b.n	4534 <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    4572:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    4574:	6213      	str	r3, [r2, #32]
    4576:	e7e5      	b.n	4544 <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4578:	2380      	movs	r3, #128	; 0x80
    457a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    457c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    457e:	4b13      	ldr	r3, [pc, #76]	; (45cc <analog_init+0xc4>)
    4580:	2201      	movs	r2, #1
    4582:	701a      	strb	r2, [r3, #0]
}
    4584:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4586:	4b0e      	ldr	r3, [pc, #56]	; (45c0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4588:	2121      	movs	r1, #33	; 0x21
    458a:	e7ec      	b.n	4566 <analog_init+0x5e>
	} else if (num <= 8) {
    458c:	2b08      	cmp	r3, #8
    458e:	d806      	bhi.n	459e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    4590:	2385      	movs	r3, #133	; 0x85
    4592:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    4594:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    4596:	4b0d      	ldr	r3, [pc, #52]	; (45cc <analog_init+0xc4>)
    4598:	2201      	movs	r2, #1
    459a:	701a      	strb	r2, [r3, #0]
}
    459c:	4770      	bx	lr
	} else if (num <= 16) {
    459e:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    45a0:	bf94      	ite	ls
    45a2:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    45a4:	2387      	movhi	r3, #135	; 0x87
    45a6:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    45a8:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    45aa:	4b08      	ldr	r3, [pc, #32]	; (45cc <analog_init+0xc4>)
    45ac:	2201      	movs	r2, #1
    45ae:	701a      	strb	r2, [r3, #0]
}
    45b0:	4770      	bx	lr
    45b2:	bf00      	nop
    45b4:	40074000 	.word	0x40074000
    45b8:	1fff076d 	.word	0x1fff076d
    45bc:	4003b000 	.word	0x4003b000
    45c0:	400bb000 	.word	0x400bb000
    45c4:	1fff6269 	.word	0x1fff6269
    45c8:	1fff076e 	.word	0x1fff076e
    45cc:	1fff626a 	.word	0x1fff626a

000045d0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    45d0:	4770      	bx	lr
    45d2:	bf00      	nop

000045d4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    45d4:	b510      	push	{r4, lr}
    45d6:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    45d8:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    45da:	f7fe feaf 	bl	333c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    45de:	4a17      	ldr	r2, [pc, #92]	; (463c <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    45e0:	4917      	ldr	r1, [pc, #92]	; (4640 <usb_init_serialnumber+0x6c>)
    45e2:	6051      	str	r1, [r2, #4]
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    45e4:	2070      	movs	r0, #112	; 0x70
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    45e6:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    45e8:	7010      	strb	r0, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    45ea:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    45ec:	7813      	ldrb	r3, [r2, #0]
    45ee:	061b      	lsls	r3, r3, #24
    45f0:	d5fc      	bpl.n	45ec <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOBB;
    45f2:	68d4      	ldr	r4, [r2, #12]
	kinetis_hsrun_enable();
    45f4:	f7fe feb8 	bl	3368 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    45f8:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    45fa:	4b12      	ldr	r3, [pc, #72]	; (4644 <usb_init_serialnumber+0x70>)
    45fc:	429c      	cmp	r4, r3
    45fe:	bf3c      	itt	cc
    4600:	eb04 0484 	addcc.w	r4, r4, r4, lsl #2
    4604:	0064      	lslcc	r4, r4, #1
	ultoa(num, buf, 10);
    4606:	4620      	mov	r0, r4
    4608:	4c0f      	ldr	r4, [pc, #60]	; (4648 <usb_init_serialnumber+0x74>)
    460a:	a901      	add	r1, sp, #4
    460c:	220a      	movs	r2, #10
    460e:	f7fe fec1 	bl	3394 <ultoa>
	for (i=0; i<10; i++) {
    4612:	a901      	add	r1, sp, #4
    4614:	4620      	mov	r0, r4
    4616:	2300      	movs	r3, #0
		char c = buf[i];
    4618:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    461c:	3301      	adds	r3, #1
		if (!c) break;
    461e:	b13a      	cbz	r2, 4630 <usb_init_serialnumber+0x5c>
	for (i=0; i<10; i++) {
    4620:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    4622:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    4626:	d1f7      	bne.n	4618 <usb_init_serialnumber+0x44>
    4628:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    462a:	7023      	strb	r3, [r4, #0]
}
    462c:	b004      	add	sp, #16
    462e:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4630:	005b      	lsls	r3, r3, #1
    4632:	b2db      	uxtb	r3, r3
    4634:	7023      	strb	r3, [r4, #0]
}
    4636:	b004      	add	sp, #16
    4638:	bd10      	pop	{r4, pc}
    463a:	bf00      	nop
    463c:	40020000 	.word	0x40020000
    4640:	41070000 	.word	0x41070000
    4644:	00989680 	.word	0x00989680
    4648:	1fff07fc 	.word	0x1fff07fc

0000464c <__aeabi_drsub>:
    464c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    4650:	e002      	b.n	4658 <__adddf3>
    4652:	bf00      	nop

00004654 <__aeabi_dsub>:
    4654:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004658 <__adddf3>:
    4658:	b530      	push	{r4, r5, lr}
    465a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    465e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    4662:	ea94 0f05 	teq	r4, r5
    4666:	bf08      	it	eq
    4668:	ea90 0f02 	teqeq	r0, r2
    466c:	bf1f      	itttt	ne
    466e:	ea54 0c00 	orrsne.w	ip, r4, r0
    4672:	ea55 0c02 	orrsne.w	ip, r5, r2
    4676:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    467a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    467e:	f000 80e2 	beq.w	4846 <__adddf3+0x1ee>
    4682:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4686:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    468a:	bfb8      	it	lt
    468c:	426d      	neglt	r5, r5
    468e:	dd0c      	ble.n	46aa <__adddf3+0x52>
    4690:	442c      	add	r4, r5
    4692:	ea80 0202 	eor.w	r2, r0, r2
    4696:	ea81 0303 	eor.w	r3, r1, r3
    469a:	ea82 0000 	eor.w	r0, r2, r0
    469e:	ea83 0101 	eor.w	r1, r3, r1
    46a2:	ea80 0202 	eor.w	r2, r0, r2
    46a6:	ea81 0303 	eor.w	r3, r1, r3
    46aa:	2d36      	cmp	r5, #54	; 0x36
    46ac:	bf88      	it	hi
    46ae:	bd30      	pophi	{r4, r5, pc}
    46b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    46b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    46b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    46bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    46c0:	d002      	beq.n	46c8 <__adddf3+0x70>
    46c2:	4240      	negs	r0, r0
    46c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    46c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    46cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    46d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    46d4:	d002      	beq.n	46dc <__adddf3+0x84>
    46d6:	4252      	negs	r2, r2
    46d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    46dc:	ea94 0f05 	teq	r4, r5
    46e0:	f000 80a7 	beq.w	4832 <__adddf3+0x1da>
    46e4:	f1a4 0401 	sub.w	r4, r4, #1
    46e8:	f1d5 0e20 	rsbs	lr, r5, #32
    46ec:	db0d      	blt.n	470a <__adddf3+0xb2>
    46ee:	fa02 fc0e 	lsl.w	ip, r2, lr
    46f2:	fa22 f205 	lsr.w	r2, r2, r5
    46f6:	1880      	adds	r0, r0, r2
    46f8:	f141 0100 	adc.w	r1, r1, #0
    46fc:	fa03 f20e 	lsl.w	r2, r3, lr
    4700:	1880      	adds	r0, r0, r2
    4702:	fa43 f305 	asr.w	r3, r3, r5
    4706:	4159      	adcs	r1, r3
    4708:	e00e      	b.n	4728 <__adddf3+0xd0>
    470a:	f1a5 0520 	sub.w	r5, r5, #32
    470e:	f10e 0e20 	add.w	lr, lr, #32
    4712:	2a01      	cmp	r2, #1
    4714:	fa03 fc0e 	lsl.w	ip, r3, lr
    4718:	bf28      	it	cs
    471a:	f04c 0c02 	orrcs.w	ip, ip, #2
    471e:	fa43 f305 	asr.w	r3, r3, r5
    4722:	18c0      	adds	r0, r0, r3
    4724:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    4728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    472c:	d507      	bpl.n	473e <__adddf3+0xe6>
    472e:	f04f 0e00 	mov.w	lr, #0
    4732:	f1dc 0c00 	rsbs	ip, ip, #0
    4736:	eb7e 0000 	sbcs.w	r0, lr, r0
    473a:	eb6e 0101 	sbc.w	r1, lr, r1
    473e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    4742:	d31b      	bcc.n	477c <__adddf3+0x124>
    4744:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4748:	d30c      	bcc.n	4764 <__adddf3+0x10c>
    474a:	0849      	lsrs	r1, r1, #1
    474c:	ea5f 0030 	movs.w	r0, r0, rrx
    4750:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4754:	f104 0401 	add.w	r4, r4, #1
    4758:	ea4f 5244 	mov.w	r2, r4, lsl #21
    475c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    4760:	f080 809a 	bcs.w	4898 <__adddf3+0x240>
    4764:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4768:	bf08      	it	eq
    476a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    476e:	f150 0000 	adcs.w	r0, r0, #0
    4772:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4776:	ea41 0105 	orr.w	r1, r1, r5
    477a:	bd30      	pop	{r4, r5, pc}
    477c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4780:	4140      	adcs	r0, r0
    4782:	eb41 0101 	adc.w	r1, r1, r1
    4786:	3c01      	subs	r4, #1
    4788:	bf28      	it	cs
    478a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    478e:	d2e9      	bcs.n	4764 <__adddf3+0x10c>
    4790:	f091 0f00 	teq	r1, #0
    4794:	bf04      	itt	eq
    4796:	4601      	moveq	r1, r0
    4798:	2000      	moveq	r0, #0
    479a:	fab1 f381 	clz	r3, r1
    479e:	bf08      	it	eq
    47a0:	3320      	addeq	r3, #32
    47a2:	f1a3 030b 	sub.w	r3, r3, #11
    47a6:	f1b3 0220 	subs.w	r2, r3, #32
    47aa:	da0c      	bge.n	47c6 <__adddf3+0x16e>
    47ac:	320c      	adds	r2, #12
    47ae:	dd08      	ble.n	47c2 <__adddf3+0x16a>
    47b0:	f102 0c14 	add.w	ip, r2, #20
    47b4:	f1c2 020c 	rsb	r2, r2, #12
    47b8:	fa01 f00c 	lsl.w	r0, r1, ip
    47bc:	fa21 f102 	lsr.w	r1, r1, r2
    47c0:	e00c      	b.n	47dc <__adddf3+0x184>
    47c2:	f102 0214 	add.w	r2, r2, #20
    47c6:	bfd8      	it	le
    47c8:	f1c2 0c20 	rsble	ip, r2, #32
    47cc:	fa01 f102 	lsl.w	r1, r1, r2
    47d0:	fa20 fc0c 	lsr.w	ip, r0, ip
    47d4:	bfdc      	itt	le
    47d6:	ea41 010c 	orrle.w	r1, r1, ip
    47da:	4090      	lslle	r0, r2
    47dc:	1ae4      	subs	r4, r4, r3
    47de:	bfa2      	ittt	ge
    47e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    47e4:	4329      	orrge	r1, r5
    47e6:	bd30      	popge	{r4, r5, pc}
    47e8:	ea6f 0404 	mvn.w	r4, r4
    47ec:	3c1f      	subs	r4, #31
    47ee:	da1c      	bge.n	482a <__adddf3+0x1d2>
    47f0:	340c      	adds	r4, #12
    47f2:	dc0e      	bgt.n	4812 <__adddf3+0x1ba>
    47f4:	f104 0414 	add.w	r4, r4, #20
    47f8:	f1c4 0220 	rsb	r2, r4, #32
    47fc:	fa20 f004 	lsr.w	r0, r0, r4
    4800:	fa01 f302 	lsl.w	r3, r1, r2
    4804:	ea40 0003 	orr.w	r0, r0, r3
    4808:	fa21 f304 	lsr.w	r3, r1, r4
    480c:	ea45 0103 	orr.w	r1, r5, r3
    4810:	bd30      	pop	{r4, r5, pc}
    4812:	f1c4 040c 	rsb	r4, r4, #12
    4816:	f1c4 0220 	rsb	r2, r4, #32
    481a:	fa20 f002 	lsr.w	r0, r0, r2
    481e:	fa01 f304 	lsl.w	r3, r1, r4
    4822:	ea40 0003 	orr.w	r0, r0, r3
    4826:	4629      	mov	r1, r5
    4828:	bd30      	pop	{r4, r5, pc}
    482a:	fa21 f004 	lsr.w	r0, r1, r4
    482e:	4629      	mov	r1, r5
    4830:	bd30      	pop	{r4, r5, pc}
    4832:	f094 0f00 	teq	r4, #0
    4836:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    483a:	bf06      	itte	eq
    483c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    4840:	3401      	addeq	r4, #1
    4842:	3d01      	subne	r5, #1
    4844:	e74e      	b.n	46e4 <__adddf3+0x8c>
    4846:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    484a:	bf18      	it	ne
    484c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4850:	d029      	beq.n	48a6 <__adddf3+0x24e>
    4852:	ea94 0f05 	teq	r4, r5
    4856:	bf08      	it	eq
    4858:	ea90 0f02 	teqeq	r0, r2
    485c:	d005      	beq.n	486a <__adddf3+0x212>
    485e:	ea54 0c00 	orrs.w	ip, r4, r0
    4862:	bf04      	itt	eq
    4864:	4619      	moveq	r1, r3
    4866:	4610      	moveq	r0, r2
    4868:	bd30      	pop	{r4, r5, pc}
    486a:	ea91 0f03 	teq	r1, r3
    486e:	bf1e      	ittt	ne
    4870:	2100      	movne	r1, #0
    4872:	2000      	movne	r0, #0
    4874:	bd30      	popne	{r4, r5, pc}
    4876:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    487a:	d105      	bne.n	4888 <__adddf3+0x230>
    487c:	0040      	lsls	r0, r0, #1
    487e:	4149      	adcs	r1, r1
    4880:	bf28      	it	cs
    4882:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4886:	bd30      	pop	{r4, r5, pc}
    4888:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    488c:	bf3c      	itt	cc
    488e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4892:	bd30      	popcc	{r4, r5, pc}
    4894:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4898:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    489c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    48a0:	f04f 0000 	mov.w	r0, #0
    48a4:	bd30      	pop	{r4, r5, pc}
    48a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    48aa:	bf1a      	itte	ne
    48ac:	4619      	movne	r1, r3
    48ae:	4610      	movne	r0, r2
    48b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    48b4:	bf1c      	itt	ne
    48b6:	460b      	movne	r3, r1
    48b8:	4602      	movne	r2, r0
    48ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    48be:	bf06      	itte	eq
    48c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    48c4:	ea91 0f03 	teqeq	r1, r3
    48c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    48cc:	bd30      	pop	{r4, r5, pc}
    48ce:	bf00      	nop

000048d0 <__aeabi_ui2d>:
    48d0:	f090 0f00 	teq	r0, #0
    48d4:	bf04      	itt	eq
    48d6:	2100      	moveq	r1, #0
    48d8:	4770      	bxeq	lr
    48da:	b530      	push	{r4, r5, lr}
    48dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    48e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    48e4:	f04f 0500 	mov.w	r5, #0
    48e8:	f04f 0100 	mov.w	r1, #0
    48ec:	e750      	b.n	4790 <__adddf3+0x138>
    48ee:	bf00      	nop

000048f0 <__aeabi_i2d>:
    48f0:	f090 0f00 	teq	r0, #0
    48f4:	bf04      	itt	eq
    48f6:	2100      	moveq	r1, #0
    48f8:	4770      	bxeq	lr
    48fa:	b530      	push	{r4, r5, lr}
    48fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4900:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4904:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4908:	bf48      	it	mi
    490a:	4240      	negmi	r0, r0
    490c:	f04f 0100 	mov.w	r1, #0
    4910:	e73e      	b.n	4790 <__adddf3+0x138>
    4912:	bf00      	nop

00004914 <__aeabi_f2d>:
    4914:	0042      	lsls	r2, r0, #1
    4916:	ea4f 01e2 	mov.w	r1, r2, asr #3
    491a:	ea4f 0131 	mov.w	r1, r1, rrx
    491e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    4922:	bf1f      	itttt	ne
    4924:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4928:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    492c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    4930:	4770      	bxne	lr
    4932:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    4936:	bf08      	it	eq
    4938:	4770      	bxeq	lr
    493a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    493e:	bf04      	itt	eq
    4940:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    4944:	4770      	bxeq	lr
    4946:	b530      	push	{r4, r5, lr}
    4948:	f44f 7460 	mov.w	r4, #896	; 0x380
    494c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4950:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4954:	e71c      	b.n	4790 <__adddf3+0x138>
    4956:	bf00      	nop

00004958 <__aeabi_ul2d>:
    4958:	ea50 0201 	orrs.w	r2, r0, r1
    495c:	bf08      	it	eq
    495e:	4770      	bxeq	lr
    4960:	b530      	push	{r4, r5, lr}
    4962:	f04f 0500 	mov.w	r5, #0
    4966:	e00a      	b.n	497e <__aeabi_l2d+0x16>

00004968 <__aeabi_l2d>:
    4968:	ea50 0201 	orrs.w	r2, r0, r1
    496c:	bf08      	it	eq
    496e:	4770      	bxeq	lr
    4970:	b530      	push	{r4, r5, lr}
    4972:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4976:	d502      	bpl.n	497e <__aeabi_l2d+0x16>
    4978:	4240      	negs	r0, r0
    497a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    497e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4982:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4986:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    498a:	f43f aed8 	beq.w	473e <__adddf3+0xe6>
    498e:	f04f 0203 	mov.w	r2, #3
    4992:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4996:	bf18      	it	ne
    4998:	3203      	addne	r2, #3
    499a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    499e:	bf18      	it	ne
    49a0:	3203      	addne	r2, #3
    49a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    49a6:	f1c2 0320 	rsb	r3, r2, #32
    49aa:	fa00 fc03 	lsl.w	ip, r0, r3
    49ae:	fa20 f002 	lsr.w	r0, r0, r2
    49b2:	fa01 fe03 	lsl.w	lr, r1, r3
    49b6:	ea40 000e 	orr.w	r0, r0, lr
    49ba:	fa21 f102 	lsr.w	r1, r1, r2
    49be:	4414      	add	r4, r2
    49c0:	e6bd      	b.n	473e <__adddf3+0xe6>
    49c2:	bf00      	nop

000049c4 <__gedf2>:
    49c4:	f04f 3cff 	mov.w	ip, #4294967295
    49c8:	e006      	b.n	49d8 <__cmpdf2+0x4>
    49ca:	bf00      	nop

000049cc <__ledf2>:
    49cc:	f04f 0c01 	mov.w	ip, #1
    49d0:	e002      	b.n	49d8 <__cmpdf2+0x4>
    49d2:	bf00      	nop

000049d4 <__cmpdf2>:
    49d4:	f04f 0c01 	mov.w	ip, #1
    49d8:	f84d cd04 	str.w	ip, [sp, #-4]!
    49dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    49e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    49e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    49e8:	bf18      	it	ne
    49ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    49ee:	d01b      	beq.n	4a28 <__cmpdf2+0x54>
    49f0:	b001      	add	sp, #4
    49f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    49f6:	bf0c      	ite	eq
    49f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    49fc:	ea91 0f03 	teqne	r1, r3
    4a00:	bf02      	ittt	eq
    4a02:	ea90 0f02 	teqeq	r0, r2
    4a06:	2000      	moveq	r0, #0
    4a08:	4770      	bxeq	lr
    4a0a:	f110 0f00 	cmn.w	r0, #0
    4a0e:	ea91 0f03 	teq	r1, r3
    4a12:	bf58      	it	pl
    4a14:	4299      	cmppl	r1, r3
    4a16:	bf08      	it	eq
    4a18:	4290      	cmpeq	r0, r2
    4a1a:	bf2c      	ite	cs
    4a1c:	17d8      	asrcs	r0, r3, #31
    4a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    4a22:	f040 0001 	orr.w	r0, r0, #1
    4a26:	4770      	bx	lr
    4a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4a30:	d102      	bne.n	4a38 <__cmpdf2+0x64>
    4a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4a36:	d107      	bne.n	4a48 <__cmpdf2+0x74>
    4a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4a40:	d1d6      	bne.n	49f0 <__cmpdf2+0x1c>
    4a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    4a46:	d0d3      	beq.n	49f0 <__cmpdf2+0x1c>
    4a48:	f85d 0b04 	ldr.w	r0, [sp], #4
    4a4c:	4770      	bx	lr
    4a4e:	bf00      	nop

00004a50 <__aeabi_cdrcmple>:
    4a50:	4684      	mov	ip, r0
    4a52:	4610      	mov	r0, r2
    4a54:	4662      	mov	r2, ip
    4a56:	468c      	mov	ip, r1
    4a58:	4619      	mov	r1, r3
    4a5a:	4663      	mov	r3, ip
    4a5c:	e000      	b.n	4a60 <__aeabi_cdcmpeq>
    4a5e:	bf00      	nop

00004a60 <__aeabi_cdcmpeq>:
    4a60:	b501      	push	{r0, lr}
    4a62:	f7ff ffb7 	bl	49d4 <__cmpdf2>
    4a66:	2800      	cmp	r0, #0
    4a68:	bf48      	it	mi
    4a6a:	f110 0f00 	cmnmi.w	r0, #0
    4a6e:	bd01      	pop	{r0, pc}

00004a70 <__aeabi_dcmpeq>:
    4a70:	f84d ed08 	str.w	lr, [sp, #-8]!
    4a74:	f7ff fff4 	bl	4a60 <__aeabi_cdcmpeq>
    4a78:	bf0c      	ite	eq
    4a7a:	2001      	moveq	r0, #1
    4a7c:	2000      	movne	r0, #0
    4a7e:	f85d fb08 	ldr.w	pc, [sp], #8
    4a82:	bf00      	nop

00004a84 <__aeabi_dcmplt>:
    4a84:	f84d ed08 	str.w	lr, [sp, #-8]!
    4a88:	f7ff ffea 	bl	4a60 <__aeabi_cdcmpeq>
    4a8c:	bf34      	ite	cc
    4a8e:	2001      	movcc	r0, #1
    4a90:	2000      	movcs	r0, #0
    4a92:	f85d fb08 	ldr.w	pc, [sp], #8
    4a96:	bf00      	nop

00004a98 <__aeabi_dcmple>:
    4a98:	f84d ed08 	str.w	lr, [sp, #-8]!
    4a9c:	f7ff ffe0 	bl	4a60 <__aeabi_cdcmpeq>
    4aa0:	bf94      	ite	ls
    4aa2:	2001      	movls	r0, #1
    4aa4:	2000      	movhi	r0, #0
    4aa6:	f85d fb08 	ldr.w	pc, [sp], #8
    4aaa:	bf00      	nop

00004aac <__aeabi_dcmpge>:
    4aac:	f84d ed08 	str.w	lr, [sp, #-8]!
    4ab0:	f7ff ffce 	bl	4a50 <__aeabi_cdrcmple>
    4ab4:	bf94      	ite	ls
    4ab6:	2001      	movls	r0, #1
    4ab8:	2000      	movhi	r0, #0
    4aba:	f85d fb08 	ldr.w	pc, [sp], #8
    4abe:	bf00      	nop

00004ac0 <__aeabi_dcmpgt>:
    4ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
    4ac4:	f7ff ffc4 	bl	4a50 <__aeabi_cdrcmple>
    4ac8:	bf34      	ite	cc
    4aca:	2001      	movcc	r0, #1
    4acc:	2000      	movcs	r0, #0
    4ace:	f85d fb08 	ldr.w	pc, [sp], #8
    4ad2:	bf00      	nop

00004ad4 <__aeabi_dcmpun>:
    4ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4adc:	d102      	bne.n	4ae4 <__aeabi_dcmpun+0x10>
    4ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4ae2:	d10a      	bne.n	4afa <__aeabi_dcmpun+0x26>
    4ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4aec:	d102      	bne.n	4af4 <__aeabi_dcmpun+0x20>
    4aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    4af2:	d102      	bne.n	4afa <__aeabi_dcmpun+0x26>
    4af4:	f04f 0000 	mov.w	r0, #0
    4af8:	4770      	bx	lr
    4afa:	f04f 0001 	mov.w	r0, #1
    4afe:	4770      	bx	lr

00004b00 <_malloc_r>:
    4b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b04:	f101 060b 	add.w	r6, r1, #11
    4b08:	2e16      	cmp	r6, #22
    4b0a:	b083      	sub	sp, #12
    4b0c:	4604      	mov	r4, r0
    4b0e:	d824      	bhi.n	4b5a <_malloc_r+0x5a>
    4b10:	2910      	cmp	r1, #16
    4b12:	f200 80ba 	bhi.w	4c8a <_malloc_r+0x18a>
    4b16:	f000 faa3 	bl	5060 <__malloc_lock>
    4b1a:	2610      	movs	r6, #16
    4b1c:	2218      	movs	r2, #24
    4b1e:	2002      	movs	r0, #2
    4b20:	4fb5      	ldr	r7, [pc, #724]	; (4df8 <_malloc_r+0x2f8>)
    4b22:	443a      	add	r2, r7
    4b24:	f1a2 0108 	sub.w	r1, r2, #8
    4b28:	6853      	ldr	r3, [r2, #4]
    4b2a:	428b      	cmp	r3, r1
    4b2c:	f000 80ba 	beq.w	4ca4 <_malloc_r+0x1a4>
    4b30:	685a      	ldr	r2, [r3, #4]
    4b32:	68d9      	ldr	r1, [r3, #12]
    4b34:	f022 0203 	bic.w	r2, r2, #3
    4b38:	441a      	add	r2, r3
    4b3a:	689d      	ldr	r5, [r3, #8]
    4b3c:	60e9      	str	r1, [r5, #12]
    4b3e:	608d      	str	r5, [r1, #8]
    4b40:	6851      	ldr	r1, [r2, #4]
    4b42:	f041 0101 	orr.w	r1, r1, #1
    4b46:	4620      	mov	r0, r4
    4b48:	6051      	str	r1, [r2, #4]
    4b4a:	f103 0508 	add.w	r5, r3, #8
    4b4e:	f000 fa8d 	bl	506c <__malloc_unlock>
    4b52:	4628      	mov	r0, r5
    4b54:	b003      	add	sp, #12
    4b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b5a:	f036 0607 	bics.w	r6, r6, #7
    4b5e:	f100 8094 	bmi.w	4c8a <_malloc_r+0x18a>
    4b62:	42b1      	cmp	r1, r6
    4b64:	f200 8091 	bhi.w	4c8a <_malloc_r+0x18a>
    4b68:	f000 fa7a 	bl	5060 <__malloc_lock>
    4b6c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    4b70:	f0c0 819a 	bcc.w	4ea8 <_malloc_r+0x3a8>
    4b74:	0a73      	lsrs	r3, r6, #9
    4b76:	f000 808f 	beq.w	4c98 <_malloc_r+0x198>
    4b7a:	2b04      	cmp	r3, #4
    4b7c:	f200 816f 	bhi.w	4e5e <_malloc_r+0x35e>
    4b80:	09b3      	lsrs	r3, r6, #6
    4b82:	f103 0039 	add.w	r0, r3, #57	; 0x39
    4b86:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    4b8a:	00c3      	lsls	r3, r0, #3
    4b8c:	4f9a      	ldr	r7, [pc, #616]	; (4df8 <_malloc_r+0x2f8>)
    4b8e:	443b      	add	r3, r7
    4b90:	f1a3 0508 	sub.w	r5, r3, #8
    4b94:	685b      	ldr	r3, [r3, #4]
    4b96:	429d      	cmp	r5, r3
    4b98:	d106      	bne.n	4ba8 <_malloc_r+0xa8>
    4b9a:	e00c      	b.n	4bb6 <_malloc_r+0xb6>
    4b9c:	2900      	cmp	r1, #0
    4b9e:	f280 8127 	bge.w	4df0 <_malloc_r+0x2f0>
    4ba2:	68db      	ldr	r3, [r3, #12]
    4ba4:	429d      	cmp	r5, r3
    4ba6:	d006      	beq.n	4bb6 <_malloc_r+0xb6>
    4ba8:	685a      	ldr	r2, [r3, #4]
    4baa:	f022 0203 	bic.w	r2, r2, #3
    4bae:	1b91      	subs	r1, r2, r6
    4bb0:	290f      	cmp	r1, #15
    4bb2:	ddf3      	ble.n	4b9c <_malloc_r+0x9c>
    4bb4:	4660      	mov	r0, ip
    4bb6:	693d      	ldr	r5, [r7, #16]
    4bb8:	f8df c250 	ldr.w	ip, [pc, #592]	; 4e0c <_malloc_r+0x30c>
    4bbc:	4565      	cmp	r5, ip
    4bbe:	d07c      	beq.n	4cba <_malloc_r+0x1ba>
    4bc0:	686a      	ldr	r2, [r5, #4]
    4bc2:	f022 0203 	bic.w	r2, r2, #3
    4bc6:	1b93      	subs	r3, r2, r6
    4bc8:	2b0f      	cmp	r3, #15
    4bca:	f300 817b 	bgt.w	4ec4 <_malloc_r+0x3c4>
    4bce:	2b00      	cmp	r3, #0
    4bd0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    4bd4:	f280 816c 	bge.w	4eb0 <_malloc_r+0x3b0>
    4bd8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4bdc:	f080 811a 	bcs.w	4e14 <_malloc_r+0x314>
    4be0:	08d3      	lsrs	r3, r2, #3
    4be2:	6879      	ldr	r1, [r7, #4]
    4be4:	3301      	adds	r3, #1
    4be6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    4bea:	2201      	movs	r2, #1
    4bec:	fa02 f20e 	lsl.w	r2, r2, lr
    4bf0:	430a      	orrs	r2, r1
    4bf2:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    4bf6:	f8c5 e008 	str.w	lr, [r5, #8]
    4bfa:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    4bfe:	3908      	subs	r1, #8
    4c00:	60e9      	str	r1, [r5, #12]
    4c02:	607a      	str	r2, [r7, #4]
    4c04:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    4c08:	f8ce 500c 	str.w	r5, [lr, #12]
    4c0c:	1083      	asrs	r3, r0, #2
    4c0e:	2101      	movs	r1, #1
    4c10:	4099      	lsls	r1, r3
    4c12:	4291      	cmp	r1, r2
    4c14:	d857      	bhi.n	4cc6 <_malloc_r+0x1c6>
    4c16:	4211      	tst	r1, r2
    4c18:	d106      	bne.n	4c28 <_malloc_r+0x128>
    4c1a:	f020 0003 	bic.w	r0, r0, #3
    4c1e:	0049      	lsls	r1, r1, #1
    4c20:	4211      	tst	r1, r2
    4c22:	f100 0004 	add.w	r0, r0, #4
    4c26:	d0fa      	beq.n	4c1e <_malloc_r+0x11e>
    4c28:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    4c2c:	464d      	mov	r5, r9
    4c2e:	4686      	mov	lr, r0
    4c30:	f8d5 800c 	ldr.w	r8, [r5, #12]
    4c34:	4545      	cmp	r5, r8
    4c36:	d108      	bne.n	4c4a <_malloc_r+0x14a>
    4c38:	e11d      	b.n	4e76 <_malloc_r+0x376>
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	f280 8124 	bge.w	4e88 <_malloc_r+0x388>
    4c40:	f8d8 800c 	ldr.w	r8, [r8, #12]
    4c44:	4545      	cmp	r5, r8
    4c46:	f000 8116 	beq.w	4e76 <_malloc_r+0x376>
    4c4a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4c4e:	f022 0203 	bic.w	r2, r2, #3
    4c52:	1b93      	subs	r3, r2, r6
    4c54:	2b0f      	cmp	r3, #15
    4c56:	ddf0      	ble.n	4c3a <_malloc_r+0x13a>
    4c58:	4620      	mov	r0, r4
    4c5a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    4c5e:	eb08 0106 	add.w	r1, r8, r6
    4c62:	f046 0601 	orr.w	r6, r6, #1
    4c66:	f8c8 6004 	str.w	r6, [r8, #4]
    4c6a:	60ec      	str	r4, [r5, #12]
    4c6c:	60a5      	str	r5, [r4, #8]
    4c6e:	f043 0401 	orr.w	r4, r3, #1
    4c72:	e9c7 1104 	strd	r1, r1, [r7, #16]
    4c76:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    4c7a:	604c      	str	r4, [r1, #4]
    4c7c:	f848 3002 	str.w	r3, [r8, r2]
    4c80:	f000 f9f4 	bl	506c <__malloc_unlock>
    4c84:	f108 0508 	add.w	r5, r8, #8
    4c88:	e002      	b.n	4c90 <_malloc_r+0x190>
    4c8a:	230c      	movs	r3, #12
    4c8c:	6023      	str	r3, [r4, #0]
    4c8e:	2500      	movs	r5, #0
    4c90:	4628      	mov	r0, r5
    4c92:	b003      	add	sp, #12
    4c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c98:	f44f 7300 	mov.w	r3, #512	; 0x200
    4c9c:	2040      	movs	r0, #64	; 0x40
    4c9e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    4ca2:	e773      	b.n	4b8c <_malloc_r+0x8c>
    4ca4:	68d3      	ldr	r3, [r2, #12]
    4ca6:	429a      	cmp	r2, r3
    4ca8:	bf08      	it	eq
    4caa:	3002      	addeq	r0, #2
    4cac:	f47f af40 	bne.w	4b30 <_malloc_r+0x30>
    4cb0:	693d      	ldr	r5, [r7, #16]
    4cb2:	f8df c158 	ldr.w	ip, [pc, #344]	; 4e0c <_malloc_r+0x30c>
    4cb6:	4565      	cmp	r5, ip
    4cb8:	d182      	bne.n	4bc0 <_malloc_r+0xc0>
    4cba:	687a      	ldr	r2, [r7, #4]
    4cbc:	1083      	asrs	r3, r0, #2
    4cbe:	2101      	movs	r1, #1
    4cc0:	4099      	lsls	r1, r3
    4cc2:	4291      	cmp	r1, r2
    4cc4:	d9a7      	bls.n	4c16 <_malloc_r+0x116>
    4cc6:	68bd      	ldr	r5, [r7, #8]
    4cc8:	686b      	ldr	r3, [r5, #4]
    4cca:	f023 0903 	bic.w	r9, r3, #3
    4cce:	454e      	cmp	r6, r9
    4cd0:	d803      	bhi.n	4cda <_malloc_r+0x1da>
    4cd2:	eba9 0306 	sub.w	r3, r9, r6
    4cd6:	2b0f      	cmp	r3, #15
    4cd8:	dc7a      	bgt.n	4dd0 <_malloc_r+0x2d0>
    4cda:	f8df b134 	ldr.w	fp, [pc, #308]	; 4e10 <_malloc_r+0x310>
    4cde:	4b47      	ldr	r3, [pc, #284]	; (4dfc <_malloc_r+0x2fc>)
    4ce0:	f8db 2000 	ldr.w	r2, [fp]
    4ce4:	681b      	ldr	r3, [r3, #0]
    4ce6:	3201      	adds	r2, #1
    4ce8:	4433      	add	r3, r6
    4cea:	eb05 0a09 	add.w	sl, r5, r9
    4cee:	f000 8133 	beq.w	4f58 <_malloc_r+0x458>
    4cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    4cf6:	330f      	adds	r3, #15
    4cf8:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    4cfc:	f028 080f 	bic.w	r8, r8, #15
    4d00:	4641      	mov	r1, r8
    4d02:	4620      	mov	r0, r4
    4d04:	f000 fe78 	bl	59f8 <_sbrk_r>
    4d08:	1c41      	adds	r1, r0, #1
    4d0a:	4602      	mov	r2, r0
    4d0c:	f000 80f3 	beq.w	4ef6 <_malloc_r+0x3f6>
    4d10:	4582      	cmp	sl, r0
    4d12:	f200 80ee 	bhi.w	4ef2 <_malloc_r+0x3f2>
    4d16:	4b3a      	ldr	r3, [pc, #232]	; (4e00 <_malloc_r+0x300>)
    4d18:	6819      	ldr	r1, [r3, #0]
    4d1a:	4441      	add	r1, r8
    4d1c:	6019      	str	r1, [r3, #0]
    4d1e:	4608      	mov	r0, r1
    4d20:	f000 814e 	beq.w	4fc0 <_malloc_r+0x4c0>
    4d24:	f8db 1000 	ldr.w	r1, [fp]
    4d28:	9301      	str	r3, [sp, #4]
    4d2a:	3101      	adds	r1, #1
    4d2c:	bf1b      	ittet	ne
    4d2e:	eba2 010a 	subne.w	r1, r2, sl
    4d32:	1809      	addne	r1, r1, r0
    4d34:	f8cb 2000 	streq.w	r2, [fp]
    4d38:	6019      	strne	r1, [r3, #0]
    4d3a:	f012 0b07 	ands.w	fp, r2, #7
    4d3e:	f000 8117 	beq.w	4f70 <_malloc_r+0x470>
    4d42:	f1cb 0108 	rsb	r1, fp, #8
    4d46:	440a      	add	r2, r1
    4d48:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    4d4c:	4490      	add	r8, r2
    4d4e:	3108      	adds	r1, #8
    4d50:	eba1 0108 	sub.w	r1, r1, r8
    4d54:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    4d58:	4651      	mov	r1, sl
    4d5a:	4620      	mov	r0, r4
    4d5c:	9200      	str	r2, [sp, #0]
    4d5e:	f000 fe4b 	bl	59f8 <_sbrk_r>
    4d62:	1c42      	adds	r2, r0, #1
    4d64:	e9dd 2300 	ldrd	r2, r3, [sp]
    4d68:	f000 814f 	beq.w	500a <_malloc_r+0x50a>
    4d6c:	1a80      	subs	r0, r0, r2
    4d6e:	eb00 080a 	add.w	r8, r0, sl
    4d72:	6819      	ldr	r1, [r3, #0]
    4d74:	60ba      	str	r2, [r7, #8]
    4d76:	f048 0001 	orr.w	r0, r8, #1
    4d7a:	4451      	add	r1, sl
    4d7c:	42bd      	cmp	r5, r7
    4d7e:	6050      	str	r0, [r2, #4]
    4d80:	6019      	str	r1, [r3, #0]
    4d82:	f000 8129 	beq.w	4fd8 <_malloc_r+0x4d8>
    4d86:	f1b9 0f0f 	cmp.w	r9, #15
    4d8a:	f240 8127 	bls.w	4fdc <_malloc_r+0x4dc>
    4d8e:	6868      	ldr	r0, [r5, #4]
    4d90:	f1a9 0c0c 	sub.w	ip, r9, #12
    4d94:	f02c 0c07 	bic.w	ip, ip, #7
    4d98:	f000 0001 	and.w	r0, r0, #1
    4d9c:	ea40 000c 	orr.w	r0, r0, ip
    4da0:	6068      	str	r0, [r5, #4]
    4da2:	f04f 0e05 	mov.w	lr, #5
    4da6:	eb05 000c 	add.w	r0, r5, ip
    4daa:	f1bc 0f0f 	cmp.w	ip, #15
    4dae:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    4db2:	f200 8132 	bhi.w	501a <_malloc_r+0x51a>
    4db6:	6850      	ldr	r0, [r2, #4]
    4db8:	4615      	mov	r5, r2
    4dba:	4b12      	ldr	r3, [pc, #72]	; (4e04 <_malloc_r+0x304>)
    4dbc:	681a      	ldr	r2, [r3, #0]
    4dbe:	428a      	cmp	r2, r1
    4dc0:	bf38      	it	cc
    4dc2:	6019      	strcc	r1, [r3, #0]
    4dc4:	4b10      	ldr	r3, [pc, #64]	; (4e08 <_malloc_r+0x308>)
    4dc6:	681a      	ldr	r2, [r3, #0]
    4dc8:	428a      	cmp	r2, r1
    4dca:	bf38      	it	cc
    4dcc:	6019      	strcc	r1, [r3, #0]
    4dce:	e094      	b.n	4efa <_malloc_r+0x3fa>
    4dd0:	19aa      	adds	r2, r5, r6
    4dd2:	f043 0301 	orr.w	r3, r3, #1
    4dd6:	f046 0601 	orr.w	r6, r6, #1
    4dda:	606e      	str	r6, [r5, #4]
    4ddc:	4620      	mov	r0, r4
    4dde:	60ba      	str	r2, [r7, #8]
    4de0:	6053      	str	r3, [r2, #4]
    4de2:	f000 f943 	bl	506c <__malloc_unlock>
    4de6:	3508      	adds	r5, #8
    4de8:	4628      	mov	r0, r5
    4dea:	b003      	add	sp, #12
    4dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4df0:	68d9      	ldr	r1, [r3, #12]
    4df2:	441a      	add	r2, r3
    4df4:	e6a1      	b.n	4b3a <_malloc_r+0x3a>
    4df6:	bf00      	nop
    4df8:	1fff0814 	.word	0x1fff0814
    4dfc:	1fff629c 	.word	0x1fff629c
    4e00:	1fff626c 	.word	0x1fff626c
    4e04:	1fff6294 	.word	0x1fff6294
    4e08:	1fff6298 	.word	0x1fff6298
    4e0c:	1fff081c 	.word	0x1fff081c
    4e10:	1fff0c1c 	.word	0x1fff0c1c
    4e14:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    4e18:	ea4f 2352 	mov.w	r3, r2, lsr #9
    4e1c:	d363      	bcc.n	4ee6 <_malloc_r+0x3e6>
    4e1e:	2b14      	cmp	r3, #20
    4e20:	f200 80b7 	bhi.w	4f92 <_malloc_r+0x492>
    4e24:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    4e28:	00c9      	lsls	r1, r1, #3
    4e2a:	335b      	adds	r3, #91	; 0x5b
    4e2c:	eb07 0e01 	add.w	lr, r7, r1
    4e30:	5879      	ldr	r1, [r7, r1]
    4e32:	f1ae 0e08 	sub.w	lr, lr, #8
    4e36:	458e      	cmp	lr, r1
    4e38:	f000 8091 	beq.w	4f5e <_malloc_r+0x45e>
    4e3c:	684b      	ldr	r3, [r1, #4]
    4e3e:	f023 0303 	bic.w	r3, r3, #3
    4e42:	4293      	cmp	r3, r2
    4e44:	d902      	bls.n	4e4c <_malloc_r+0x34c>
    4e46:	6889      	ldr	r1, [r1, #8]
    4e48:	458e      	cmp	lr, r1
    4e4a:	d1f7      	bne.n	4e3c <_malloc_r+0x33c>
    4e4c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    4e50:	687a      	ldr	r2, [r7, #4]
    4e52:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    4e56:	f8ce 5008 	str.w	r5, [lr, #8]
    4e5a:	60cd      	str	r5, [r1, #12]
    4e5c:	e6d6      	b.n	4c0c <_malloc_r+0x10c>
    4e5e:	2b14      	cmp	r3, #20
    4e60:	d959      	bls.n	4f16 <_malloc_r+0x416>
    4e62:	2b54      	cmp	r3, #84	; 0x54
    4e64:	f200 809d 	bhi.w	4fa2 <_malloc_r+0x4a2>
    4e68:	0b33      	lsrs	r3, r6, #12
    4e6a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    4e6e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    4e72:	00c3      	lsls	r3, r0, #3
    4e74:	e68a      	b.n	4b8c <_malloc_r+0x8c>
    4e76:	f10e 0e01 	add.w	lr, lr, #1
    4e7a:	f01e 0f03 	tst.w	lr, #3
    4e7e:	f105 0508 	add.w	r5, r5, #8
    4e82:	f47f aed5 	bne.w	4c30 <_malloc_r+0x130>
    4e86:	e051      	b.n	4f2c <_malloc_r+0x42c>
    4e88:	4442      	add	r2, r8
    4e8a:	4645      	mov	r5, r8
    4e8c:	6853      	ldr	r3, [r2, #4]
    4e8e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    4e92:	f043 0301 	orr.w	r3, r3, #1
    4e96:	6053      	str	r3, [r2, #4]
    4e98:	f855 3f08 	ldr.w	r3, [r5, #8]!
    4e9c:	4620      	mov	r0, r4
    4e9e:	60d9      	str	r1, [r3, #12]
    4ea0:	608b      	str	r3, [r1, #8]
    4ea2:	f000 f8e3 	bl	506c <__malloc_unlock>
    4ea6:	e6f3      	b.n	4c90 <_malloc_r+0x190>
    4ea8:	08f0      	lsrs	r0, r6, #3
    4eaa:	f106 0208 	add.w	r2, r6, #8
    4eae:	e637      	b.n	4b20 <_malloc_r+0x20>
    4eb0:	442a      	add	r2, r5
    4eb2:	4620      	mov	r0, r4
    4eb4:	6853      	ldr	r3, [r2, #4]
    4eb6:	f043 0301 	orr.w	r3, r3, #1
    4eba:	6053      	str	r3, [r2, #4]
    4ebc:	3508      	adds	r5, #8
    4ebe:	f000 f8d5 	bl	506c <__malloc_unlock>
    4ec2:	e6e5      	b.n	4c90 <_malloc_r+0x190>
    4ec4:	19a9      	adds	r1, r5, r6
    4ec6:	4620      	mov	r0, r4
    4ec8:	f046 0601 	orr.w	r6, r6, #1
    4ecc:	f043 0401 	orr.w	r4, r3, #1
    4ed0:	606e      	str	r6, [r5, #4]
    4ed2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    4ed6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    4eda:	604c      	str	r4, [r1, #4]
    4edc:	50ab      	str	r3, [r5, r2]
    4ede:	f000 f8c5 	bl	506c <__malloc_unlock>
    4ee2:	3508      	adds	r5, #8
    4ee4:	e6d4      	b.n	4c90 <_malloc_r+0x190>
    4ee6:	0993      	lsrs	r3, r2, #6
    4ee8:	f103 0139 	add.w	r1, r3, #57	; 0x39
    4eec:	00c9      	lsls	r1, r1, #3
    4eee:	3338      	adds	r3, #56	; 0x38
    4ef0:	e79c      	b.n	4e2c <_malloc_r+0x32c>
    4ef2:	42bd      	cmp	r5, r7
    4ef4:	d05f      	beq.n	4fb6 <_malloc_r+0x4b6>
    4ef6:	68bd      	ldr	r5, [r7, #8]
    4ef8:	6868      	ldr	r0, [r5, #4]
    4efa:	f020 0803 	bic.w	r8, r0, #3
    4efe:	4546      	cmp	r6, r8
    4f00:	eba8 0306 	sub.w	r3, r8, r6
    4f04:	d802      	bhi.n	4f0c <_malloc_r+0x40c>
    4f06:	2b0f      	cmp	r3, #15
    4f08:	f73f af62 	bgt.w	4dd0 <_malloc_r+0x2d0>
    4f0c:	4620      	mov	r0, r4
    4f0e:	f000 f8ad 	bl	506c <__malloc_unlock>
    4f12:	2500      	movs	r5, #0
    4f14:	e6bc      	b.n	4c90 <_malloc_r+0x190>
    4f16:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    4f1a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    4f1e:	00c3      	lsls	r3, r0, #3
    4f20:	e634      	b.n	4b8c <_malloc_r+0x8c>
    4f22:	f859 3908 	ldr.w	r3, [r9], #-8
    4f26:	454b      	cmp	r3, r9
    4f28:	f040 8096 	bne.w	5058 <_malloc_r+0x558>
    4f2c:	f010 0f03 	tst.w	r0, #3
    4f30:	f100 30ff 	add.w	r0, r0, #4294967295
    4f34:	d1f5      	bne.n	4f22 <_malloc_r+0x422>
    4f36:	687b      	ldr	r3, [r7, #4]
    4f38:	ea23 0301 	bic.w	r3, r3, r1
    4f3c:	607b      	str	r3, [r7, #4]
    4f3e:	0049      	lsls	r1, r1, #1
    4f40:	4299      	cmp	r1, r3
    4f42:	f63f aec0 	bhi.w	4cc6 <_malloc_r+0x1c6>
    4f46:	b919      	cbnz	r1, 4f50 <_malloc_r+0x450>
    4f48:	e6bd      	b.n	4cc6 <_malloc_r+0x1c6>
    4f4a:	0049      	lsls	r1, r1, #1
    4f4c:	f10e 0e04 	add.w	lr, lr, #4
    4f50:	4219      	tst	r1, r3
    4f52:	d0fa      	beq.n	4f4a <_malloc_r+0x44a>
    4f54:	4670      	mov	r0, lr
    4f56:	e667      	b.n	4c28 <_malloc_r+0x128>
    4f58:	f103 0810 	add.w	r8, r3, #16
    4f5c:	e6d0      	b.n	4d00 <_malloc_r+0x200>
    4f5e:	109a      	asrs	r2, r3, #2
    4f60:	f04f 0801 	mov.w	r8, #1
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	fa08 f202 	lsl.w	r2, r8, r2
    4f6a:	431a      	orrs	r2, r3
    4f6c:	607a      	str	r2, [r7, #4]
    4f6e:	e770      	b.n	4e52 <_malloc_r+0x352>
    4f70:	eb02 0108 	add.w	r1, r2, r8
    4f74:	4249      	negs	r1, r1
    4f76:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    4f7a:	4651      	mov	r1, sl
    4f7c:	4620      	mov	r0, r4
    4f7e:	9200      	str	r2, [sp, #0]
    4f80:	f000 fd3a 	bl	59f8 <_sbrk_r>
    4f84:	1c43      	adds	r3, r0, #1
    4f86:	e9dd 2300 	ldrd	r2, r3, [sp]
    4f8a:	f47f aeef 	bne.w	4d6c <_malloc_r+0x26c>
    4f8e:	46da      	mov	sl, fp
    4f90:	e6ef      	b.n	4d72 <_malloc_r+0x272>
    4f92:	2b54      	cmp	r3, #84	; 0x54
    4f94:	d825      	bhi.n	4fe2 <_malloc_r+0x4e2>
    4f96:	0b13      	lsrs	r3, r2, #12
    4f98:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    4f9c:	00c9      	lsls	r1, r1, #3
    4f9e:	336e      	adds	r3, #110	; 0x6e
    4fa0:	e744      	b.n	4e2c <_malloc_r+0x32c>
    4fa2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4fa6:	d825      	bhi.n	4ff4 <_malloc_r+0x4f4>
    4fa8:	0bf3      	lsrs	r3, r6, #15
    4faa:	f103 0078 	add.w	r0, r3, #120	; 0x78
    4fae:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    4fb2:	00c3      	lsls	r3, r0, #3
    4fb4:	e5ea      	b.n	4b8c <_malloc_r+0x8c>
    4fb6:	4b29      	ldr	r3, [pc, #164]	; (505c <_malloc_r+0x55c>)
    4fb8:	6818      	ldr	r0, [r3, #0]
    4fba:	4440      	add	r0, r8
    4fbc:	6018      	str	r0, [r3, #0]
    4fbe:	e6b1      	b.n	4d24 <_malloc_r+0x224>
    4fc0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    4fc4:	f1bc 0f00 	cmp.w	ip, #0
    4fc8:	f47f aeac 	bne.w	4d24 <_malloc_r+0x224>
    4fcc:	68bd      	ldr	r5, [r7, #8]
    4fce:	44c8      	add	r8, r9
    4fd0:	f048 0001 	orr.w	r0, r8, #1
    4fd4:	6068      	str	r0, [r5, #4]
    4fd6:	e6f0      	b.n	4dba <_malloc_r+0x2ba>
    4fd8:	4615      	mov	r5, r2
    4fda:	e6ee      	b.n	4dba <_malloc_r+0x2ba>
    4fdc:	2301      	movs	r3, #1
    4fde:	6053      	str	r3, [r2, #4]
    4fe0:	e794      	b.n	4f0c <_malloc_r+0x40c>
    4fe2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4fe6:	d823      	bhi.n	5030 <_malloc_r+0x530>
    4fe8:	0bd3      	lsrs	r3, r2, #15
    4fea:	f103 0178 	add.w	r1, r3, #120	; 0x78
    4fee:	00c9      	lsls	r1, r1, #3
    4ff0:	3377      	adds	r3, #119	; 0x77
    4ff2:	e71b      	b.n	4e2c <_malloc_r+0x32c>
    4ff4:	f240 5254 	movw	r2, #1364	; 0x554
    4ff8:	4293      	cmp	r3, r2
    4ffa:	d823      	bhi.n	5044 <_malloc_r+0x544>
    4ffc:	0cb3      	lsrs	r3, r6, #18
    4ffe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5002:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    5006:	00c3      	lsls	r3, r0, #3
    5008:	e5c0      	b.n	4b8c <_malloc_r+0x8c>
    500a:	f1ab 0b08 	sub.w	fp, fp, #8
    500e:	44d8      	add	r8, fp
    5010:	eba8 0802 	sub.w	r8, r8, r2
    5014:	f04f 0a00 	mov.w	sl, #0
    5018:	e6ab      	b.n	4d72 <_malloc_r+0x272>
    501a:	f105 0108 	add.w	r1, r5, #8
    501e:	4620      	mov	r0, r4
    5020:	9300      	str	r3, [sp, #0]
    5022:	f000 fe1b 	bl	5c5c <_free_r>
    5026:	68bd      	ldr	r5, [r7, #8]
    5028:	9b00      	ldr	r3, [sp, #0]
    502a:	6868      	ldr	r0, [r5, #4]
    502c:	6819      	ldr	r1, [r3, #0]
    502e:	e6c4      	b.n	4dba <_malloc_r+0x2ba>
    5030:	f240 5154 	movw	r1, #1364	; 0x554
    5034:	428b      	cmp	r3, r1
    5036:	d80b      	bhi.n	5050 <_malloc_r+0x550>
    5038:	0c93      	lsrs	r3, r2, #18
    503a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    503e:	00c9      	lsls	r1, r1, #3
    5040:	337c      	adds	r3, #124	; 0x7c
    5042:	e6f3      	b.n	4e2c <_malloc_r+0x32c>
    5044:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5048:	207f      	movs	r0, #127	; 0x7f
    504a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    504e:	e59d      	b.n	4b8c <_malloc_r+0x8c>
    5050:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    5054:	237e      	movs	r3, #126	; 0x7e
    5056:	e6e9      	b.n	4e2c <_malloc_r+0x32c>
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	e770      	b.n	4f3e <_malloc_r+0x43e>
    505c:	1fff626c 	.word	0x1fff626c

00005060 <__malloc_lock>:
    5060:	4801      	ldr	r0, [pc, #4]	; (5068 <__malloc_lock+0x8>)
    5062:	f000 bd1f 	b.w	5aa4 <__retarget_lock_acquire_recursive>
    5066:	bf00      	nop
    5068:	1fff63e4 	.word	0x1fff63e4

0000506c <__malloc_unlock>:
    506c:	4801      	ldr	r0, [pc, #4]	; (5074 <__malloc_unlock+0x8>)
    506e:	f000 bd1b 	b.w	5aa8 <__retarget_lock_release_recursive>
    5072:	bf00      	nop
    5074:	1fff63e4 	.word	0x1fff63e4

00005078 <_realloc_r>:
    5078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    507c:	4617      	mov	r7, r2
    507e:	2900      	cmp	r1, #0
    5080:	f000 8098 	beq.w	51b4 <_realloc_r+0x13c>
    5084:	460c      	mov	r4, r1
    5086:	f107 050b 	add.w	r5, r7, #11
    508a:	4680      	mov	r8, r0
    508c:	f7ff ffe8 	bl	5060 <__malloc_lock>
    5090:	2d16      	cmp	r5, #22
    5092:	f854 1c04 	ldr.w	r1, [r4, #-4]
    5096:	d85b      	bhi.n	5150 <_realloc_r+0xd8>
    5098:	2510      	movs	r5, #16
    509a:	462a      	mov	r2, r5
    509c:	42af      	cmp	r7, r5
    509e:	d85c      	bhi.n	515a <_realloc_r+0xe2>
    50a0:	f021 0603 	bic.w	r6, r1, #3
    50a4:	4296      	cmp	r6, r2
    50a6:	f1a4 0908 	sub.w	r9, r4, #8
    50aa:	da62      	bge.n	5172 <_realloc_r+0xfa>
    50ac:	4bbc      	ldr	r3, [pc, #752]	; (53a0 <_realloc_r+0x328>)
    50ae:	f8d3 c008 	ldr.w	ip, [r3, #8]
    50b2:	eb09 0006 	add.w	r0, r9, r6
    50b6:	4584      	cmp	ip, r0
    50b8:	f000 8097 	beq.w	51ea <_realloc_r+0x172>
    50bc:	f8d0 c004 	ldr.w	ip, [r0, #4]
    50c0:	f02c 0301 	bic.w	r3, ip, #1
    50c4:	4403      	add	r3, r0
    50c6:	685b      	ldr	r3, [r3, #4]
    50c8:	07db      	lsls	r3, r3, #31
    50ca:	d468      	bmi.n	519e <_realloc_r+0x126>
    50cc:	f02c 0c03 	bic.w	ip, ip, #3
    50d0:	eb06 030c 	add.w	r3, r6, ip
    50d4:	4293      	cmp	r3, r2
    50d6:	da47      	bge.n	5168 <_realloc_r+0xf0>
    50d8:	07cb      	lsls	r3, r1, #31
    50da:	d410      	bmi.n	50fe <_realloc_r+0x86>
    50dc:	f854 3c08 	ldr.w	r3, [r4, #-8]
    50e0:	eba9 0a03 	sub.w	sl, r9, r3
    50e4:	f8da 3004 	ldr.w	r3, [sl, #4]
    50e8:	f023 0103 	bic.w	r1, r3, #3
    50ec:	448c      	add	ip, r1
    50ee:	44b4      	add	ip, r6
    50f0:	4594      	cmp	ip, r2
    50f2:	f280 8111 	bge.w	5318 <_realloc_r+0x2a0>
    50f6:	1873      	adds	r3, r6, r1
    50f8:	4293      	cmp	r3, r2
    50fa:	f280 80e8 	bge.w	52ce <_realloc_r+0x256>
    50fe:	4639      	mov	r1, r7
    5100:	4640      	mov	r0, r8
    5102:	f7ff fcfd 	bl	4b00 <_malloc_r>
    5106:	4607      	mov	r7, r0
    5108:	b1e0      	cbz	r0, 5144 <_realloc_r+0xcc>
    510a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    510e:	f023 0301 	bic.w	r3, r3, #1
    5112:	444b      	add	r3, r9
    5114:	f1a0 0208 	sub.w	r2, r0, #8
    5118:	4293      	cmp	r3, r2
    511a:	f000 80d2 	beq.w	52c2 <_realloc_r+0x24a>
    511e:	1f32      	subs	r2, r6, #4
    5120:	2a24      	cmp	r2, #36	; 0x24
    5122:	f200 80f5 	bhi.w	5310 <_realloc_r+0x298>
    5126:	2a13      	cmp	r2, #19
    5128:	f200 80ac 	bhi.w	5284 <_realloc_r+0x20c>
    512c:	4603      	mov	r3, r0
    512e:	4622      	mov	r2, r4
    5130:	6811      	ldr	r1, [r2, #0]
    5132:	6019      	str	r1, [r3, #0]
    5134:	6851      	ldr	r1, [r2, #4]
    5136:	6059      	str	r1, [r3, #4]
    5138:	6892      	ldr	r2, [r2, #8]
    513a:	609a      	str	r2, [r3, #8]
    513c:	4621      	mov	r1, r4
    513e:	4640      	mov	r0, r8
    5140:	f000 fd8c 	bl	5c5c <_free_r>
    5144:	4640      	mov	r0, r8
    5146:	f7ff ff91 	bl	506c <__malloc_unlock>
    514a:	4638      	mov	r0, r7
    514c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5150:	f025 0507 	bic.w	r5, r5, #7
    5154:	2d00      	cmp	r5, #0
    5156:	462a      	mov	r2, r5
    5158:	daa0      	bge.n	509c <_realloc_r+0x24>
    515a:	230c      	movs	r3, #12
    515c:	f8c8 3000 	str.w	r3, [r8]
    5160:	2700      	movs	r7, #0
    5162:	4638      	mov	r0, r7
    5164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5168:	461e      	mov	r6, r3
    516a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    516e:	60d3      	str	r3, [r2, #12]
    5170:	609a      	str	r2, [r3, #8]
    5172:	1b73      	subs	r3, r6, r5
    5174:	2b0f      	cmp	r3, #15
    5176:	d822      	bhi.n	51be <_realloc_r+0x146>
    5178:	f8d9 3004 	ldr.w	r3, [r9, #4]
    517c:	f003 0301 	and.w	r3, r3, #1
    5180:	4333      	orrs	r3, r6
    5182:	444e      	add	r6, r9
    5184:	f8c9 3004 	str.w	r3, [r9, #4]
    5188:	6873      	ldr	r3, [r6, #4]
    518a:	f043 0301 	orr.w	r3, r3, #1
    518e:	6073      	str	r3, [r6, #4]
    5190:	4640      	mov	r0, r8
    5192:	4627      	mov	r7, r4
    5194:	f7ff ff6a 	bl	506c <__malloc_unlock>
    5198:	4638      	mov	r0, r7
    519a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    519e:	07c9      	lsls	r1, r1, #31
    51a0:	d4ad      	bmi.n	50fe <_realloc_r+0x86>
    51a2:	f854 3c08 	ldr.w	r3, [r4, #-8]
    51a6:	eba9 0a03 	sub.w	sl, r9, r3
    51aa:	f8da 1004 	ldr.w	r1, [sl, #4]
    51ae:	f021 0103 	bic.w	r1, r1, #3
    51b2:	e7a0      	b.n	50f6 <_realloc_r+0x7e>
    51b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51b8:	4611      	mov	r1, r2
    51ba:	f7ff bca1 	b.w	4b00 <_malloc_r>
    51be:	f8d9 2004 	ldr.w	r2, [r9, #4]
    51c2:	eb09 0105 	add.w	r1, r9, r5
    51c6:	f002 0201 	and.w	r2, r2, #1
    51ca:	444e      	add	r6, r9
    51cc:	f043 0301 	orr.w	r3, r3, #1
    51d0:	432a      	orrs	r2, r5
    51d2:	f8c9 2004 	str.w	r2, [r9, #4]
    51d6:	604b      	str	r3, [r1, #4]
    51d8:	6873      	ldr	r3, [r6, #4]
    51da:	f043 0301 	orr.w	r3, r3, #1
    51de:	3108      	adds	r1, #8
    51e0:	6073      	str	r3, [r6, #4]
    51e2:	4640      	mov	r0, r8
    51e4:	f000 fd3a 	bl	5c5c <_free_r>
    51e8:	e7d2      	b.n	5190 <_realloc_r+0x118>
    51ea:	f8dc 0004 	ldr.w	r0, [ip, #4]
    51ee:	f020 0b03 	bic.w	fp, r0, #3
    51f2:	eb06 0c0b 	add.w	ip, r6, fp
    51f6:	f105 0010 	add.w	r0, r5, #16
    51fa:	4584      	cmp	ip, r0
    51fc:	da4d      	bge.n	529a <_realloc_r+0x222>
    51fe:	07c9      	lsls	r1, r1, #31
    5200:	f53f af7d 	bmi.w	50fe <_realloc_r+0x86>
    5204:	f854 1c08 	ldr.w	r1, [r4, #-8]
    5208:	eba9 0a01 	sub.w	sl, r9, r1
    520c:	f8da 1004 	ldr.w	r1, [sl, #4]
    5210:	f021 0103 	bic.w	r1, r1, #3
    5214:	448b      	add	fp, r1
    5216:	44b3      	add	fp, r6
    5218:	4558      	cmp	r0, fp
    521a:	f73f af6c 	bgt.w	50f6 <_realloc_r+0x7e>
    521e:	4657      	mov	r7, sl
    5220:	f8da 100c 	ldr.w	r1, [sl, #12]
    5224:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5228:	1f32      	subs	r2, r6, #4
    522a:	2a24      	cmp	r2, #36	; 0x24
    522c:	60c1      	str	r1, [r0, #12]
    522e:	6088      	str	r0, [r1, #8]
    5230:	f200 80db 	bhi.w	53ea <_realloc_r+0x372>
    5234:	2a13      	cmp	r2, #19
    5236:	f240 80d6 	bls.w	53e6 <_realloc_r+0x36e>
    523a:	6821      	ldr	r1, [r4, #0]
    523c:	f8ca 1008 	str.w	r1, [sl, #8]
    5240:	6861      	ldr	r1, [r4, #4]
    5242:	f8ca 100c 	str.w	r1, [sl, #12]
    5246:	2a1b      	cmp	r2, #27
    5248:	f200 80df 	bhi.w	540a <_realloc_r+0x392>
    524c:	3408      	adds	r4, #8
    524e:	f10a 0210 	add.w	r2, sl, #16
    5252:	6821      	ldr	r1, [r4, #0]
    5254:	6011      	str	r1, [r2, #0]
    5256:	6861      	ldr	r1, [r4, #4]
    5258:	6051      	str	r1, [r2, #4]
    525a:	68a1      	ldr	r1, [r4, #8]
    525c:	6091      	str	r1, [r2, #8]
    525e:	eb0a 0105 	add.w	r1, sl, r5
    5262:	ebab 0205 	sub.w	r2, fp, r5
    5266:	f042 0201 	orr.w	r2, r2, #1
    526a:	6099      	str	r1, [r3, #8]
    526c:	604a      	str	r2, [r1, #4]
    526e:	f8da 3004 	ldr.w	r3, [sl, #4]
    5272:	f003 0301 	and.w	r3, r3, #1
    5276:	432b      	orrs	r3, r5
    5278:	4640      	mov	r0, r8
    527a:	f8ca 3004 	str.w	r3, [sl, #4]
    527e:	f7ff fef5 	bl	506c <__malloc_unlock>
    5282:	e76e      	b.n	5162 <_realloc_r+0xea>
    5284:	6823      	ldr	r3, [r4, #0]
    5286:	6003      	str	r3, [r0, #0]
    5288:	6863      	ldr	r3, [r4, #4]
    528a:	6043      	str	r3, [r0, #4]
    528c:	2a1b      	cmp	r2, #27
    528e:	d868      	bhi.n	5362 <_realloc_r+0x2ea>
    5290:	f104 0208 	add.w	r2, r4, #8
    5294:	f100 0308 	add.w	r3, r0, #8
    5298:	e74a      	b.n	5130 <_realloc_r+0xb8>
    529a:	eb09 0205 	add.w	r2, r9, r5
    529e:	609a      	str	r2, [r3, #8]
    52a0:	ebac 0305 	sub.w	r3, ip, r5
    52a4:	f043 0301 	orr.w	r3, r3, #1
    52a8:	6053      	str	r3, [r2, #4]
    52aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    52ae:	f003 0301 	and.w	r3, r3, #1
    52b2:	432b      	orrs	r3, r5
    52b4:	4640      	mov	r0, r8
    52b6:	f844 3c04 	str.w	r3, [r4, #-4]
    52ba:	f7ff fed7 	bl	506c <__malloc_unlock>
    52be:	4627      	mov	r7, r4
    52c0:	e74f      	b.n	5162 <_realloc_r+0xea>
    52c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    52c6:	f023 0303 	bic.w	r3, r3, #3
    52ca:	441e      	add	r6, r3
    52cc:	e751      	b.n	5172 <_realloc_r+0xfa>
    52ce:	4657      	mov	r7, sl
    52d0:	f8da 100c 	ldr.w	r1, [sl, #12]
    52d4:	f857 0f08 	ldr.w	r0, [r7, #8]!
    52d8:	1f32      	subs	r2, r6, #4
    52da:	2a24      	cmp	r2, #36	; 0x24
    52dc:	60c1      	str	r1, [r0, #12]
    52de:	6088      	str	r0, [r1, #8]
    52e0:	d84c      	bhi.n	537c <_realloc_r+0x304>
    52e2:	2a13      	cmp	r2, #19
    52e4:	d948      	bls.n	5378 <_realloc_r+0x300>
    52e6:	6821      	ldr	r1, [r4, #0]
    52e8:	f8ca 1008 	str.w	r1, [sl, #8]
    52ec:	6861      	ldr	r1, [r4, #4]
    52ee:	f8ca 100c 	str.w	r1, [sl, #12]
    52f2:	2a1b      	cmp	r2, #27
    52f4:	d856      	bhi.n	53a4 <_realloc_r+0x32c>
    52f6:	3408      	adds	r4, #8
    52f8:	f10a 0210 	add.w	r2, sl, #16
    52fc:	461e      	mov	r6, r3
    52fe:	6823      	ldr	r3, [r4, #0]
    5300:	6013      	str	r3, [r2, #0]
    5302:	6863      	ldr	r3, [r4, #4]
    5304:	6053      	str	r3, [r2, #4]
    5306:	68a3      	ldr	r3, [r4, #8]
    5308:	6093      	str	r3, [r2, #8]
    530a:	46d1      	mov	r9, sl
    530c:	463c      	mov	r4, r7
    530e:	e730      	b.n	5172 <_realloc_r+0xfa>
    5310:	4621      	mov	r1, r4
    5312:	f000 fa2d 	bl	5770 <memmove>
    5316:	e711      	b.n	513c <_realloc_r+0xc4>
    5318:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    531c:	4657      	mov	r7, sl
    531e:	60cb      	str	r3, [r1, #12]
    5320:	6099      	str	r1, [r3, #8]
    5322:	f857 1f08 	ldr.w	r1, [r7, #8]!
    5326:	f8da 300c 	ldr.w	r3, [sl, #12]
    532a:	60cb      	str	r3, [r1, #12]
    532c:	1f32      	subs	r2, r6, #4
    532e:	2a24      	cmp	r2, #36	; 0x24
    5330:	6099      	str	r1, [r3, #8]
    5332:	d82d      	bhi.n	5390 <_realloc_r+0x318>
    5334:	2a13      	cmp	r2, #19
    5336:	d929      	bls.n	538c <_realloc_r+0x314>
    5338:	6823      	ldr	r3, [r4, #0]
    533a:	f8ca 3008 	str.w	r3, [sl, #8]
    533e:	6863      	ldr	r3, [r4, #4]
    5340:	f8ca 300c 	str.w	r3, [sl, #12]
    5344:	2a1b      	cmp	r2, #27
    5346:	d842      	bhi.n	53ce <_realloc_r+0x356>
    5348:	3408      	adds	r4, #8
    534a:	f10a 0310 	add.w	r3, sl, #16
    534e:	6822      	ldr	r2, [r4, #0]
    5350:	601a      	str	r2, [r3, #0]
    5352:	6862      	ldr	r2, [r4, #4]
    5354:	605a      	str	r2, [r3, #4]
    5356:	68a2      	ldr	r2, [r4, #8]
    5358:	609a      	str	r2, [r3, #8]
    535a:	4666      	mov	r6, ip
    535c:	46d1      	mov	r9, sl
    535e:	463c      	mov	r4, r7
    5360:	e707      	b.n	5172 <_realloc_r+0xfa>
    5362:	68a3      	ldr	r3, [r4, #8]
    5364:	6083      	str	r3, [r0, #8]
    5366:	68e3      	ldr	r3, [r4, #12]
    5368:	60c3      	str	r3, [r0, #12]
    536a:	2a24      	cmp	r2, #36	; 0x24
    536c:	d026      	beq.n	53bc <_realloc_r+0x344>
    536e:	f104 0210 	add.w	r2, r4, #16
    5372:	f100 0310 	add.w	r3, r0, #16
    5376:	e6db      	b.n	5130 <_realloc_r+0xb8>
    5378:	463a      	mov	r2, r7
    537a:	e7bf      	b.n	52fc <_realloc_r+0x284>
    537c:	4621      	mov	r1, r4
    537e:	4638      	mov	r0, r7
    5380:	461e      	mov	r6, r3
    5382:	46d1      	mov	r9, sl
    5384:	f000 f9f4 	bl	5770 <memmove>
    5388:	463c      	mov	r4, r7
    538a:	e6f2      	b.n	5172 <_realloc_r+0xfa>
    538c:	463b      	mov	r3, r7
    538e:	e7de      	b.n	534e <_realloc_r+0x2d6>
    5390:	4621      	mov	r1, r4
    5392:	4638      	mov	r0, r7
    5394:	4666      	mov	r6, ip
    5396:	46d1      	mov	r9, sl
    5398:	f000 f9ea 	bl	5770 <memmove>
    539c:	463c      	mov	r4, r7
    539e:	e6e8      	b.n	5172 <_realloc_r+0xfa>
    53a0:	1fff0814 	.word	0x1fff0814
    53a4:	68a1      	ldr	r1, [r4, #8]
    53a6:	f8ca 1010 	str.w	r1, [sl, #16]
    53aa:	68e1      	ldr	r1, [r4, #12]
    53ac:	f8ca 1014 	str.w	r1, [sl, #20]
    53b0:	2a24      	cmp	r2, #36	; 0x24
    53b2:	d020      	beq.n	53f6 <_realloc_r+0x37e>
    53b4:	3410      	adds	r4, #16
    53b6:	f10a 0218 	add.w	r2, sl, #24
    53ba:	e79f      	b.n	52fc <_realloc_r+0x284>
    53bc:	6923      	ldr	r3, [r4, #16]
    53be:	6103      	str	r3, [r0, #16]
    53c0:	6961      	ldr	r1, [r4, #20]
    53c2:	6141      	str	r1, [r0, #20]
    53c4:	f104 0218 	add.w	r2, r4, #24
    53c8:	f100 0318 	add.w	r3, r0, #24
    53cc:	e6b0      	b.n	5130 <_realloc_r+0xb8>
    53ce:	68a3      	ldr	r3, [r4, #8]
    53d0:	f8ca 3010 	str.w	r3, [sl, #16]
    53d4:	68e3      	ldr	r3, [r4, #12]
    53d6:	f8ca 3014 	str.w	r3, [sl, #20]
    53da:	2a24      	cmp	r2, #36	; 0x24
    53dc:	d021      	beq.n	5422 <_realloc_r+0x3aa>
    53de:	3410      	adds	r4, #16
    53e0:	f10a 0318 	add.w	r3, sl, #24
    53e4:	e7b3      	b.n	534e <_realloc_r+0x2d6>
    53e6:	463a      	mov	r2, r7
    53e8:	e733      	b.n	5252 <_realloc_r+0x1da>
    53ea:	4621      	mov	r1, r4
    53ec:	4638      	mov	r0, r7
    53ee:	f000 f9bf 	bl	5770 <memmove>
    53f2:	4b16      	ldr	r3, [pc, #88]	; (544c <_realloc_r+0x3d4>)
    53f4:	e733      	b.n	525e <_realloc_r+0x1e6>
    53f6:	6922      	ldr	r2, [r4, #16]
    53f8:	f8ca 2018 	str.w	r2, [sl, #24]
    53fc:	6962      	ldr	r2, [r4, #20]
    53fe:	f8ca 201c 	str.w	r2, [sl, #28]
    5402:	3418      	adds	r4, #24
    5404:	f10a 0220 	add.w	r2, sl, #32
    5408:	e778      	b.n	52fc <_realloc_r+0x284>
    540a:	68a1      	ldr	r1, [r4, #8]
    540c:	f8ca 1010 	str.w	r1, [sl, #16]
    5410:	68e1      	ldr	r1, [r4, #12]
    5412:	f8ca 1014 	str.w	r1, [sl, #20]
    5416:	2a24      	cmp	r2, #36	; 0x24
    5418:	d00d      	beq.n	5436 <_realloc_r+0x3be>
    541a:	3410      	adds	r4, #16
    541c:	f10a 0218 	add.w	r2, sl, #24
    5420:	e717      	b.n	5252 <_realloc_r+0x1da>
    5422:	6923      	ldr	r3, [r4, #16]
    5424:	f8ca 3018 	str.w	r3, [sl, #24]
    5428:	6963      	ldr	r3, [r4, #20]
    542a:	f8ca 301c 	str.w	r3, [sl, #28]
    542e:	3418      	adds	r4, #24
    5430:	f10a 0320 	add.w	r3, sl, #32
    5434:	e78b      	b.n	534e <_realloc_r+0x2d6>
    5436:	6922      	ldr	r2, [r4, #16]
    5438:	f8ca 2018 	str.w	r2, [sl, #24]
    543c:	6962      	ldr	r2, [r4, #20]
    543e:	f8ca 201c 	str.w	r2, [sl, #28]
    5442:	3418      	adds	r4, #24
    5444:	f10a 0220 	add.w	r2, sl, #32
    5448:	e703      	b.n	5252 <_realloc_r+0x1da>
    544a:	bf00      	nop
    544c:	1fff0814 	.word	0x1fff0814

00005450 <stdio_exit_handler>:
    5450:	4a02      	ldr	r2, [pc, #8]	; (545c <stdio_exit_handler+0xc>)
    5452:	4903      	ldr	r1, [pc, #12]	; (5460 <stdio_exit_handler+0x10>)
    5454:	4803      	ldr	r0, [pc, #12]	; (5464 <stdio_exit_handler+0x14>)
    5456:	f000 b8bb 	b.w	55d0 <_fwalk_sglue>
    545a:	bf00      	nop
    545c:	1fff0c24 	.word	0x1fff0c24
    5460:	00008209 	.word	0x00008209
    5464:	1fff0da0 	.word	0x1fff0da0

00005468 <cleanup_stdio>:
    5468:	4b0c      	ldr	r3, [pc, #48]	; (549c <cleanup_stdio+0x34>)
    546a:	6841      	ldr	r1, [r0, #4]
    546c:	4299      	cmp	r1, r3
    546e:	b510      	push	{r4, lr}
    5470:	4604      	mov	r4, r0
    5472:	d001      	beq.n	5478 <cleanup_stdio+0x10>
    5474:	f002 fec8 	bl	8208 <_fclose_r>
    5478:	68a1      	ldr	r1, [r4, #8]
    547a:	4b09      	ldr	r3, [pc, #36]	; (54a0 <cleanup_stdio+0x38>)
    547c:	4299      	cmp	r1, r3
    547e:	d002      	beq.n	5486 <cleanup_stdio+0x1e>
    5480:	4620      	mov	r0, r4
    5482:	f002 fec1 	bl	8208 <_fclose_r>
    5486:	68e1      	ldr	r1, [r4, #12]
    5488:	4b06      	ldr	r3, [pc, #24]	; (54a4 <cleanup_stdio+0x3c>)
    548a:	4299      	cmp	r1, r3
    548c:	d004      	beq.n	5498 <cleanup_stdio+0x30>
    548e:	4620      	mov	r0, r4
    5490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5494:	f002 beb8 	b.w	8208 <_fclose_r>
    5498:	bd10      	pop	{r4, pc}
    549a:	bf00      	nop
    549c:	1fff62a0 	.word	0x1fff62a0
    54a0:	1fff6308 	.word	0x1fff6308
    54a4:	1fff6370 	.word	0x1fff6370

000054a8 <global_stdio_init.part.0>:
    54a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    54ac:	4c2a      	ldr	r4, [pc, #168]	; (5558 <global_stdio_init.part.0+0xb0>)
    54ae:	4b2b      	ldr	r3, [pc, #172]	; (555c <global_stdio_init.part.0+0xb4>)
    54b0:	482b      	ldr	r0, [pc, #172]	; (5560 <global_stdio_init.part.0+0xb8>)
    54b2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 5574 <global_stdio_init.part.0+0xcc>
    54b6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 5578 <global_stdio_init.part.0+0xd0>
    54ba:	4f2a      	ldr	r7, [pc, #168]	; (5564 <global_stdio_init.part.0+0xbc>)
    54bc:	6018      	str	r0, [r3, #0]
    54be:	2500      	movs	r5, #0
    54c0:	2304      	movs	r3, #4
    54c2:	2208      	movs	r2, #8
    54c4:	4629      	mov	r1, r5
    54c6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    54ca:	4e27      	ldr	r6, [pc, #156]	; (5568 <global_stdio_init.part.0+0xc0>)
    54cc:	6665      	str	r5, [r4, #100]	; 0x64
    54ce:	e9c4 5302 	strd	r5, r3, [r4, #8]
    54d2:	e9c4 5500 	strd	r5, r5, [r4]
    54d6:	e9c4 5504 	strd	r5, r5, [r4, #16]
    54da:	61a5      	str	r5, [r4, #24]
    54dc:	f000 f9c4 	bl	5868 <memset>
    54e0:	4b22      	ldr	r3, [pc, #136]	; (556c <global_stdio_init.part.0+0xc4>)
    54e2:	6763      	str	r3, [r4, #116]	; 0x74
    54e4:	2208      	movs	r2, #8
    54e6:	4629      	mov	r1, r5
    54e8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    54ec:	e9c4 4907 	strd	r4, r9, [r4, #28]
    54f0:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    54f4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    54f8:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    54fc:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    5500:	6725      	str	r5, [r4, #112]	; 0x70
    5502:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    5506:	62e6      	str	r6, [r4, #44]	; 0x2c
    5508:	f000 f9ae 	bl	5868 <memset>
    550c:	4b18      	ldr	r3, [pc, #96]	; (5570 <global_stdio_init.part.0+0xc8>)
    550e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    5512:	4629      	mov	r1, r5
    5514:	f104 0368 	add.w	r3, r4, #104	; 0x68
    5518:	2208      	movs	r2, #8
    551a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    551e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    5522:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    5526:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    552a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    552e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    5532:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    5536:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    553a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    553e:	f000 f993 	bl	5868 <memset>
    5542:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    5546:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    554a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    554e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    5552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5556:	bf00      	nop
    5558:	1fff62a0 	.word	0x1fff62a0
    555c:	1fff63d8 	.word	0x1fff63d8
    5560:	00005451 	.word	0x00005451
    5564:	0000567d 	.word	0x0000567d
    5568:	0000569d 	.word	0x0000569d
    556c:	00010009 	.word	0x00010009
    5570:	00020012 	.word	0x00020012
    5574:	00005619 	.word	0x00005619
    5578:	0000563d 	.word	0x0000563d

0000557c <__sinit>:
    557c:	b510      	push	{r4, lr}
    557e:	4604      	mov	r4, r0
    5580:	480a      	ldr	r0, [pc, #40]	; (55ac <__sinit+0x30>)
    5582:	f000 fa8f 	bl	5aa4 <__retarget_lock_acquire_recursive>
    5586:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5588:	b923      	cbnz	r3, 5594 <__sinit+0x18>
    558a:	4b09      	ldr	r3, [pc, #36]	; (55b0 <__sinit+0x34>)
    558c:	4a09      	ldr	r2, [pc, #36]	; (55b4 <__sinit+0x38>)
    558e:	681b      	ldr	r3, [r3, #0]
    5590:	6362      	str	r2, [r4, #52]	; 0x34
    5592:	b123      	cbz	r3, 559e <__sinit+0x22>
    5594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5598:	4804      	ldr	r0, [pc, #16]	; (55ac <__sinit+0x30>)
    559a:	f000 ba85 	b.w	5aa8 <__retarget_lock_release_recursive>
    559e:	f7ff ff83 	bl	54a8 <global_stdio_init.part.0>
    55a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55a6:	4801      	ldr	r0, [pc, #4]	; (55ac <__sinit+0x30>)
    55a8:	f000 ba7e 	b.w	5aa8 <__retarget_lock_release_recursive>
    55ac:	1fff63e8 	.word	0x1fff63e8
    55b0:	1fff63d8 	.word	0x1fff63d8
    55b4:	00005469 	.word	0x00005469

000055b8 <__sfp_lock_acquire>:
    55b8:	4801      	ldr	r0, [pc, #4]	; (55c0 <__sfp_lock_acquire+0x8>)
    55ba:	f000 ba73 	b.w	5aa4 <__retarget_lock_acquire_recursive>
    55be:	bf00      	nop
    55c0:	1fff63e8 	.word	0x1fff63e8

000055c4 <__sfp_lock_release>:
    55c4:	4801      	ldr	r0, [pc, #4]	; (55cc <__sfp_lock_release+0x8>)
    55c6:	f000 ba6f 	b.w	5aa8 <__retarget_lock_release_recursive>
    55ca:	bf00      	nop
    55cc:	1fff63e8 	.word	0x1fff63e8

000055d0 <_fwalk_sglue>:
    55d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55d4:	4680      	mov	r8, r0
    55d6:	460f      	mov	r7, r1
    55d8:	4616      	mov	r6, r2
    55da:	f04f 0900 	mov.w	r9, #0
    55de:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    55e2:	3d01      	subs	r5, #1
    55e4:	d411      	bmi.n	560a <_fwalk_sglue+0x3a>
    55e6:	89a3      	ldrh	r3, [r4, #12]
    55e8:	2b01      	cmp	r3, #1
    55ea:	f105 35ff 	add.w	r5, r5, #4294967295
    55ee:	d908      	bls.n	5602 <_fwalk_sglue+0x32>
    55f0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    55f4:	3301      	adds	r3, #1
    55f6:	4621      	mov	r1, r4
    55f8:	d003      	beq.n	5602 <_fwalk_sglue+0x32>
    55fa:	4640      	mov	r0, r8
    55fc:	47b8      	blx	r7
    55fe:	ea49 0900 	orr.w	r9, r9, r0
    5602:	1c6b      	adds	r3, r5, #1
    5604:	f104 0468 	add.w	r4, r4, #104	; 0x68
    5608:	d1ed      	bne.n	55e6 <_fwalk_sglue+0x16>
    560a:	6836      	ldr	r6, [r6, #0]
    560c:	2e00      	cmp	r6, #0
    560e:	d1e6      	bne.n	55de <_fwalk_sglue+0xe>
    5610:	4648      	mov	r0, r9
    5612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5616:	bf00      	nop

00005618 <__sread>:
    5618:	b510      	push	{r4, lr}
    561a:	460c      	mov	r4, r1
    561c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5620:	f000 f9d4 	bl	59cc <_read_r>
    5624:	2800      	cmp	r0, #0
    5626:	db03      	blt.n	5630 <__sread+0x18>
    5628:	6d23      	ldr	r3, [r4, #80]	; 0x50
    562a:	4403      	add	r3, r0
    562c:	6523      	str	r3, [r4, #80]	; 0x50
    562e:	bd10      	pop	{r4, pc}
    5630:	89a3      	ldrh	r3, [r4, #12]
    5632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5636:	81a3      	strh	r3, [r4, #12]
    5638:	bd10      	pop	{r4, pc}
    563a:	bf00      	nop

0000563c <__swrite>:
    563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5640:	460c      	mov	r4, r1
    5642:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    5646:	461f      	mov	r7, r3
    5648:	05cb      	lsls	r3, r1, #23
    564a:	4605      	mov	r5, r0
    564c:	4616      	mov	r6, r2
    564e:	d40b      	bmi.n	5668 <__swrite+0x2c>
    5650:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    5654:	81a1      	strh	r1, [r4, #12]
    5656:	463b      	mov	r3, r7
    5658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    565c:	4632      	mov	r2, r6
    565e:	4628      	mov	r0, r5
    5660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5664:	f000 b9da 	b.w	5a1c <_write_r>
    5668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    566c:	2302      	movs	r3, #2
    566e:	2200      	movs	r2, #0
    5670:	f000 f996 	bl	59a0 <_lseek_r>
    5674:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    5678:	e7ea      	b.n	5650 <__swrite+0x14>
    567a:	bf00      	nop

0000567c <__sseek>:
    567c:	b510      	push	{r4, lr}
    567e:	460c      	mov	r4, r1
    5680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5684:	f000 f98c 	bl	59a0 <_lseek_r>
    5688:	89a3      	ldrh	r3, [r4, #12]
    568a:	1c42      	adds	r2, r0, #1
    568c:	bf0e      	itee	eq
    568e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5696:	6520      	strne	r0, [r4, #80]	; 0x50
    5698:	81a3      	strh	r3, [r4, #12]
    569a:	bd10      	pop	{r4, pc}

0000569c <__sclose>:
    569c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    56a0:	f000 b96c 	b.w	597c <_close_r>

000056a4 <_vdprintf_r>:
    56a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56a6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    56aa:	af04      	add	r7, sp, #16
    56ac:	9300      	str	r3, [sp, #0]
    56ae:	4613      	mov	r3, r2
    56b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    56b4:	460e      	mov	r6, r1
    56b6:	9203      	str	r2, [sp, #12]
    56b8:	4639      	mov	r1, r7
    56ba:	aa03      	add	r2, sp, #12
    56bc:	4605      	mov	r5, r0
    56be:	f000 f825 	bl	570c <_vasnprintf_r>
    56c2:	b188      	cbz	r0, 56e8 <_vdprintf_r+0x44>
    56c4:	4604      	mov	r4, r0
    56c6:	4602      	mov	r2, r0
    56c8:	9b03      	ldr	r3, [sp, #12]
    56ca:	4631      	mov	r1, r6
    56cc:	4628      	mov	r0, r5
    56ce:	f000 f9a5 	bl	5a1c <_write_r>
    56d2:	42bc      	cmp	r4, r7
    56d4:	9003      	str	r0, [sp, #12]
    56d6:	d004      	beq.n	56e2 <_vdprintf_r+0x3e>
    56d8:	4628      	mov	r0, r5
    56da:	4621      	mov	r1, r4
    56dc:	f000 fabe 	bl	5c5c <_free_r>
    56e0:	9803      	ldr	r0, [sp, #12]
    56e2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    56e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56e8:	f04f 30ff 	mov.w	r0, #4294967295
    56ec:	e7f9      	b.n	56e2 <_vdprintf_r+0x3e>
    56ee:	bf00      	nop

000056f0 <vdprintf>:
    56f0:	b410      	push	{r4}
    56f2:	4c05      	ldr	r4, [pc, #20]	; (5708 <vdprintf+0x18>)
    56f4:	4684      	mov	ip, r0
    56f6:	4613      	mov	r3, r2
    56f8:	6820      	ldr	r0, [r4, #0]
    56fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    56fe:	460a      	mov	r2, r1
    5700:	4661      	mov	r1, ip
    5702:	f7ff bfcf 	b.w	56a4 <_vdprintf_r>
    5706:	bf00      	nop
    5708:	1fff0ec0 	.word	0x1fff0ec0

0000570c <_vasnprintf_r>:
    570c:	b530      	push	{r4, r5, lr}
    570e:	6814      	ldr	r4, [r2, #0]
    5710:	4615      	mov	r5, r2
    5712:	b09b      	sub	sp, #108	; 0x6c
    5714:	461a      	mov	r2, r3
    5716:	b109      	cbz	r1, 571c <_vasnprintf_r+0x10>
    5718:	2c00      	cmp	r4, #0
    571a:	d119      	bne.n	5750 <_vasnprintf_r+0x44>
    571c:	2100      	movs	r1, #0
    571e:	f44f 7322 	mov.w	r3, #648	; 0x288
    5722:	f8ad 300c 	strh.w	r3, [sp, #12]
    5726:	9100      	str	r1, [sp, #0]
    5728:	9104      	str	r1, [sp, #16]
    572a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    572e:	9102      	str	r1, [sp, #8]
    5730:	9105      	str	r1, [sp, #20]
    5732:	f8ad 300e 	strh.w	r3, [sp, #14]
    5736:	4669      	mov	r1, sp
    5738:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    573a:	f000 ff75 	bl	6628 <_svfprintf_r>
    573e:	2800      	cmp	r0, #0
    5740:	db13      	blt.n	576a <_vasnprintf_r+0x5e>
    5742:	9b00      	ldr	r3, [sp, #0]
    5744:	6028      	str	r0, [r5, #0]
    5746:	2200      	movs	r2, #0
    5748:	701a      	strb	r2, [r3, #0]
    574a:	9804      	ldr	r0, [sp, #16]
    574c:	b01b      	add	sp, #108	; 0x6c
    574e:	bd30      	pop	{r4, r5, pc}
    5750:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    5754:	9100      	str	r1, [sp, #0]
    5756:	9104      	str	r1, [sp, #16]
    5758:	f8ad 300c 	strh.w	r3, [sp, #12]
    575c:	4621      	mov	r1, r4
    575e:	dae4      	bge.n	572a <_vasnprintf_r+0x1e>
    5760:	238b      	movs	r3, #139	; 0x8b
    5762:	6003      	str	r3, [r0, #0]
    5764:	2000      	movs	r0, #0
    5766:	b01b      	add	sp, #108	; 0x6c
    5768:	bd30      	pop	{r4, r5, pc}
    576a:	2000      	movs	r0, #0
    576c:	e7ee      	b.n	574c <_vasnprintf_r+0x40>
    576e:	bf00      	nop

00005770 <memmove>:
    5770:	4288      	cmp	r0, r1
    5772:	d90d      	bls.n	5790 <memmove+0x20>
    5774:	188b      	adds	r3, r1, r2
    5776:	4283      	cmp	r3, r0
    5778:	d90a      	bls.n	5790 <memmove+0x20>
    577a:	eb00 0c02 	add.w	ip, r0, r2
    577e:	b1ba      	cbz	r2, 57b0 <memmove+0x40>
    5780:	4662      	mov	r2, ip
    5782:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    5786:	f802 cd01 	strb.w	ip, [r2, #-1]!
    578a:	4299      	cmp	r1, r3
    578c:	d1f9      	bne.n	5782 <memmove+0x12>
    578e:	4770      	bx	lr
    5790:	2a0f      	cmp	r2, #15
    5792:	d80e      	bhi.n	57b2 <memmove+0x42>
    5794:	4603      	mov	r3, r0
    5796:	f102 3cff 	add.w	ip, r2, #4294967295
    579a:	b14a      	cbz	r2, 57b0 <memmove+0x40>
    579c:	f10c 0c01 	add.w	ip, ip, #1
    57a0:	3b01      	subs	r3, #1
    57a2:	448c      	add	ip, r1
    57a4:	f811 2b01 	ldrb.w	r2, [r1], #1
    57a8:	f803 2f01 	strb.w	r2, [r3, #1]!
    57ac:	4561      	cmp	r1, ip
    57ae:	d1f9      	bne.n	57a4 <memmove+0x34>
    57b0:	4770      	bx	lr
    57b2:	ea40 0301 	orr.w	r3, r0, r1
    57b6:	079b      	lsls	r3, r3, #30
    57b8:	d150      	bne.n	585c <memmove+0xec>
    57ba:	f1a2 0310 	sub.w	r3, r2, #16
    57be:	b570      	push	{r4, r5, r6, lr}
    57c0:	f101 0c20 	add.w	ip, r1, #32
    57c4:	f023 050f 	bic.w	r5, r3, #15
    57c8:	f101 0e10 	add.w	lr, r1, #16
    57cc:	f100 0410 	add.w	r4, r0, #16
    57d0:	44ac      	add	ip, r5
    57d2:	091b      	lsrs	r3, r3, #4
    57d4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    57d8:	f844 5c10 	str.w	r5, [r4, #-16]
    57dc:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    57e0:	f844 5c0c 	str.w	r5, [r4, #-12]
    57e4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    57e8:	f844 5c08 	str.w	r5, [r4, #-8]
    57ec:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    57f0:	f844 5c04 	str.w	r5, [r4, #-4]
    57f4:	f10e 0e10 	add.w	lr, lr, #16
    57f8:	45e6      	cmp	lr, ip
    57fa:	f104 0410 	add.w	r4, r4, #16
    57fe:	d1e9      	bne.n	57d4 <memmove+0x64>
    5800:	3301      	adds	r3, #1
    5802:	f012 0f0c 	tst.w	r2, #12
    5806:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    580a:	f002 040f 	and.w	r4, r2, #15
    580e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5812:	d027      	beq.n	5864 <memmove+0xf4>
    5814:	3c04      	subs	r4, #4
    5816:	f024 0603 	bic.w	r6, r4, #3
    581a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    581e:	441e      	add	r6, r3
    5820:	1f1c      	subs	r4, r3, #4
    5822:	468e      	mov	lr, r1
    5824:	f85e 5b04 	ldr.w	r5, [lr], #4
    5828:	f844 5f04 	str.w	r5, [r4, #4]!
    582c:	42b4      	cmp	r4, r6
    582e:	d1f9      	bne.n	5824 <memmove+0xb4>
    5830:	f10c 0401 	add.w	r4, ip, #1
    5834:	f002 0203 	and.w	r2, r2, #3
    5838:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    583c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5840:	f102 3cff 	add.w	ip, r2, #4294967295
    5844:	b14a      	cbz	r2, 585a <memmove+0xea>
    5846:	f10c 0c01 	add.w	ip, ip, #1
    584a:	3b01      	subs	r3, #1
    584c:	448c      	add	ip, r1
    584e:	f811 2b01 	ldrb.w	r2, [r1], #1
    5852:	f803 2f01 	strb.w	r2, [r3, #1]!
    5856:	4561      	cmp	r1, ip
    5858:	d1f9      	bne.n	584e <memmove+0xde>
    585a:	bd70      	pop	{r4, r5, r6, pc}
    585c:	f102 3cff 	add.w	ip, r2, #4294967295
    5860:	4603      	mov	r3, r0
    5862:	e79b      	b.n	579c <memmove+0x2c>
    5864:	4622      	mov	r2, r4
    5866:	e7eb      	b.n	5840 <memmove+0xd0>

00005868 <memset>:
    5868:	0783      	lsls	r3, r0, #30
    586a:	b530      	push	{r4, r5, lr}
    586c:	d048      	beq.n	5900 <memset+0x98>
    586e:	1e54      	subs	r4, r2, #1
    5870:	2a00      	cmp	r2, #0
    5872:	d03f      	beq.n	58f4 <memset+0x8c>
    5874:	b2ca      	uxtb	r2, r1
    5876:	4603      	mov	r3, r0
    5878:	e001      	b.n	587e <memset+0x16>
    587a:	3c01      	subs	r4, #1
    587c:	d33a      	bcc.n	58f4 <memset+0x8c>
    587e:	f803 2b01 	strb.w	r2, [r3], #1
    5882:	079d      	lsls	r5, r3, #30
    5884:	d1f9      	bne.n	587a <memset+0x12>
    5886:	2c03      	cmp	r4, #3
    5888:	d92d      	bls.n	58e6 <memset+0x7e>
    588a:	b2cd      	uxtb	r5, r1
    588c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5890:	2c0f      	cmp	r4, #15
    5892:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5896:	d936      	bls.n	5906 <memset+0x9e>
    5898:	f1a4 0210 	sub.w	r2, r4, #16
    589c:	f022 0c0f 	bic.w	ip, r2, #15
    58a0:	f103 0e20 	add.w	lr, r3, #32
    58a4:	44e6      	add	lr, ip
    58a6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    58aa:	f103 0210 	add.w	r2, r3, #16
    58ae:	e942 5504 	strd	r5, r5, [r2, #-16]
    58b2:	e942 5502 	strd	r5, r5, [r2, #-8]
    58b6:	3210      	adds	r2, #16
    58b8:	4572      	cmp	r2, lr
    58ba:	d1f8      	bne.n	58ae <memset+0x46>
    58bc:	f10c 0201 	add.w	r2, ip, #1
    58c0:	f014 0f0c 	tst.w	r4, #12
    58c4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    58c8:	f004 0c0f 	and.w	ip, r4, #15
    58cc:	d013      	beq.n	58f6 <memset+0x8e>
    58ce:	f1ac 0304 	sub.w	r3, ip, #4
    58d2:	f023 0303 	bic.w	r3, r3, #3
    58d6:	3304      	adds	r3, #4
    58d8:	4413      	add	r3, r2
    58da:	f842 5b04 	str.w	r5, [r2], #4
    58de:	4293      	cmp	r3, r2
    58e0:	d1fb      	bne.n	58da <memset+0x72>
    58e2:	f00c 0403 	and.w	r4, ip, #3
    58e6:	b12c      	cbz	r4, 58f4 <memset+0x8c>
    58e8:	b2c9      	uxtb	r1, r1
    58ea:	441c      	add	r4, r3
    58ec:	f803 1b01 	strb.w	r1, [r3], #1
    58f0:	429c      	cmp	r4, r3
    58f2:	d1fb      	bne.n	58ec <memset+0x84>
    58f4:	bd30      	pop	{r4, r5, pc}
    58f6:	4664      	mov	r4, ip
    58f8:	4613      	mov	r3, r2
    58fa:	2c00      	cmp	r4, #0
    58fc:	d1f4      	bne.n	58e8 <memset+0x80>
    58fe:	e7f9      	b.n	58f4 <memset+0x8c>
    5900:	4603      	mov	r3, r0
    5902:	4614      	mov	r4, r2
    5904:	e7bf      	b.n	5886 <memset+0x1e>
    5906:	461a      	mov	r2, r3
    5908:	46a4      	mov	ip, r4
    590a:	e7e0      	b.n	58ce <memset+0x66>

0000590c <strncpy>:
    590c:	ea40 0301 	orr.w	r3, r0, r1
    5910:	079b      	lsls	r3, r3, #30
    5912:	b530      	push	{r4, r5, lr}
    5914:	d101      	bne.n	591a <strncpy+0xe>
    5916:	2a03      	cmp	r2, #3
    5918:	d80f      	bhi.n	593a <strncpy+0x2e>
    591a:	4684      	mov	ip, r0
    591c:	f101 3eff 	add.w	lr, r1, #4294967295
    5920:	e007      	b.n	5932 <strncpy+0x26>
    5922:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    5926:	f803 1b01 	strb.w	r1, [r3], #1
    592a:	1e54      	subs	r4, r2, #1
    592c:	b1c1      	cbz	r1, 5960 <strncpy+0x54>
    592e:	469c      	mov	ip, r3
    5930:	4622      	mov	r2, r4
    5932:	4663      	mov	r3, ip
    5934:	2a00      	cmp	r2, #0
    5936:	d1f4      	bne.n	5922 <strncpy+0x16>
    5938:	bd30      	pop	{r4, r5, pc}
    593a:	460b      	mov	r3, r1
    593c:	4684      	mov	ip, r0
    593e:	4619      	mov	r1, r3
    5940:	f853 5b04 	ldr.w	r5, [r3], #4
    5944:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    5948:	ea24 0405 	bic.w	r4, r4, r5
    594c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5950:	d1e4      	bne.n	591c <strncpy+0x10>
    5952:	3a04      	subs	r2, #4
    5954:	2a03      	cmp	r2, #3
    5956:	f84c 5b04 	str.w	r5, [ip], #4
    595a:	4619      	mov	r1, r3
    595c:	d8ef      	bhi.n	593e <strncpy+0x32>
    595e:	e7dd      	b.n	591c <strncpy+0x10>
    5960:	4494      	add	ip, r2
    5962:	2c00      	cmp	r4, #0
    5964:	d0e8      	beq.n	5938 <strncpy+0x2c>
    5966:	f803 1b01 	strb.w	r1, [r3], #1
    596a:	4563      	cmp	r3, ip
    596c:	d1fb      	bne.n	5966 <strncpy+0x5a>
    596e:	bd30      	pop	{r4, r5, pc}

00005970 <__locale_mb_cur_max>:
    5970:	4b01      	ldr	r3, [pc, #4]	; (5978 <__locale_mb_cur_max+0x8>)
    5972:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    5976:	4770      	bx	lr
    5978:	1fff0c30 	.word	0x1fff0c30

0000597c <_close_r>:
    597c:	b538      	push	{r3, r4, r5, lr}
    597e:	4d07      	ldr	r5, [pc, #28]	; (599c <_close_r+0x20>)
    5980:	2200      	movs	r2, #0
    5982:	4604      	mov	r4, r0
    5984:	4608      	mov	r0, r1
    5986:	602a      	str	r2, [r5, #0]
    5988:	f7fd fcc6 	bl	3318 <_close>
    598c:	1c43      	adds	r3, r0, #1
    598e:	d000      	beq.n	5992 <_close_r+0x16>
    5990:	bd38      	pop	{r3, r4, r5, pc}
    5992:	682b      	ldr	r3, [r5, #0]
    5994:	2b00      	cmp	r3, #0
    5996:	d0fb      	beq.n	5990 <_close_r+0x14>
    5998:	6023      	str	r3, [r4, #0]
    599a:	bd38      	pop	{r3, r4, r5, pc}
    599c:	1fff63dc 	.word	0x1fff63dc

000059a0 <_lseek_r>:
    59a0:	b538      	push	{r3, r4, r5, lr}
    59a2:	460c      	mov	r4, r1
    59a4:	4d08      	ldr	r5, [pc, #32]	; (59c8 <_lseek_r+0x28>)
    59a6:	4684      	mov	ip, r0
    59a8:	4611      	mov	r1, r2
    59aa:	4620      	mov	r0, r4
    59ac:	461a      	mov	r2, r3
    59ae:	2300      	movs	r3, #0
    59b0:	602b      	str	r3, [r5, #0]
    59b2:	4664      	mov	r4, ip
    59b4:	f7fd fcbc 	bl	3330 <_lseek>
    59b8:	1c43      	adds	r3, r0, #1
    59ba:	d000      	beq.n	59be <_lseek_r+0x1e>
    59bc:	bd38      	pop	{r3, r4, r5, pc}
    59be:	682b      	ldr	r3, [r5, #0]
    59c0:	2b00      	cmp	r3, #0
    59c2:	d0fb      	beq.n	59bc <_lseek_r+0x1c>
    59c4:	6023      	str	r3, [r4, #0]
    59c6:	bd38      	pop	{r3, r4, r5, pc}
    59c8:	1fff63dc 	.word	0x1fff63dc

000059cc <_read_r>:
    59cc:	b538      	push	{r3, r4, r5, lr}
    59ce:	460c      	mov	r4, r1
    59d0:	4d08      	ldr	r5, [pc, #32]	; (59f4 <_read_r+0x28>)
    59d2:	4684      	mov	ip, r0
    59d4:	4611      	mov	r1, r2
    59d6:	4620      	mov	r0, r4
    59d8:	461a      	mov	r2, r3
    59da:	2300      	movs	r3, #0
    59dc:	602b      	str	r3, [r5, #0]
    59de:	4664      	mov	r4, ip
    59e0:	f7fd fc98 	bl	3314 <_read>
    59e4:	1c43      	adds	r3, r0, #1
    59e6:	d000      	beq.n	59ea <_read_r+0x1e>
    59e8:	bd38      	pop	{r3, r4, r5, pc}
    59ea:	682b      	ldr	r3, [r5, #0]
    59ec:	2b00      	cmp	r3, #0
    59ee:	d0fb      	beq.n	59e8 <_read_r+0x1c>
    59f0:	6023      	str	r3, [r4, #0]
    59f2:	bd38      	pop	{r3, r4, r5, pc}
    59f4:	1fff63dc 	.word	0x1fff63dc

000059f8 <_sbrk_r>:
    59f8:	b538      	push	{r3, r4, r5, lr}
    59fa:	4d07      	ldr	r5, [pc, #28]	; (5a18 <_sbrk_r+0x20>)
    59fc:	2200      	movs	r2, #0
    59fe:	4604      	mov	r4, r0
    5a00:	4608      	mov	r0, r1
    5a02:	602a      	str	r2, [r5, #0]
    5a04:	f7fd fc6c 	bl	32e0 <_sbrk>
    5a08:	1c43      	adds	r3, r0, #1
    5a0a:	d000      	beq.n	5a0e <_sbrk_r+0x16>
    5a0c:	bd38      	pop	{r3, r4, r5, pc}
    5a0e:	682b      	ldr	r3, [r5, #0]
    5a10:	2b00      	cmp	r3, #0
    5a12:	d0fb      	beq.n	5a0c <_sbrk_r+0x14>
    5a14:	6023      	str	r3, [r4, #0]
    5a16:	bd38      	pop	{r3, r4, r5, pc}
    5a18:	1fff63dc 	.word	0x1fff63dc

00005a1c <_write_r>:
    5a1c:	b538      	push	{r3, r4, r5, lr}
    5a1e:	460c      	mov	r4, r1
    5a20:	4d08      	ldr	r5, [pc, #32]	; (5a44 <_write_r+0x28>)
    5a22:	4684      	mov	ip, r0
    5a24:	4611      	mov	r1, r2
    5a26:	4620      	mov	r0, r4
    5a28:	461a      	mov	r2, r3
    5a2a:	2300      	movs	r3, #0
    5a2c:	602b      	str	r3, [r5, #0]
    5a2e:	4664      	mov	r4, ip
    5a30:	f7fd fb34 	bl	309c <_write>
    5a34:	1c43      	adds	r3, r0, #1
    5a36:	d000      	beq.n	5a3a <_write_r+0x1e>
    5a38:	bd38      	pop	{r3, r4, r5, pc}
    5a3a:	682b      	ldr	r3, [r5, #0]
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d0fb      	beq.n	5a38 <_write_r+0x1c>
    5a40:	6023      	str	r3, [r4, #0]
    5a42:	bd38      	pop	{r3, r4, r5, pc}
    5a44:	1fff63dc 	.word	0x1fff63dc

00005a48 <__errno>:
    5a48:	4b01      	ldr	r3, [pc, #4]	; (5a50 <__errno+0x8>)
    5a4a:	6818      	ldr	r0, [r3, #0]
    5a4c:	4770      	bx	lr
    5a4e:	bf00      	nop
    5a50:	1fff0ec0 	.word	0x1fff0ec0

00005a54 <__libc_init_array>:
    5a54:	b570      	push	{r4, r5, r6, lr}
    5a56:	4e0d      	ldr	r6, [pc, #52]	; (5a8c <__libc_init_array+0x38>)
    5a58:	4d0d      	ldr	r5, [pc, #52]	; (5a90 <__libc_init_array+0x3c>)
    5a5a:	1b76      	subs	r6, r6, r5
    5a5c:	10b6      	asrs	r6, r6, #2
    5a5e:	d006      	beq.n	5a6e <__libc_init_array+0x1a>
    5a60:	2400      	movs	r4, #0
    5a62:	f855 3b04 	ldr.w	r3, [r5], #4
    5a66:	3401      	adds	r4, #1
    5a68:	4798      	blx	r3
    5a6a:	42a6      	cmp	r6, r4
    5a6c:	d1f9      	bne.n	5a62 <__libc_init_array+0xe>
    5a6e:	4e09      	ldr	r6, [pc, #36]	; (5a94 <__libc_init_array+0x40>)
    5a70:	4d09      	ldr	r5, [pc, #36]	; (5a98 <__libc_init_array+0x44>)
    5a72:	1b76      	subs	r6, r6, r5
    5a74:	f006 f952 	bl	bd1c <_init>
    5a78:	10b6      	asrs	r6, r6, #2
    5a7a:	d006      	beq.n	5a8a <__libc_init_array+0x36>
    5a7c:	2400      	movs	r4, #0
    5a7e:	f855 3b04 	ldr.w	r3, [r5], #4
    5a82:	3401      	adds	r4, #1
    5a84:	4798      	blx	r3
    5a86:	42a6      	cmp	r6, r4
    5a88:	d1f9      	bne.n	5a7e <__libc_init_array+0x2a>
    5a8a:	bd70      	pop	{r4, r5, r6, pc}
    5a8c:	0000bd28 	.word	0x0000bd28
    5a90:	0000bd28 	.word	0x0000bd28
    5a94:	0000bd34 	.word	0x0000bd34
    5a98:	0000bd28 	.word	0x0000bd28

00005a9c <__retarget_lock_init_recursive>:
    5a9c:	4770      	bx	lr
    5a9e:	bf00      	nop

00005aa0 <__retarget_lock_close_recursive>:
    5aa0:	4770      	bx	lr
    5aa2:	bf00      	nop

00005aa4 <__retarget_lock_acquire_recursive>:
    5aa4:	4770      	bx	lr
    5aa6:	bf00      	nop

00005aa8 <__retarget_lock_release_recursive>:
    5aa8:	4770      	bx	lr
    5aaa:	bf00      	nop
    5aac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    5ab0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    5ab4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    5ab8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    5abc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00005ac0 <strlen>:
    5ac0:	f890 f000 	pld	[r0]
    5ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5ac8:	f020 0107 	bic.w	r1, r0, #7
    5acc:	f06f 0c00 	mvn.w	ip, #0
    5ad0:	f010 0407 	ands.w	r4, r0, #7
    5ad4:	f891 f020 	pld	[r1, #32]
    5ad8:	f040 8049 	bne.w	5b6e <strlen+0xae>
    5adc:	f04f 0400 	mov.w	r4, #0
    5ae0:	f06f 0007 	mvn.w	r0, #7
    5ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
    5ae8:	f891 f040 	pld	[r1, #64]	; 0x40
    5aec:	f100 0008 	add.w	r0, r0, #8
    5af0:	fa82 f24c 	uadd8	r2, r2, ip
    5af4:	faa4 f28c 	sel	r2, r4, ip
    5af8:	fa83 f34c 	uadd8	r3, r3, ip
    5afc:	faa2 f38c 	sel	r3, r2, ip
    5b00:	bb4b      	cbnz	r3, 5b56 <strlen+0x96>
    5b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5b06:	fa82 f24c 	uadd8	r2, r2, ip
    5b0a:	f100 0008 	add.w	r0, r0, #8
    5b0e:	faa4 f28c 	sel	r2, r4, ip
    5b12:	fa83 f34c 	uadd8	r3, r3, ip
    5b16:	faa2 f38c 	sel	r3, r2, ip
    5b1a:	b9e3      	cbnz	r3, 5b56 <strlen+0x96>
    5b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5b20:	fa82 f24c 	uadd8	r2, r2, ip
    5b24:	f100 0008 	add.w	r0, r0, #8
    5b28:	faa4 f28c 	sel	r2, r4, ip
    5b2c:	fa83 f34c 	uadd8	r3, r3, ip
    5b30:	faa2 f38c 	sel	r3, r2, ip
    5b34:	b97b      	cbnz	r3, 5b56 <strlen+0x96>
    5b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    5b3a:	f101 0120 	add.w	r1, r1, #32
    5b3e:	fa82 f24c 	uadd8	r2, r2, ip
    5b42:	f100 0008 	add.w	r0, r0, #8
    5b46:	faa4 f28c 	sel	r2, r4, ip
    5b4a:	fa83 f34c 	uadd8	r3, r3, ip
    5b4e:	faa2 f38c 	sel	r3, r2, ip
    5b52:	2b00      	cmp	r3, #0
    5b54:	d0c6      	beq.n	5ae4 <strlen+0x24>
    5b56:	2a00      	cmp	r2, #0
    5b58:	bf04      	itt	eq
    5b5a:	3004      	addeq	r0, #4
    5b5c:	461a      	moveq	r2, r3
    5b5e:	ba12      	rev	r2, r2
    5b60:	fab2 f282 	clz	r2, r2
    5b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    5b6c:	4770      	bx	lr
    5b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5b72:	f004 0503 	and.w	r5, r4, #3
    5b76:	f1c4 0000 	rsb	r0, r4, #0
    5b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    5b7e:	f014 0f04 	tst.w	r4, #4
    5b82:	f891 f040 	pld	[r1, #64]	; 0x40
    5b86:	fa0c f505 	lsl.w	r5, ip, r5
    5b8a:	ea62 0205 	orn	r2, r2, r5
    5b8e:	bf1c      	itt	ne
    5b90:	ea63 0305 	ornne	r3, r3, r5
    5b94:	4662      	movne	r2, ip
    5b96:	f04f 0400 	mov.w	r4, #0
    5b9a:	e7a9      	b.n	5af0 <strlen+0x30>

00005b9c <register_fini>:
    5b9c:	4b02      	ldr	r3, [pc, #8]	; (5ba8 <register_fini+0xc>)
    5b9e:	b113      	cbz	r3, 5ba6 <register_fini+0xa>
    5ba0:	4802      	ldr	r0, [pc, #8]	; (5bac <register_fini+0x10>)
    5ba2:	f000 b805 	b.w	5bb0 <atexit>
    5ba6:	4770      	bx	lr
    5ba8:	00000000 	.word	0x00000000
    5bac:	0000845d 	.word	0x0000845d

00005bb0 <atexit>:
    5bb0:	2300      	movs	r3, #0
    5bb2:	4601      	mov	r1, r0
    5bb4:	461a      	mov	r2, r3
    5bb6:	4618      	mov	r0, r3
    5bb8:	f002 bcf0 	b.w	859c <__register_exitproc>

00005bbc <_malloc_trim_r>:
    5bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bbe:	4f24      	ldr	r7, [pc, #144]	; (5c50 <_malloc_trim_r+0x94>)
    5bc0:	460c      	mov	r4, r1
    5bc2:	4606      	mov	r6, r0
    5bc4:	f7ff fa4c 	bl	5060 <__malloc_lock>
    5bc8:	68bb      	ldr	r3, [r7, #8]
    5bca:	685d      	ldr	r5, [r3, #4]
    5bcc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    5bd0:	310f      	adds	r1, #15
    5bd2:	f025 0503 	bic.w	r5, r5, #3
    5bd6:	194b      	adds	r3, r1, r5
    5bd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    5bdc:	f023 030f 	bic.w	r3, r3, #15
    5be0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    5be4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    5be8:	db07      	blt.n	5bfa <_malloc_trim_r+0x3e>
    5bea:	2100      	movs	r1, #0
    5bec:	4630      	mov	r0, r6
    5bee:	f7ff ff03 	bl	59f8 <_sbrk_r>
    5bf2:	68bb      	ldr	r3, [r7, #8]
    5bf4:	442b      	add	r3, r5
    5bf6:	4298      	cmp	r0, r3
    5bf8:	d004      	beq.n	5c04 <_malloc_trim_r+0x48>
    5bfa:	4630      	mov	r0, r6
    5bfc:	f7ff fa36 	bl	506c <__malloc_unlock>
    5c00:	2000      	movs	r0, #0
    5c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c04:	4261      	negs	r1, r4
    5c06:	4630      	mov	r0, r6
    5c08:	f7ff fef6 	bl	59f8 <_sbrk_r>
    5c0c:	3001      	adds	r0, #1
    5c0e:	d00d      	beq.n	5c2c <_malloc_trim_r+0x70>
    5c10:	4a10      	ldr	r2, [pc, #64]	; (5c54 <_malloc_trim_r+0x98>)
    5c12:	68bb      	ldr	r3, [r7, #8]
    5c14:	1b2d      	subs	r5, r5, r4
    5c16:	f045 0501 	orr.w	r5, r5, #1
    5c1a:	605d      	str	r5, [r3, #4]
    5c1c:	6813      	ldr	r3, [r2, #0]
    5c1e:	4630      	mov	r0, r6
    5c20:	1b1b      	subs	r3, r3, r4
    5c22:	6013      	str	r3, [r2, #0]
    5c24:	f7ff fa22 	bl	506c <__malloc_unlock>
    5c28:	2001      	movs	r0, #1
    5c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c2c:	2100      	movs	r1, #0
    5c2e:	4630      	mov	r0, r6
    5c30:	f7ff fee2 	bl	59f8 <_sbrk_r>
    5c34:	68ba      	ldr	r2, [r7, #8]
    5c36:	1a83      	subs	r3, r0, r2
    5c38:	2b0f      	cmp	r3, #15
    5c3a:	ddde      	ble.n	5bfa <_malloc_trim_r+0x3e>
    5c3c:	f043 0301 	orr.w	r3, r3, #1
    5c40:	6053      	str	r3, [r2, #4]
    5c42:	4b05      	ldr	r3, [pc, #20]	; (5c58 <_malloc_trim_r+0x9c>)
    5c44:	4903      	ldr	r1, [pc, #12]	; (5c54 <_malloc_trim_r+0x98>)
    5c46:	681b      	ldr	r3, [r3, #0]
    5c48:	1ac0      	subs	r0, r0, r3
    5c4a:	6008      	str	r0, [r1, #0]
    5c4c:	e7d5      	b.n	5bfa <_malloc_trim_r+0x3e>
    5c4e:	bf00      	nop
    5c50:	1fff0814 	.word	0x1fff0814
    5c54:	1fff626c 	.word	0x1fff626c
    5c58:	1fff0c1c 	.word	0x1fff0c1c

00005c5c <_free_r>:
    5c5c:	2900      	cmp	r1, #0
    5c5e:	d061      	beq.n	5d24 <_free_r+0xc8>
    5c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c62:	460c      	mov	r4, r1
    5c64:	4606      	mov	r6, r0
    5c66:	f7ff f9fb 	bl	5060 <__malloc_lock>
    5c6a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    5c6e:	4f7b      	ldr	r7, [pc, #492]	; (5e5c <_free_r+0x200>)
    5c70:	f1a4 0508 	sub.w	r5, r4, #8
    5c74:	f022 0101 	bic.w	r1, r2, #1
    5c78:	eb05 0c01 	add.w	ip, r5, r1
    5c7c:	68b8      	ldr	r0, [r7, #8]
    5c7e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    5c82:	4560      	cmp	r0, ip
    5c84:	f023 0303 	bic.w	r3, r3, #3
    5c88:	f000 808b 	beq.w	5da2 <_free_r+0x146>
    5c8c:	07d2      	lsls	r2, r2, #31
    5c8e:	f8cc 3004 	str.w	r3, [ip, #4]
    5c92:	d432      	bmi.n	5cfa <_free_r+0x9e>
    5c94:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5c98:	1aad      	subs	r5, r5, r2
    5c9a:	4411      	add	r1, r2
    5c9c:	68aa      	ldr	r2, [r5, #8]
    5c9e:	f107 0008 	add.w	r0, r7, #8
    5ca2:	4282      	cmp	r2, r0
    5ca4:	d06a      	beq.n	5d7c <_free_r+0x120>
    5ca6:	eb0c 0403 	add.w	r4, ip, r3
    5caa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    5cae:	68ec      	ldr	r4, [r5, #12]
    5cb0:	60d4      	str	r4, [r2, #12]
    5cb2:	f01e 0f01 	tst.w	lr, #1
    5cb6:	60a2      	str	r2, [r4, #8]
    5cb8:	f000 8097 	beq.w	5dea <_free_r+0x18e>
    5cbc:	f041 0301 	orr.w	r3, r1, #1
    5cc0:	606b      	str	r3, [r5, #4]
    5cc2:	f8cc 1000 	str.w	r1, [ip]
    5cc6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5cca:	d235      	bcs.n	5d38 <_free_r+0xdc>
    5ccc:	6878      	ldr	r0, [r7, #4]
    5cce:	08cb      	lsrs	r3, r1, #3
    5cd0:	2201      	movs	r2, #1
    5cd2:	0949      	lsrs	r1, r1, #5
    5cd4:	3301      	adds	r3, #1
    5cd6:	408a      	lsls	r2, r1
    5cd8:	4302      	orrs	r2, r0
    5cda:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    5cde:	607a      	str	r2, [r7, #4]
    5ce0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    5ce4:	3a08      	subs	r2, #8
    5ce6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    5cea:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    5cee:	60cd      	str	r5, [r1, #12]
    5cf0:	4630      	mov	r0, r6
    5cf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5cf6:	f7ff b9b9 	b.w	506c <__malloc_unlock>
    5cfa:	eb0c 0203 	add.w	r2, ip, r3
    5cfe:	6852      	ldr	r2, [r2, #4]
    5d00:	07d0      	lsls	r0, r2, #31
    5d02:	d410      	bmi.n	5d26 <_free_r+0xca>
    5d04:	4419      	add	r1, r3
    5d06:	f107 0008 	add.w	r0, r7, #8
    5d0a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    5d0e:	4283      	cmp	r3, r0
    5d10:	d073      	beq.n	5dfa <_free_r+0x19e>
    5d12:	f8dc 200c 	ldr.w	r2, [ip, #12]
    5d16:	60da      	str	r2, [r3, #12]
    5d18:	6093      	str	r3, [r2, #8]
    5d1a:	f041 0301 	orr.w	r3, r1, #1
    5d1e:	606b      	str	r3, [r5, #4]
    5d20:	5069      	str	r1, [r5, r1]
    5d22:	e7d0      	b.n	5cc6 <_free_r+0x6a>
    5d24:	4770      	bx	lr
    5d26:	f041 0301 	orr.w	r3, r1, #1
    5d2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5d2e:	f844 3c04 	str.w	r3, [r4, #-4]
    5d32:	f8cc 1000 	str.w	r1, [ip]
    5d36:	d3c9      	bcc.n	5ccc <_free_r+0x70>
    5d38:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    5d3c:	ea4f 2351 	mov.w	r3, r1, lsr #9
    5d40:	d248      	bcs.n	5dd4 <_free_r+0x178>
    5d42:	098b      	lsrs	r3, r1, #6
    5d44:	f103 0039 	add.w	r0, r3, #57	; 0x39
    5d48:	f103 0238 	add.w	r2, r3, #56	; 0x38
    5d4c:	00c3      	lsls	r3, r0, #3
    5d4e:	18f8      	adds	r0, r7, r3
    5d50:	58fb      	ldr	r3, [r7, r3]
    5d52:	3808      	subs	r0, #8
    5d54:	4298      	cmp	r0, r3
    5d56:	d059      	beq.n	5e0c <_free_r+0x1b0>
    5d58:	685a      	ldr	r2, [r3, #4]
    5d5a:	f022 0203 	bic.w	r2, r2, #3
    5d5e:	428a      	cmp	r2, r1
    5d60:	d902      	bls.n	5d68 <_free_r+0x10c>
    5d62:	689b      	ldr	r3, [r3, #8]
    5d64:	4298      	cmp	r0, r3
    5d66:	d1f7      	bne.n	5d58 <_free_r+0xfc>
    5d68:	68d8      	ldr	r0, [r3, #12]
    5d6a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    5d6e:	6085      	str	r5, [r0, #8]
    5d70:	60dd      	str	r5, [r3, #12]
    5d72:	4630      	mov	r0, r6
    5d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5d78:	f7ff b978 	b.w	506c <__malloc_unlock>
    5d7c:	eb0c 0203 	add.w	r2, ip, r3
    5d80:	6852      	ldr	r2, [r2, #4]
    5d82:	07d2      	lsls	r2, r2, #31
    5d84:	d463      	bmi.n	5e4e <_free_r+0x1f2>
    5d86:	440b      	add	r3, r1
    5d88:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    5d8c:	60ca      	str	r2, [r1, #12]
    5d8e:	6091      	str	r1, [r2, #8]
    5d90:	f043 0201 	orr.w	r2, r3, #1
    5d94:	606a      	str	r2, [r5, #4]
    5d96:	4630      	mov	r0, r6
    5d98:	50eb      	str	r3, [r5, r3]
    5d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5d9e:	f7ff b965 	b.w	506c <__malloc_unlock>
    5da2:	440b      	add	r3, r1
    5da4:	07d1      	lsls	r1, r2, #31
    5da6:	d407      	bmi.n	5db8 <_free_r+0x15c>
    5da8:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5dac:	1aad      	subs	r5, r5, r2
    5dae:	4413      	add	r3, r2
    5db0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    5db4:	60ca      	str	r2, [r1, #12]
    5db6:	6091      	str	r1, [r2, #8]
    5db8:	f043 0201 	orr.w	r2, r3, #1
    5dbc:	606a      	str	r2, [r5, #4]
    5dbe:	4a28      	ldr	r2, [pc, #160]	; (5e60 <_free_r+0x204>)
    5dc0:	60bd      	str	r5, [r7, #8]
    5dc2:	6812      	ldr	r2, [r2, #0]
    5dc4:	429a      	cmp	r2, r3
    5dc6:	d893      	bhi.n	5cf0 <_free_r+0x94>
    5dc8:	4b26      	ldr	r3, [pc, #152]	; (5e64 <_free_r+0x208>)
    5dca:	4630      	mov	r0, r6
    5dcc:	6819      	ldr	r1, [r3, #0]
    5dce:	f7ff fef5 	bl	5bbc <_malloc_trim_r>
    5dd2:	e78d      	b.n	5cf0 <_free_r+0x94>
    5dd4:	2b14      	cmp	r3, #20
    5dd6:	d90a      	bls.n	5dee <_free_r+0x192>
    5dd8:	2b54      	cmp	r3, #84	; 0x54
    5dda:	d81f      	bhi.n	5e1c <_free_r+0x1c0>
    5ddc:	0b0b      	lsrs	r3, r1, #12
    5dde:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    5de2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    5de6:	00c3      	lsls	r3, r0, #3
    5de8:	e7b1      	b.n	5d4e <_free_r+0xf2>
    5dea:	4419      	add	r1, r3
    5dec:	e78d      	b.n	5d0a <_free_r+0xae>
    5dee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    5df2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    5df6:	00c3      	lsls	r3, r0, #3
    5df8:	e7a9      	b.n	5d4e <_free_r+0xf2>
    5dfa:	f041 0301 	orr.w	r3, r1, #1
    5dfe:	e9c7 5504 	strd	r5, r5, [r7, #16]
    5e02:	e9c5 0002 	strd	r0, r0, [r5, #8]
    5e06:	606b      	str	r3, [r5, #4]
    5e08:	5069      	str	r1, [r5, r1]
    5e0a:	e771      	b.n	5cf0 <_free_r+0x94>
    5e0c:	6879      	ldr	r1, [r7, #4]
    5e0e:	1092      	asrs	r2, r2, #2
    5e10:	2401      	movs	r4, #1
    5e12:	fa04 f202 	lsl.w	r2, r4, r2
    5e16:	430a      	orrs	r2, r1
    5e18:	607a      	str	r2, [r7, #4]
    5e1a:	e7a6      	b.n	5d6a <_free_r+0x10e>
    5e1c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5e20:	d806      	bhi.n	5e30 <_free_r+0x1d4>
    5e22:	0bcb      	lsrs	r3, r1, #15
    5e24:	f103 0078 	add.w	r0, r3, #120	; 0x78
    5e28:	f103 0277 	add.w	r2, r3, #119	; 0x77
    5e2c:	00c3      	lsls	r3, r0, #3
    5e2e:	e78e      	b.n	5d4e <_free_r+0xf2>
    5e30:	f240 5254 	movw	r2, #1364	; 0x554
    5e34:	4293      	cmp	r3, r2
    5e36:	d806      	bhi.n	5e46 <_free_r+0x1ea>
    5e38:	0c8b      	lsrs	r3, r1, #18
    5e3a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5e3e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    5e42:	00c3      	lsls	r3, r0, #3
    5e44:	e783      	b.n	5d4e <_free_r+0xf2>
    5e46:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5e4a:	227e      	movs	r2, #126	; 0x7e
    5e4c:	e77f      	b.n	5d4e <_free_r+0xf2>
    5e4e:	f041 0301 	orr.w	r3, r1, #1
    5e52:	606b      	str	r3, [r5, #4]
    5e54:	f8cc 1000 	str.w	r1, [ip]
    5e58:	e74a      	b.n	5cf0 <_free_r+0x94>
    5e5a:	bf00      	nop
    5e5c:	1fff0814 	.word	0x1fff0814
    5e60:	1fff0c20 	.word	0x1fff0c20
    5e64:	1fff629c 	.word	0x1fff629c

00005e68 <__ascii_mbtowc>:
    5e68:	b082      	sub	sp, #8
    5e6a:	b149      	cbz	r1, 5e80 <__ascii_mbtowc+0x18>
    5e6c:	b15a      	cbz	r2, 5e86 <__ascii_mbtowc+0x1e>
    5e6e:	b16b      	cbz	r3, 5e8c <__ascii_mbtowc+0x24>
    5e70:	7813      	ldrb	r3, [r2, #0]
    5e72:	600b      	str	r3, [r1, #0]
    5e74:	7812      	ldrb	r2, [r2, #0]
    5e76:	1e10      	subs	r0, r2, #0
    5e78:	bf18      	it	ne
    5e7a:	2001      	movne	r0, #1
    5e7c:	b002      	add	sp, #8
    5e7e:	4770      	bx	lr
    5e80:	a901      	add	r1, sp, #4
    5e82:	2a00      	cmp	r2, #0
    5e84:	d1f3      	bne.n	5e6e <__ascii_mbtowc+0x6>
    5e86:	4610      	mov	r0, r2
    5e88:	b002      	add	sp, #8
    5e8a:	4770      	bx	lr
    5e8c:	f06f 0001 	mvn.w	r0, #1
    5e90:	e7f4      	b.n	5e7c <__ascii_mbtowc+0x14>
    5e92:	bf00      	nop

00005e94 <_Balloc>:
    5e94:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5e96:	b570      	push	{r4, r5, r6, lr}
    5e98:	4605      	mov	r5, r0
    5e9a:	460c      	mov	r4, r1
    5e9c:	b14b      	cbz	r3, 5eb2 <_Balloc+0x1e>
    5e9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    5ea2:	b180      	cbz	r0, 5ec6 <_Balloc+0x32>
    5ea4:	6802      	ldr	r2, [r0, #0]
    5ea6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    5eaa:	2300      	movs	r3, #0
    5eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
    5eb0:	bd70      	pop	{r4, r5, r6, pc}
    5eb2:	2221      	movs	r2, #33	; 0x21
    5eb4:	2104      	movs	r1, #4
    5eb6:	f002 fbd5 	bl	8664 <_calloc_r>
    5eba:	4603      	mov	r3, r0
    5ebc:	6468      	str	r0, [r5, #68]	; 0x44
    5ebe:	2800      	cmp	r0, #0
    5ec0:	d1ed      	bne.n	5e9e <_Balloc+0xa>
    5ec2:	2000      	movs	r0, #0
    5ec4:	bd70      	pop	{r4, r5, r6, pc}
    5ec6:	2101      	movs	r1, #1
    5ec8:	fa01 f604 	lsl.w	r6, r1, r4
    5ecc:	1d72      	adds	r2, r6, #5
    5ece:	0092      	lsls	r2, r2, #2
    5ed0:	4628      	mov	r0, r5
    5ed2:	f002 fbc7 	bl	8664 <_calloc_r>
    5ed6:	2800      	cmp	r0, #0
    5ed8:	d0f3      	beq.n	5ec2 <_Balloc+0x2e>
    5eda:	e9c0 4601 	strd	r4, r6, [r0, #4]
    5ede:	e7e4      	b.n	5eaa <_Balloc+0x16>

00005ee0 <_Bfree>:
    5ee0:	b131      	cbz	r1, 5ef0 <_Bfree+0x10>
    5ee2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5ee4:	684a      	ldr	r2, [r1, #4]
    5ee6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    5eea:	6008      	str	r0, [r1, #0]
    5eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    5ef0:	4770      	bx	lr
    5ef2:	bf00      	nop

00005ef4 <__multadd>:
    5ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ef8:	690e      	ldr	r6, [r1, #16]
    5efa:	4680      	mov	r8, r0
    5efc:	460f      	mov	r7, r1
    5efe:	461d      	mov	r5, r3
    5f00:	f101 0e14 	add.w	lr, r1, #20
    5f04:	2000      	movs	r0, #0
    5f06:	f8de 1000 	ldr.w	r1, [lr]
    5f0a:	b28c      	uxth	r4, r1
    5f0c:	fb02 5304 	mla	r3, r2, r4, r5
    5f10:	0c09      	lsrs	r1, r1, #16
    5f12:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5f16:	fb02 cc01 	mla	ip, r2, r1, ip
    5f1a:	3001      	adds	r0, #1
    5f1c:	b29c      	uxth	r4, r3
    5f1e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    5f22:	4286      	cmp	r6, r0
    5f24:	f84e 4b04 	str.w	r4, [lr], #4
    5f28:	ea4f 451c 	mov.w	r5, ip, lsr #16
    5f2c:	dceb      	bgt.n	5f06 <__multadd+0x12>
    5f2e:	b13d      	cbz	r5, 5f40 <__multadd+0x4c>
    5f30:	68bb      	ldr	r3, [r7, #8]
    5f32:	42b3      	cmp	r3, r6
    5f34:	dd07      	ble.n	5f46 <__multadd+0x52>
    5f36:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    5f3a:	3601      	adds	r6, #1
    5f3c:	615d      	str	r5, [r3, #20]
    5f3e:	613e      	str	r6, [r7, #16]
    5f40:	4638      	mov	r0, r7
    5f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f46:	6879      	ldr	r1, [r7, #4]
    5f48:	4640      	mov	r0, r8
    5f4a:	3101      	adds	r1, #1
    5f4c:	f7ff ffa2 	bl	5e94 <_Balloc>
    5f50:	4604      	mov	r4, r0
    5f52:	b1b0      	cbz	r0, 5f82 <__multadd+0x8e>
    5f54:	693a      	ldr	r2, [r7, #16]
    5f56:	3202      	adds	r2, #2
    5f58:	f107 010c 	add.w	r1, r7, #12
    5f5c:	0092      	lsls	r2, r2, #2
    5f5e:	300c      	adds	r0, #12
    5f60:	f7fd f8bc 	bl	30dc <memcpy>
    5f64:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    5f68:	687a      	ldr	r2, [r7, #4]
    5f6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5f6e:	6039      	str	r1, [r7, #0]
    5f70:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    5f74:	4627      	mov	r7, r4
    5f76:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    5f7a:	3601      	adds	r6, #1
    5f7c:	615d      	str	r5, [r3, #20]
    5f7e:	613e      	str	r6, [r7, #16]
    5f80:	e7de      	b.n	5f40 <__multadd+0x4c>
    5f82:	4b03      	ldr	r3, [pc, #12]	; (5f90 <__multadd+0x9c>)
    5f84:	4803      	ldr	r0, [pc, #12]	; (5f94 <__multadd+0xa0>)
    5f86:	4622      	mov	r2, r4
    5f88:	21ba      	movs	r1, #186	; 0xba
    5f8a:	f002 fb4b 	bl	8624 <__assert_func>
    5f8e:	bf00      	nop
    5f90:	0000ba7c 	.word	0x0000ba7c
    5f94:	0000ba90 	.word	0x0000ba90

00005f98 <__hi0bits>:
    5f98:	0c03      	lsrs	r3, r0, #16
    5f9a:	041b      	lsls	r3, r3, #16
    5f9c:	b9d3      	cbnz	r3, 5fd4 <__hi0bits+0x3c>
    5f9e:	0400      	lsls	r0, r0, #16
    5fa0:	2310      	movs	r3, #16
    5fa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    5fa6:	bf04      	itt	eq
    5fa8:	0200      	lsleq	r0, r0, #8
    5faa:	3308      	addeq	r3, #8
    5fac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    5fb0:	bf04      	itt	eq
    5fb2:	0100      	lsleq	r0, r0, #4
    5fb4:	3304      	addeq	r3, #4
    5fb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    5fba:	bf04      	itt	eq
    5fbc:	0080      	lsleq	r0, r0, #2
    5fbe:	3302      	addeq	r3, #2
    5fc0:	2800      	cmp	r0, #0
    5fc2:	db05      	blt.n	5fd0 <__hi0bits+0x38>
    5fc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    5fc8:	f103 0301 	add.w	r3, r3, #1
    5fcc:	bf08      	it	eq
    5fce:	2320      	moveq	r3, #32
    5fd0:	4618      	mov	r0, r3
    5fd2:	4770      	bx	lr
    5fd4:	2300      	movs	r3, #0
    5fd6:	e7e4      	b.n	5fa2 <__hi0bits+0xa>

00005fd8 <__lo0bits>:
    5fd8:	6803      	ldr	r3, [r0, #0]
    5fda:	f013 0207 	ands.w	r2, r3, #7
    5fde:	d008      	beq.n	5ff2 <__lo0bits+0x1a>
    5fe0:	07d9      	lsls	r1, r3, #31
    5fe2:	d41f      	bmi.n	6024 <__lo0bits+0x4c>
    5fe4:	079a      	lsls	r2, r3, #30
    5fe6:	d522      	bpl.n	602e <__lo0bits+0x56>
    5fe8:	085b      	lsrs	r3, r3, #1
    5fea:	6003      	str	r3, [r0, #0]
    5fec:	2201      	movs	r2, #1
    5fee:	4610      	mov	r0, r2
    5ff0:	4770      	bx	lr
    5ff2:	b299      	uxth	r1, r3
    5ff4:	b909      	cbnz	r1, 5ffa <__lo0bits+0x22>
    5ff6:	0c1b      	lsrs	r3, r3, #16
    5ff8:	2210      	movs	r2, #16
    5ffa:	b2d9      	uxtb	r1, r3
    5ffc:	b909      	cbnz	r1, 6002 <__lo0bits+0x2a>
    5ffe:	3208      	adds	r2, #8
    6000:	0a1b      	lsrs	r3, r3, #8
    6002:	0719      	lsls	r1, r3, #28
    6004:	bf04      	itt	eq
    6006:	091b      	lsreq	r3, r3, #4
    6008:	3204      	addeq	r2, #4
    600a:	0799      	lsls	r1, r3, #30
    600c:	bf04      	itt	eq
    600e:	089b      	lsreq	r3, r3, #2
    6010:	3202      	addeq	r2, #2
    6012:	07d9      	lsls	r1, r3, #31
    6014:	d403      	bmi.n	601e <__lo0bits+0x46>
    6016:	085b      	lsrs	r3, r3, #1
    6018:	f102 0201 	add.w	r2, r2, #1
    601c:	d005      	beq.n	602a <__lo0bits+0x52>
    601e:	6003      	str	r3, [r0, #0]
    6020:	4610      	mov	r0, r2
    6022:	4770      	bx	lr
    6024:	2200      	movs	r2, #0
    6026:	4610      	mov	r0, r2
    6028:	4770      	bx	lr
    602a:	2220      	movs	r2, #32
    602c:	e7df      	b.n	5fee <__lo0bits+0x16>
    602e:	089b      	lsrs	r3, r3, #2
    6030:	2202      	movs	r2, #2
    6032:	6003      	str	r3, [r0, #0]
    6034:	4610      	mov	r0, r2
    6036:	4770      	bx	lr

00006038 <__i2b>:
    6038:	b538      	push	{r3, r4, r5, lr}
    603a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    603c:	4604      	mov	r4, r0
    603e:	460d      	mov	r5, r1
    6040:	b14b      	cbz	r3, 6056 <__i2b+0x1e>
    6042:	6858      	ldr	r0, [r3, #4]
    6044:	b1b0      	cbz	r0, 6074 <__i2b+0x3c>
    6046:	6802      	ldr	r2, [r0, #0]
    6048:	605a      	str	r2, [r3, #4]
    604a:	2200      	movs	r2, #0
    604c:	2301      	movs	r3, #1
    604e:	e9c0 3504 	strd	r3, r5, [r0, #16]
    6052:	60c2      	str	r2, [r0, #12]
    6054:	bd38      	pop	{r3, r4, r5, pc}
    6056:	2221      	movs	r2, #33	; 0x21
    6058:	2104      	movs	r1, #4
    605a:	f002 fb03 	bl	8664 <_calloc_r>
    605e:	4603      	mov	r3, r0
    6060:	6460      	str	r0, [r4, #68]	; 0x44
    6062:	2800      	cmp	r0, #0
    6064:	d1ed      	bne.n	6042 <__i2b+0xa>
    6066:	4b09      	ldr	r3, [pc, #36]	; (608c <__i2b+0x54>)
    6068:	4809      	ldr	r0, [pc, #36]	; (6090 <__i2b+0x58>)
    606a:	2200      	movs	r2, #0
    606c:	f240 1145 	movw	r1, #325	; 0x145
    6070:	f002 fad8 	bl	8624 <__assert_func>
    6074:	221c      	movs	r2, #28
    6076:	2101      	movs	r1, #1
    6078:	4620      	mov	r0, r4
    607a:	f002 faf3 	bl	8664 <_calloc_r>
    607e:	2800      	cmp	r0, #0
    6080:	d0f1      	beq.n	6066 <__i2b+0x2e>
    6082:	2201      	movs	r2, #1
    6084:	2302      	movs	r3, #2
    6086:	e9c0 2301 	strd	r2, r3, [r0, #4]
    608a:	e7de      	b.n	604a <__i2b+0x12>
    608c:	0000ba7c 	.word	0x0000ba7c
    6090:	0000ba90 	.word	0x0000ba90

00006094 <__multiply>:
    6094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6098:	690e      	ldr	r6, [r1, #16]
    609a:	6915      	ldr	r5, [r2, #16]
    609c:	42ae      	cmp	r6, r5
    609e:	b085      	sub	sp, #20
    60a0:	4688      	mov	r8, r1
    60a2:	4614      	mov	r4, r2
    60a4:	db05      	blt.n	60b2 <__multiply+0x1e>
    60a6:	462a      	mov	r2, r5
    60a8:	4623      	mov	r3, r4
    60aa:	4635      	mov	r5, r6
    60ac:	460c      	mov	r4, r1
    60ae:	4616      	mov	r6, r2
    60b0:	4698      	mov	r8, r3
    60b2:	68a3      	ldr	r3, [r4, #8]
    60b4:	6861      	ldr	r1, [r4, #4]
    60b6:	19af      	adds	r7, r5, r6
    60b8:	42bb      	cmp	r3, r7
    60ba:	bfb8      	it	lt
    60bc:	3101      	addlt	r1, #1
    60be:	f7ff fee9 	bl	5e94 <_Balloc>
    60c2:	9001      	str	r0, [sp, #4]
    60c4:	2800      	cmp	r0, #0
    60c6:	f000 8087 	beq.w	61d8 <__multiply+0x144>
    60ca:	9b01      	ldr	r3, [sp, #4]
    60cc:	f103 0914 	add.w	r9, r3, #20
    60d0:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    60d4:	45d1      	cmp	r9, sl
    60d6:	d205      	bcs.n	60e4 <__multiply+0x50>
    60d8:	464b      	mov	r3, r9
    60da:	2200      	movs	r2, #0
    60dc:	f843 2b04 	str.w	r2, [r3], #4
    60e0:	459a      	cmp	sl, r3
    60e2:	d8fb      	bhi.n	60dc <__multiply+0x48>
    60e4:	f108 0814 	add.w	r8, r8, #20
    60e8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    60ec:	f104 0314 	add.w	r3, r4, #20
    60f0:	45d8      	cmp	r8, fp
    60f2:	461a      	mov	r2, r3
    60f4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    60f8:	d25f      	bcs.n	61ba <__multiply+0x126>
    60fa:	1b2b      	subs	r3, r5, r4
    60fc:	3b15      	subs	r3, #21
    60fe:	f023 0303 	bic.w	r3, r3, #3
    6102:	3304      	adds	r3, #4
    6104:	3415      	adds	r4, #21
    6106:	42a5      	cmp	r5, r4
    6108:	bf38      	it	cc
    610a:	2304      	movcc	r3, #4
    610c:	e9cd a702 	strd	sl, r7, [sp, #8]
    6110:	46ac      	mov	ip, r5
    6112:	461f      	mov	r7, r3
    6114:	4692      	mov	sl, r2
    6116:	e005      	b.n	6124 <__multiply+0x90>
    6118:	0c09      	lsrs	r1, r1, #16
    611a:	d129      	bne.n	6170 <__multiply+0xdc>
    611c:	45c3      	cmp	fp, r8
    611e:	f109 0904 	add.w	r9, r9, #4
    6122:	d948      	bls.n	61b6 <__multiply+0x122>
    6124:	f858 1b04 	ldr.w	r1, [r8], #4
    6128:	b28d      	uxth	r5, r1
    612a:	2d00      	cmp	r5, #0
    612c:	d0f4      	beq.n	6118 <__multiply+0x84>
    612e:	4656      	mov	r6, sl
    6130:	464c      	mov	r4, r9
    6132:	2300      	movs	r3, #0
    6134:	f856 1b04 	ldr.w	r1, [r6], #4
    6138:	6822      	ldr	r2, [r4, #0]
    613a:	fa1f fe81 	uxth.w	lr, r1
    613e:	b290      	uxth	r0, r2
    6140:	0c09      	lsrs	r1, r1, #16
    6142:	fb05 000e 	mla	r0, r5, lr, r0
    6146:	0c12      	lsrs	r2, r2, #16
    6148:	4403      	add	r3, r0
    614a:	fb05 2201 	mla	r2, r5, r1, r2
    614e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    6152:	b29b      	uxth	r3, r3
    6154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6158:	45b4      	cmp	ip, r6
    615a:	f844 3b04 	str.w	r3, [r4], #4
    615e:	ea4f 4312 	mov.w	r3, r2, lsr #16
    6162:	d8e7      	bhi.n	6134 <__multiply+0xa0>
    6164:	f849 3007 	str.w	r3, [r9, r7]
    6168:	f858 1c04 	ldr.w	r1, [r8, #-4]
    616c:	0c09      	lsrs	r1, r1, #16
    616e:	d0d5      	beq.n	611c <__multiply+0x88>
    6170:	f8d9 3000 	ldr.w	r3, [r9]
    6174:	4650      	mov	r0, sl
    6176:	461a      	mov	r2, r3
    6178:	464c      	mov	r4, r9
    617a:	2600      	movs	r6, #0
    617c:	8805      	ldrh	r5, [r0, #0]
    617e:	0c12      	lsrs	r2, r2, #16
    6180:	fb01 2205 	mla	r2, r1, r5, r2
    6184:	4416      	add	r6, r2
    6186:	b29b      	uxth	r3, r3
    6188:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    618c:	f844 3b04 	str.w	r3, [r4], #4
    6190:	f850 5b04 	ldr.w	r5, [r0], #4
    6194:	6822      	ldr	r2, [r4, #0]
    6196:	0c2d      	lsrs	r5, r5, #16
    6198:	b293      	uxth	r3, r2
    619a:	fb01 3305 	mla	r3, r1, r5, r3
    619e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    61a2:	4584      	cmp	ip, r0
    61a4:	ea4f 4613 	mov.w	r6, r3, lsr #16
    61a8:	d8e8      	bhi.n	617c <__multiply+0xe8>
    61aa:	45c3      	cmp	fp, r8
    61ac:	f849 3007 	str.w	r3, [r9, r7]
    61b0:	f109 0904 	add.w	r9, r9, #4
    61b4:	d8b6      	bhi.n	6124 <__multiply+0x90>
    61b6:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    61ba:	2f00      	cmp	r7, #0
    61bc:	dc02      	bgt.n	61c4 <__multiply+0x130>
    61be:	e005      	b.n	61cc <__multiply+0x138>
    61c0:	3f01      	subs	r7, #1
    61c2:	d003      	beq.n	61cc <__multiply+0x138>
    61c4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    61c8:	2b00      	cmp	r3, #0
    61ca:	d0f9      	beq.n	61c0 <__multiply+0x12c>
    61cc:	9b01      	ldr	r3, [sp, #4]
    61ce:	4618      	mov	r0, r3
    61d0:	611f      	str	r7, [r3, #16]
    61d2:	b005      	add	sp, #20
    61d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61d8:	4b03      	ldr	r3, [pc, #12]	; (61e8 <__multiply+0x154>)
    61da:	4804      	ldr	r0, [pc, #16]	; (61ec <__multiply+0x158>)
    61dc:	9a01      	ldr	r2, [sp, #4]
    61de:	f44f 71b1 	mov.w	r1, #354	; 0x162
    61e2:	f002 fa1f 	bl	8624 <__assert_func>
    61e6:	bf00      	nop
    61e8:	0000ba7c 	.word	0x0000ba7c
    61ec:	0000ba90 	.word	0x0000ba90

000061f0 <__pow5mult>:
    61f0:	f012 0303 	ands.w	r3, r2, #3
    61f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61f8:	4614      	mov	r4, r2
    61fa:	4606      	mov	r6, r0
    61fc:	d132      	bne.n	6264 <__pow5mult+0x74>
    61fe:	460d      	mov	r5, r1
    6200:	10a4      	asrs	r4, r4, #2
    6202:	d020      	beq.n	6246 <__pow5mult+0x56>
    6204:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    6208:	f1b8 0f00 	cmp.w	r8, #0
    620c:	d033      	beq.n	6276 <__pow5mult+0x86>
    620e:	07e3      	lsls	r3, r4, #31
    6210:	f04f 0700 	mov.w	r7, #0
    6214:	d407      	bmi.n	6226 <__pow5mult+0x36>
    6216:	1064      	asrs	r4, r4, #1
    6218:	d015      	beq.n	6246 <__pow5mult+0x56>
    621a:	f8d8 0000 	ldr.w	r0, [r8]
    621e:	b1a8      	cbz	r0, 624c <__pow5mult+0x5c>
    6220:	4680      	mov	r8, r0
    6222:	07e3      	lsls	r3, r4, #31
    6224:	d5f7      	bpl.n	6216 <__pow5mult+0x26>
    6226:	4642      	mov	r2, r8
    6228:	4629      	mov	r1, r5
    622a:	4630      	mov	r0, r6
    622c:	f7ff ff32 	bl	6094 <__multiply>
    6230:	b1b5      	cbz	r5, 6260 <__pow5mult+0x70>
    6232:	6869      	ldr	r1, [r5, #4]
    6234:	6c73      	ldr	r3, [r6, #68]	; 0x44
    6236:	1064      	asrs	r4, r4, #1
    6238:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    623c:	602a      	str	r2, [r5, #0]
    623e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    6242:	4605      	mov	r5, r0
    6244:	d1e9      	bne.n	621a <__pow5mult+0x2a>
    6246:	4628      	mov	r0, r5
    6248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    624c:	4642      	mov	r2, r8
    624e:	4641      	mov	r1, r8
    6250:	4630      	mov	r0, r6
    6252:	f7ff ff1f 	bl	6094 <__multiply>
    6256:	f8c8 0000 	str.w	r0, [r8]
    625a:	6007      	str	r7, [r0, #0]
    625c:	4680      	mov	r8, r0
    625e:	e7e0      	b.n	6222 <__pow5mult+0x32>
    6260:	4605      	mov	r5, r0
    6262:	e7d8      	b.n	6216 <__pow5mult+0x26>
    6264:	3b01      	subs	r3, #1
    6266:	4a0f      	ldr	r2, [pc, #60]	; (62a4 <__pow5mult+0xb4>)
    6268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    626c:	2300      	movs	r3, #0
    626e:	f7ff fe41 	bl	5ef4 <__multadd>
    6272:	4605      	mov	r5, r0
    6274:	e7c4      	b.n	6200 <__pow5mult+0x10>
    6276:	2101      	movs	r1, #1
    6278:	4630      	mov	r0, r6
    627a:	f7ff fe0b 	bl	5e94 <_Balloc>
    627e:	4680      	mov	r8, r0
    6280:	b140      	cbz	r0, 6294 <__pow5mult+0xa4>
    6282:	2301      	movs	r3, #1
    6284:	f240 2271 	movw	r2, #625	; 0x271
    6288:	e9c0 3204 	strd	r3, r2, [r0, #16]
    628c:	2300      	movs	r3, #0
    628e:	6430      	str	r0, [r6, #64]	; 0x40
    6290:	6003      	str	r3, [r0, #0]
    6292:	e7bc      	b.n	620e <__pow5mult+0x1e>
    6294:	4b04      	ldr	r3, [pc, #16]	; (62a8 <__pow5mult+0xb8>)
    6296:	4805      	ldr	r0, [pc, #20]	; (62ac <__pow5mult+0xbc>)
    6298:	4642      	mov	r2, r8
    629a:	f240 1145 	movw	r1, #325	; 0x145
    629e:	f002 f9c1 	bl	8624 <__assert_func>
    62a2:	bf00      	nop
    62a4:	0000bbe0 	.word	0x0000bbe0
    62a8:	0000ba7c 	.word	0x0000ba7c
    62ac:	0000ba90 	.word	0x0000ba90

000062b0 <__lshift>:
    62b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62b4:	460d      	mov	r5, r1
    62b6:	4614      	mov	r4, r2
    62b8:	692f      	ldr	r7, [r5, #16]
    62ba:	68ab      	ldr	r3, [r5, #8]
    62bc:	6849      	ldr	r1, [r1, #4]
    62be:	eb07 1762 	add.w	r7, r7, r2, asr #5
    62c2:	1c7e      	adds	r6, r7, #1
    62c4:	429e      	cmp	r6, r3
    62c6:	4680      	mov	r8, r0
    62c8:	ea4f 1962 	mov.w	r9, r2, asr #5
    62cc:	dd04      	ble.n	62d8 <__lshift+0x28>
    62ce:	005b      	lsls	r3, r3, #1
    62d0:	429e      	cmp	r6, r3
    62d2:	f101 0101 	add.w	r1, r1, #1
    62d6:	dcfa      	bgt.n	62ce <__lshift+0x1e>
    62d8:	4640      	mov	r0, r8
    62da:	f7ff fddb 	bl	5e94 <_Balloc>
    62de:	4684      	mov	ip, r0
    62e0:	2800      	cmp	r0, #0
    62e2:	d052      	beq.n	638a <__lshift+0xda>
    62e4:	f1b9 0f00 	cmp.w	r9, #0
    62e8:	f100 0214 	add.w	r2, r0, #20
    62ec:	dd0e      	ble.n	630c <__lshift+0x5c>
    62ee:	f109 0105 	add.w	r1, r9, #5
    62f2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    62f6:	4613      	mov	r3, r2
    62f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    62fc:	2000      	movs	r0, #0
    62fe:	f843 0b04 	str.w	r0, [r3], #4
    6302:	428b      	cmp	r3, r1
    6304:	d1fb      	bne.n	62fe <__lshift+0x4e>
    6306:	f1ae 0314 	sub.w	r3, lr, #20
    630a:	441a      	add	r2, r3
    630c:	6929      	ldr	r1, [r5, #16]
    630e:	f105 0314 	add.w	r3, r5, #20
    6312:	f014 0e1f 	ands.w	lr, r4, #31
    6316:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    631a:	d02e      	beq.n	637a <__lshift+0xca>
    631c:	f1ce 0920 	rsb	r9, lr, #32
    6320:	4610      	mov	r0, r2
    6322:	f04f 0a00 	mov.w	sl, #0
    6326:	681c      	ldr	r4, [r3, #0]
    6328:	fa04 f40e 	lsl.w	r4, r4, lr
    632c:	ea44 040a 	orr.w	r4, r4, sl
    6330:	f840 4b04 	str.w	r4, [r0], #4
    6334:	f853 4b04 	ldr.w	r4, [r3], #4
    6338:	4299      	cmp	r1, r3
    633a:	fa24 fa09 	lsr.w	sl, r4, r9
    633e:	d8f2      	bhi.n	6326 <__lshift+0x76>
    6340:	1b4b      	subs	r3, r1, r5
    6342:	3b15      	subs	r3, #21
    6344:	f023 0303 	bic.w	r3, r3, #3
    6348:	3304      	adds	r3, #4
    634a:	f105 0015 	add.w	r0, r5, #21
    634e:	4281      	cmp	r1, r0
    6350:	bf38      	it	cc
    6352:	2304      	movcc	r3, #4
    6354:	f1ba 0f00 	cmp.w	sl, #0
    6358:	bf18      	it	ne
    635a:	4637      	movne	r7, r6
    635c:	f842 a003 	str.w	sl, [r2, r3]
    6360:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    6364:	686a      	ldr	r2, [r5, #4]
    6366:	f8cc 7010 	str.w	r7, [ip, #16]
    636a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    636e:	6029      	str	r1, [r5, #0]
    6370:	4660      	mov	r0, ip
    6372:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    6376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    637a:	3a04      	subs	r2, #4
    637c:	f853 0b04 	ldr.w	r0, [r3], #4
    6380:	f842 0f04 	str.w	r0, [r2, #4]!
    6384:	4299      	cmp	r1, r3
    6386:	d8f9      	bhi.n	637c <__lshift+0xcc>
    6388:	e7ea      	b.n	6360 <__lshift+0xb0>
    638a:	4b03      	ldr	r3, [pc, #12]	; (6398 <__lshift+0xe8>)
    638c:	4803      	ldr	r0, [pc, #12]	; (639c <__lshift+0xec>)
    638e:	4662      	mov	r2, ip
    6390:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    6394:	f002 f946 	bl	8624 <__assert_func>
    6398:	0000ba7c 	.word	0x0000ba7c
    639c:	0000ba90 	.word	0x0000ba90

000063a0 <__mcmp>:
    63a0:	690b      	ldr	r3, [r1, #16]
    63a2:	4684      	mov	ip, r0
    63a4:	6900      	ldr	r0, [r0, #16]
    63a6:	1ac0      	subs	r0, r0, r3
    63a8:	d116      	bne.n	63d8 <__mcmp+0x38>
    63aa:	f10c 0c14 	add.w	ip, ip, #20
    63ae:	3114      	adds	r1, #20
    63b0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    63b4:	b410      	push	{r4}
    63b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    63ba:	e001      	b.n	63c0 <__mcmp+0x20>
    63bc:	4594      	cmp	ip, r2
    63be:	d208      	bcs.n	63d2 <__mcmp+0x32>
    63c0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    63c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    63c8:	428c      	cmp	r4, r1
    63ca:	d0f7      	beq.n	63bc <__mcmp+0x1c>
    63cc:	d205      	bcs.n	63da <__mcmp+0x3a>
    63ce:	f04f 30ff 	mov.w	r0, #4294967295
    63d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    63d6:	4770      	bx	lr
    63d8:	4770      	bx	lr
    63da:	2001      	movs	r0, #1
    63dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    63e0:	4770      	bx	lr
    63e2:	bf00      	nop

000063e4 <__mdiff>:
    63e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63e8:	690f      	ldr	r7, [r1, #16]
    63ea:	6913      	ldr	r3, [r2, #16]
    63ec:	1aff      	subs	r7, r7, r3
    63ee:	2f00      	cmp	r7, #0
    63f0:	460e      	mov	r6, r1
    63f2:	4690      	mov	r8, r2
    63f4:	d17f      	bne.n	64f6 <__mdiff+0x112>
    63f6:	f101 0514 	add.w	r5, r1, #20
    63fa:	3214      	adds	r2, #20
    63fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6400:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    6404:	e001      	b.n	640a <__mdiff+0x26>
    6406:	429d      	cmp	r5, r3
    6408:	d278      	bcs.n	64fc <__mdiff+0x118>
    640a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    640e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    6412:	42a1      	cmp	r1, r4
    6414:	d0f7      	beq.n	6406 <__mdiff+0x22>
    6416:	d369      	bcc.n	64ec <__mdiff+0x108>
    6418:	6871      	ldr	r1, [r6, #4]
    641a:	f7ff fd3b 	bl	5e94 <_Balloc>
    641e:	4681      	mov	r9, r0
    6420:	2800      	cmp	r0, #0
    6422:	d077      	beq.n	6514 <__mdiff+0x130>
    6424:	6935      	ldr	r5, [r6, #16]
    6426:	f8d8 2010 	ldr.w	r2, [r8, #16]
    642a:	60c7      	str	r7, [r0, #12]
    642c:	f108 0e14 	add.w	lr, r8, #20
    6430:	f106 0014 	add.w	r0, r6, #20
    6434:	f109 0a14 	add.w	sl, r9, #20
    6438:	f106 0110 	add.w	r1, r6, #16
    643c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    6440:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    6444:	4656      	mov	r6, sl
    6446:	f04f 0c00 	mov.w	ip, #0
    644a:	f85e 4b04 	ldr.w	r4, [lr], #4
    644e:	f851 bf04 	ldr.w	fp, [r1, #4]!
    6452:	b2a3      	uxth	r3, r4
    6454:	fa1c fc8b 	uxtah	ip, ip, fp
    6458:	ebac 0303 	sub.w	r3, ip, r3
    645c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    6460:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    6464:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    6468:	b29b      	uxth	r3, r3
    646a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    646e:	4572      	cmp	r2, lr
    6470:	f846 3b04 	str.w	r3, [r6], #4
    6474:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    6478:	d8e7      	bhi.n	644a <__mdiff+0x66>
    647a:	eba2 0108 	sub.w	r1, r2, r8
    647e:	3915      	subs	r1, #21
    6480:	f108 0815 	add.w	r8, r8, #21
    6484:	4542      	cmp	r2, r8
    6486:	f021 0403 	bic.w	r4, r1, #3
    648a:	f104 0404 	add.w	r4, r4, #4
    648e:	bf38      	it	cc
    6490:	2404      	movcc	r4, #4
    6492:	4420      	add	r0, r4
    6494:	f021 0203 	bic.w	r2, r1, #3
    6498:	bf38      	it	cc
    649a:	2200      	movcc	r2, #0
    649c:	4287      	cmp	r7, r0
    649e:	4452      	add	r2, sl
    64a0:	4454      	add	r4, sl
    64a2:	d918      	bls.n	64d6 <__mdiff+0xf2>
    64a4:	4626      	mov	r6, r4
    64a6:	4601      	mov	r1, r0
    64a8:	f851 3b04 	ldr.w	r3, [r1], #4
    64ac:	fa1c fc83 	uxtah	ip, ip, r3
    64b0:	ea4f 422c 	mov.w	r2, ip, asr #16
    64b4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    64b8:	fa1f fc8c 	uxth.w	ip, ip
    64bc:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    64c0:	428f      	cmp	r7, r1
    64c2:	f846 3b04 	str.w	r3, [r6], #4
    64c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
    64ca:	d8ed      	bhi.n	64a8 <__mdiff+0xc4>
    64cc:	3f01      	subs	r7, #1
    64ce:	1a3f      	subs	r7, r7, r0
    64d0:	f027 0703 	bic.w	r7, r7, #3
    64d4:	19e2      	adds	r2, r4, r7
    64d6:	b923      	cbnz	r3, 64e2 <__mdiff+0xfe>
    64d8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    64dc:	3d01      	subs	r5, #1
    64de:	2b00      	cmp	r3, #0
    64e0:	d0fa      	beq.n	64d8 <__mdiff+0xf4>
    64e2:	f8c9 5010 	str.w	r5, [r9, #16]
    64e6:	4648      	mov	r0, r9
    64e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64ec:	4633      	mov	r3, r6
    64ee:	2701      	movs	r7, #1
    64f0:	4646      	mov	r6, r8
    64f2:	4698      	mov	r8, r3
    64f4:	e790      	b.n	6418 <__mdiff+0x34>
    64f6:	dbf9      	blt.n	64ec <__mdiff+0x108>
    64f8:	2700      	movs	r7, #0
    64fa:	e78d      	b.n	6418 <__mdiff+0x34>
    64fc:	2100      	movs	r1, #0
    64fe:	f7ff fcc9 	bl	5e94 <_Balloc>
    6502:	4681      	mov	r9, r0
    6504:	b168      	cbz	r0, 6522 <__mdiff+0x13e>
    6506:	2201      	movs	r2, #1
    6508:	2300      	movs	r3, #0
    650a:	e9c9 2304 	strd	r2, r3, [r9, #16]
    650e:	4648      	mov	r0, r9
    6510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6514:	4b06      	ldr	r3, [pc, #24]	; (6530 <__mdiff+0x14c>)
    6516:	4807      	ldr	r0, [pc, #28]	; (6534 <__mdiff+0x150>)
    6518:	464a      	mov	r2, r9
    651a:	f240 2145 	movw	r1, #581	; 0x245
    651e:	f002 f881 	bl	8624 <__assert_func>
    6522:	4b03      	ldr	r3, [pc, #12]	; (6530 <__mdiff+0x14c>)
    6524:	4803      	ldr	r0, [pc, #12]	; (6534 <__mdiff+0x150>)
    6526:	464a      	mov	r2, r9
    6528:	f240 2137 	movw	r1, #567	; 0x237
    652c:	f002 f87a 	bl	8624 <__assert_func>
    6530:	0000ba7c 	.word	0x0000ba7c
    6534:	0000ba90 	.word	0x0000ba90

00006538 <__d2b>:
    6538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    653c:	4688      	mov	r8, r1
    653e:	b083      	sub	sp, #12
    6540:	2101      	movs	r1, #1
    6542:	ec57 6b10 	vmov	r6, r7, d0
    6546:	4615      	mov	r5, r2
    6548:	f7ff fca4 	bl	5e94 <_Balloc>
    654c:	4604      	mov	r4, r0
    654e:	2800      	cmp	r0, #0
    6550:	d051      	beq.n	65f6 <__d2b+0xbe>
    6552:	f3c7 590a 	ubfx	r9, r7, #20, #11
    6556:	f3c7 0313 	ubfx	r3, r7, #0, #20
    655a:	f1b9 0f00 	cmp.w	r9, #0
    655e:	d001      	beq.n	6564 <__d2b+0x2c>
    6560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6564:	2e00      	cmp	r6, #0
    6566:	9301      	str	r3, [sp, #4]
    6568:	d118      	bne.n	659c <__d2b+0x64>
    656a:	a801      	add	r0, sp, #4
    656c:	f7ff fd34 	bl	5fd8 <__lo0bits>
    6570:	9a01      	ldr	r2, [sp, #4]
    6572:	6162      	str	r2, [r4, #20]
    6574:	2201      	movs	r2, #1
    6576:	f100 0320 	add.w	r3, r0, #32
    657a:	6122      	str	r2, [r4, #16]
    657c:	f1b9 0f00 	cmp.w	r9, #0
    6580:	d025      	beq.n	65ce <__d2b+0x96>
    6582:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    6586:	eb09 0203 	add.w	r2, r9, r3
    658a:	4620      	mov	r0, r4
    658c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    6590:	f8c8 2000 	str.w	r2, [r8]
    6594:	602b      	str	r3, [r5, #0]
    6596:	b003      	add	sp, #12
    6598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    659c:	4668      	mov	r0, sp
    659e:	9600      	str	r6, [sp, #0]
    65a0:	f7ff fd1a 	bl	5fd8 <__lo0bits>
    65a4:	4603      	mov	r3, r0
    65a6:	b310      	cbz	r0, 65ee <__d2b+0xb6>
    65a8:	e9dd 0200 	ldrd	r0, r2, [sp]
    65ac:	f1c3 0120 	rsb	r1, r3, #32
    65b0:	fa02 f101 	lsl.w	r1, r2, r1
    65b4:	4301      	orrs	r1, r0
    65b6:	40da      	lsrs	r2, r3
    65b8:	6161      	str	r1, [r4, #20]
    65ba:	9201      	str	r2, [sp, #4]
    65bc:	2a00      	cmp	r2, #0
    65be:	61a2      	str	r2, [r4, #24]
    65c0:	bf14      	ite	ne
    65c2:	2202      	movne	r2, #2
    65c4:	2201      	moveq	r2, #1
    65c6:	6122      	str	r2, [r4, #16]
    65c8:	f1b9 0f00 	cmp.w	r9, #0
    65cc:	d1d9      	bne.n	6582 <__d2b+0x4a>
    65ce:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    65d2:	f8c8 3000 	str.w	r3, [r8]
    65d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    65da:	6918      	ldr	r0, [r3, #16]
    65dc:	f7ff fcdc 	bl	5f98 <__hi0bits>
    65e0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    65e4:	4620      	mov	r0, r4
    65e6:	602b      	str	r3, [r5, #0]
    65e8:	b003      	add	sp, #12
    65ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    65ee:	9a00      	ldr	r2, [sp, #0]
    65f0:	6162      	str	r2, [r4, #20]
    65f2:	9a01      	ldr	r2, [sp, #4]
    65f4:	e7e2      	b.n	65bc <__d2b+0x84>
    65f6:	4b03      	ldr	r3, [pc, #12]	; (6604 <__d2b+0xcc>)
    65f8:	4803      	ldr	r0, [pc, #12]	; (6608 <__d2b+0xd0>)
    65fa:	4622      	mov	r2, r4
    65fc:	f240 310f 	movw	r1, #783	; 0x30f
    6600:	f002 f810 	bl	8624 <__assert_func>
    6604:	0000ba7c 	.word	0x0000ba7c
    6608:	0000ba90 	.word	0x0000ba90

0000660c <__ascii_wctomb>:
    660c:	b149      	cbz	r1, 6622 <__ascii_wctomb+0x16>
    660e:	2aff      	cmp	r2, #255	; 0xff
    6610:	d802      	bhi.n	6618 <__ascii_wctomb+0xc>
    6612:	700a      	strb	r2, [r1, #0]
    6614:	2001      	movs	r0, #1
    6616:	4770      	bx	lr
    6618:	238a      	movs	r3, #138	; 0x8a
    661a:	6003      	str	r3, [r0, #0]
    661c:	f04f 30ff 	mov.w	r0, #4294967295
    6620:	4770      	bx	lr
    6622:	4608      	mov	r0, r1
    6624:	4770      	bx	lr
    6626:	bf00      	nop

00006628 <_svfprintf_r>:
    6628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    662c:	ed2d 8b06 	vpush	{d8-d10}
    6630:	b0d3      	sub	sp, #332	; 0x14c
    6632:	460c      	mov	r4, r1
    6634:	ee0a 1a10 	vmov	s20, r1
    6638:	4690      	mov	r8, r2
    663a:	9308      	str	r3, [sp, #32]
    663c:	4682      	mov	sl, r0
    663e:	f001 ff09 	bl	8454 <_localeconv_r>
    6642:	6803      	ldr	r3, [r0, #0]
    6644:	9313      	str	r3, [sp, #76]	; 0x4c
    6646:	4618      	mov	r0, r3
    6648:	f7ff fa3a 	bl	5ac0 <strlen>
    664c:	2208      	movs	r2, #8
    664e:	9011      	str	r0, [sp, #68]	; 0x44
    6650:	2100      	movs	r1, #0
    6652:	a822      	add	r0, sp, #136	; 0x88
    6654:	f7ff f908 	bl	5868 <memset>
    6658:	89a3      	ldrh	r3, [r4, #12]
    665a:	061f      	lsls	r7, r3, #24
    665c:	d503      	bpl.n	6666 <_svfprintf_r+0x3e>
    665e:	6923      	ldr	r3, [r4, #16]
    6660:	2b00      	cmp	r3, #0
    6662:	f000 8752 	beq.w	750a <_svfprintf_r+0xee2>
    6666:	ed9f 7b84 	vldr	d7, [pc, #528]	; 6878 <_svfprintf_r+0x250>
    666a:	2300      	movs	r3, #0
    666c:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
    6670:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    6674:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
    6678:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    667c:	aa29      	add	r2, sp, #164	; 0xa4
    667e:	930d      	str	r3, [sp, #52]	; 0x34
    6680:	9226      	str	r2, [sp, #152]	; 0x98
    6682:	4691      	mov	r9, r2
    6684:	9312      	str	r3, [sp, #72]	; 0x48
    6686:	9304      	str	r3, [sp, #16]
    6688:	4644      	mov	r4, r8
    668a:	46a0      	mov	r8, r4
    668c:	4b7c      	ldr	r3, [pc, #496]	; (6880 <_svfprintf_r+0x258>)
    668e:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    6692:	f7ff f96d 	bl	5970 <__locale_mb_cur_max>
    6696:	4603      	mov	r3, r0
    6698:	a822      	add	r0, sp, #136	; 0x88
    669a:	9000      	str	r0, [sp, #0]
    669c:	4642      	mov	r2, r8
    669e:	a91e      	add	r1, sp, #120	; 0x78
    66a0:	4650      	mov	r0, sl
    66a2:	47a8      	blx	r5
    66a4:	2800      	cmp	r0, #0
    66a6:	f000 80b0 	beq.w	680a <_svfprintf_r+0x1e2>
    66aa:	f2c0 80a6 	blt.w	67fa <_svfprintf_r+0x1d2>
    66ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    66b0:	2a25      	cmp	r2, #37	; 0x25
    66b2:	4603      	mov	r3, r0
    66b4:	d001      	beq.n	66ba <_svfprintf_r+0x92>
    66b6:	4498      	add	r8, r3
    66b8:	e7e8      	b.n	668c <_svfprintf_r+0x64>
    66ba:	ebb8 0704 	subs.w	r7, r8, r4
    66be:	4606      	mov	r6, r0
    66c0:	f040 80a7 	bne.w	6812 <_svfprintf_r+0x1ea>
    66c4:	2300      	movs	r3, #0
    66c6:	f04f 32ff 	mov.w	r2, #4294967295
    66ca:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    66ce:	469b      	mov	fp, r3
    66d0:	9306      	str	r3, [sp, #24]
    66d2:	f108 0801 	add.w	r8, r8, #1
    66d6:	f898 3000 	ldrb.w	r3, [r8]
    66da:	9203      	str	r2, [sp, #12]
    66dc:	252b      	movs	r5, #43	; 0x2b
    66de:	2620      	movs	r6, #32
    66e0:	f108 0801 	add.w	r8, r8, #1
    66e4:	f1a3 0220 	sub.w	r2, r3, #32
    66e8:	2a5a      	cmp	r2, #90	; 0x5a
    66ea:	f200 80cb 	bhi.w	6884 <_svfprintf_r+0x25c>
    66ee:	e8df f012 	tbh	[pc, r2, lsl #1]
    66f2:	02f3      	.short	0x02f3
    66f4:	00c900c9 	.word	0x00c900c9
    66f8:	00c902ee 	.word	0x00c902ee
    66fc:	00c900c9 	.word	0x00c900c9
    6700:	00c9006a 	.word	0x00c9006a
    6704:	021400c9 	.word	0x021400c9
    6708:	00c90290 	.word	0x00c90290
    670c:	02d4021f 	.word	0x02d4021f
    6710:	02cf00c9 	.word	0x02cf00c9
    6714:	005b005b 	.word	0x005b005b
    6718:	005b005b 	.word	0x005b005b
    671c:	005b005b 	.word	0x005b005b
    6720:	005b005b 	.word	0x005b005b
    6724:	00c9005b 	.word	0x00c9005b
    6728:	00c900c9 	.word	0x00c900c9
    672c:	00c900c9 	.word	0x00c900c9
    6730:	00c900c9 	.word	0x00c900c9
    6734:	00c9014c 	.word	0x00c9014c
    6738:	02290195 	.word	0x02290195
    673c:	014c014c 	.word	0x014c014c
    6740:	00c9014c 	.word	0x00c9014c
    6744:	00c900c9 	.word	0x00c900c9
    6748:	022400c9 	.word	0x022400c9
    674c:	00c900c9 	.word	0x00c900c9
    6750:	00c902a2 	.word	0x00c902a2
    6754:	00c900c9 	.word	0x00c900c9
    6758:	00c901bd 	.word	0x00c901bd
    675c:	00c902b5 	.word	0x00c902b5
    6760:	06ef00c9 	.word	0x06ef00c9
    6764:	00c900c9 	.word	0x00c900c9
    6768:	00c900c9 	.word	0x00c900c9
    676c:	00c900c9 	.word	0x00c900c9
    6770:	00c900c9 	.word	0x00c900c9
    6774:	00c9014c 	.word	0x00c9014c
    6778:	01ee0195 	.word	0x01ee0195
    677c:	014c014c 	.word	0x014c014c
    6780:	0283014c 	.word	0x0283014c
    6784:	007f01ee 	.word	0x007f01ee
    6788:	029500c9 	.word	0x029500c9
    678c:	026b00c9 	.word	0x026b00c9
    6790:	023e06ec 	.word	0x023e06ec
    6794:	00c9007f 	.word	0x00c9007f
    6798:	007c01bd 	.word	0x007c01bd
    679c:	00c906c6 	.word	0x00c906c6
    67a0:	06ca00c9 	.word	0x06ca00c9
    67a4:	007c00c9 	.word	0x007c00c9
    67a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    67ac:	2100      	movs	r1, #0
    67ae:	f818 3b01 	ldrb.w	r3, [r8], #1
    67b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    67b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    67ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    67be:	2a09      	cmp	r2, #9
    67c0:	d9f5      	bls.n	67ae <_svfprintf_r+0x186>
    67c2:	9106      	str	r1, [sp, #24]
    67c4:	e78e      	b.n	66e4 <_svfprintf_r+0xbc>
    67c6:	4650      	mov	r0, sl
    67c8:	f001 fe44 	bl	8454 <_localeconv_r>
    67cc:	6843      	ldr	r3, [r0, #4]
    67ce:	9316      	str	r3, [sp, #88]	; 0x58
    67d0:	4618      	mov	r0, r3
    67d2:	f7ff f975 	bl	5ac0 <strlen>
    67d6:	9017      	str	r0, [sp, #92]	; 0x5c
    67d8:	4607      	mov	r7, r0
    67da:	4650      	mov	r0, sl
    67dc:	f001 fe3a 	bl	8454 <_localeconv_r>
    67e0:	6883      	ldr	r3, [r0, #8]
    67e2:	9314      	str	r3, [sp, #80]	; 0x50
    67e4:	2f00      	cmp	r7, #0
    67e6:	f040 85d0 	bne.w	738a <_svfprintf_r+0xd62>
    67ea:	f898 3000 	ldrb.w	r3, [r8]
    67ee:	e777      	b.n	66e0 <_svfprintf_r+0xb8>
    67f0:	f898 3000 	ldrb.w	r3, [r8]
    67f4:	f04b 0b20 	orr.w	fp, fp, #32
    67f8:	e772      	b.n	66e0 <_svfprintf_r+0xb8>
    67fa:	2208      	movs	r2, #8
    67fc:	2100      	movs	r1, #0
    67fe:	a822      	add	r0, sp, #136	; 0x88
    6800:	f7ff f832 	bl	5868 <memset>
    6804:	2301      	movs	r3, #1
    6806:	4498      	add	r8, r3
    6808:	e740      	b.n	668c <_svfprintf_r+0x64>
    680a:	ebb8 0704 	subs.w	r7, r8, r4
    680e:	4606      	mov	r6, r0
    6810:	d011      	beq.n	6836 <_svfprintf_r+0x20e>
    6812:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    6814:	443b      	add	r3, r7
    6816:	9328      	str	r3, [sp, #160]	; 0xa0
    6818:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    681a:	3301      	adds	r3, #1
    681c:	2b07      	cmp	r3, #7
    681e:	e9c9 4700 	strd	r4, r7, [r9]
    6822:	9327      	str	r3, [sp, #156]	; 0x9c
    6824:	dc1c      	bgt.n	6860 <_svfprintf_r+0x238>
    6826:	f109 0908 	add.w	r9, r9, #8
    682a:	9b04      	ldr	r3, [sp, #16]
    682c:	443b      	add	r3, r7
    682e:	9304      	str	r3, [sp, #16]
    6830:	2e00      	cmp	r6, #0
    6832:	f47f af47 	bne.w	66c4 <_svfprintf_r+0x9c>
    6836:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    6838:	2b00      	cmp	r3, #0
    683a:	f041 8219 	bne.w	7c70 <_svfprintf_r+0x1648>
    683e:	ee1a 3a10 	vmov	r3, s20
    6842:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    6846:	f013 0f40 	tst.w	r3, #64	; 0x40
    684a:	9b04      	ldr	r3, [sp, #16]
    684c:	bf18      	it	ne
    684e:	f04f 33ff 	movne.w	r3, #4294967295
    6852:	9304      	str	r3, [sp, #16]
    6854:	9804      	ldr	r0, [sp, #16]
    6856:	b053      	add	sp, #332	; 0x14c
    6858:	ecbd 8b06 	vpop	{d8-d10}
    685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6860:	ee1a 1a10 	vmov	r1, s20
    6864:	aa26      	add	r2, sp, #152	; 0x98
    6866:	4650      	mov	r0, sl
    6868:	f002 ffb2 	bl	97d0 <__ssprint_r>
    686c:	2800      	cmp	r0, #0
    686e:	d1e6      	bne.n	683e <_svfprintf_r+0x216>
    6870:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    6874:	e7d9      	b.n	682a <_svfprintf_r+0x202>
    6876:	bf00      	nop
	...
    6880:	1fff0c30 	.word	0x1fff0c30
    6884:	930a      	str	r3, [sp, #40]	; 0x28
    6886:	2b00      	cmp	r3, #0
    6888:	d0d5      	beq.n	6836 <_svfprintf_r+0x20e>
    688a:	2200      	movs	r2, #0
    688c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    6890:	2301      	movs	r3, #1
    6892:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    6896:	9302      	str	r3, [sp, #8]
    6898:	9207      	str	r2, [sp, #28]
    689a:	9305      	str	r3, [sp, #20]
    689c:	9203      	str	r2, [sp, #12]
    689e:	920c      	str	r2, [sp, #48]	; 0x30
    68a0:	9210      	str	r2, [sp, #64]	; 0x40
    68a2:	920b      	str	r2, [sp, #44]	; 0x2c
    68a4:	ac39      	add	r4, sp, #228	; 0xe4
    68a6:	f01b 0302 	ands.w	r3, fp, #2
    68aa:	d002      	beq.n	68b2 <_svfprintf_r+0x28a>
    68ac:	9902      	ldr	r1, [sp, #8]
    68ae:	3102      	adds	r1, #2
    68b0:	9102      	str	r1, [sp, #8]
    68b2:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    68b6:	9109      	str	r1, [sp, #36]	; 0x24
    68b8:	d105      	bne.n	68c6 <_svfprintf_r+0x29e>
    68ba:	9906      	ldr	r1, [sp, #24]
    68bc:	9802      	ldr	r0, [sp, #8]
    68be:	1a0f      	subs	r7, r1, r0
    68c0:	2f00      	cmp	r7, #0
    68c2:	f300 8387 	bgt.w	6fd4 <_svfprintf_r+0x9ac>
    68c6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    68c8:	b182      	cbz	r2, 68ec <_svfprintf_r+0x2c4>
    68ca:	2201      	movs	r2, #1
    68cc:	f8c9 2004 	str.w	r2, [r9, #4]
    68d0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    68d2:	3201      	adds	r2, #1
    68d4:	3601      	adds	r6, #1
    68d6:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
    68da:	2a07      	cmp	r2, #7
    68dc:	9628      	str	r6, [sp, #160]	; 0xa0
    68de:	9227      	str	r2, [sp, #156]	; 0x9c
    68e0:	f8c9 1000 	str.w	r1, [r9]
    68e4:	f300 83bf 	bgt.w	7066 <_svfprintf_r+0xa3e>
    68e8:	f109 0908 	add.w	r9, r9, #8
    68ec:	b183      	cbz	r3, 6910 <_svfprintf_r+0x2e8>
    68ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    68f0:	aa1c      	add	r2, sp, #112	; 0x70
    68f2:	3301      	adds	r3, #1
    68f4:	3602      	adds	r6, #2
    68f6:	f8c9 2000 	str.w	r2, [r9]
    68fa:	2b07      	cmp	r3, #7
    68fc:	f04f 0202 	mov.w	r2, #2
    6900:	9628      	str	r6, [sp, #160]	; 0xa0
    6902:	9327      	str	r3, [sp, #156]	; 0x9c
    6904:	f8c9 2004 	str.w	r2, [r9, #4]
    6908:	f300 83c2 	bgt.w	7090 <_svfprintf_r+0xa68>
    690c:	f109 0908 	add.w	r9, r9, #8
    6910:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6912:	2b80      	cmp	r3, #128	; 0x80
    6914:	f000 8286 	beq.w	6e24 <_svfprintf_r+0x7fc>
    6918:	9b03      	ldr	r3, [sp, #12]
    691a:	9a05      	ldr	r2, [sp, #20]
    691c:	1a9f      	subs	r7, r3, r2
    691e:	2f00      	cmp	r7, #0
    6920:	f300 82c0 	bgt.w	6ea4 <_svfprintf_r+0x87c>
    6924:	f41b 7f80 	tst.w	fp, #256	; 0x100
    6928:	f040 8222 	bne.w	6d70 <_svfprintf_r+0x748>
    692c:	9b05      	ldr	r3, [sp, #20]
    692e:	f8c9 3004 	str.w	r3, [r9, #4]
    6932:	441e      	add	r6, r3
    6934:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6936:	f8c9 4000 	str.w	r4, [r9]
    693a:	3301      	adds	r3, #1
    693c:	2b07      	cmp	r3, #7
    693e:	9628      	str	r6, [sp, #160]	; 0xa0
    6940:	9327      	str	r3, [sp, #156]	; 0x9c
    6942:	f300 833b 	bgt.w	6fbc <_svfprintf_r+0x994>
    6946:	f109 0908 	add.w	r9, r9, #8
    694a:	f01b 0f04 	tst.w	fp, #4
    694e:	d005      	beq.n	695c <_svfprintf_r+0x334>
    6950:	9b06      	ldr	r3, [sp, #24]
    6952:	9a02      	ldr	r2, [sp, #8]
    6954:	1a9c      	subs	r4, r3, r2
    6956:	2c00      	cmp	r4, #0
    6958:	f300 83a7 	bgt.w	70aa <_svfprintf_r+0xa82>
    695c:	9b04      	ldr	r3, [sp, #16]
    695e:	9a06      	ldr	r2, [sp, #24]
    6960:	9902      	ldr	r1, [sp, #8]
    6962:	428a      	cmp	r2, r1
    6964:	bfac      	ite	ge
    6966:	189b      	addge	r3, r3, r2
    6968:	185b      	addlt	r3, r3, r1
    696a:	9304      	str	r3, [sp, #16]
    696c:	2e00      	cmp	r6, #0
    696e:	f040 82cd 	bne.w	6f0c <_svfprintf_r+0x8e4>
    6972:	2300      	movs	r3, #0
    6974:	9327      	str	r3, [sp, #156]	; 0x9c
    6976:	9b07      	ldr	r3, [sp, #28]
    6978:	b11b      	cbz	r3, 6982 <_svfprintf_r+0x35a>
    697a:	9907      	ldr	r1, [sp, #28]
    697c:	4650      	mov	r0, sl
    697e:	f7ff f96d 	bl	5c5c <_free_r>
    6982:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    6986:	4644      	mov	r4, r8
    6988:	e67f      	b.n	668a <_svfprintf_r+0x62>
    698a:	930a      	str	r3, [sp, #40]	; 0x28
    698c:	9b08      	ldr	r3, [sp, #32]
    698e:	3307      	adds	r3, #7
    6990:	f023 0307 	bic.w	r3, r3, #7
    6994:	ecb3 7b02 	vldmia	r3!, {d7}
    6998:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    699c:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
    69a0:	9308      	str	r3, [sp, #32]
    69a2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    69a6:	ee09 3a90 	vmov	s19, r3
    69aa:	ee09 5a10 	vmov	s18, r5
    69ae:	4bb4      	ldr	r3, [pc, #720]	; (6c80 <_svfprintf_r+0x658>)
    69b0:	ec51 0b19 	vmov	r0, r1, d9
    69b4:	f04f 32ff 	mov.w	r2, #4294967295
    69b8:	f7fe f88c 	bl	4ad4 <__aeabi_dcmpun>
    69bc:	2800      	cmp	r0, #0
    69be:	f040 8502 	bne.w	73c6 <_svfprintf_r+0xd9e>
    69c2:	4baf      	ldr	r3, [pc, #700]	; (6c80 <_svfprintf_r+0x658>)
    69c4:	ec51 0b19 	vmov	r0, r1, d9
    69c8:	f04f 32ff 	mov.w	r2, #4294967295
    69cc:	f7fe f864 	bl	4a98 <__aeabi_dcmple>
    69d0:	2800      	cmp	r0, #0
    69d2:	f040 84f8 	bne.w	73c6 <_svfprintf_r+0xd9e>
    69d6:	2200      	movs	r2, #0
    69d8:	2300      	movs	r3, #0
    69da:	4628      	mov	r0, r5
    69dc:	4631      	mov	r1, r6
    69de:	f7fe f851 	bl	4a84 <__aeabi_dcmplt>
    69e2:	2800      	cmp	r0, #0
    69e4:	f041 805c 	bne.w	7aa0 <_svfprintf_r+0x1478>
    69e8:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    69ec:	4ca5      	ldr	r4, [pc, #660]	; (6c84 <_svfprintf_r+0x65c>)
    69ee:	4ba6      	ldr	r3, [pc, #664]	; (6c88 <_svfprintf_r+0x660>)
    69f0:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    69f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    69f6:	2947      	cmp	r1, #71	; 0x47
    69f8:	bfc8      	it	gt
    69fa:	461c      	movgt	r4, r3
    69fc:	2300      	movs	r3, #0
    69fe:	2103      	movs	r1, #3
    6a00:	9307      	str	r3, [sp, #28]
    6a02:	9102      	str	r1, [sp, #8]
    6a04:	9105      	str	r1, [sp, #20]
    6a06:	9303      	str	r3, [sp, #12]
    6a08:	930c      	str	r3, [sp, #48]	; 0x30
    6a0a:	9310      	str	r3, [sp, #64]	; 0x40
    6a0c:	930b      	str	r3, [sp, #44]	; 0x2c
    6a0e:	2a00      	cmp	r2, #0
    6a10:	f43f af49 	beq.w	68a6 <_svfprintf_r+0x27e>
    6a14:	9b02      	ldr	r3, [sp, #8]
    6a16:	3301      	adds	r3, #1
    6a18:	9302      	str	r3, [sp, #8]
    6a1a:	e744      	b.n	68a6 <_svfprintf_r+0x27e>
    6a1c:	2b43      	cmp	r3, #67	; 0x43
    6a1e:	930a      	str	r3, [sp, #40]	; 0x28
    6a20:	d003      	beq.n	6a2a <_svfprintf_r+0x402>
    6a22:	f01b 0f10 	tst.w	fp, #16
    6a26:	f000 8557 	beq.w	74d8 <_svfprintf_r+0xeb0>
    6a2a:	9e08      	ldr	r6, [sp, #32]
    6a2c:	2208      	movs	r2, #8
    6a2e:	2100      	movs	r1, #0
    6a30:	a824      	add	r0, sp, #144	; 0x90
    6a32:	ac39      	add	r4, sp, #228	; 0xe4
    6a34:	f7fe ff18 	bl	5868 <memset>
    6a38:	ab24      	add	r3, sp, #144	; 0x90
    6a3a:	f856 2b04 	ldr.w	r2, [r6], #4
    6a3e:	4621      	mov	r1, r4
    6a40:	4650      	mov	r0, sl
    6a42:	f002 fe7f 	bl	9744 <_wcrtomb_r>
    6a46:	4603      	mov	r3, r0
    6a48:	3301      	adds	r3, #1
    6a4a:	9005      	str	r0, [sp, #20]
    6a4c:	f001 8323 	beq.w	8096 <_svfprintf_r+0x1a6e>
    6a50:	9b05      	ldr	r3, [sp, #20]
    6a52:	9608      	str	r6, [sp, #32]
    6a54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6a58:	9302      	str	r3, [sp, #8]
    6a5a:	2200      	movs	r2, #0
    6a5c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    6a60:	9207      	str	r2, [sp, #28]
    6a62:	9203      	str	r2, [sp, #12]
    6a64:	920c      	str	r2, [sp, #48]	; 0x30
    6a66:	9210      	str	r2, [sp, #64]	; 0x40
    6a68:	920b      	str	r2, [sp, #44]	; 0x2c
    6a6a:	e71c      	b.n	68a6 <_svfprintf_r+0x27e>
    6a6c:	9f08      	ldr	r7, [sp, #32]
    6a6e:	930a      	str	r3, [sp, #40]	; 0x28
    6a70:	f857 4b04 	ldr.w	r4, [r7], #4
    6a74:	2300      	movs	r3, #0
    6a76:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    6a7a:	2c00      	cmp	r4, #0
    6a7c:	f000 8552 	beq.w	7524 <_svfprintf_r+0xefc>
    6a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6a82:	2b53      	cmp	r3, #83	; 0x53
    6a84:	f000 86de 	beq.w	7844 <_svfprintf_r+0x121c>
    6a88:	f01b 0310 	ands.w	r3, fp, #16
    6a8c:	930b      	str	r3, [sp, #44]	; 0x2c
    6a8e:	f040 86d9 	bne.w	7844 <_svfprintf_r+0x121c>
    6a92:	9b03      	ldr	r3, [sp, #12]
    6a94:	1c5d      	adds	r5, r3, #1
    6a96:	f001 80e3 	beq.w	7c60 <_svfprintf_r+0x1638>
    6a9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6a9c:	461a      	mov	r2, r3
    6a9e:	4620      	mov	r0, r4
    6aa0:	f001 fcf6 	bl	8490 <memchr>
    6aa4:	9007      	str	r0, [sp, #28]
    6aa6:	2800      	cmp	r0, #0
    6aa8:	f001 833b 	beq.w	8122 <_svfprintf_r+0x1afa>
    6aac:	9b07      	ldr	r3, [sp, #28]
    6aae:	9708      	str	r7, [sp, #32]
    6ab0:	1b19      	subs	r1, r3, r4
    6ab2:	9105      	str	r1, [sp, #20]
    6ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ab6:	9303      	str	r3, [sp, #12]
    6ab8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    6abc:	930c      	str	r3, [sp, #48]	; 0x30
    6abe:	9310      	str	r3, [sp, #64]	; 0x40
    6ac0:	9307      	str	r3, [sp, #28]
    6ac2:	2373      	movs	r3, #115	; 0x73
    6ac4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    6ac8:	9102      	str	r1, [sp, #8]
    6aca:	930a      	str	r3, [sp, #40]	; 0x28
    6acc:	e79f      	b.n	6a0e <_svfprintf_r+0x3e6>
    6ace:	f01b 0f20 	tst.w	fp, #32
    6ad2:	930a      	str	r3, [sp, #40]	; 0x28
    6ad4:	9b08      	ldr	r3, [sp, #32]
    6ad6:	d03c      	beq.n	6b52 <_svfprintf_r+0x52a>
    6ad8:	3307      	adds	r3, #7
    6ada:	f023 0307 	bic.w	r3, r3, #7
    6ade:	461a      	mov	r2, r3
    6ae0:	4611      	mov	r1, r2
    6ae2:	685b      	ldr	r3, [r3, #4]
    6ae4:	f851 2b08 	ldr.w	r2, [r1], #8
    6ae8:	9108      	str	r1, [sp, #32]
    6aea:	4619      	mov	r1, r3
    6aec:	2b00      	cmp	r3, #0
    6aee:	f2c0 8407 	blt.w	7300 <_svfprintf_r+0xcd8>
    6af2:	9b03      	ldr	r3, [sp, #12]
    6af4:	3301      	adds	r3, #1
    6af6:	f000 82a7 	beq.w	7048 <_svfprintf_r+0xa20>
    6afa:	ea52 0301 	orrs.w	r3, r2, r1
    6afe:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    6b02:	f040 82a2 	bne.w	704a <_svfprintf_r+0xa22>
    6b06:	9b03      	ldr	r3, [sp, #12]
    6b08:	2b00      	cmp	r3, #0
    6b0a:	f040 82a3 	bne.w	7054 <_svfprintf_r+0xa2c>
    6b0e:	46ab      	mov	fp, r5
    6b10:	2300      	movs	r3, #0
    6b12:	9303      	str	r3, [sp, #12]
    6b14:	9305      	str	r3, [sp, #20]
    6b16:	ac52      	add	r4, sp, #328	; 0x148
    6b18:	e100      	b.n	6d1c <_svfprintf_r+0x6f4>
    6b1a:	9b08      	ldr	r3, [sp, #32]
    6b1c:	f853 2b04 	ldr.w	r2, [r3], #4
    6b20:	9206      	str	r2, [sp, #24]
    6b22:	2a00      	cmp	r2, #0
    6b24:	f280 8414 	bge.w	7350 <_svfprintf_r+0xd28>
    6b28:	9a06      	ldr	r2, [sp, #24]
    6b2a:	9308      	str	r3, [sp, #32]
    6b2c:	4252      	negs	r2, r2
    6b2e:	9206      	str	r2, [sp, #24]
    6b30:	f898 3000 	ldrb.w	r3, [r8]
    6b34:	f04b 0b04 	orr.w	fp, fp, #4
    6b38:	e5d2      	b.n	66e0 <_svfprintf_r+0xb8>
    6b3a:	f898 3000 	ldrb.w	r3, [r8]
    6b3e:	f04b 0b08 	orr.w	fp, fp, #8
    6b42:	e5cd      	b.n	66e0 <_svfprintf_r+0xb8>
    6b44:	f04b 0b10 	orr.w	fp, fp, #16
    6b48:	f01b 0f20 	tst.w	fp, #32
    6b4c:	930a      	str	r3, [sp, #40]	; 0x28
    6b4e:	9b08      	ldr	r3, [sp, #32]
    6b50:	d1c2      	bne.n	6ad8 <_svfprintf_r+0x4b0>
    6b52:	f01b 0f10 	tst.w	fp, #16
    6b56:	f040 8406 	bne.w	7366 <_svfprintf_r+0xd3e>
    6b5a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    6b5e:	f000 83fe 	beq.w	735e <_svfprintf_r+0xd36>
    6b62:	f933 2b04 	ldrsh.w	r2, [r3], #4
    6b66:	9308      	str	r3, [sp, #32]
    6b68:	17d1      	asrs	r1, r2, #31
    6b6a:	460b      	mov	r3, r1
    6b6c:	e7be      	b.n	6aec <_svfprintf_r+0x4c4>
    6b6e:	9b08      	ldr	r3, [sp, #32]
    6b70:	f853 2b04 	ldr.w	r2, [r3], #4
    6b74:	9308      	str	r3, [sp, #32]
    6b76:	f647 0330 	movw	r3, #30768	; 0x7830
    6b7a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    6b7e:	2078      	movs	r0, #120	; 0x78
    6b80:	4b42      	ldr	r3, [pc, #264]	; (6c8c <_svfprintf_r+0x664>)
    6b82:	9312      	str	r3, [sp, #72]	; 0x48
    6b84:	f04b 0502 	orr.w	r5, fp, #2
    6b88:	2100      	movs	r1, #0
    6b8a:	2302      	movs	r3, #2
    6b8c:	900a      	str	r0, [sp, #40]	; 0x28
    6b8e:	2000      	movs	r0, #0
    6b90:	9c03      	ldr	r4, [sp, #12]
    6b92:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    6b96:	1c60      	adds	r0, r4, #1
    6b98:	f000 80a9 	beq.w	6cee <_svfprintf_r+0x6c6>
    6b9c:	ea52 0001 	orrs.w	r0, r2, r1
    6ba0:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    6ba4:	f040 80a2 	bne.w	6cec <_svfprintf_r+0x6c4>
    6ba8:	2c00      	cmp	r4, #0
    6baa:	f040 86a1 	bne.w	78f0 <_svfprintf_r+0x12c8>
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d1ae      	bne.n	6b10 <_svfprintf_r+0x4e8>
    6bb2:	f015 0301 	ands.w	r3, r5, #1
    6bb6:	9305      	str	r3, [sp, #20]
    6bb8:	f000 83cf 	beq.w	735a <_svfprintf_r+0xd32>
    6bbc:	2330      	movs	r3, #48	; 0x30
    6bbe:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
    6bc2:	f20d 1447 	addw	r4, sp, #327	; 0x147
    6bc6:	e0a9      	b.n	6d1c <_svfprintf_r+0x6f4>
    6bc8:	f01b 0f20 	tst.w	fp, #32
    6bcc:	f040 83f0 	bne.w	73b0 <_svfprintf_r+0xd88>
    6bd0:	f01b 0f10 	tst.w	fp, #16
    6bd4:	f040 8692 	bne.w	78fc <_svfprintf_r+0x12d4>
    6bd8:	f01b 0f40 	tst.w	fp, #64	; 0x40
    6bdc:	f040 8797 	bne.w	7b0e <_svfprintf_r+0x14e6>
    6be0:	f41b 7f00 	tst.w	fp, #512	; 0x200
    6be4:	f000 868a 	beq.w	78fc <_svfprintf_r+0x12d4>
    6be8:	9b08      	ldr	r3, [sp, #32]
    6bea:	9904      	ldr	r1, [sp, #16]
    6bec:	f853 2b04 	ldr.w	r2, [r3], #4
    6bf0:	9308      	str	r3, [sp, #32]
    6bf2:	7011      	strb	r1, [r2, #0]
    6bf4:	4644      	mov	r4, r8
    6bf6:	e548      	b.n	668a <_svfprintf_r+0x62>
    6bf8:	f898 3000 	ldrb.w	r3, [r8]
    6bfc:	2b68      	cmp	r3, #104	; 0x68
    6bfe:	bf03      	ittte	eq
    6c00:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    6c04:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    6c08:	f108 0801 	addeq.w	r8, r8, #1
    6c0c:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    6c10:	e566      	b.n	66e0 <_svfprintf_r+0xb8>
    6c12:	f898 3000 	ldrb.w	r3, [r8]
    6c16:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
    6c1a:	e561      	b.n	66e0 <_svfprintf_r+0xb8>
    6c1c:	f898 3000 	ldrb.w	r3, [r8]
    6c20:	2b6c      	cmp	r3, #108	; 0x6c
    6c22:	bf03      	ittte	eq
    6c24:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    6c28:	f04b 0b20 	orreq.w	fp, fp, #32
    6c2c:	f108 0801 	addeq.w	r8, r8, #1
    6c30:	f04b 0b10 	orrne.w	fp, fp, #16
    6c34:	e554      	b.n	66e0 <_svfprintf_r+0xb8>
    6c36:	930a      	str	r3, [sp, #40]	; 0x28
    6c38:	f04b 0b10 	orr.w	fp, fp, #16
    6c3c:	f01b 0120 	ands.w	r1, fp, #32
    6c40:	f000 8350 	beq.w	72e4 <_svfprintf_r+0xcbc>
    6c44:	9b08      	ldr	r3, [sp, #32]
    6c46:	3307      	adds	r3, #7
    6c48:	f023 0307 	bic.w	r3, r3, #7
    6c4c:	6859      	ldr	r1, [r3, #4]
    6c4e:	f853 2b08 	ldr.w	r2, [r3], #8
    6c52:	9308      	str	r3, [sp, #32]
    6c54:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    6c58:	2300      	movs	r3, #0
    6c5a:	e798      	b.n	6b8e <_svfprintf_r+0x566>
    6c5c:	930a      	str	r3, [sp, #40]	; 0x28
    6c5e:	f04b 0510 	orr.w	r5, fp, #16
    6c62:	f015 0120 	ands.w	r1, r5, #32
    6c66:	f000 832e 	beq.w	72c6 <_svfprintf_r+0xc9e>
    6c6a:	9b08      	ldr	r3, [sp, #32]
    6c6c:	3307      	adds	r3, #7
    6c6e:	f023 0307 	bic.w	r3, r3, #7
    6c72:	6859      	ldr	r1, [r3, #4]
    6c74:	f853 2b08 	ldr.w	r2, [r3], #8
    6c78:	9308      	str	r3, [sp, #32]
    6c7a:	2301      	movs	r3, #1
    6c7c:	e787      	b.n	6b8e <_svfprintf_r+0x566>
    6c7e:	bf00      	nop
    6c80:	7fefffff 	.word	0x7fefffff
    6c84:	0000bbec 	.word	0x0000bbec
    6c88:	0000bbf0 	.word	0x0000bbf0
    6c8c:	0000bbfc 	.word	0x0000bbfc
    6c90:	f898 3000 	ldrb.w	r3, [r8]
    6c94:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    6c98:	e522      	b.n	66e0 <_svfprintf_r+0xb8>
    6c9a:	4641      	mov	r1, r8
    6c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
    6ca0:	2b2a      	cmp	r3, #42	; 0x2a
    6ca2:	f001 8277 	beq.w	8194 <_svfprintf_r+0x1b6c>
    6ca6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6caa:	2a09      	cmp	r2, #9
    6cac:	4688      	mov	r8, r1
    6cae:	bf98      	it	ls
    6cb0:	2100      	movls	r1, #0
    6cb2:	f201 818c 	bhi.w	7fce <_svfprintf_r+0x19a6>
    6cb6:	f818 3b01 	ldrb.w	r3, [r8], #1
    6cba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6cbe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6cc2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6cc6:	2a09      	cmp	r2, #9
    6cc8:	d9f5      	bls.n	6cb6 <_svfprintf_r+0x68e>
    6cca:	9103      	str	r1, [sp, #12]
    6ccc:	e50a      	b.n	66e4 <_svfprintf_r+0xbc>
    6cce:	f898 3000 	ldrb.w	r3, [r8]
    6cd2:	f04b 0b01 	orr.w	fp, fp, #1
    6cd6:	e503      	b.n	66e0 <_svfprintf_r+0xb8>
    6cd8:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
    6cdc:	2b00      	cmp	r3, #0
    6cde:	f47f ad84 	bne.w	67ea <_svfprintf_r+0x1c2>
    6ce2:	f898 3000 	ldrb.w	r3, [r8]
    6ce6:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
    6cea:	e4f9      	b.n	66e0 <_svfprintf_r+0xb8>
    6cec:	465d      	mov	r5, fp
    6cee:	2b01      	cmp	r3, #1
    6cf0:	f000 81ab 	beq.w	704a <_svfprintf_r+0xa22>
    6cf4:	2b02      	cmp	r3, #2
    6cf6:	ac52      	add	r4, sp, #328	; 0x148
    6cf8:	d11f      	bne.n	6d3a <_svfprintf_r+0x712>
    6cfa:	9812      	ldr	r0, [sp, #72]	; 0x48
    6cfc:	f002 030f 	and.w	r3, r2, #15
    6d00:	0912      	lsrs	r2, r2, #4
    6d02:	5cc3      	ldrb	r3, [r0, r3]
    6d04:	f804 3d01 	strb.w	r3, [r4, #-1]!
    6d08:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    6d0c:	0909      	lsrs	r1, r1, #4
    6d0e:	ea52 0301 	orrs.w	r3, r2, r1
    6d12:	d1f3      	bne.n	6cfc <_svfprintf_r+0x6d4>
    6d14:	ab52      	add	r3, sp, #328	; 0x148
    6d16:	1b1b      	subs	r3, r3, r4
    6d18:	46ab      	mov	fp, r5
    6d1a:	9305      	str	r3, [sp, #20]
    6d1c:	9905      	ldr	r1, [sp, #20]
    6d1e:	9803      	ldr	r0, [sp, #12]
    6d20:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    6d24:	4281      	cmp	r1, r0
    6d26:	f04f 0300 	mov.w	r3, #0
    6d2a:	bfb8      	it	lt
    6d2c:	4601      	movlt	r1, r0
    6d2e:	9307      	str	r3, [sp, #28]
    6d30:	9102      	str	r1, [sp, #8]
    6d32:	930c      	str	r3, [sp, #48]	; 0x30
    6d34:	9310      	str	r3, [sp, #64]	; 0x40
    6d36:	930b      	str	r3, [sp, #44]	; 0x2c
    6d38:	e669      	b.n	6a0e <_svfprintf_r+0x3e6>
    6d3a:	f002 0307 	and.w	r3, r2, #7
    6d3e:	08d2      	lsrs	r2, r2, #3
    6d40:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    6d44:	08c9      	lsrs	r1, r1, #3
    6d46:	3330      	adds	r3, #48	; 0x30
    6d48:	ea52 0601 	orrs.w	r6, r2, r1
    6d4c:	4620      	mov	r0, r4
    6d4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
    6d52:	d1f2      	bne.n	6d3a <_svfprintf_r+0x712>
    6d54:	07e9      	lsls	r1, r5, #31
    6d56:	d5dd      	bpl.n	6d14 <_svfprintf_r+0x6ec>
    6d58:	2b30      	cmp	r3, #48	; 0x30
    6d5a:	d0db      	beq.n	6d14 <_svfprintf_r+0x6ec>
    6d5c:	2330      	movs	r3, #48	; 0x30
    6d5e:	3802      	subs	r0, #2
    6d60:	f804 3c01 	strb.w	r3, [r4, #-1]
    6d64:	ab52      	add	r3, sp, #328	; 0x148
    6d66:	1a1b      	subs	r3, r3, r0
    6d68:	46ab      	mov	fp, r5
    6d6a:	9305      	str	r3, [sp, #20]
    6d6c:	4604      	mov	r4, r0
    6d6e:	e7d5      	b.n	6d1c <_svfprintf_r+0x6f4>
    6d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6d72:	2b65      	cmp	r3, #101	; 0x65
    6d74:	f340 80dc 	ble.w	6f30 <_svfprintf_r+0x908>
    6d78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    6d7c:	2200      	movs	r2, #0
    6d7e:	2300      	movs	r3, #0
    6d80:	f7fd fe76 	bl	4a70 <__aeabi_dcmpeq>
    6d84:	2800      	cmp	r0, #0
    6d86:	f000 81c8 	beq.w	711a <_svfprintf_r+0xaf2>
    6d8a:	2301      	movs	r3, #1
    6d8c:	f8c9 3004 	str.w	r3, [r9, #4]
    6d90:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6d92:	4abc      	ldr	r2, [pc, #752]	; (7084 <_svfprintf_r+0xa5c>)
    6d94:	f8c9 2000 	str.w	r2, [r9]
    6d98:	3301      	adds	r3, #1
    6d9a:	3601      	adds	r6, #1
    6d9c:	2b07      	cmp	r3, #7
    6d9e:	9628      	str	r6, [sp, #160]	; 0xa0
    6da0:	9327      	str	r3, [sp, #156]	; 0x9c
    6da2:	f300 8541 	bgt.w	7828 <_svfprintf_r+0x1200>
    6da6:	f109 0908 	add.w	r9, r9, #8
    6daa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6dac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6dae:	4293      	cmp	r3, r2
    6db0:	f280 82c9 	bge.w	7346 <_svfprintf_r+0xd1e>
    6db4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6db6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6db8:	441e      	add	r6, r3
    6dba:	e9c9 2300 	strd	r2, r3, [r9]
    6dbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6dc0:	9628      	str	r6, [sp, #160]	; 0xa0
    6dc2:	3301      	adds	r3, #1
    6dc4:	2b07      	cmp	r3, #7
    6dc6:	9327      	str	r3, [sp, #156]	; 0x9c
    6dc8:	f300 8392 	bgt.w	74f0 <_svfprintf_r+0xec8>
    6dcc:	f109 0908 	add.w	r9, r9, #8
    6dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6dd2:	1e5c      	subs	r4, r3, #1
    6dd4:	2c00      	cmp	r4, #0
    6dd6:	f77f adb8 	ble.w	694a <_svfprintf_r+0x322>
    6dda:	2c10      	cmp	r4, #16
    6ddc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6dde:	4daa      	ldr	r5, [pc, #680]	; (7088 <_svfprintf_r+0xa60>)
    6de0:	f340 855e 	ble.w	78a0 <_svfprintf_r+0x1278>
    6de4:	4632      	mov	r2, r6
    6de6:	2710      	movs	r7, #16
    6de8:	ee1a 6a10 	vmov	r6, s20
    6dec:	e005      	b.n	6dfa <_svfprintf_r+0x7d2>
    6dee:	f109 0908 	add.w	r9, r9, #8
    6df2:	3c10      	subs	r4, #16
    6df4:	2c10      	cmp	r4, #16
    6df6:	f340 8552 	ble.w	789e <_svfprintf_r+0x1276>
    6dfa:	3301      	adds	r3, #1
    6dfc:	3210      	adds	r2, #16
    6dfe:	2b07      	cmp	r3, #7
    6e00:	e9c9 5700 	strd	r5, r7, [r9]
    6e04:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    6e08:	ddf1      	ble.n	6dee <_svfprintf_r+0x7c6>
    6e0a:	aa26      	add	r2, sp, #152	; 0x98
    6e0c:	4631      	mov	r1, r6
    6e0e:	4650      	mov	r0, sl
    6e10:	f002 fcde 	bl	97d0 <__ssprint_r>
    6e14:	2800      	cmp	r0, #0
    6e16:	f040 8082 	bne.w	6f1e <_svfprintf_r+0x8f6>
    6e1a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    6e1e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    6e22:	e7e6      	b.n	6df2 <_svfprintf_r+0x7ca>
    6e24:	9b06      	ldr	r3, [sp, #24]
    6e26:	9a02      	ldr	r2, [sp, #8]
    6e28:	1a9f      	subs	r7, r3, r2
    6e2a:	2f00      	cmp	r7, #0
    6e2c:	f77f ad74 	ble.w	6918 <_svfprintf_r+0x2f0>
    6e30:	2f10      	cmp	r7, #16
    6e32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6e34:	4d94      	ldr	r5, [pc, #592]	; (7088 <_svfprintf_r+0xa60>)
    6e36:	dd22      	ble.n	6e7e <_svfprintf_r+0x856>
    6e38:	4632      	mov	r2, r6
    6e3a:	ee1a 6a10 	vmov	r6, s20
    6e3e:	e004      	b.n	6e4a <_svfprintf_r+0x822>
    6e40:	3f10      	subs	r7, #16
    6e42:	2f10      	cmp	r7, #16
    6e44:	f109 0908 	add.w	r9, r9, #8
    6e48:	dd18      	ble.n	6e7c <_svfprintf_r+0x854>
    6e4a:	3301      	adds	r3, #1
    6e4c:	3210      	adds	r2, #16
    6e4e:	2110      	movs	r1, #16
    6e50:	2b07      	cmp	r3, #7
    6e52:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    6e56:	f8c9 5000 	str.w	r5, [r9]
    6e5a:	f8c9 1004 	str.w	r1, [r9, #4]
    6e5e:	ddef      	ble.n	6e40 <_svfprintf_r+0x818>
    6e60:	aa26      	add	r2, sp, #152	; 0x98
    6e62:	4631      	mov	r1, r6
    6e64:	4650      	mov	r0, sl
    6e66:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    6e6a:	f002 fcb1 	bl	97d0 <__ssprint_r>
    6e6e:	2800      	cmp	r0, #0
    6e70:	d155      	bne.n	6f1e <_svfprintf_r+0x8f6>
    6e72:	3f10      	subs	r7, #16
    6e74:	2f10      	cmp	r7, #16
    6e76:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    6e7a:	dce6      	bgt.n	6e4a <_svfprintf_r+0x822>
    6e7c:	4616      	mov	r6, r2
    6e7e:	3301      	adds	r3, #1
    6e80:	443e      	add	r6, r7
    6e82:	2b07      	cmp	r3, #7
    6e84:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    6e88:	f8c9 5000 	str.w	r5, [r9]
    6e8c:	f8c9 7004 	str.w	r7, [r9, #4]
    6e90:	f300 8520 	bgt.w	78d4 <_svfprintf_r+0x12ac>
    6e94:	9b03      	ldr	r3, [sp, #12]
    6e96:	9a05      	ldr	r2, [sp, #20]
    6e98:	1a9f      	subs	r7, r3, r2
    6e9a:	2f00      	cmp	r7, #0
    6e9c:	f109 0908 	add.w	r9, r9, #8
    6ea0:	f77f ad40 	ble.w	6924 <_svfprintf_r+0x2fc>
    6ea4:	2f10      	cmp	r7, #16
    6ea6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6ea8:	4d77      	ldr	r5, [pc, #476]	; (7088 <_svfprintf_r+0xa60>)
    6eaa:	dd21      	ble.n	6ef0 <_svfprintf_r+0x8c8>
    6eac:	4632      	mov	r2, r6
    6eae:	ee1a 6a10 	vmov	r6, s20
    6eb2:	e004      	b.n	6ebe <_svfprintf_r+0x896>
    6eb4:	3f10      	subs	r7, #16
    6eb6:	2f10      	cmp	r7, #16
    6eb8:	f109 0908 	add.w	r9, r9, #8
    6ebc:	dd17      	ble.n	6eee <_svfprintf_r+0x8c6>
    6ebe:	3301      	adds	r3, #1
    6ec0:	3210      	adds	r2, #16
    6ec2:	2110      	movs	r1, #16
    6ec4:	2b07      	cmp	r3, #7
    6ec6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    6eca:	f8c9 5000 	str.w	r5, [r9]
    6ece:	f8c9 1004 	str.w	r1, [r9, #4]
    6ed2:	ddef      	ble.n	6eb4 <_svfprintf_r+0x88c>
    6ed4:	aa26      	add	r2, sp, #152	; 0x98
    6ed6:	4631      	mov	r1, r6
    6ed8:	4650      	mov	r0, sl
    6eda:	f002 fc79 	bl	97d0 <__ssprint_r>
    6ede:	b9f0      	cbnz	r0, 6f1e <_svfprintf_r+0x8f6>
    6ee0:	3f10      	subs	r7, #16
    6ee2:	2f10      	cmp	r7, #16
    6ee4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    6ee8:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    6eec:	dce7      	bgt.n	6ebe <_svfprintf_r+0x896>
    6eee:	4616      	mov	r6, r2
    6ef0:	3301      	adds	r3, #1
    6ef2:	443e      	add	r6, r7
    6ef4:	2b07      	cmp	r3, #7
    6ef6:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    6efa:	f8c9 5000 	str.w	r5, [r9]
    6efe:	f8c9 7004 	str.w	r7, [r9, #4]
    6f02:	f300 81d2 	bgt.w	72aa <_svfprintf_r+0xc82>
    6f06:	f109 0908 	add.w	r9, r9, #8
    6f0a:	e50b      	b.n	6924 <_svfprintf_r+0x2fc>
    6f0c:	ee1a 1a10 	vmov	r1, s20
    6f10:	aa26      	add	r2, sp, #152	; 0x98
    6f12:	4650      	mov	r0, sl
    6f14:	f002 fc5c 	bl	97d0 <__ssprint_r>
    6f18:	2800      	cmp	r0, #0
    6f1a:	f43f ad2a 	beq.w	6972 <_svfprintf_r+0x34a>
    6f1e:	9b07      	ldr	r3, [sp, #28]
    6f20:	2b00      	cmp	r3, #0
    6f22:	f43f ac8c 	beq.w	683e <_svfprintf_r+0x216>
    6f26:	9907      	ldr	r1, [sp, #28]
    6f28:	4650      	mov	r0, sl
    6f2a:	f7fe fe97 	bl	5c5c <_free_r>
    6f2e:	e486      	b.n	683e <_svfprintf_r+0x216>
    6f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6f32:	2b01      	cmp	r3, #1
    6f34:	f340 816f 	ble.w	7216 <_svfprintf_r+0xbee>
    6f38:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    6f3a:	f8c9 4000 	str.w	r4, [r9]
    6f3e:	2301      	movs	r3, #1
    6f40:	441f      	add	r7, r3
    6f42:	3601      	adds	r6, #1
    6f44:	2f07      	cmp	r7, #7
    6f46:	f8c9 3004 	str.w	r3, [r9, #4]
    6f4a:	9628      	str	r6, [sp, #160]	; 0xa0
    6f4c:	9727      	str	r7, [sp, #156]	; 0x9c
    6f4e:	f300 81de 	bgt.w	730e <_svfprintf_r+0xce6>
    6f52:	f109 0908 	add.w	r9, r9, #8
    6f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6f5a:	3701      	adds	r7, #1
    6f5c:	441e      	add	r6, r3
    6f5e:	2f07      	cmp	r7, #7
    6f60:	e9c9 2300 	strd	r2, r3, [r9]
    6f64:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    6f68:	f300 81df 	bgt.w	732a <_svfprintf_r+0xd02>
    6f6c:	f109 0908 	add.w	r9, r9, #8
    6f70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    6f74:	2200      	movs	r2, #0
    6f76:	2300      	movs	r3, #0
    6f78:	f7fd fd7a 	bl	4a70 <__aeabi_dcmpeq>
    6f7c:	2800      	cmp	r0, #0
    6f7e:	f040 8169 	bne.w	7254 <_svfprintf_r+0xc2c>
    6f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6f84:	3701      	adds	r7, #1
    6f86:	3b01      	subs	r3, #1
    6f88:	3401      	adds	r4, #1
    6f8a:	441e      	add	r6, r3
    6f8c:	2f07      	cmp	r7, #7
    6f8e:	f8c9 4000 	str.w	r4, [r9]
    6f92:	9727      	str	r7, [sp, #156]	; 0x9c
    6f94:	f8c9 3004 	str.w	r3, [r9, #4]
    6f98:	9628      	str	r6, [sp, #160]	; 0xa0
    6f9a:	f300 814d 	bgt.w	7238 <_svfprintf_r+0xc10>
    6f9e:	f109 0908 	add.w	r9, r9, #8
    6fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6fa4:	f8c9 3004 	str.w	r3, [r9, #4]
    6fa8:	3701      	adds	r7, #1
    6faa:	441e      	add	r6, r3
    6fac:	2f07      	cmp	r7, #7
    6fae:	ab20      	add	r3, sp, #128	; 0x80
    6fb0:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    6fb4:	f8c9 3000 	str.w	r3, [r9]
    6fb8:	f77f acc5 	ble.w	6946 <_svfprintf_r+0x31e>
    6fbc:	ee1a 1a10 	vmov	r1, s20
    6fc0:	aa26      	add	r2, sp, #152	; 0x98
    6fc2:	4650      	mov	r0, sl
    6fc4:	f002 fc04 	bl	97d0 <__ssprint_r>
    6fc8:	2800      	cmp	r0, #0
    6fca:	d1a8      	bne.n	6f1e <_svfprintf_r+0x8f6>
    6fcc:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    6fce:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    6fd2:	e4ba      	b.n	694a <_svfprintf_r+0x322>
    6fd4:	2f10      	cmp	r7, #16
    6fd6:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
    6fda:	4d2c      	ldr	r5, [pc, #176]	; (708c <_svfprintf_r+0xa64>)
    6fdc:	dd24      	ble.n	7028 <_svfprintf_r+0xa00>
    6fde:	9318      	str	r3, [sp, #96]	; 0x60
    6fe0:	9419      	str	r4, [sp, #100]	; 0x64
    6fe2:	2610      	movs	r6, #16
    6fe4:	ee1a 4a10 	vmov	r4, s20
    6fe8:	460b      	mov	r3, r1
    6fea:	e004      	b.n	6ff6 <_svfprintf_r+0x9ce>
    6fec:	3f10      	subs	r7, #16
    6fee:	2f10      	cmp	r7, #16
    6ff0:	f109 0908 	add.w	r9, r9, #8
    6ff4:	dd15      	ble.n	7022 <_svfprintf_r+0x9fa>
    6ff6:	3201      	adds	r2, #1
    6ff8:	3310      	adds	r3, #16
    6ffa:	2a07      	cmp	r2, #7
    6ffc:	e9c9 5600 	strd	r5, r6, [r9]
    7000:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
    7004:	ddf2      	ble.n	6fec <_svfprintf_r+0x9c4>
    7006:	aa26      	add	r2, sp, #152	; 0x98
    7008:	4621      	mov	r1, r4
    700a:	4650      	mov	r0, sl
    700c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7010:	f002 fbde 	bl	97d0 <__ssprint_r>
    7014:	2800      	cmp	r0, #0
    7016:	d182      	bne.n	6f1e <_svfprintf_r+0x8f6>
    7018:	3f10      	subs	r7, #16
    701a:	2f10      	cmp	r7, #16
    701c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
    7020:	dce9      	bgt.n	6ff6 <_svfprintf_r+0x9ce>
    7022:	4619      	mov	r1, r3
    7024:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
    7028:	3201      	adds	r2, #1
    702a:	187e      	adds	r6, r7, r1
    702c:	2a07      	cmp	r2, #7
    702e:	e9cd 2627 	strd	r2, r6, [sp, #156]	; 0x9c
    7032:	f8c9 5000 	str.w	r5, [r9]
    7036:	f8c9 7004 	str.w	r7, [r9, #4]
    703a:	f300 83a3 	bgt.w	7784 <_svfprintf_r+0x115c>
    703e:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    7042:	f109 0908 	add.w	r9, r9, #8
    7046:	e43f      	b.n	68c8 <_svfprintf_r+0x2a0>
    7048:	465d      	mov	r5, fp
    704a:	2a0a      	cmp	r2, #10
    704c:	f171 0300 	sbcs.w	r3, r1, #0
    7050:	f080 8334 	bcs.w	76bc <_svfprintf_r+0x1094>
    7054:	3230      	adds	r2, #48	; 0x30
    7056:	2301      	movs	r3, #1
    7058:	f88d 2147 	strb.w	r2, [sp, #327]	; 0x147
    705c:	46ab      	mov	fp, r5
    705e:	9305      	str	r3, [sp, #20]
    7060:	f20d 1447 	addw	r4, sp, #327	; 0x147
    7064:	e65a      	b.n	6d1c <_svfprintf_r+0x6f4>
    7066:	ee1a 1a10 	vmov	r1, s20
    706a:	aa26      	add	r2, sp, #152	; 0x98
    706c:	4650      	mov	r0, sl
    706e:	9318      	str	r3, [sp, #96]	; 0x60
    7070:	f002 fbae 	bl	97d0 <__ssprint_r>
    7074:	2800      	cmp	r0, #0
    7076:	f47f af52 	bne.w	6f1e <_svfprintf_r+0x8f6>
    707a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    707c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    707e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7082:	e433      	b.n	68ec <_svfprintf_r+0x2c4>
    7084:	0000bc2c 	.word	0x0000bc2c
    7088:	0000bc40 	.word	0x0000bc40
    708c:	0000bc30 	.word	0x0000bc30
    7090:	ee1a 1a10 	vmov	r1, s20
    7094:	aa26      	add	r2, sp, #152	; 0x98
    7096:	4650      	mov	r0, sl
    7098:	f002 fb9a 	bl	97d0 <__ssprint_r>
    709c:	2800      	cmp	r0, #0
    709e:	f47f af3e 	bne.w	6f1e <_svfprintf_r+0x8f6>
    70a2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    70a4:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    70a8:	e432      	b.n	6910 <_svfprintf_r+0x2e8>
    70aa:	2c10      	cmp	r4, #16
    70ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    70ae:	4dbe      	ldr	r5, [pc, #760]	; (73a8 <_svfprintf_r+0xd80>)
    70b0:	dd1f      	ble.n	70f2 <_svfprintf_r+0xaca>
    70b2:	ee1a ba10 	vmov	fp, s20
    70b6:	2710      	movs	r7, #16
    70b8:	e004      	b.n	70c4 <_svfprintf_r+0xa9c>
    70ba:	3c10      	subs	r4, #16
    70bc:	2c10      	cmp	r4, #16
    70be:	f109 0908 	add.w	r9, r9, #8
    70c2:	dd16      	ble.n	70f2 <_svfprintf_r+0xaca>
    70c4:	3301      	adds	r3, #1
    70c6:	3610      	adds	r6, #16
    70c8:	2b07      	cmp	r3, #7
    70ca:	e9c9 5700 	strd	r5, r7, [r9]
    70ce:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    70d2:	ddf2      	ble.n	70ba <_svfprintf_r+0xa92>
    70d4:	aa26      	add	r2, sp, #152	; 0x98
    70d6:	4659      	mov	r1, fp
    70d8:	4650      	mov	r0, sl
    70da:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    70de:	f002 fb77 	bl	97d0 <__ssprint_r>
    70e2:	2800      	cmp	r0, #0
    70e4:	f47f af1b 	bne.w	6f1e <_svfprintf_r+0x8f6>
    70e8:	3c10      	subs	r4, #16
    70ea:	2c10      	cmp	r4, #16
    70ec:	e9dd 3627 	ldrd	r3, r6, [sp, #156]	; 0x9c
    70f0:	dce8      	bgt.n	70c4 <_svfprintf_r+0xa9c>
    70f2:	3301      	adds	r3, #1
    70f4:	4426      	add	r6, r4
    70f6:	2b07      	cmp	r3, #7
    70f8:	e9c9 5400 	strd	r5, r4, [r9]
    70fc:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    7100:	f77f ac2c 	ble.w	695c <_svfprintf_r+0x334>
    7104:	ee1a 1a10 	vmov	r1, s20
    7108:	aa26      	add	r2, sp, #152	; 0x98
    710a:	4650      	mov	r0, sl
    710c:	f002 fb60 	bl	97d0 <__ssprint_r>
    7110:	2800      	cmp	r0, #0
    7112:	f47f af04 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7116:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7118:	e420      	b.n	695c <_svfprintf_r+0x334>
    711a:	991d      	ldr	r1, [sp, #116]	; 0x74
    711c:	2900      	cmp	r1, #0
    711e:	f340 8343 	ble.w	77a8 <_svfprintf_r+0x1180>
    7122:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    7124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7126:	429d      	cmp	r5, r3
    7128:	bfa8      	it	ge
    712a:	461d      	movge	r5, r3
    712c:	2d00      	cmp	r5, #0
    712e:	dd0b      	ble.n	7148 <_svfprintf_r+0xb20>
    7130:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7132:	3301      	adds	r3, #1
    7134:	442e      	add	r6, r5
    7136:	2b07      	cmp	r3, #7
    7138:	e9c9 4500 	strd	r4, r5, [r9]
    713c:	9628      	str	r6, [sp, #160]	; 0xa0
    713e:	9327      	str	r3, [sp, #156]	; 0x9c
    7140:	f300 86fc 	bgt.w	7f3c <_svfprintf_r+0x1914>
    7144:	f109 0908 	add.w	r9, r9, #8
    7148:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    714a:	2d00      	cmp	r5, #0
    714c:	bfa8      	it	ge
    714e:	1b7f      	subge	r7, r7, r5
    7150:	2f00      	cmp	r7, #0
    7152:	f300 81f8 	bgt.w	7546 <_svfprintf_r+0xf1e>
    7156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7158:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    715c:	4423      	add	r3, r4
    715e:	9305      	str	r3, [sp, #20]
    7160:	f040 8218 	bne.w	7594 <_svfprintf_r+0xf6c>
    7164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7168:	4293      	cmp	r3, r2
    716a:	db03      	blt.n	7174 <_svfprintf_r+0xb4c>
    716c:	f01b 0f01 	tst.w	fp, #1
    7170:	f000 84bc 	beq.w	7aec <_svfprintf_r+0x14c4>
    7174:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7176:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7178:	4416      	add	r6, r2
    717a:	e9c9 1200 	strd	r1, r2, [r9]
    717e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    7180:	9628      	str	r6, [sp, #160]	; 0xa0
    7182:	3201      	adds	r2, #1
    7184:	2a07      	cmp	r2, #7
    7186:	9227      	str	r2, [sp, #156]	; 0x9c
    7188:	f300 86e6 	bgt.w	7f58 <_svfprintf_r+0x1930>
    718c:	f109 0908 	add.w	r9, r9, #8
    7190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7192:	18a5      	adds	r5, r4, r2
    7194:	1ad4      	subs	r4, r2, r3
    7196:	9b05      	ldr	r3, [sp, #20]
    7198:	1aed      	subs	r5, r5, r3
    719a:	42a5      	cmp	r5, r4
    719c:	bfa8      	it	ge
    719e:	4625      	movge	r5, r4
    71a0:	2d00      	cmp	r5, #0
    71a2:	dd0d      	ble.n	71c0 <_svfprintf_r+0xb98>
    71a4:	f8c9 3000 	str.w	r3, [r9]
    71a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    71aa:	f8c9 5004 	str.w	r5, [r9, #4]
    71ae:	3301      	adds	r3, #1
    71b0:	442e      	add	r6, r5
    71b2:	2b07      	cmp	r3, #7
    71b4:	9628      	str	r6, [sp, #160]	; 0xa0
    71b6:	9327      	str	r3, [sp, #156]	; 0x9c
    71b8:	f300 86f8 	bgt.w	7fac <_svfprintf_r+0x1984>
    71bc:	f109 0908 	add.w	r9, r9, #8
    71c0:	2d00      	cmp	r5, #0
    71c2:	bfa8      	it	ge
    71c4:	1b64      	subge	r4, r4, r5
    71c6:	2c00      	cmp	r4, #0
    71c8:	f77f abbf 	ble.w	694a <_svfprintf_r+0x322>
    71cc:	2c10      	cmp	r4, #16
    71ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    71d0:	4d76      	ldr	r5, [pc, #472]	; (73ac <_svfprintf_r+0xd84>)
    71d2:	f340 8365 	ble.w	78a0 <_svfprintf_r+0x1278>
    71d6:	4632      	mov	r2, r6
    71d8:	2710      	movs	r7, #16
    71da:	ee1a 6a10 	vmov	r6, s20
    71de:	e005      	b.n	71ec <_svfprintf_r+0xbc4>
    71e0:	f109 0908 	add.w	r9, r9, #8
    71e4:	3c10      	subs	r4, #16
    71e6:	2c10      	cmp	r4, #16
    71e8:	f340 8359 	ble.w	789e <_svfprintf_r+0x1276>
    71ec:	3301      	adds	r3, #1
    71ee:	3210      	adds	r2, #16
    71f0:	2b07      	cmp	r3, #7
    71f2:	e9c9 5700 	strd	r5, r7, [r9]
    71f6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    71fa:	ddf1      	ble.n	71e0 <_svfprintf_r+0xbb8>
    71fc:	aa26      	add	r2, sp, #152	; 0x98
    71fe:	4631      	mov	r1, r6
    7200:	4650      	mov	r0, sl
    7202:	f002 fae5 	bl	97d0 <__ssprint_r>
    7206:	2800      	cmp	r0, #0
    7208:	f47f ae89 	bne.w	6f1e <_svfprintf_r+0x8f6>
    720c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    7210:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7214:	e7e6      	b.n	71e4 <_svfprintf_r+0xbbc>
    7216:	f01b 0f01 	tst.w	fp, #1
    721a:	f47f ae8d 	bne.w	6f38 <_svfprintf_r+0x910>
    721e:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    7220:	f8c9 4000 	str.w	r4, [r9]
    7224:	2301      	movs	r3, #1
    7226:	441f      	add	r7, r3
    7228:	3601      	adds	r6, #1
    722a:	2f07      	cmp	r7, #7
    722c:	f8c9 3004 	str.w	r3, [r9, #4]
    7230:	9628      	str	r6, [sp, #160]	; 0xa0
    7232:	9727      	str	r7, [sp, #156]	; 0x9c
    7234:	f77f aeb3 	ble.w	6f9e <_svfprintf_r+0x976>
    7238:	ee1a 1a10 	vmov	r1, s20
    723c:	aa26      	add	r2, sp, #152	; 0x98
    723e:	4650      	mov	r0, sl
    7240:	f002 fac6 	bl	97d0 <__ssprint_r>
    7244:	2800      	cmp	r0, #0
    7246:	f47f ae6a 	bne.w	6f1e <_svfprintf_r+0x8f6>
    724a:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    724e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7252:	e6a6      	b.n	6fa2 <_svfprintf_r+0x97a>
    7254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7256:	1e5c      	subs	r4, r3, #1
    7258:	2c00      	cmp	r4, #0
    725a:	f77f aea2 	ble.w	6fa2 <_svfprintf_r+0x97a>
    725e:	2c10      	cmp	r4, #16
    7260:	4d52      	ldr	r5, [pc, #328]	; (73ac <_svfprintf_r+0xd84>)
    7262:	f340 8356 	ble.w	7912 <_svfprintf_r+0x12ea>
    7266:	f8cd 800c 	str.w	r8, [sp, #12]
    726a:	2310      	movs	r3, #16
    726c:	ee1a 8a10 	vmov	r8, s20
    7270:	e005      	b.n	727e <_svfprintf_r+0xc56>
    7272:	f109 0908 	add.w	r9, r9, #8
    7276:	3c10      	subs	r4, #16
    7278:	2c10      	cmp	r4, #16
    727a:	f340 8348 	ble.w	790e <_svfprintf_r+0x12e6>
    727e:	3701      	adds	r7, #1
    7280:	3610      	adds	r6, #16
    7282:	2f07      	cmp	r7, #7
    7284:	e9c9 5300 	strd	r5, r3, [r9]
    7288:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    728c:	ddf1      	ble.n	7272 <_svfprintf_r+0xc4a>
    728e:	aa26      	add	r2, sp, #152	; 0x98
    7290:	4641      	mov	r1, r8
    7292:	4650      	mov	r0, sl
    7294:	f002 fa9c 	bl	97d0 <__ssprint_r>
    7298:	2800      	cmp	r0, #0
    729a:	f47f ae40 	bne.w	6f1e <_svfprintf_r+0x8f6>
    729e:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    72a2:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    72a6:	2310      	movs	r3, #16
    72a8:	e7e5      	b.n	7276 <_svfprintf_r+0xc4e>
    72aa:	ee1a 1a10 	vmov	r1, s20
    72ae:	aa26      	add	r2, sp, #152	; 0x98
    72b0:	4650      	mov	r0, sl
    72b2:	f002 fa8d 	bl	97d0 <__ssprint_r>
    72b6:	2800      	cmp	r0, #0
    72b8:	f47f ae31 	bne.w	6f1e <_svfprintf_r+0x8f6>
    72bc:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    72be:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    72c2:	f7ff bb2f 	b.w	6924 <_svfprintf_r+0x2fc>
    72c6:	f015 0310 	ands.w	r3, r5, #16
    72ca:	d158      	bne.n	737e <_svfprintf_r+0xd56>
    72cc:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    72d0:	f000 836e 	beq.w	79b0 <_svfprintf_r+0x1388>
    72d4:	9808      	ldr	r0, [sp, #32]
    72d6:	f850 2b04 	ldr.w	r2, [r0], #4
    72da:	9008      	str	r0, [sp, #32]
    72dc:	4619      	mov	r1, r3
    72de:	b292      	uxth	r2, r2
    72e0:	2301      	movs	r3, #1
    72e2:	e454      	b.n	6b8e <_svfprintf_r+0x566>
    72e4:	f01b 0310 	ands.w	r3, fp, #16
    72e8:	d144      	bne.n	7374 <_svfprintf_r+0xd4c>
    72ea:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    72ee:	f000 836e 	beq.w	79ce <_svfprintf_r+0x13a6>
    72f2:	9808      	ldr	r0, [sp, #32]
    72f4:	f850 2b04 	ldr.w	r2, [r0], #4
    72f8:	9008      	str	r0, [sp, #32]
    72fa:	4619      	mov	r1, r3
    72fc:	b292      	uxth	r2, r2
    72fe:	e4a9      	b.n	6c54 <_svfprintf_r+0x62c>
    7300:	4252      	negs	r2, r2
    7302:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7306:	465d      	mov	r5, fp
    7308:	202d      	movs	r0, #45	; 0x2d
    730a:	2301      	movs	r3, #1
    730c:	e440      	b.n	6b90 <_svfprintf_r+0x568>
    730e:	ee1a 1a10 	vmov	r1, s20
    7312:	aa26      	add	r2, sp, #152	; 0x98
    7314:	4650      	mov	r0, sl
    7316:	f002 fa5b 	bl	97d0 <__ssprint_r>
    731a:	2800      	cmp	r0, #0
    731c:	f47f adff 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7320:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    7324:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7328:	e615      	b.n	6f56 <_svfprintf_r+0x92e>
    732a:	ee1a 1a10 	vmov	r1, s20
    732e:	aa26      	add	r2, sp, #152	; 0x98
    7330:	4650      	mov	r0, sl
    7332:	f002 fa4d 	bl	97d0 <__ssprint_r>
    7336:	2800      	cmp	r0, #0
    7338:	f47f adf1 	bne.w	6f1e <_svfprintf_r+0x8f6>
    733c:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    7340:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7344:	e614      	b.n	6f70 <_svfprintf_r+0x948>
    7346:	f01b 0f01 	tst.w	fp, #1
    734a:	f43f aafe 	beq.w	694a <_svfprintf_r+0x322>
    734e:	e531      	b.n	6db4 <_svfprintf_r+0x78c>
    7350:	9308      	str	r3, [sp, #32]
    7352:	f898 3000 	ldrb.w	r3, [r8]
    7356:	f7ff b9c3 	b.w	66e0 <_svfprintf_r+0xb8>
    735a:	ac52      	add	r4, sp, #328	; 0x148
    735c:	e4de      	b.n	6d1c <_svfprintf_r+0x6f4>
    735e:	f41b 7f00 	tst.w	fp, #512	; 0x200
    7362:	f040 83cd 	bne.w	7b00 <_svfprintf_r+0x14d8>
    7366:	f853 2b04 	ldr.w	r2, [r3], #4
    736a:	9308      	str	r3, [sp, #32]
    736c:	17d1      	asrs	r1, r2, #31
    736e:	460b      	mov	r3, r1
    7370:	f7ff bbbc 	b.w	6aec <_svfprintf_r+0x4c4>
    7374:	9b08      	ldr	r3, [sp, #32]
    7376:	f853 2b04 	ldr.w	r2, [r3], #4
    737a:	9308      	str	r3, [sp, #32]
    737c:	e46a      	b.n	6c54 <_svfprintf_r+0x62c>
    737e:	9b08      	ldr	r3, [sp, #32]
    7380:	f853 2b04 	ldr.w	r2, [r3], #4
    7384:	9308      	str	r3, [sp, #32]
    7386:	2301      	movs	r3, #1
    7388:	e401      	b.n	6b8e <_svfprintf_r+0x566>
    738a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    738c:	2b00      	cmp	r3, #0
    738e:	f43f aa2c 	beq.w	67ea <_svfprintf_r+0x1c2>
    7392:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7394:	781b      	ldrb	r3, [r3, #0]
    7396:	2b00      	cmp	r3, #0
    7398:	f43f aa27 	beq.w	67ea <_svfprintf_r+0x1c2>
    739c:	f898 3000 	ldrb.w	r3, [r8]
    73a0:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    73a4:	f7ff b99c 	b.w	66e0 <_svfprintf_r+0xb8>
    73a8:	0000bc30 	.word	0x0000bc30
    73ac:	0000bc40 	.word	0x0000bc40
    73b0:	9b08      	ldr	r3, [sp, #32]
    73b2:	9804      	ldr	r0, [sp, #16]
    73b4:	f853 1b04 	ldr.w	r1, [r3], #4
    73b8:	9308      	str	r3, [sp, #32]
    73ba:	17c2      	asrs	r2, r0, #31
    73bc:	e9c1 0200 	strd	r0, r2, [r1]
    73c0:	4644      	mov	r4, r8
    73c2:	f7ff b962 	b.w	668a <_svfprintf_r+0x62>
    73c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    73ca:	4602      	mov	r2, r0
    73cc:	460b      	mov	r3, r1
    73ce:	f7fd fb81 	bl	4ad4 <__aeabi_dcmpun>
    73d2:	2800      	cmp	r0, #0
    73d4:	f040 86b2 	bne.w	813c <_svfprintf_r+0x1b14>
    73d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73da:	2b61      	cmp	r3, #97	; 0x61
    73dc:	f000 8566 	beq.w	7eac <_svfprintf_r+0x1884>
    73e0:	2b41      	cmp	r3, #65	; 0x41
    73e2:	f000 85c8 	beq.w	7f76 <_svfprintf_r+0x194e>
    73e6:	9b03      	ldr	r3, [sp, #12]
    73e8:	3301      	adds	r3, #1
    73ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73ec:	f023 0320 	bic.w	r3, r3, #32
    73f0:	9302      	str	r3, [sp, #8]
    73f2:	f000 8466 	beq.w	7cc2 <_svfprintf_r+0x169a>
    73f6:	2b47      	cmp	r3, #71	; 0x47
    73f8:	d104      	bne.n	7404 <_svfprintf_r+0xddc>
    73fa:	9b03      	ldr	r3, [sp, #12]
    73fc:	2b00      	cmp	r3, #0
    73fe:	bf08      	it	eq
    7400:	2301      	moveq	r3, #1
    7402:	9303      	str	r3, [sp, #12]
    7404:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    7408:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
    740c:	2900      	cmp	r1, #0
    740e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    7412:	f04f 0300 	mov.w	r3, #0
    7416:	4693      	mov	fp, r2
    7418:	f2c0 8584 	blt.w	7f24 <_svfprintf_r+0x18fc>
    741c:	ec41 0b18 	vmov	d8, r0, r1
    7420:	9318      	str	r3, [sp, #96]	; 0x60
    7422:	9307      	str	r3, [sp, #28]
    7424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7426:	3b41      	subs	r3, #65	; 0x41
    7428:	2b25      	cmp	r3, #37	; 0x25
    742a:	f200 8379 	bhi.w	7b20 <_svfprintf_r+0x14f8>
    742e:	e8df f013 	tbh	[pc, r3, lsl #1]
    7432:	0453      	.short	0x0453
    7434:	03770377 	.word	0x03770377
    7438:	044c0377 	.word	0x044c0377
    743c:	03770450 	.word	0x03770450
    7440:	03770377 	.word	0x03770377
    7444:	03770377 	.word	0x03770377
    7448:	03770377 	.word	0x03770377
    744c:	03770377 	.word	0x03770377
    7450:	03770377 	.word	0x03770377
    7454:	03770377 	.word	0x03770377
    7458:	03770377 	.word	0x03770377
    745c:	03770377 	.word	0x03770377
    7460:	03770377 	.word	0x03770377
    7464:	03770377 	.word	0x03770377
    7468:	03770377 	.word	0x03770377
    746c:	03770377 	.word	0x03770377
    7470:	03770377 	.word	0x03770377
    7474:	03770377 	.word	0x03770377
    7478:	044c0377 	.word	0x044c0377
    747c:	0450      	.short	0x0450
    747e:	930a      	str	r3, [sp, #40]	; 0x28
    7480:	465d      	mov	r5, fp
    7482:	f7ff bbee 	b.w	6c62 <_svfprintf_r+0x63a>
    7486:	930a      	str	r3, [sp, #40]	; 0x28
    7488:	4bb9      	ldr	r3, [pc, #740]	; (7770 <_svfprintf_r+0x1148>)
    748a:	9312      	str	r3, [sp, #72]	; 0x48
    748c:	f01b 0120 	ands.w	r1, fp, #32
    7490:	f000 80ff 	beq.w	7692 <_svfprintf_r+0x106a>
    7494:	9b08      	ldr	r3, [sp, #32]
    7496:	3307      	adds	r3, #7
    7498:	f023 0307 	bic.w	r3, r3, #7
    749c:	6859      	ldr	r1, [r3, #4]
    749e:	f853 2b08 	ldr.w	r2, [r3], #8
    74a2:	9308      	str	r3, [sp, #32]
    74a4:	f01b 0f01 	tst.w	fp, #1
    74a8:	d00a      	beq.n	74c0 <_svfprintf_r+0xe98>
    74aa:	ea52 0301 	orrs.w	r3, r2, r1
    74ae:	d007      	beq.n	74c0 <_svfprintf_r+0xe98>
    74b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    74b2:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    74b6:	2330      	movs	r3, #48	; 0x30
    74b8:	f04b 0b02 	orr.w	fp, fp, #2
    74bc:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    74c0:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    74c4:	2302      	movs	r3, #2
    74c6:	f7ff bb62 	b.w	6b8e <_svfprintf_r+0x566>
    74ca:	930a      	str	r3, [sp, #40]	; 0x28
    74cc:	f7ff bbb6 	b.w	6c3c <_svfprintf_r+0x614>
    74d0:	930a      	str	r3, [sp, #40]	; 0x28
    74d2:	4ba8      	ldr	r3, [pc, #672]	; (7774 <_svfprintf_r+0x114c>)
    74d4:	9312      	str	r3, [sp, #72]	; 0x48
    74d6:	e7d9      	b.n	748c <_svfprintf_r+0xe64>
    74d8:	9b08      	ldr	r3, [sp, #32]
    74da:	2101      	movs	r1, #1
    74dc:	f853 2b04 	ldr.w	r2, [r3], #4
    74e0:	9102      	str	r1, [sp, #8]
    74e2:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
    74e6:	9308      	str	r3, [sp, #32]
    74e8:	9105      	str	r1, [sp, #20]
    74ea:	ac39      	add	r4, sp, #228	; 0xe4
    74ec:	f7ff bab5 	b.w	6a5a <_svfprintf_r+0x432>
    74f0:	ee1a 1a10 	vmov	r1, s20
    74f4:	aa26      	add	r2, sp, #152	; 0x98
    74f6:	4650      	mov	r0, sl
    74f8:	f002 f96a 	bl	97d0 <__ssprint_r>
    74fc:	2800      	cmp	r0, #0
    74fe:	f47f ad0e 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7502:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7504:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7508:	e462      	b.n	6dd0 <_svfprintf_r+0x7a8>
    750a:	2140      	movs	r1, #64	; 0x40
    750c:	4650      	mov	r0, sl
    750e:	f7fd faf7 	bl	4b00 <_malloc_r>
    7512:	6020      	str	r0, [r4, #0]
    7514:	6120      	str	r0, [r4, #16]
    7516:	2800      	cmp	r0, #0
    7518:	f000 8662 	beq.w	81e0 <_svfprintf_r+0x1bb8>
    751c:	2340      	movs	r3, #64	; 0x40
    751e:	6163      	str	r3, [r4, #20]
    7520:	f7ff b8a1 	b.w	6666 <_svfprintf_r+0x3e>
    7524:	9b03      	ldr	r3, [sp, #12]
    7526:	9407      	str	r4, [sp, #28]
    7528:	2b06      	cmp	r3, #6
    752a:	4621      	mov	r1, r4
    752c:	bf28      	it	cs
    752e:	2306      	movcs	r3, #6
    7530:	9403      	str	r4, [sp, #12]
    7532:	4622      	mov	r2, r4
    7534:	9302      	str	r3, [sp, #8]
    7536:	4c90      	ldr	r4, [pc, #576]	; (7778 <_svfprintf_r+0x1150>)
    7538:	9708      	str	r7, [sp, #32]
    753a:	9305      	str	r3, [sp, #20]
    753c:	910c      	str	r1, [sp, #48]	; 0x30
    753e:	9110      	str	r1, [sp, #64]	; 0x40
    7540:	910b      	str	r1, [sp, #44]	; 0x2c
    7542:	f7ff ba64 	b.w	6a0e <_svfprintf_r+0x3e6>
    7546:	2f10      	cmp	r7, #16
    7548:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    754a:	4d8c      	ldr	r5, [pc, #560]	; (777c <_svfprintf_r+0x1154>)
    754c:	f340 824e 	ble.w	79ec <_svfprintf_r+0x13c4>
    7550:	4632      	mov	r2, r6
    7552:	ee1a 6a10 	vmov	r6, s20
    7556:	e005      	b.n	7564 <_svfprintf_r+0xf3c>
    7558:	f109 0908 	add.w	r9, r9, #8
    755c:	3f10      	subs	r7, #16
    755e:	2f10      	cmp	r7, #16
    7560:	f340 8243 	ble.w	79ea <_svfprintf_r+0x13c2>
    7564:	3301      	adds	r3, #1
    7566:	3210      	adds	r2, #16
    7568:	2110      	movs	r1, #16
    756a:	2b07      	cmp	r3, #7
    756c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    7570:	f8c9 5000 	str.w	r5, [r9]
    7574:	f8c9 1004 	str.w	r1, [r9, #4]
    7578:	ddee      	ble.n	7558 <_svfprintf_r+0xf30>
    757a:	aa26      	add	r2, sp, #152	; 0x98
    757c:	4631      	mov	r1, r6
    757e:	4650      	mov	r0, sl
    7580:	f002 f926 	bl	97d0 <__ssprint_r>
    7584:	2800      	cmp	r0, #0
    7586:	f47f acca 	bne.w	6f1e <_svfprintf_r+0x8f6>
    758a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    758e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7592:	e7e3      	b.n	755c <_svfprintf_r+0xf34>
    7594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7596:	9d05      	ldr	r5, [sp, #20]
    7598:	f8cd b014 	str.w	fp, [sp, #20]
    759c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    75a0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    75a4:	18e3      	adds	r3, r4, r3
    75a6:	9303      	str	r3, [sp, #12]
    75a8:	464a      	mov	r2, r9
    75aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
    75ac:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    75b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    75b2:	940a      	str	r4, [sp, #40]	; 0x28
    75b4:	ee1a 9a10 	vmov	r9, s20
    75b8:	46b4      	mov	ip, r6
    75ba:	f1bb 0f00 	cmp.w	fp, #0
    75be:	d030      	beq.n	7622 <_svfprintf_r+0xffa>
    75c0:	bb93      	cbnz	r3, 7628 <_svfprintf_r+0x1000>
    75c2:	3f01      	subs	r7, #1
    75c4:	f10b 3bff 	add.w	fp, fp, #4294967295
    75c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    75ca:	e9c2 3800 	strd	r3, r8, [r2]
    75ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    75d0:	3301      	adds	r3, #1
    75d2:	44c4      	add	ip, r8
    75d4:	2b07      	cmp	r3, #7
    75d6:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    75da:	9327      	str	r3, [sp, #156]	; 0x9c
    75dc:	dc62      	bgt.n	76a4 <_svfprintf_r+0x107c>
    75de:	3208      	adds	r2, #8
    75e0:	9b03      	ldr	r3, [sp, #12]
    75e2:	7838      	ldrb	r0, [r7, #0]
    75e4:	1b5b      	subs	r3, r3, r5
    75e6:	4283      	cmp	r3, r0
    75e8:	bfa8      	it	ge
    75ea:	4603      	movge	r3, r0
    75ec:	2b00      	cmp	r3, #0
    75ee:	461e      	mov	r6, r3
    75f0:	dd0c      	ble.n	760c <_svfprintf_r+0xfe4>
    75f2:	9827      	ldr	r0, [sp, #156]	; 0x9c
    75f4:	3001      	adds	r0, #1
    75f6:	449c      	add	ip, r3
    75f8:	2807      	cmp	r0, #7
    75fa:	e9c2 5300 	strd	r5, r3, [r2]
    75fe:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    7602:	9027      	str	r0, [sp, #156]	; 0x9c
    7604:	f300 8159 	bgt.w	78ba <_svfprintf_r+0x1292>
    7608:	7838      	ldrb	r0, [r7, #0]
    760a:	3208      	adds	r2, #8
    760c:	2e00      	cmp	r6, #0
    760e:	bfac      	ite	ge
    7610:	1b84      	subge	r4, r0, r6
    7612:	4604      	movlt	r4, r0
    7614:	2c00      	cmp	r4, #0
    7616:	dc0b      	bgt.n	7630 <_svfprintf_r+0x1008>
    7618:	4405      	add	r5, r0
    761a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    761c:	f1bb 0f00 	cmp.w	fp, #0
    7620:	d1ce      	bne.n	75c0 <_svfprintf_r+0xf98>
    7622:	2b00      	cmp	r3, #0
    7624:	f000 83d4 	beq.w	7dd0 <_svfprintf_r+0x17a8>
    7628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    762a:	3b01      	subs	r3, #1
    762c:	930c      	str	r3, [sp, #48]	; 0x30
    762e:	e7cb      	b.n	75c8 <_svfprintf_r+0xfa0>
    7630:	2c10      	cmp	r4, #16
    7632:	9827      	ldr	r0, [sp, #156]	; 0x9c
    7634:	dd1f      	ble.n	7676 <_svfprintf_r+0x104e>
    7636:	2610      	movs	r6, #16
    7638:	4663      	mov	r3, ip
    763a:	e004      	b.n	7646 <_svfprintf_r+0x101e>
    763c:	3c10      	subs	r4, #16
    763e:	2c10      	cmp	r4, #16
    7640:	f102 0208 	add.w	r2, r2, #8
    7644:	dd16      	ble.n	7674 <_svfprintf_r+0x104c>
    7646:	3001      	adds	r0, #1
    7648:	494c      	ldr	r1, [pc, #304]	; (777c <_svfprintf_r+0x1154>)
    764a:	3310      	adds	r3, #16
    764c:	2807      	cmp	r0, #7
    764e:	e9c2 1600 	strd	r1, r6, [r2]
    7652:	e9cd 0327 	strd	r0, r3, [sp, #156]	; 0x9c
    7656:	ddf1      	ble.n	763c <_svfprintf_r+0x1014>
    7658:	aa26      	add	r2, sp, #152	; 0x98
    765a:	4649      	mov	r1, r9
    765c:	4650      	mov	r0, sl
    765e:	f002 f8b7 	bl	97d0 <__ssprint_r>
    7662:	2800      	cmp	r0, #0
    7664:	f47f ac5b 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7668:	3c10      	subs	r4, #16
    766a:	2c10      	cmp	r4, #16
    766c:	e9dd 0327 	ldrd	r0, r3, [sp, #156]	; 0x9c
    7670:	aa29      	add	r2, sp, #164	; 0xa4
    7672:	dce8      	bgt.n	7646 <_svfprintf_r+0x101e>
    7674:	469c      	mov	ip, r3
    7676:	3001      	adds	r0, #1
    7678:	4b40      	ldr	r3, [pc, #256]	; (777c <_svfprintf_r+0x1154>)
    767a:	6054      	str	r4, [r2, #4]
    767c:	44a4      	add	ip, r4
    767e:	2807      	cmp	r0, #7
    7680:	e9cd 0c27 	strd	r0, ip, [sp, #156]	; 0x9c
    7684:	6013      	str	r3, [r2, #0]
    7686:	f300 83fa 	bgt.w	7e7e <_svfprintf_r+0x1856>
    768a:	7838      	ldrb	r0, [r7, #0]
    768c:	3208      	adds	r2, #8
    768e:	4405      	add	r5, r0
    7690:	e7c3      	b.n	761a <_svfprintf_r+0xff2>
    7692:	f01b 0310 	ands.w	r3, fp, #16
    7696:	f000 80bc 	beq.w	7812 <_svfprintf_r+0x11ea>
    769a:	9b08      	ldr	r3, [sp, #32]
    769c:	f853 2b04 	ldr.w	r2, [r3], #4
    76a0:	9308      	str	r3, [sp, #32]
    76a2:	e6ff      	b.n	74a4 <_svfprintf_r+0xe7c>
    76a4:	aa26      	add	r2, sp, #152	; 0x98
    76a6:	4649      	mov	r1, r9
    76a8:	4650      	mov	r0, sl
    76aa:	f002 f891 	bl	97d0 <__ssprint_r>
    76ae:	2800      	cmp	r0, #0
    76b0:	f47f ac35 	bne.w	6f1e <_svfprintf_r+0x8f6>
    76b4:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    76b8:	aa29      	add	r2, sp, #164	; 0xa4
    76ba:	e791      	b.n	75e0 <_svfprintf_r+0xfb8>
    76bc:	f405 6080 	and.w	r0, r5, #1024	; 0x400
    76c0:	2600      	movs	r6, #0
    76c2:	f8cd 8008 	str.w	r8, [sp, #8]
    76c6:	9505      	str	r5, [sp, #20]
    76c8:	4b2d      	ldr	r3, [pc, #180]	; (7780 <_svfprintf_r+0x1158>)
    76ca:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    76ce:	ee0a aa90 	vmov	s21, sl
    76d2:	ac52      	add	r4, sp, #328	; 0x148
    76d4:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    76d8:	46b4      	mov	ip, r6
    76da:	4605      	mov	r5, r0
    76dc:	e005      	b.n	76ea <_svfprintf_r+0x10c2>
    76de:	2a0a      	cmp	r2, #10
    76e0:	f171 0100 	sbcs.w	r1, r1, #0
    76e4:	d334      	bcc.n	7750 <_svfprintf_r+0x1128>
    76e6:	4652      	mov	r2, sl
    76e8:	4639      	mov	r1, r7
    76ea:	1850      	adds	r0, r2, r1
    76ec:	f140 0000 	adc.w	r0, r0, #0
    76f0:	fba3 6700 	umull	r6, r7, r3, r0
    76f4:	f027 0603 	bic.w	r6, r7, #3
    76f8:	eb06 0697 	add.w	r6, r6, r7, lsr #2
    76fc:	1b80      	subs	r0, r0, r6
    76fe:	1a16      	subs	r6, r2, r0
    7700:	f161 0e00 	sbc.w	lr, r1, #0
    7704:	fb0b f706 	mul.w	r7, fp, r6
    7708:	fb03 770e 	mla	r7, r3, lr, r7
    770c:	fba6 a603 	umull	sl, r6, r6, r3
    7710:	4437      	add	r7, r6
    7712:	f00a 0e01 	and.w	lr, sl, #1
    7716:	2605      	movs	r6, #5
    7718:	fbae 6e06 	umull	r6, lr, lr, r6
    771c:	1830      	adds	r0, r6, r0
    771e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    7722:	3030      	adds	r0, #48	; 0x30
    7724:	f804 0c01 	strb.w	r0, [r4, #-1]
    7728:	ea4a 7ac7 	orr.w	sl, sl, r7, lsl #31
    772c:	f10c 0c01 	add.w	ip, ip, #1
    7730:	3c01      	subs	r4, #1
    7732:	087f      	lsrs	r7, r7, #1
    7734:	2d00      	cmp	r5, #0
    7736:	d0d2      	beq.n	76de <_svfprintf_r+0x10b6>
    7738:	f898 0000 	ldrb.w	r0, [r8]
    773c:	4584      	cmp	ip, r0
    773e:	d1ce      	bne.n	76de <_svfprintf_r+0x10b6>
    7740:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    7744:	d0cb      	beq.n	76de <_svfprintf_r+0x10b6>
    7746:	2a0a      	cmp	r2, #10
    7748:	f171 0100 	sbcs.w	r1, r1, #0
    774c:	f080 815d 	bcs.w	7a0a <_svfprintf_r+0x13e2>
    7750:	9d05      	ldr	r5, [sp, #20]
    7752:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    7756:	ab52      	add	r3, sp, #328	; 0x148
    7758:	1b1b      	subs	r3, r3, r4
    775a:	f8dd 8008 	ldr.w	r8, [sp, #8]
    775e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    7762:	ee1a aa90 	vmov	sl, s21
    7766:	46ab      	mov	fp, r5
    7768:	9305      	str	r3, [sp, #20]
    776a:	f7ff bad7 	b.w	6d1c <_svfprintf_r+0x6f4>
    776e:	bf00      	nop
    7770:	0000bbfc 	.word	0x0000bbfc
    7774:	0000bc10 	.word	0x0000bc10
    7778:	0000bc24 	.word	0x0000bc24
    777c:	0000bc40 	.word	0x0000bc40
    7780:	cccccccd 	.word	0xcccccccd
    7784:	ee1a 1a10 	vmov	r1, s20
    7788:	aa26      	add	r2, sp, #152	; 0x98
    778a:	4650      	mov	r0, sl
    778c:	9318      	str	r3, [sp, #96]	; 0x60
    778e:	f002 f81f 	bl	97d0 <__ssprint_r>
    7792:	2800      	cmp	r0, #0
    7794:	f47f abc3 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7798:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    779c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    779e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    77a0:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    77a4:	f7ff b890 	b.w	68c8 <_svfprintf_r+0x2a0>
    77a8:	2301      	movs	r3, #1
    77aa:	f8c9 3004 	str.w	r3, [r9, #4]
    77ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    77b0:	4abe      	ldr	r2, [pc, #760]	; (7aac <_svfprintf_r+0x1484>)
    77b2:	f8c9 2000 	str.w	r2, [r9]
    77b6:	3301      	adds	r3, #1
    77b8:	3601      	adds	r6, #1
    77ba:	2b07      	cmp	r3, #7
    77bc:	9628      	str	r6, [sp, #160]	; 0xa0
    77be:	9327      	str	r3, [sp, #156]	; 0x9c
    77c0:	f300 817a 	bgt.w	7ab8 <_svfprintf_r+0x1490>
    77c4:	f109 0908 	add.w	r9, r9, #8
    77c8:	2900      	cmp	r1, #0
    77ca:	f040 80ae 	bne.w	792a <_svfprintf_r+0x1302>
    77ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    77d0:	f00b 0301 	and.w	r3, fp, #1
    77d4:	4313      	orrs	r3, r2
    77d6:	f43f a8b8 	beq.w	694a <_svfprintf_r+0x322>
    77da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    77dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
    77de:	199a      	adds	r2, r3, r6
    77e0:	e9c9 1300 	strd	r1, r3, [r9]
    77e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    77e6:	9228      	str	r2, [sp, #160]	; 0xa0
    77e8:	3301      	adds	r3, #1
    77ea:	2b07      	cmp	r3, #7
    77ec:	9327      	str	r3, [sp, #156]	; 0x9c
    77ee:	f300 8259 	bgt.w	7ca4 <_svfprintf_r+0x167c>
    77f2:	f109 0908 	add.w	r9, r9, #8
    77f6:	990d      	ldr	r1, [sp, #52]	; 0x34
    77f8:	f8c9 4000 	str.w	r4, [r9]
    77fc:	3301      	adds	r3, #1
    77fe:	188e      	adds	r6, r1, r2
    7800:	2b07      	cmp	r3, #7
    7802:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    7806:	f8c9 1004 	str.w	r1, [r9, #4]
    780a:	f77f a89c 	ble.w	6946 <_svfprintf_r+0x31e>
    780e:	f7ff bbd5 	b.w	6fbc <_svfprintf_r+0x994>
    7812:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    7816:	f000 80be 	beq.w	7996 <_svfprintf_r+0x136e>
    781a:	9808      	ldr	r0, [sp, #32]
    781c:	f850 2b04 	ldr.w	r2, [r0], #4
    7820:	9008      	str	r0, [sp, #32]
    7822:	4619      	mov	r1, r3
    7824:	b292      	uxth	r2, r2
    7826:	e63d      	b.n	74a4 <_svfprintf_r+0xe7c>
    7828:	ee1a 1a10 	vmov	r1, s20
    782c:	aa26      	add	r2, sp, #152	; 0x98
    782e:	4650      	mov	r0, sl
    7830:	f001 ffce 	bl	97d0 <__ssprint_r>
    7834:	2800      	cmp	r0, #0
    7836:	f47f ab72 	bne.w	6f1e <_svfprintf_r+0x8f6>
    783a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    783c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7840:	f7ff bab3 	b.w	6daa <_svfprintf_r+0x782>
    7844:	ae24      	add	r6, sp, #144	; 0x90
    7846:	2208      	movs	r2, #8
    7848:	2100      	movs	r1, #0
    784a:	4630      	mov	r0, r6
    784c:	941f      	str	r4, [sp, #124]	; 0x7c
    784e:	f7fe f80b 	bl	5868 <memset>
    7852:	9b03      	ldr	r3, [sp, #12]
    7854:	1c5a      	adds	r2, r3, #1
    7856:	f000 80e8 	beq.w	7a2a <_svfprintf_r+0x1402>
    785a:	2500      	movs	r5, #0
    785c:	f8cd 8008 	str.w	r8, [sp, #8]
    7860:	f8cd b01c 	str.w	fp, [sp, #28]
    7864:	46a8      	mov	r8, r5
    7866:	469b      	mov	fp, r3
    7868:	e00c      	b.n	7884 <_svfprintf_r+0x125c>
    786a:	a939      	add	r1, sp, #228	; 0xe4
    786c:	4650      	mov	r0, sl
    786e:	f001 ff69 	bl	9744 <_wcrtomb_r>
    7872:	1c43      	adds	r3, r0, #1
    7874:	4440      	add	r0, r8
    7876:	f000 840e 	beq.w	8096 <_svfprintf_r+0x1a6e>
    787a:	4558      	cmp	r0, fp
    787c:	dc08      	bgt.n	7890 <_svfprintf_r+0x1268>
    787e:	f000 841a 	beq.w	80b6 <_svfprintf_r+0x1a8e>
    7882:	4680      	mov	r8, r0
    7884:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    7886:	5952      	ldr	r2, [r2, r5]
    7888:	4633      	mov	r3, r6
    788a:	3504      	adds	r5, #4
    788c:	2a00      	cmp	r2, #0
    788e:	d1ec      	bne.n	786a <_svfprintf_r+0x1242>
    7890:	f8cd 8014 	str.w	r8, [sp, #20]
    7894:	f8dd b01c 	ldr.w	fp, [sp, #28]
    7898:	f8dd 8008 	ldr.w	r8, [sp, #8]
    789c:	e0d2      	b.n	7a44 <_svfprintf_r+0x141c>
    789e:	4616      	mov	r6, r2
    78a0:	3301      	adds	r3, #1
    78a2:	4426      	add	r6, r4
    78a4:	2b07      	cmp	r3, #7
    78a6:	f8c9 5000 	str.w	r5, [r9]
    78aa:	f8c9 4004 	str.w	r4, [r9, #4]
    78ae:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    78b2:	f77f a848 	ble.w	6946 <_svfprintf_r+0x31e>
    78b6:	f7ff bb81 	b.w	6fbc <_svfprintf_r+0x994>
    78ba:	aa26      	add	r2, sp, #152	; 0x98
    78bc:	4649      	mov	r1, r9
    78be:	4650      	mov	r0, sl
    78c0:	f001 ff86 	bl	97d0 <__ssprint_r>
    78c4:	2800      	cmp	r0, #0
    78c6:	f47f ab2a 	bne.w	6f1e <_svfprintf_r+0x8f6>
    78ca:	7838      	ldrb	r0, [r7, #0]
    78cc:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    78d0:	aa29      	add	r2, sp, #164	; 0xa4
    78d2:	e69b      	b.n	760c <_svfprintf_r+0xfe4>
    78d4:	ee1a 1a10 	vmov	r1, s20
    78d8:	aa26      	add	r2, sp, #152	; 0x98
    78da:	4650      	mov	r0, sl
    78dc:	f001 ff78 	bl	97d0 <__ssprint_r>
    78e0:	2800      	cmp	r0, #0
    78e2:	f47f ab1c 	bne.w	6f1e <_svfprintf_r+0x8f6>
    78e6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    78e8:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    78ec:	f7ff b814 	b.w	6918 <_svfprintf_r+0x2f0>
    78f0:	2b01      	cmp	r3, #1
    78f2:	465d      	mov	r5, fp
    78f4:	f47f a9fe 	bne.w	6cf4 <_svfprintf_r+0x6cc>
    78f8:	f7ff bbac 	b.w	7054 <_svfprintf_r+0xa2c>
    78fc:	9b08      	ldr	r3, [sp, #32]
    78fe:	9904      	ldr	r1, [sp, #16]
    7900:	f853 2b04 	ldr.w	r2, [r3], #4
    7904:	4644      	mov	r4, r8
    7906:	6011      	str	r1, [r2, #0]
    7908:	9308      	str	r3, [sp, #32]
    790a:	f7fe bebe 	b.w	668a <_svfprintf_r+0x62>
    790e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    7912:	f8c9 5000 	str.w	r5, [r9]
    7916:	3701      	adds	r7, #1
    7918:	4426      	add	r6, r4
    791a:	2f07      	cmp	r7, #7
    791c:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    7920:	f8c9 4004 	str.w	r4, [r9, #4]
    7924:	f77f ab3b 	ble.w	6f9e <_svfprintf_r+0x976>
    7928:	e486      	b.n	7238 <_svfprintf_r+0xc10>
    792a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    792c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    792e:	199a      	adds	r2, r3, r6
    7930:	e9c9 0300 	strd	r0, r3, [r9]
    7934:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7936:	9228      	str	r2, [sp, #160]	; 0xa0
    7938:	3301      	adds	r3, #1
    793a:	2b07      	cmp	r3, #7
    793c:	9327      	str	r3, [sp, #156]	; 0x9c
    793e:	f300 81b1 	bgt.w	7ca4 <_svfprintf_r+0x167c>
    7942:	f109 0908 	add.w	r9, r9, #8
    7946:	2900      	cmp	r1, #0
    7948:	f6bf af55 	bge.w	77f6 <_svfprintf_r+0x11ce>
    794c:	424f      	negs	r7, r1
    794e:	3110      	adds	r1, #16
    7950:	4d57      	ldr	r5, [pc, #348]	; (7ab0 <_svfprintf_r+0x1488>)
    7952:	f280 836a 	bge.w	802a <_svfprintf_r+0x1a02>
    7956:	ee1a 1a10 	vmov	r1, s20
    795a:	2610      	movs	r6, #16
    795c:	e005      	b.n	796a <_svfprintf_r+0x1342>
    795e:	f109 0908 	add.w	r9, r9, #8
    7962:	3f10      	subs	r7, #16
    7964:	2f10      	cmp	r7, #16
    7966:	f340 8360 	ble.w	802a <_svfprintf_r+0x1a02>
    796a:	3301      	adds	r3, #1
    796c:	3210      	adds	r2, #16
    796e:	2b07      	cmp	r3, #7
    7970:	e9c9 5600 	strd	r5, r6, [r9]
    7974:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    7978:	ddf1      	ble.n	795e <_svfprintf_r+0x1336>
    797a:	aa26      	add	r2, sp, #152	; 0x98
    797c:	4650      	mov	r0, sl
    797e:	9103      	str	r1, [sp, #12]
    7980:	f001 ff26 	bl	97d0 <__ssprint_r>
    7984:	2800      	cmp	r0, #0
    7986:	f47f aaca 	bne.w	6f1e <_svfprintf_r+0x8f6>
    798a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    798e:	9903      	ldr	r1, [sp, #12]
    7990:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7994:	e7e5      	b.n	7962 <_svfprintf_r+0x133a>
    7996:	9b08      	ldr	r3, [sp, #32]
    7998:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    799c:	bf1a      	itte	ne
    799e:	4611      	movne	r1, r2
    79a0:	f853 2b04 	ldrne.w	r2, [r3], #4
    79a4:	f853 2b04 	ldreq.w	r2, [r3], #4
    79a8:	9308      	str	r3, [sp, #32]
    79aa:	bf18      	it	ne
    79ac:	b2d2      	uxtbne	r2, r2
    79ae:	e579      	b.n	74a4 <_svfprintf_r+0xe7c>
    79b0:	9b08      	ldr	r3, [sp, #32]
    79b2:	f415 7100 	ands.w	r1, r5, #512	; 0x200
    79b6:	bf1a      	itte	ne
    79b8:	4611      	movne	r1, r2
    79ba:	f853 2b04 	ldrne.w	r2, [r3], #4
    79be:	f853 2b04 	ldreq.w	r2, [r3], #4
    79c2:	9308      	str	r3, [sp, #32]
    79c4:	bf18      	it	ne
    79c6:	b2d2      	uxtbne	r2, r2
    79c8:	2301      	movs	r3, #1
    79ca:	f7ff b8e0 	b.w	6b8e <_svfprintf_r+0x566>
    79ce:	9b08      	ldr	r3, [sp, #32]
    79d0:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    79d4:	bf1a      	itte	ne
    79d6:	4611      	movne	r1, r2
    79d8:	f853 2b04 	ldrne.w	r2, [r3], #4
    79dc:	f853 2b04 	ldreq.w	r2, [r3], #4
    79e0:	9308      	str	r3, [sp, #32]
    79e2:	bf18      	it	ne
    79e4:	b2d2      	uxtbne	r2, r2
    79e6:	f7ff b935 	b.w	6c54 <_svfprintf_r+0x62c>
    79ea:	4616      	mov	r6, r2
    79ec:	3301      	adds	r3, #1
    79ee:	443e      	add	r6, r7
    79f0:	2b07      	cmp	r3, #7
    79f2:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    79f6:	f8c9 5000 	str.w	r5, [r9]
    79fa:	f8c9 7004 	str.w	r7, [r9, #4]
    79fe:	f300 8143 	bgt.w	7c88 <_svfprintf_r+0x1660>
    7a02:	f109 0908 	add.w	r9, r9, #8
    7a06:	f7ff bba6 	b.w	7156 <_svfprintf_r+0xb2e>
    7a0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7a0c:	9916      	ldr	r1, [sp, #88]	; 0x58
    7a0e:	1ae4      	subs	r4, r4, r3
    7a10:	461a      	mov	r2, r3
    7a12:	4620      	mov	r0, r4
    7a14:	f7fd ff7a 	bl	590c <strncpy>
    7a18:	f898 2001 	ldrb.w	r2, [r8, #1]
    7a1c:	4b25      	ldr	r3, [pc, #148]	; (7ab4 <_svfprintf_r+0x148c>)
    7a1e:	b10a      	cbz	r2, 7a24 <_svfprintf_r+0x13fc>
    7a20:	f108 0801 	add.w	r8, r8, #1
    7a24:	f04f 0c00 	mov.w	ip, #0
    7a28:	e65d      	b.n	76e6 <_svfprintf_r+0x10be>
    7a2a:	2300      	movs	r3, #0
    7a2c:	4619      	mov	r1, r3
    7a2e:	9600      	str	r6, [sp, #0]
    7a30:	aa1f      	add	r2, sp, #124	; 0x7c
    7a32:	4650      	mov	r0, sl
    7a34:	f001 feac 	bl	9790 <_wcsrtombs_r>
    7a38:	4603      	mov	r3, r0
    7a3a:	3301      	adds	r3, #1
    7a3c:	9005      	str	r0, [sp, #20]
    7a3e:	f000 832a 	beq.w	8096 <_svfprintf_r+0x1a6e>
    7a42:	941f      	str	r4, [sp, #124]	; 0x7c
    7a44:	9b05      	ldr	r3, [sp, #20]
    7a46:	2b00      	cmp	r3, #0
    7a48:	d044      	beq.n	7ad4 <_svfprintf_r+0x14ac>
    7a4a:	2b63      	cmp	r3, #99	; 0x63
    7a4c:	f340 8118 	ble.w	7c80 <_svfprintf_r+0x1658>
    7a50:	1c59      	adds	r1, r3, #1
    7a52:	4650      	mov	r0, sl
    7a54:	f7fd f854 	bl	4b00 <_malloc_r>
    7a58:	4604      	mov	r4, r0
    7a5a:	2800      	cmp	r0, #0
    7a5c:	f000 831b 	beq.w	8096 <_svfprintf_r+0x1a6e>
    7a60:	9007      	str	r0, [sp, #28]
    7a62:	2208      	movs	r2, #8
    7a64:	2100      	movs	r1, #0
    7a66:	4630      	mov	r0, r6
    7a68:	f7fd fefe 	bl	5868 <memset>
    7a6c:	9d05      	ldr	r5, [sp, #20]
    7a6e:	9600      	str	r6, [sp, #0]
    7a70:	462b      	mov	r3, r5
    7a72:	aa1f      	add	r2, sp, #124	; 0x7c
    7a74:	4621      	mov	r1, r4
    7a76:	4650      	mov	r0, sl
    7a78:	f001 fe8a 	bl	9790 <_wcsrtombs_r>
    7a7c:	4285      	cmp	r5, r0
    7a7e:	f040 83bb 	bne.w	81f8 <_svfprintf_r+0x1bd0>
    7a82:	9905      	ldr	r1, [sp, #20]
    7a84:	9708      	str	r7, [sp, #32]
    7a86:	2300      	movs	r3, #0
    7a88:	5463      	strb	r3, [r4, r1]
    7a8a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    7a8e:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    7a92:	9303      	str	r3, [sp, #12]
    7a94:	9102      	str	r1, [sp, #8]
    7a96:	930c      	str	r3, [sp, #48]	; 0x30
    7a98:	9310      	str	r3, [sp, #64]	; 0x40
    7a9a:	930b      	str	r3, [sp, #44]	; 0x2c
    7a9c:	f7fe bfb7 	b.w	6a0e <_svfprintf_r+0x3e6>
    7aa0:	222d      	movs	r2, #45	; 0x2d
    7aa2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    7aa6:	f7fe bfa1 	b.w	69ec <_svfprintf_r+0x3c4>
    7aaa:	bf00      	nop
    7aac:	0000bc2c 	.word	0x0000bc2c
    7ab0:	0000bc40 	.word	0x0000bc40
    7ab4:	cccccccd 	.word	0xcccccccd
    7ab8:	ee1a 1a10 	vmov	r1, s20
    7abc:	aa26      	add	r2, sp, #152	; 0x98
    7abe:	4650      	mov	r0, sl
    7ac0:	f001 fe86 	bl	97d0 <__ssprint_r>
    7ac4:	2800      	cmp	r0, #0
    7ac6:	f47f aa2a 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7aca:	991d      	ldr	r1, [sp, #116]	; 0x74
    7acc:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7ace:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7ad2:	e679      	b.n	77c8 <_svfprintf_r+0x11a0>
    7ad4:	9b05      	ldr	r3, [sp, #20]
    7ad6:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    7ada:	9708      	str	r7, [sp, #32]
    7adc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    7ae0:	930c      	str	r3, [sp, #48]	; 0x30
    7ae2:	9310      	str	r3, [sp, #64]	; 0x40
    7ae4:	930b      	str	r3, [sp, #44]	; 0x2c
    7ae6:	9307      	str	r3, [sp, #28]
    7ae8:	f7fe bf91 	b.w	6a0e <_svfprintf_r+0x3e6>
    7aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7aee:	9905      	ldr	r1, [sp, #20]
    7af0:	18a5      	adds	r5, r4, r2
    7af2:	1a6d      	subs	r5, r5, r1
    7af4:	1ad4      	subs	r4, r2, r3
    7af6:	42a5      	cmp	r5, r4
    7af8:	bfa8      	it	ge
    7afa:	4625      	movge	r5, r4
    7afc:	f7ff bb60 	b.w	71c0 <_svfprintf_r+0xb98>
    7b00:	f913 2b04 	ldrsb.w	r2, [r3], #4
    7b04:	9308      	str	r3, [sp, #32]
    7b06:	17d1      	asrs	r1, r2, #31
    7b08:	460b      	mov	r3, r1
    7b0a:	f7fe bfef 	b.w	6aec <_svfprintf_r+0x4c4>
    7b0e:	9b08      	ldr	r3, [sp, #32]
    7b10:	9904      	ldr	r1, [sp, #16]
    7b12:	f853 2b04 	ldr.w	r2, [r3], #4
    7b16:	9308      	str	r3, [sp, #32]
    7b18:	8011      	strh	r1, [r2, #0]
    7b1a:	4644      	mov	r4, r8
    7b1c:	f7fe bdb5 	b.w	668a <_svfprintf_r+0x62>
    7b20:	9e03      	ldr	r6, [sp, #12]
    7b22:	2102      	movs	r1, #2
    7b24:	ab24      	add	r3, sp, #144	; 0x90
    7b26:	9301      	str	r3, [sp, #4]
    7b28:	ab1f      	add	r3, sp, #124	; 0x7c
    7b2a:	9300      	str	r3, [sp, #0]
    7b2c:	4632      	mov	r2, r6
    7b2e:	ab1d      	add	r3, sp, #116	; 0x74
    7b30:	4650      	mov	r0, sl
    7b32:	eeb0 0a48 	vmov.f32	s0, s16
    7b36:	eef0 0a68 	vmov.f32	s1, s17
    7b3a:	f000 fe65 	bl	8808 <_dtoa_r>
    7b3e:	9b02      	ldr	r3, [sp, #8]
    7b40:	2b47      	cmp	r3, #71	; 0x47
    7b42:	4604      	mov	r4, r0
    7b44:	f000 8195 	beq.w	7e72 <_svfprintf_r+0x184a>
    7b48:	2b46      	cmp	r3, #70	; 0x46
    7b4a:	eb00 0506 	add.w	r5, r0, r6
    7b4e:	d105      	bne.n	7b5c <_svfprintf_r+0x1534>
    7b50:	7803      	ldrb	r3, [r0, #0]
    7b52:	2b30      	cmp	r3, #48	; 0x30
    7b54:	f000 830e 	beq.w	8174 <_svfprintf_r+0x1b4c>
    7b58:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    7b5a:	4435      	add	r5, r6
    7b5c:	ec51 0b18 	vmov	r0, r1, d8
    7b60:	2200      	movs	r2, #0
    7b62:	2300      	movs	r3, #0
    7b64:	f7fc ff84 	bl	4a70 <__aeabi_dcmpeq>
    7b68:	2800      	cmp	r0, #0
    7b6a:	f000 8176 	beq.w	7e5a <_svfprintf_r+0x1832>
    7b6e:	462b      	mov	r3, r5
    7b70:	1b1b      	subs	r3, r3, r4
    7b72:	930d      	str	r3, [sp, #52]	; 0x34
    7b74:	9b02      	ldr	r3, [sp, #8]
    7b76:	2b47      	cmp	r3, #71	; 0x47
    7b78:	f000 813b 	beq.w	7df2 <_svfprintf_r+0x17ca>
    7b7c:	9b02      	ldr	r3, [sp, #8]
    7b7e:	2b46      	cmp	r3, #70	; 0x46
    7b80:	f000 81fb 	beq.w	7f7a <_svfprintf_r+0x1952>
    7b84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7b86:	930b      	str	r3, [sp, #44]	; 0x2c
    7b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7b8a:	9a02      	ldr	r2, [sp, #8]
    7b8c:	3b01      	subs	r3, #1
    7b8e:	2a41      	cmp	r2, #65	; 0x41
    7b90:	931d      	str	r3, [sp, #116]	; 0x74
    7b92:	f000 822d 	beq.w	7ff0 <_svfprintf_r+0x19c8>
    7b96:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    7b9a:	2100      	movs	r1, #0
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	bfb8      	it	lt
    7ba0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
    7ba2:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    7ba6:	bfba      	itte	lt
    7ba8:	f1c3 0301 	rsblt	r3, r3, #1
    7bac:	222d      	movlt	r2, #45	; 0x2d
    7bae:	222b      	movge	r2, #43	; 0x2b
    7bb0:	2b09      	cmp	r3, #9
    7bb2:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    7bb6:	f340 8220 	ble.w	7ffa <_svfprintf_r+0x19d2>
    7bba:	f10d 0597 	add.w	r5, sp, #151	; 0x97
    7bbe:	4eb7      	ldr	r6, [pc, #732]	; (7e9c <_svfprintf_r+0x1874>)
    7bc0:	462a      	mov	r2, r5
    7bc2:	4610      	mov	r0, r2
    7bc4:	fb86 2103 	smull	r2, r1, r6, r3
    7bc8:	17da      	asrs	r2, r3, #31
    7bca:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    7bce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    7bd2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    7bd6:	3130      	adds	r1, #48	; 0x30
    7bd8:	f800 1c01 	strb.w	r1, [r0, #-1]
    7bdc:	4619      	mov	r1, r3
    7bde:	2963      	cmp	r1, #99	; 0x63
    7be0:	4613      	mov	r3, r2
    7be2:	f100 32ff 	add.w	r2, r0, #4294967295
    7be6:	dcec      	bgt.n	7bc2 <_svfprintf_r+0x159a>
    7be8:	3330      	adds	r3, #48	; 0x30
    7bea:	b2d9      	uxtb	r1, r3
    7bec:	1e83      	subs	r3, r0, #2
    7bee:	429d      	cmp	r5, r3
    7bf0:	f802 1c01 	strb.w	r1, [r2, #-1]
    7bf4:	f240 82cb 	bls.w	818e <_svfprintf_r+0x1b66>
    7bf8:	4613      	mov	r3, r2
    7bfa:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    7bfe:	e001      	b.n	7c04 <_svfprintf_r+0x15dc>
    7c00:	f813 1b01 	ldrb.w	r1, [r3], #1
    7c04:	f802 1b01 	strb.w	r1, [r2], #1
    7c08:	429d      	cmp	r5, r3
    7c0a:	d1f9      	bne.n	7c00 <_svfprintf_r+0x15d8>
    7c0c:	f10d 0399 	add.w	r3, sp, #153	; 0x99
    7c10:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    7c14:	1a1b      	subs	r3, r3, r0
    7c16:	4413      	add	r3, r2
    7c18:	aa20      	add	r2, sp, #128	; 0x80
    7c1a:	1a9b      	subs	r3, r3, r2
    7c1c:	9315      	str	r3, [sp, #84]	; 0x54
    7c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c20:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7c22:	2b01      	cmp	r3, #1
    7c24:	441a      	add	r2, r3
    7c26:	9205      	str	r2, [sp, #20]
    7c28:	f340 823e 	ble.w	80a8 <_svfprintf_r+0x1a80>
    7c2c:	9b05      	ldr	r3, [sp, #20]
    7c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7c30:	4413      	add	r3, r2
    7c32:	9305      	str	r3, [sp, #20]
    7c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c36:	9a05      	ldr	r2, [sp, #20]
    7c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    7c3c:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
    7c40:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    7c44:	2300      	movs	r3, #0
    7c46:	930c      	str	r3, [sp, #48]	; 0x30
    7c48:	9202      	str	r2, [sp, #8]
    7c4a:	9310      	str	r3, [sp, #64]	; 0x40
    7c4c:	930b      	str	r3, [sp, #44]	; 0x2c
    7c4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7c50:	2b00      	cmp	r3, #0
    7c52:	f040 80dc 	bne.w	7e0e <_svfprintf_r+0x17e6>
    7c56:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    7c5a:	9303      	str	r3, [sp, #12]
    7c5c:	f7fe bed7 	b.w	6a0e <_svfprintf_r+0x3e6>
    7c60:	4620      	mov	r0, r4
    7c62:	9708      	str	r7, [sp, #32]
    7c64:	f7fd ff2c 	bl	5ac0 <strlen>
    7c68:	4601      	mov	r1, r0
    7c6a:	9005      	str	r0, [sp, #20]
    7c6c:	f7fe bf22 	b.w	6ab4 <_svfprintf_r+0x48c>
    7c70:	ee1a 1a10 	vmov	r1, s20
    7c74:	aa26      	add	r2, sp, #152	; 0x98
    7c76:	4650      	mov	r0, sl
    7c78:	f001 fdaa 	bl	97d0 <__ssprint_r>
    7c7c:	f7fe bddf 	b.w	683e <_svfprintf_r+0x216>
    7c80:	2300      	movs	r3, #0
    7c82:	9307      	str	r3, [sp, #28]
    7c84:	ac39      	add	r4, sp, #228	; 0xe4
    7c86:	e6ec      	b.n	7a62 <_svfprintf_r+0x143a>
    7c88:	ee1a 1a10 	vmov	r1, s20
    7c8c:	aa26      	add	r2, sp, #152	; 0x98
    7c8e:	4650      	mov	r0, sl
    7c90:	f001 fd9e 	bl	97d0 <__ssprint_r>
    7c94:	2800      	cmp	r0, #0
    7c96:	f47f a942 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7c9a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7c9c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7ca0:	f7ff ba59 	b.w	7156 <_svfprintf_r+0xb2e>
    7ca4:	ee1a 1a10 	vmov	r1, s20
    7ca8:	aa26      	add	r2, sp, #152	; 0x98
    7caa:	4650      	mov	r0, sl
    7cac:	f001 fd90 	bl	97d0 <__ssprint_r>
    7cb0:	2800      	cmp	r0, #0
    7cb2:	f47f a934 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7cb6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    7cba:	991d      	ldr	r1, [sp, #116]	; 0x74
    7cbc:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7cc0:	e641      	b.n	7946 <_svfprintf_r+0x131e>
    7cc2:	2306      	movs	r3, #6
    7cc4:	9303      	str	r3, [sp, #12]
    7cc6:	f7ff bb9d 	b.w	7404 <_svfprintf_r+0xddc>
    7cca:	9b03      	ldr	r3, [sp, #12]
    7ccc:	2102      	movs	r1, #2
    7cce:	1c5e      	adds	r6, r3, #1
    7cd0:	e728      	b.n	7b24 <_svfprintf_r+0x14fc>
    7cd2:	9e03      	ldr	r6, [sp, #12]
    7cd4:	2103      	movs	r1, #3
    7cd6:	e725      	b.n	7b24 <_svfprintf_r+0x14fc>
    7cd8:	a81d      	add	r0, sp, #116	; 0x74
    7cda:	eeb0 0a48 	vmov.f32	s0, s16
    7cde:	eef0 0a68 	vmov.f32	s1, s17
    7ce2:	f000 fc25 	bl	8530 <frexp>
    7ce6:	2200      	movs	r2, #0
    7ce8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    7cec:	ec51 0b10 	vmov	r0, r1, d0
    7cf0:	f003 fa1c 	bl	b12c <__aeabi_dmul>
    7cf4:	2200      	movs	r2, #0
    7cf6:	2300      	movs	r3, #0
    7cf8:	4606      	mov	r6, r0
    7cfa:	460f      	mov	r7, r1
    7cfc:	f7fc feb8 	bl	4a70 <__aeabi_dcmpeq>
    7d00:	b108      	cbz	r0, 7d06 <_svfprintf_r+0x16de>
    7d02:	2301      	movs	r3, #1
    7d04:	931d      	str	r3, [sp, #116]	; 0x74
    7d06:	4b66      	ldr	r3, [pc, #408]	; (7ea0 <_svfprintf_r+0x1878>)
    7d08:	9305      	str	r3, [sp, #20]
    7d0a:	9b03      	ldr	r3, [sp, #12]
    7d0c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    7d10:	3b01      	subs	r3, #1
    7d12:	ee0a aa90 	vmov	s21, sl
    7d16:	e9cd 9b0c 	strd	r9, fp, [sp, #48]	; 0x30
    7d1a:	f8dd a014 	ldr.w	sl, [sp, #20]
    7d1e:	9410      	str	r4, [sp, #64]	; 0x40
    7d20:	4625      	mov	r5, r4
    7d22:	4698      	mov	r8, r3
    7d24:	e006      	b.n	7d34 <_svfprintf_r+0x170c>
    7d26:	2200      	movs	r2, #0
    7d28:	2300      	movs	r3, #0
    7d2a:	f108 38ff 	add.w	r8, r8, #4294967295
    7d2e:	f7fc fe9f 	bl	4a70 <__aeabi_dcmpeq>
    7d32:	b9e8      	cbnz	r0, 7d70 <_svfprintf_r+0x1748>
    7d34:	4b5b      	ldr	r3, [pc, #364]	; (7ea4 <_svfprintf_r+0x187c>)
    7d36:	2200      	movs	r2, #0
    7d38:	4630      	mov	r0, r6
    7d3a:	4639      	mov	r1, r7
    7d3c:	f003 f9f6 	bl	b12c <__aeabi_dmul>
    7d40:	460f      	mov	r7, r1
    7d42:	4606      	mov	r6, r0
    7d44:	f003 fc04 	bl	b550 <__aeabi_d2iz>
    7d48:	4604      	mov	r4, r0
    7d4a:	f7fc fdd1 	bl	48f0 <__aeabi_i2d>
    7d4e:	460b      	mov	r3, r1
    7d50:	4602      	mov	r2, r0
    7d52:	4639      	mov	r1, r7
    7d54:	4630      	mov	r0, r6
    7d56:	f7fc fc7d 	bl	4654 <__aeabi_dsub>
    7d5a:	f81a 3004 	ldrb.w	r3, [sl, r4]
    7d5e:	f1b8 3fff 	cmp.w	r8, #4294967295
    7d62:	46ab      	mov	fp, r5
    7d64:	46c1      	mov	r9, r8
    7d66:	f805 3b01 	strb.w	r3, [r5], #1
    7d6a:	4606      	mov	r6, r0
    7d6c:	460f      	mov	r7, r1
    7d6e:	d1da      	bne.n	7d26 <_svfprintf_r+0x16fe>
    7d70:	4b4d      	ldr	r3, [pc, #308]	; (7ea8 <_svfprintf_r+0x1880>)
    7d72:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    7d76:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    7d7a:	2200      	movs	r2, #0
    7d7c:	4630      	mov	r0, r6
    7d7e:	4639      	mov	r1, r7
    7d80:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    7d84:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    7d88:	ee1a aa90 	vmov	sl, s21
    7d8c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    7d90:	940d      	str	r4, [sp, #52]	; 0x34
    7d92:	9c10      	ldr	r4, [sp, #64]	; 0x40
    7d94:	f7fc fe94 	bl	4ac0 <__aeabi_dcmpgt>
    7d98:	2800      	cmp	r0, #0
    7d9a:	f040 8160 	bne.w	805e <_svfprintf_r+0x1a36>
    7d9e:	4b42      	ldr	r3, [pc, #264]	; (7ea8 <_svfprintf_r+0x1880>)
    7da0:	4630      	mov	r0, r6
    7da2:	4639      	mov	r1, r7
    7da4:	2200      	movs	r2, #0
    7da6:	f7fc fe63 	bl	4a70 <__aeabi_dcmpeq>
    7daa:	b118      	cbz	r0, 7db4 <_svfprintf_r+0x178c>
    7dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7dae:	07de      	lsls	r6, r3, #31
    7db0:	f100 8155 	bmi.w	805e <_svfprintf_r+0x1a36>
    7db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7db6:	2b00      	cmp	r3, #0
    7db8:	db07      	blt.n	7dca <_svfprintf_r+0x17a2>
    7dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7dbc:	3301      	adds	r3, #1
    7dbe:	442b      	add	r3, r5
    7dc0:	2230      	movs	r2, #48	; 0x30
    7dc2:	f805 2b01 	strb.w	r2, [r5], #1
    7dc6:	42ab      	cmp	r3, r5
    7dc8:	d1fb      	bne.n	7dc2 <_svfprintf_r+0x179a>
    7dca:	1b2b      	subs	r3, r5, r4
    7dcc:	930d      	str	r3, [sp, #52]	; 0x34
    7dce:	e6d1      	b.n	7b74 <_svfprintf_r+0x154c>
    7dd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7dd4:	f8dd b014 	ldr.w	fp, [sp, #20]
    7dd8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    7ddc:	9714      	str	r7, [sp, #80]	; 0x50
    7dde:	18e3      	adds	r3, r4, r3
    7de0:	429d      	cmp	r5, r3
    7de2:	4691      	mov	r9, r2
    7de4:	462a      	mov	r2, r5
    7de6:	bf28      	it	cs
    7de8:	461a      	movcs	r2, r3
    7dea:	4666      	mov	r6, ip
    7dec:	9205      	str	r2, [sp, #20]
    7dee:	f7ff b9b9 	b.w	7164 <_svfprintf_r+0xb3c>
    7df2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7df4:	930b      	str	r3, [sp, #44]	; 0x2c
    7df6:	1cdd      	adds	r5, r3, #3
    7df8:	db02      	blt.n	7e00 <_svfprintf_r+0x17d8>
    7dfa:	9a03      	ldr	r2, [sp, #12]
    7dfc:	4293      	cmp	r3, r2
    7dfe:	dd0d      	ble.n	7e1c <_svfprintf_r+0x17f4>
    7e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7e02:	3b02      	subs	r3, #2
    7e04:	930a      	str	r3, [sp, #40]	; 0x28
    7e06:	f023 0320 	bic.w	r3, r3, #32
    7e0a:	9302      	str	r3, [sp, #8]
    7e0c:	e6bc      	b.n	7b88 <_svfprintf_r+0x1560>
    7e0e:	222d      	movs	r2, #45	; 0x2d
    7e10:	2300      	movs	r3, #0
    7e12:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    7e16:	9303      	str	r3, [sp, #12]
    7e18:	f7fe bdfc 	b.w	6a14 <_svfprintf_r+0x3ec>
    7e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7e20:	4293      	cmp	r3, r2
    7e22:	f2c0 80d8 	blt.w	7fd6 <_svfprintf_r+0x19ae>
    7e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e28:	f013 0f01 	tst.w	r3, #1
    7e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e2e:	f000 8140 	beq.w	80b2 <_svfprintf_r+0x1a8a>
    7e32:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7e34:	4413      	add	r3, r2
    7e36:	9305      	str	r3, [sp, #20]
    7e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e3a:	0559      	lsls	r1, r3, #21
    7e3c:	d503      	bpl.n	7e46 <_svfprintf_r+0x181e>
    7e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e40:	2b00      	cmp	r3, #0
    7e42:	f300 813f 	bgt.w	80c4 <_svfprintf_r+0x1a9c>
    7e46:	9b05      	ldr	r3, [sp, #20]
    7e48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7e4c:	9302      	str	r3, [sp, #8]
    7e4e:	2367      	movs	r3, #103	; 0x67
    7e50:	930a      	str	r3, [sp, #40]	; 0x28
    7e52:	2300      	movs	r3, #0
    7e54:	930c      	str	r3, [sp, #48]	; 0x30
    7e56:	9310      	str	r3, [sp, #64]	; 0x40
    7e58:	e6f9      	b.n	7c4e <_svfprintf_r+0x1626>
    7e5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7e5c:	42ab      	cmp	r3, r5
    7e5e:	f4bf ae87 	bcs.w	7b70 <_svfprintf_r+0x1548>
    7e62:	2130      	movs	r1, #48	; 0x30
    7e64:	1c5a      	adds	r2, r3, #1
    7e66:	9224      	str	r2, [sp, #144]	; 0x90
    7e68:	7019      	strb	r1, [r3, #0]
    7e6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7e6c:	429d      	cmp	r5, r3
    7e6e:	d8f9      	bhi.n	7e64 <_svfprintf_r+0x183c>
    7e70:	e67e      	b.n	7b70 <_svfprintf_r+0x1548>
    7e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e74:	07db      	lsls	r3, r3, #31
    7e76:	f100 80b9 	bmi.w	7fec <_svfprintf_r+0x19c4>
    7e7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7e7c:	e678      	b.n	7b70 <_svfprintf_r+0x1548>
    7e7e:	aa26      	add	r2, sp, #152	; 0x98
    7e80:	4649      	mov	r1, r9
    7e82:	4650      	mov	r0, sl
    7e84:	f001 fca4 	bl	97d0 <__ssprint_r>
    7e88:	2800      	cmp	r0, #0
    7e8a:	f47f a848 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7e8e:	7838      	ldrb	r0, [r7, #0]
    7e90:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    7e94:	aa29      	add	r2, sp, #164	; 0xa4
    7e96:	4405      	add	r5, r0
    7e98:	f7ff bbbf 	b.w	761a <_svfprintf_r+0xff2>
    7e9c:	66666667 	.word	0x66666667
    7ea0:	0000bc10 	.word	0x0000bc10
    7ea4:	40300000 	.word	0x40300000
    7ea8:	3fe00000 	.word	0x3fe00000
    7eac:	2378      	movs	r3, #120	; 0x78
    7eae:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    7eb2:	2330      	movs	r3, #48	; 0x30
    7eb4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    7eb8:	f04b 0302 	orr.w	r3, fp, #2
    7ebc:	9309      	str	r3, [sp, #36]	; 0x24
    7ebe:	9b03      	ldr	r3, [sp, #12]
    7ec0:	2b63      	cmp	r3, #99	; 0x63
    7ec2:	f300 80a9 	bgt.w	8018 <_svfprintf_r+0x19f0>
    7ec6:	2300      	movs	r3, #0
    7ec8:	9307      	str	r3, [sp, #28]
    7eca:	ac39      	add	r4, sp, #228	; 0xe4
    7ecc:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    7ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7ed2:	2a00      	cmp	r2, #0
    7ed4:	f023 0320 	bic.w	r3, r3, #32
    7ed8:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
    7edc:	9302      	str	r3, [sp, #8]
    7ede:	db22      	blt.n	7f26 <_svfprintf_r+0x18fe>
    7ee0:	2300      	movs	r3, #0
    7ee2:	ec42 1b18 	vmov	d8, r1, r2
    7ee6:	9318      	str	r3, [sp, #96]	; 0x60
    7ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7eea:	2b61      	cmp	r3, #97	; 0x61
    7eec:	f47f aa9a 	bne.w	7424 <_svfprintf_r+0xdfc>
    7ef0:	eeb0 0a48 	vmov.f32	s0, s16
    7ef4:	eef0 0a68 	vmov.f32	s1, s17
    7ef8:	a81d      	add	r0, sp, #116	; 0x74
    7efa:	f000 fb19 	bl	8530 <frexp>
    7efe:	2200      	movs	r2, #0
    7f00:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    7f04:	ec51 0b10 	vmov	r0, r1, d0
    7f08:	f003 f910 	bl	b12c <__aeabi_dmul>
    7f0c:	2200      	movs	r2, #0
    7f0e:	2300      	movs	r3, #0
    7f10:	4606      	mov	r6, r0
    7f12:	460f      	mov	r7, r1
    7f14:	f7fc fdac 	bl	4a70 <__aeabi_dcmpeq>
    7f18:	b108      	cbz	r0, 7f1e <_svfprintf_r+0x18f6>
    7f1a:	2301      	movs	r3, #1
    7f1c:	931d      	str	r3, [sp, #116]	; 0x74
    7f1e:	4bad      	ldr	r3, [pc, #692]	; (81d4 <_svfprintf_r+0x1bac>)
    7f20:	9305      	str	r3, [sp, #20]
    7f22:	e6f2      	b.n	7d0a <_svfprintf_r+0x16e2>
    7f24:	9307      	str	r3, [sp, #28]
    7f26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    7f2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    7f2e:	ee08 3a90 	vmov	s17, r3
    7f32:	232d      	movs	r3, #45	; 0x2d
    7f34:	ee08 2a10 	vmov	s16, r2
    7f38:	9318      	str	r3, [sp, #96]	; 0x60
    7f3a:	e7d5      	b.n	7ee8 <_svfprintf_r+0x18c0>
    7f3c:	ee1a 1a10 	vmov	r1, s20
    7f40:	aa26      	add	r2, sp, #152	; 0x98
    7f42:	4650      	mov	r0, sl
    7f44:	f001 fc44 	bl	97d0 <__ssprint_r>
    7f48:	2800      	cmp	r0, #0
    7f4a:	f47e afe8 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7f4e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7f50:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7f54:	f7ff b8f8 	b.w	7148 <_svfprintf_r+0xb20>
    7f58:	ee1a 1a10 	vmov	r1, s20
    7f5c:	aa26      	add	r2, sp, #152	; 0x98
    7f5e:	4650      	mov	r0, sl
    7f60:	f001 fc36 	bl	97d0 <__ssprint_r>
    7f64:	2800      	cmp	r0, #0
    7f66:	f47e afda 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7f6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7f6c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7f6e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7f72:	f7ff b90d 	b.w	7190 <_svfprintf_r+0xb68>
    7f76:	2358      	movs	r3, #88	; 0x58
    7f78:	e799      	b.n	7eae <_svfprintf_r+0x1886>
    7f7a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    7f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f7e:	920b      	str	r2, [sp, #44]	; 0x2c
    7f80:	2a00      	cmp	r2, #0
    7f82:	f003 0301 	and.w	r3, r3, #1
    7f86:	f340 8111 	ble.w	81ac <_svfprintf_r+0x1b84>
    7f8a:	9903      	ldr	r1, [sp, #12]
    7f8c:	430b      	orrs	r3, r1
    7f8e:	f040 80c1 	bne.w	8114 <_svfprintf_r+0x1aec>
    7f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f94:	9305      	str	r3, [sp, #20]
    7f96:	2366      	movs	r3, #102	; 0x66
    7f98:	930a      	str	r3, [sp, #40]	; 0x28
    7f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f9c:	055a      	lsls	r2, r3, #21
    7f9e:	f100 8093 	bmi.w	80c8 <_svfprintf_r+0x1aa0>
    7fa2:	9b05      	ldr	r3, [sp, #20]
    7fa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7fa8:	9302      	str	r3, [sp, #8]
    7faa:	e752      	b.n	7e52 <_svfprintf_r+0x182a>
    7fac:	ee1a 1a10 	vmov	r1, s20
    7fb0:	aa26      	add	r2, sp, #152	; 0x98
    7fb2:	4650      	mov	r0, sl
    7fb4:	f001 fc0c 	bl	97d0 <__ssprint_r>
    7fb8:	2800      	cmp	r0, #0
    7fba:	f47e afb0 	bne.w	6f1e <_svfprintf_r+0x8f6>
    7fbe:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    7fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fc2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7fc4:	1b1c      	subs	r4, r3, r4
    7fc6:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7fca:	f7ff b8f9 	b.w	71c0 <_svfprintf_r+0xb98>
    7fce:	2200      	movs	r2, #0
    7fd0:	9203      	str	r2, [sp, #12]
    7fd2:	f7fe bb87 	b.w	66e4 <_svfprintf_r+0xbc>
    7fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7fda:	189a      	adds	r2, r3, r2
    7fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7fde:	9205      	str	r2, [sp, #20]
    7fe0:	2b00      	cmp	r3, #0
    7fe2:	f340 80bd 	ble.w	8160 <_svfprintf_r+0x1b38>
    7fe6:	2367      	movs	r3, #103	; 0x67
    7fe8:	930a      	str	r3, [sp, #40]	; 0x28
    7fea:	e7d6      	b.n	7f9a <_svfprintf_r+0x1972>
    7fec:	19a5      	adds	r5, r4, r6
    7fee:	e5b5      	b.n	7b5c <_svfprintf_r+0x1534>
    7ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7ff2:	320f      	adds	r2, #15
    7ff4:	b2d2      	uxtb	r2, r2
    7ff6:	2101      	movs	r1, #1
    7ff8:	e5d0      	b.n	7b9c <_svfprintf_r+0x1574>
    7ffa:	2900      	cmp	r1, #0
    7ffc:	f040 80ad 	bne.w	815a <_svfprintf_r+0x1b32>
    8000:	2230      	movs	r2, #48	; 0x30
    8002:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
    8006:	f10d 0283 	add.w	r2, sp, #131	; 0x83
    800a:	3330      	adds	r3, #48	; 0x30
    800c:	f802 3b01 	strb.w	r3, [r2], #1
    8010:	ab20      	add	r3, sp, #128	; 0x80
    8012:	1ad3      	subs	r3, r2, r3
    8014:	9315      	str	r3, [sp, #84]	; 0x54
    8016:	e602      	b.n	7c1e <_svfprintf_r+0x15f6>
    8018:	1c59      	adds	r1, r3, #1
    801a:	4650      	mov	r0, sl
    801c:	f7fc fd70 	bl	4b00 <_malloc_r>
    8020:	4604      	mov	r4, r0
    8022:	2800      	cmp	r0, #0
    8024:	d037      	beq.n	8096 <_svfprintf_r+0x1a6e>
    8026:	9007      	str	r0, [sp, #28]
    8028:	e750      	b.n	7ecc <_svfprintf_r+0x18a4>
    802a:	3301      	adds	r3, #1
    802c:	443a      	add	r2, r7
    802e:	2b07      	cmp	r3, #7
    8030:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    8034:	f8c9 5000 	str.w	r5, [r9]
    8038:	f8c9 7004 	str.w	r7, [r9, #4]
    803c:	f77f abd9 	ble.w	77f2 <_svfprintf_r+0x11ca>
    8040:	ee1a 1a10 	vmov	r1, s20
    8044:	aa26      	add	r2, sp, #152	; 0x98
    8046:	4650      	mov	r0, sl
    8048:	f001 fbc2 	bl	97d0 <__ssprint_r>
    804c:	2800      	cmp	r0, #0
    804e:	f47e af66 	bne.w	6f1e <_svfprintf_r+0x8f6>
    8052:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    8056:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    805a:	f7ff bbcc 	b.w	77f6 <_svfprintf_r+0x11ce>
    805e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8060:	9a05      	ldr	r2, [sp, #20]
    8062:	9324      	str	r3, [sp, #144]	; 0x90
    8064:	7bd1      	ldrb	r1, [r2, #15]
    8066:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    806a:	428b      	cmp	r3, r1
    806c:	462a      	mov	r2, r5
    806e:	d109      	bne.n	8084 <_svfprintf_r+0x1a5c>
    8070:	2030      	movs	r0, #48	; 0x30
    8072:	f802 0c01 	strb.w	r0, [r2, #-1]
    8076:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8078:	1e53      	subs	r3, r2, #1
    807a:	9324      	str	r3, [sp, #144]	; 0x90
    807c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    8080:	4299      	cmp	r1, r3
    8082:	d0f6      	beq.n	8072 <_svfprintf_r+0x1a4a>
    8084:	2b39      	cmp	r3, #57	; 0x39
    8086:	bf0b      	itete	eq
    8088:	9b05      	ldreq	r3, [sp, #20]
    808a:	3301      	addne	r3, #1
    808c:	7a9b      	ldrbeq	r3, [r3, #10]
    808e:	b2db      	uxtbne	r3, r3
    8090:	f802 3c01 	strb.w	r3, [r2, #-1]
    8094:	e699      	b.n	7dca <_svfprintf_r+0x17a2>
    8096:	ee1a 2a10 	vmov	r2, s20
    809a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    809e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    80a2:	8193      	strh	r3, [r2, #12]
    80a4:	f7fe bbcf 	b.w	6846 <_svfprintf_r+0x21e>
    80a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80aa:	07d8      	lsls	r0, r3, #31
    80ac:	f57f adc2 	bpl.w	7c34 <_svfprintf_r+0x160c>
    80b0:	e5bc      	b.n	7c2c <_svfprintf_r+0x1604>
    80b2:	9305      	str	r3, [sp, #20]
    80b4:	e6c0      	b.n	7e38 <_svfprintf_r+0x1810>
    80b6:	9b03      	ldr	r3, [sp, #12]
    80b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
    80bc:	f8dd b01c 	ldr.w	fp, [sp, #28]
    80c0:	9305      	str	r3, [sp, #20]
    80c2:	e4bf      	b.n	7a44 <_svfprintf_r+0x141c>
    80c4:	2367      	movs	r3, #103	; 0x67
    80c6:	930a      	str	r3, [sp, #40]	; 0x28
    80c8:	9914      	ldr	r1, [sp, #80]	; 0x50
    80ca:	780b      	ldrb	r3, [r1, #0]
    80cc:	2bff      	cmp	r3, #255	; 0xff
    80ce:	f000 808f 	beq.w	81f0 <_svfprintf_r+0x1bc8>
    80d2:	2500      	movs	r5, #0
    80d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    80d6:	4628      	mov	r0, r5
    80d8:	e003      	b.n	80e2 <_svfprintf_r+0x1aba>
    80da:	3001      	adds	r0, #1
    80dc:	3101      	adds	r1, #1
    80de:	2bff      	cmp	r3, #255	; 0xff
    80e0:	d008      	beq.n	80f4 <_svfprintf_r+0x1acc>
    80e2:	4293      	cmp	r3, r2
    80e4:	da06      	bge.n	80f4 <_svfprintf_r+0x1acc>
    80e6:	1ad2      	subs	r2, r2, r3
    80e8:	784b      	ldrb	r3, [r1, #1]
    80ea:	2b00      	cmp	r3, #0
    80ec:	d1f5      	bne.n	80da <_svfprintf_r+0x1ab2>
    80ee:	780b      	ldrb	r3, [r1, #0]
    80f0:	3501      	adds	r5, #1
    80f2:	e7f4      	b.n	80de <_svfprintf_r+0x1ab6>
    80f4:	920b      	str	r2, [sp, #44]	; 0x2c
    80f6:	9114      	str	r1, [sp, #80]	; 0x50
    80f8:	9010      	str	r0, [sp, #64]	; 0x40
    80fa:	950c      	str	r5, [sp, #48]	; 0x30
    80fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8100:	9917      	ldr	r1, [sp, #92]	; 0x5c
    8102:	4413      	add	r3, r2
    8104:	9a05      	ldr	r2, [sp, #20]
    8106:	fb01 2303 	mla	r3, r1, r3, r2
    810a:	9305      	str	r3, [sp, #20]
    810c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8110:	9302      	str	r3, [sp, #8]
    8112:	e59c      	b.n	7c4e <_svfprintf_r+0x1626>
    8114:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8116:	18d5      	adds	r5, r2, r3
    8118:	4429      	add	r1, r5
    811a:	2366      	movs	r3, #102	; 0x66
    811c:	9105      	str	r1, [sp, #20]
    811e:	930a      	str	r3, [sp, #40]	; 0x28
    8120:	e73b      	b.n	7f9a <_svfprintf_r+0x1972>
    8122:	9b03      	ldr	r3, [sp, #12]
    8124:	9302      	str	r3, [sp, #8]
    8126:	9305      	str	r3, [sp, #20]
    8128:	2373      	movs	r3, #115	; 0x73
    812a:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    812e:	9708      	str	r7, [sp, #32]
    8130:	9003      	str	r0, [sp, #12]
    8132:	900c      	str	r0, [sp, #48]	; 0x30
    8134:	9010      	str	r0, [sp, #64]	; 0x40
    8136:	930a      	str	r3, [sp, #40]	; 0x28
    8138:	f7fe bc69 	b.w	6a0e <_svfprintf_r+0x3e6>
    813c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    813e:	4c26      	ldr	r4, [pc, #152]	; (81d8 <_svfprintf_r+0x1bb0>)
    8140:	2b00      	cmp	r3, #0
    8142:	bfb4      	ite	lt
    8144:	222d      	movlt	r2, #45	; 0x2d
    8146:	f89d 206f 	ldrbge.w	r2, [sp, #111]	; 0x6f
    814a:	4b24      	ldr	r3, [pc, #144]	; (81dc <_svfprintf_r+0x1bb4>)
    814c:	bfb8      	it	lt
    814e:	f88d 206f 	strblt.w	r2, [sp, #111]	; 0x6f
    8152:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    8156:	f7fe bc4d 	b.w	69f4 <_svfprintf_r+0x3cc>
    815a:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    815e:	e754      	b.n	800a <_svfprintf_r+0x19e2>
    8160:	f1c3 0301 	rsb	r3, r3, #1
    8164:	441a      	add	r2, r3
    8166:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    816a:	9302      	str	r3, [sp, #8]
    816c:	2367      	movs	r3, #103	; 0x67
    816e:	9205      	str	r2, [sp, #20]
    8170:	930a      	str	r3, [sp, #40]	; 0x28
    8172:	e66e      	b.n	7e52 <_svfprintf_r+0x182a>
    8174:	ec51 0b18 	vmov	r0, r1, d8
    8178:	2200      	movs	r2, #0
    817a:	2300      	movs	r3, #0
    817c:	f7fc fc78 	bl	4a70 <__aeabi_dcmpeq>
    8180:	2800      	cmp	r0, #0
    8182:	f47f ace9 	bne.w	7b58 <_svfprintf_r+0x1530>
    8186:	f1c6 0601 	rsb	r6, r6, #1
    818a:	961d      	str	r6, [sp, #116]	; 0x74
    818c:	e4e5      	b.n	7b5a <_svfprintf_r+0x1532>
    818e:	2302      	movs	r3, #2
    8190:	9315      	str	r3, [sp, #84]	; 0x54
    8192:	e544      	b.n	7c1e <_svfprintf_r+0x15f6>
    8194:	9a08      	ldr	r2, [sp, #32]
    8196:	f898 3001 	ldrb.w	r3, [r8, #1]
    819a:	4688      	mov	r8, r1
    819c:	f852 1b04 	ldr.w	r1, [r2], #4
    81a0:	9208      	str	r2, [sp, #32]
    81a2:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    81a6:	9103      	str	r1, [sp, #12]
    81a8:	f7fe ba9a 	b.w	66e0 <_svfprintf_r+0xb8>
    81ac:	9a03      	ldr	r2, [sp, #12]
    81ae:	4313      	orrs	r3, r2
    81b0:	d105      	bne.n	81be <_svfprintf_r+0x1b96>
    81b2:	2301      	movs	r3, #1
    81b4:	2266      	movs	r2, #102	; 0x66
    81b6:	9302      	str	r3, [sp, #8]
    81b8:	920a      	str	r2, [sp, #40]	; 0x28
    81ba:	9305      	str	r3, [sp, #20]
    81bc:	e649      	b.n	7e52 <_svfprintf_r+0x182a>
    81be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    81c0:	1c5d      	adds	r5, r3, #1
    81c2:	442a      	add	r2, r5
    81c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    81c8:	9302      	str	r3, [sp, #8]
    81ca:	2366      	movs	r3, #102	; 0x66
    81cc:	9205      	str	r2, [sp, #20]
    81ce:	930a      	str	r3, [sp, #40]	; 0x28
    81d0:	e63f      	b.n	7e52 <_svfprintf_r+0x182a>
    81d2:	bf00      	nop
    81d4:	0000bbfc 	.word	0x0000bbfc
    81d8:	0000bbf4 	.word	0x0000bbf4
    81dc:	0000bbf8 	.word	0x0000bbf8
    81e0:	230c      	movs	r3, #12
    81e2:	f8ca 3000 	str.w	r3, [sl]
    81e6:	f04f 33ff 	mov.w	r3, #4294967295
    81ea:	9304      	str	r3, [sp, #16]
    81ec:	f7fe bb32 	b.w	6854 <_svfprintf_r+0x22c>
    81f0:	2300      	movs	r3, #0
    81f2:	930c      	str	r3, [sp, #48]	; 0x30
    81f4:	9310      	str	r3, [sp, #64]	; 0x40
    81f6:	e781      	b.n	80fc <_svfprintf_r+0x1ad4>
    81f8:	ee1a 2a10 	vmov	r2, s20
    81fc:	8993      	ldrh	r3, [r2, #12]
    81fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8202:	8193      	strh	r3, [r2, #12]
    8204:	f7fe be8b 	b.w	6f1e <_svfprintf_r+0x8f6>

00008208 <_fclose_r>:
    8208:	b570      	push	{r4, r5, r6, lr}
    820a:	2900      	cmp	r1, #0
    820c:	d04b      	beq.n	82a6 <_fclose_r+0x9e>
    820e:	4606      	mov	r6, r0
    8210:	460c      	mov	r4, r1
    8212:	b110      	cbz	r0, 821a <_fclose_r+0x12>
    8214:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8216:	2b00      	cmp	r3, #0
    8218:	d048      	beq.n	82ac <_fclose_r+0xa4>
    821a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    821c:	07d8      	lsls	r0, r3, #31
    821e:	d534      	bpl.n	828a <_fclose_r+0x82>
    8220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8224:	2b00      	cmp	r3, #0
    8226:	d03e      	beq.n	82a6 <_fclose_r+0x9e>
    8228:	4621      	mov	r1, r4
    822a:	4630      	mov	r0, r6
    822c:	f000 f850 	bl	82d0 <__sflush_r>
    8230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8232:	4605      	mov	r5, r0
    8234:	b133      	cbz	r3, 8244 <_fclose_r+0x3c>
    8236:	69e1      	ldr	r1, [r4, #28]
    8238:	4630      	mov	r0, r6
    823a:	4798      	blx	r3
    823c:	2800      	cmp	r0, #0
    823e:	bfb8      	it	lt
    8240:	f04f 35ff 	movlt.w	r5, #4294967295
    8244:	89a3      	ldrh	r3, [r4, #12]
    8246:	061a      	lsls	r2, r3, #24
    8248:	d43c      	bmi.n	82c4 <_fclose_r+0xbc>
    824a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    824c:	b141      	cbz	r1, 8260 <_fclose_r+0x58>
    824e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8252:	4299      	cmp	r1, r3
    8254:	d002      	beq.n	825c <_fclose_r+0x54>
    8256:	4630      	mov	r0, r6
    8258:	f7fd fd00 	bl	5c5c <_free_r>
    825c:	2300      	movs	r3, #0
    825e:	6323      	str	r3, [r4, #48]	; 0x30
    8260:	6c61      	ldr	r1, [r4, #68]	; 0x44
    8262:	b121      	cbz	r1, 826e <_fclose_r+0x66>
    8264:	4630      	mov	r0, r6
    8266:	f7fd fcf9 	bl	5c5c <_free_r>
    826a:	2300      	movs	r3, #0
    826c:	6463      	str	r3, [r4, #68]	; 0x44
    826e:	f7fd f9a3 	bl	55b8 <__sfp_lock_acquire>
    8272:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8274:	2200      	movs	r2, #0
    8276:	07db      	lsls	r3, r3, #31
    8278:	81a2      	strh	r2, [r4, #12]
    827a:	d51f      	bpl.n	82bc <_fclose_r+0xb4>
    827c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    827e:	f7fd fc0f 	bl	5aa0 <__retarget_lock_close_recursive>
    8282:	f7fd f99f 	bl	55c4 <__sfp_lock_release>
    8286:	4628      	mov	r0, r5
    8288:	bd70      	pop	{r4, r5, r6, pc}
    828a:	89a3      	ldrh	r3, [r4, #12]
    828c:	0599      	lsls	r1, r3, #22
    828e:	d4cb      	bmi.n	8228 <_fclose_r+0x20>
    8290:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8292:	f7fd fc07 	bl	5aa4 <__retarget_lock_acquire_recursive>
    8296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    829a:	2b00      	cmp	r3, #0
    829c:	d1c4      	bne.n	8228 <_fclose_r+0x20>
    829e:	6e65      	ldr	r5, [r4, #100]	; 0x64
    82a0:	f015 0501 	ands.w	r5, r5, #1
    82a4:	d005      	beq.n	82b2 <_fclose_r+0xaa>
    82a6:	2500      	movs	r5, #0
    82a8:	4628      	mov	r0, r5
    82aa:	bd70      	pop	{r4, r5, r6, pc}
    82ac:	f7fd f966 	bl	557c <__sinit>
    82b0:	e7b3      	b.n	821a <_fclose_r+0x12>
    82b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    82b4:	f7fd fbf8 	bl	5aa8 <__retarget_lock_release_recursive>
    82b8:	4628      	mov	r0, r5
    82ba:	bd70      	pop	{r4, r5, r6, pc}
    82bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    82be:	f7fd fbf3 	bl	5aa8 <__retarget_lock_release_recursive>
    82c2:	e7db      	b.n	827c <_fclose_r+0x74>
    82c4:	6921      	ldr	r1, [r4, #16]
    82c6:	4630      	mov	r0, r6
    82c8:	f7fd fcc8 	bl	5c5c <_free_r>
    82cc:	e7bd      	b.n	824a <_fclose_r+0x42>
    82ce:	bf00      	nop

000082d0 <__sflush_r>:
    82d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    82d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82d8:	460c      	mov	r4, r1
    82da:	0711      	lsls	r1, r2, #28
    82dc:	4680      	mov	r8, r0
    82de:	d447      	bmi.n	8370 <__sflush_r+0xa0>
    82e0:	6863      	ldr	r3, [r4, #4]
    82e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    82e6:	2b00      	cmp	r3, #0
    82e8:	81a2      	strh	r2, [r4, #12]
    82ea:	dd5e      	ble.n	83aa <__sflush_r+0xda>
    82ec:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    82ee:	2d00      	cmp	r5, #0
    82f0:	d058      	beq.n	83a4 <__sflush_r+0xd4>
    82f2:	2300      	movs	r3, #0
    82f4:	f8d8 6000 	ldr.w	r6, [r8]
    82f8:	f8c8 3000 	str.w	r3, [r8]
    82fc:	b293      	uxth	r3, r2
    82fe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    8302:	d156      	bne.n	83b2 <__sflush_r+0xe2>
    8304:	2301      	movs	r3, #1
    8306:	69e1      	ldr	r1, [r4, #28]
    8308:	4640      	mov	r0, r8
    830a:	47a8      	blx	r5
    830c:	1c43      	adds	r3, r0, #1
    830e:	d067      	beq.n	83e0 <__sflush_r+0x110>
    8310:	89a3      	ldrh	r3, [r4, #12]
    8312:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    8314:	075f      	lsls	r7, r3, #29
    8316:	d505      	bpl.n	8324 <__sflush_r+0x54>
    8318:	6863      	ldr	r3, [r4, #4]
    831a:	1ac0      	subs	r0, r0, r3
    831c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    831e:	b10b      	cbz	r3, 8324 <__sflush_r+0x54>
    8320:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8322:	1ac0      	subs	r0, r0, r3
    8324:	69e1      	ldr	r1, [r4, #28]
    8326:	4602      	mov	r2, r0
    8328:	2300      	movs	r3, #0
    832a:	4640      	mov	r0, r8
    832c:	47a8      	blx	r5
    832e:	1c41      	adds	r1, r0, #1
    8330:	d141      	bne.n	83b6 <__sflush_r+0xe6>
    8332:	f8d8 3000 	ldr.w	r3, [r8]
    8336:	2b00      	cmp	r3, #0
    8338:	d03d      	beq.n	83b6 <__sflush_r+0xe6>
    833a:	2b1d      	cmp	r3, #29
    833c:	d001      	beq.n	8342 <__sflush_r+0x72>
    833e:	2b16      	cmp	r3, #22
    8340:	d156      	bne.n	83f0 <__sflush_r+0x120>
    8342:	89a3      	ldrh	r3, [r4, #12]
    8344:	6922      	ldr	r2, [r4, #16]
    8346:	6022      	str	r2, [r4, #0]
    8348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    834c:	2100      	movs	r1, #0
    834e:	6061      	str	r1, [r4, #4]
    8350:	81a3      	strh	r3, [r4, #12]
    8352:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8354:	f8c8 6000 	str.w	r6, [r8]
    8358:	b321      	cbz	r1, 83a4 <__sflush_r+0xd4>
    835a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    835e:	4299      	cmp	r1, r3
    8360:	d002      	beq.n	8368 <__sflush_r+0x98>
    8362:	4640      	mov	r0, r8
    8364:	f7fd fc7a 	bl	5c5c <_free_r>
    8368:	2000      	movs	r0, #0
    836a:	6320      	str	r0, [r4, #48]	; 0x30
    836c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8370:	6926      	ldr	r6, [r4, #16]
    8372:	b1be      	cbz	r6, 83a4 <__sflush_r+0xd4>
    8374:	b293      	uxth	r3, r2
    8376:	6825      	ldr	r5, [r4, #0]
    8378:	6026      	str	r6, [r4, #0]
    837a:	079a      	lsls	r2, r3, #30
    837c:	bf0c      	ite	eq
    837e:	6963      	ldreq	r3, [r4, #20]
    8380:	2300      	movne	r3, #0
    8382:	1bad      	subs	r5, r5, r6
    8384:	60a3      	str	r3, [r4, #8]
    8386:	e00b      	b.n	83a0 <__sflush_r+0xd0>
    8388:	462b      	mov	r3, r5
    838a:	4632      	mov	r2, r6
    838c:	69e1      	ldr	r1, [r4, #28]
    838e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    8390:	4640      	mov	r0, r8
    8392:	47b8      	blx	r7
    8394:	f1b0 0c00 	subs.w	ip, r0, #0
    8398:	eba5 050c 	sub.w	r5, r5, ip
    839c:	4466      	add	r6, ip
    839e:	dd17      	ble.n	83d0 <__sflush_r+0x100>
    83a0:	2d00      	cmp	r5, #0
    83a2:	dcf1      	bgt.n	8388 <__sflush_r+0xb8>
    83a4:	2000      	movs	r0, #0
    83a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    83ac:	2b00      	cmp	r3, #0
    83ae:	dc9d      	bgt.n	82ec <__sflush_r+0x1c>
    83b0:	e7f8      	b.n	83a4 <__sflush_r+0xd4>
    83b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    83b4:	e7ae      	b.n	8314 <__sflush_r+0x44>
    83b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    83ba:	6922      	ldr	r2, [r4, #16]
    83bc:	6022      	str	r2, [r4, #0]
    83be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    83c2:	81a3      	strh	r3, [r4, #12]
    83c4:	2200      	movs	r2, #0
    83c6:	04db      	lsls	r3, r3, #19
    83c8:	6062      	str	r2, [r4, #4]
    83ca:	d5c2      	bpl.n	8352 <__sflush_r+0x82>
    83cc:	6520      	str	r0, [r4, #80]	; 0x50
    83ce:	e7c0      	b.n	8352 <__sflush_r+0x82>
    83d0:	89a3      	ldrh	r3, [r4, #12]
    83d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    83d6:	f04f 30ff 	mov.w	r0, #4294967295
    83da:	81a3      	strh	r3, [r4, #12]
    83dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83e0:	f8d8 3000 	ldr.w	r3, [r8]
    83e4:	2b00      	cmp	r3, #0
    83e6:	d093      	beq.n	8310 <__sflush_r+0x40>
    83e8:	2b1d      	cmp	r3, #29
    83ea:	d006      	beq.n	83fa <__sflush_r+0x12a>
    83ec:	2b16      	cmp	r3, #22
    83ee:	d004      	beq.n	83fa <__sflush_r+0x12a>
    83f0:	89a3      	ldrh	r3, [r4, #12]
    83f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    83f6:	81a3      	strh	r3, [r4, #12]
    83f8:	e7d5      	b.n	83a6 <__sflush_r+0xd6>
    83fa:	f8c8 6000 	str.w	r6, [r8]
    83fe:	e7d1      	b.n	83a4 <__sflush_r+0xd4>

00008400 <_fflush_r>:
    8400:	b538      	push	{r3, r4, r5, lr}
    8402:	460c      	mov	r4, r1
    8404:	4605      	mov	r5, r0
    8406:	b108      	cbz	r0, 840c <_fflush_r+0xc>
    8408:	6b43      	ldr	r3, [r0, #52]	; 0x34
    840a:	b303      	cbz	r3, 844e <_fflush_r+0x4e>
    840c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    8410:	b188      	cbz	r0, 8436 <_fflush_r+0x36>
    8412:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8414:	07db      	lsls	r3, r3, #31
    8416:	d401      	bmi.n	841c <_fflush_r+0x1c>
    8418:	0581      	lsls	r1, r0, #22
    841a:	d50f      	bpl.n	843c <_fflush_r+0x3c>
    841c:	4628      	mov	r0, r5
    841e:	4621      	mov	r1, r4
    8420:	f7ff ff56 	bl	82d0 <__sflush_r>
    8424:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8426:	07da      	lsls	r2, r3, #31
    8428:	4605      	mov	r5, r0
    842a:	d402      	bmi.n	8432 <_fflush_r+0x32>
    842c:	89a3      	ldrh	r3, [r4, #12]
    842e:	059b      	lsls	r3, r3, #22
    8430:	d508      	bpl.n	8444 <_fflush_r+0x44>
    8432:	4628      	mov	r0, r5
    8434:	bd38      	pop	{r3, r4, r5, pc}
    8436:	4605      	mov	r5, r0
    8438:	4628      	mov	r0, r5
    843a:	bd38      	pop	{r3, r4, r5, pc}
    843c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    843e:	f7fd fb31 	bl	5aa4 <__retarget_lock_acquire_recursive>
    8442:	e7eb      	b.n	841c <_fflush_r+0x1c>
    8444:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8446:	f7fd fb2f 	bl	5aa8 <__retarget_lock_release_recursive>
    844a:	4628      	mov	r0, r5
    844c:	bd38      	pop	{r3, r4, r5, pc}
    844e:	f7fd f895 	bl	557c <__sinit>
    8452:	e7db      	b.n	840c <_fflush_r+0xc>

00008454 <_localeconv_r>:
    8454:	4800      	ldr	r0, [pc, #0]	; (8458 <_localeconv_r+0x4>)
    8456:	4770      	bx	lr
    8458:	1fff0d20 	.word	0x1fff0d20

0000845c <__libc_fini_array>:
    845c:	b538      	push	{r3, r4, r5, lr}
    845e:	4d07      	ldr	r5, [pc, #28]	; (847c <__libc_fini_array+0x20>)
    8460:	4c07      	ldr	r4, [pc, #28]	; (8480 <__libc_fini_array+0x24>)
    8462:	1b2c      	subs	r4, r5, r4
    8464:	10a4      	asrs	r4, r4, #2
    8466:	d005      	beq.n	8474 <__libc_fini_array+0x18>
    8468:	3c01      	subs	r4, #1
    846a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    846e:	4798      	blx	r3
    8470:	2c00      	cmp	r4, #0
    8472:	d1f9      	bne.n	8468 <__libc_fini_array+0xc>
    8474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8478:	f003 bc5c 	b.w	bd34 <__init_array_end>
	...
    8484:	ffffffff 	.word	0xffffffff
    8488:	ffffffff 	.word	0xffffffff
    848c:	ffffffff 	.word	0xffffffff

00008490 <memchr>:
    8490:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8494:	2a10      	cmp	r2, #16
    8496:	db2b      	blt.n	84f0 <memchr+0x60>
    8498:	f010 0f07 	tst.w	r0, #7
    849c:	d008      	beq.n	84b0 <memchr+0x20>
    849e:	f810 3b01 	ldrb.w	r3, [r0], #1
    84a2:	3a01      	subs	r2, #1
    84a4:	428b      	cmp	r3, r1
    84a6:	d02d      	beq.n	8504 <memchr+0x74>
    84a8:	f010 0f07 	tst.w	r0, #7
    84ac:	b342      	cbz	r2, 8500 <memchr+0x70>
    84ae:	d1f6      	bne.n	849e <memchr+0xe>
    84b0:	b4f0      	push	{r4, r5, r6, r7}
    84b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    84b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    84ba:	f022 0407 	bic.w	r4, r2, #7
    84be:	f07f 0700 	mvns.w	r7, #0
    84c2:	2300      	movs	r3, #0
    84c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    84c8:	3c08      	subs	r4, #8
    84ca:	ea85 0501 	eor.w	r5, r5, r1
    84ce:	ea86 0601 	eor.w	r6, r6, r1
    84d2:	fa85 f547 	uadd8	r5, r5, r7
    84d6:	faa3 f587 	sel	r5, r3, r7
    84da:	fa86 f647 	uadd8	r6, r6, r7
    84de:	faa5 f687 	sel	r6, r5, r7
    84e2:	b98e      	cbnz	r6, 8508 <memchr+0x78>
    84e4:	d1ee      	bne.n	84c4 <memchr+0x34>
    84e6:	bcf0      	pop	{r4, r5, r6, r7}
    84e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    84ec:	f002 0207 	and.w	r2, r2, #7
    84f0:	b132      	cbz	r2, 8500 <memchr+0x70>
    84f2:	f810 3b01 	ldrb.w	r3, [r0], #1
    84f6:	3a01      	subs	r2, #1
    84f8:	ea83 0301 	eor.w	r3, r3, r1
    84fc:	b113      	cbz	r3, 8504 <memchr+0x74>
    84fe:	d1f8      	bne.n	84f2 <memchr+0x62>
    8500:	2000      	movs	r0, #0
    8502:	4770      	bx	lr
    8504:	3801      	subs	r0, #1
    8506:	4770      	bx	lr
    8508:	2d00      	cmp	r5, #0
    850a:	bf06      	itte	eq
    850c:	4635      	moveq	r5, r6
    850e:	3803      	subeq	r0, #3
    8510:	3807      	subne	r0, #7
    8512:	f015 0f01 	tst.w	r5, #1
    8516:	d107      	bne.n	8528 <memchr+0x98>
    8518:	3001      	adds	r0, #1
    851a:	f415 7f80 	tst.w	r5, #256	; 0x100
    851e:	bf02      	ittt	eq
    8520:	3001      	addeq	r0, #1
    8522:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    8526:	3001      	addeq	r0, #1
    8528:	bcf0      	pop	{r4, r5, r6, r7}
    852a:	3801      	subs	r0, #1
    852c:	4770      	bx	lr
    852e:	bf00      	nop

00008530 <frexp>:
    8530:	ec53 2b10 	vmov	r2, r3, d0
    8534:	b570      	push	{r4, r5, r6, lr}
    8536:	4e16      	ldr	r6, [pc, #88]	; (8590 <frexp+0x60>)
    8538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    853c:	2500      	movs	r5, #0
    853e:	42b1      	cmp	r1, r6
    8540:	4604      	mov	r4, r0
    8542:	6005      	str	r5, [r0, #0]
    8544:	dc21      	bgt.n	858a <frexp+0x5a>
    8546:	ee10 6a10 	vmov	r6, s0
    854a:	430e      	orrs	r6, r1
    854c:	d01d      	beq.n	858a <frexp+0x5a>
    854e:	4e11      	ldr	r6, [pc, #68]	; (8594 <frexp+0x64>)
    8550:	401e      	ands	r6, r3
    8552:	4618      	mov	r0, r3
    8554:	b966      	cbnz	r6, 8570 <frexp+0x40>
    8556:	4619      	mov	r1, r3
    8558:	2200      	movs	r2, #0
    855a:	ee10 0a10 	vmov	r0, s0
    855e:	4b0e      	ldr	r3, [pc, #56]	; (8598 <frexp+0x68>)
    8560:	f002 fde4 	bl	b12c <__aeabi_dmul>
    8564:	f06f 0535 	mvn.w	r5, #53	; 0x35
    8568:	4602      	mov	r2, r0
    856a:	4608      	mov	r0, r1
    856c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8570:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
    8574:	1509      	asrs	r1, r1, #20
    8576:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
    857a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
    857e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    8582:	4429      	add	r1, r5
    8584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    8588:	6021      	str	r1, [r4, #0]
    858a:	ec43 2b10 	vmov	d0, r2, r3
    858e:	bd70      	pop	{r4, r5, r6, pc}
    8590:	7fefffff 	.word	0x7fefffff
    8594:	7ff00000 	.word	0x7ff00000
    8598:	43500000 	.word	0x43500000

0000859c <__register_exitproc>:
    859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85a0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8620 <__register_exitproc+0x84>
    85a4:	4606      	mov	r6, r0
    85a6:	f8da 0000 	ldr.w	r0, [sl]
    85aa:	4698      	mov	r8, r3
    85ac:	460f      	mov	r7, r1
    85ae:	4691      	mov	r9, r2
    85b0:	f7fd fa78 	bl	5aa4 <__retarget_lock_acquire_recursive>
    85b4:	4b18      	ldr	r3, [pc, #96]	; (8618 <__register_exitproc+0x7c>)
    85b6:	681c      	ldr	r4, [r3, #0]
    85b8:	b324      	cbz	r4, 8604 <__register_exitproc+0x68>
    85ba:	6865      	ldr	r5, [r4, #4]
    85bc:	2d1f      	cmp	r5, #31
    85be:	dc24      	bgt.n	860a <__register_exitproc+0x6e>
    85c0:	b95e      	cbnz	r6, 85da <__register_exitproc+0x3e>
    85c2:	1c6b      	adds	r3, r5, #1
    85c4:	3502      	adds	r5, #2
    85c6:	f8da 0000 	ldr.w	r0, [sl]
    85ca:	6063      	str	r3, [r4, #4]
    85cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    85d0:	f7fd fa6a 	bl	5aa8 <__retarget_lock_release_recursive>
    85d4:	2000      	movs	r0, #0
    85d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    85de:	2301      	movs	r3, #1
    85e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    85e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    85e8:	40ab      	lsls	r3, r5
    85ea:	431a      	orrs	r2, r3
    85ec:	2e02      	cmp	r6, #2
    85ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    85f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    85f6:	d1e4      	bne.n	85c2 <__register_exitproc+0x26>
    85f8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    85fc:	431a      	orrs	r2, r3
    85fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    8602:	e7de      	b.n	85c2 <__register_exitproc+0x26>
    8604:	4c05      	ldr	r4, [pc, #20]	; (861c <__register_exitproc+0x80>)
    8606:	601c      	str	r4, [r3, #0]
    8608:	e7d7      	b.n	85ba <__register_exitproc+0x1e>
    860a:	f8da 0000 	ldr.w	r0, [sl]
    860e:	f7fd fa4b 	bl	5aa8 <__retarget_lock_release_recursive>
    8612:	f04f 30ff 	mov.w	r0, #4294967295
    8616:	e7de      	b.n	85d6 <__register_exitproc+0x3a>
    8618:	1fff63ec 	.word	0x1fff63ec
    861c:	1fff63f0 	.word	0x1fff63f0
    8620:	1fff0ec4 	.word	0x1fff0ec4

00008624 <__assert_func>:
    8624:	b500      	push	{lr}
    8626:	4c0b      	ldr	r4, [pc, #44]	; (8654 <__assert_func+0x30>)
    8628:	6825      	ldr	r5, [r4, #0]
    862a:	4614      	mov	r4, r2
    862c:	68ee      	ldr	r6, [r5, #12]
    862e:	461a      	mov	r2, r3
    8630:	b085      	sub	sp, #20
    8632:	4603      	mov	r3, r0
    8634:	460d      	mov	r5, r1
    8636:	b14c      	cbz	r4, 864c <__assert_func+0x28>
    8638:	4907      	ldr	r1, [pc, #28]	; (8658 <__assert_func+0x34>)
    863a:	9500      	str	r5, [sp, #0]
    863c:	e9cd 1401 	strd	r1, r4, [sp, #4]
    8640:	4630      	mov	r0, r6
    8642:	4906      	ldr	r1, [pc, #24]	; (865c <__assert_func+0x38>)
    8644:	f001 f8b0 	bl	97a8 <fiprintf>
    8648:	f7fa fe76 	bl	3338 <abort>
    864c:	4904      	ldr	r1, [pc, #16]	; (8660 <__assert_func+0x3c>)
    864e:	460c      	mov	r4, r1
    8650:	e7f3      	b.n	863a <__assert_func+0x16>
    8652:	bf00      	nop
    8654:	1fff0ec0 	.word	0x1fff0ec0
    8658:	0000bc50 	.word	0x0000bc50
    865c:	0000bc60 	.word	0x0000bc60
    8660:	0000bc5c 	.word	0x0000bc5c

00008664 <_calloc_r>:
    8664:	b538      	push	{r3, r4, r5, lr}
    8666:	fba1 1402 	umull	r1, r4, r1, r2
    866a:	bb8c      	cbnz	r4, 86d0 <_calloc_r+0x6c>
    866c:	f7fc fa48 	bl	4b00 <_malloc_r>
    8670:	4605      	mov	r5, r0
    8672:	b1e0      	cbz	r0, 86ae <_calloc_r+0x4a>
    8674:	f850 2c04 	ldr.w	r2, [r0, #-4]
    8678:	f022 0203 	bic.w	r2, r2, #3
    867c:	3a04      	subs	r2, #4
    867e:	2a24      	cmp	r2, #36	; 0x24
    8680:	d817      	bhi.n	86b2 <_calloc_r+0x4e>
    8682:	2a13      	cmp	r2, #19
    8684:	d91a      	bls.n	86bc <_calloc_r+0x58>
    8686:	2a1b      	cmp	r2, #27
    8688:	e9c0 4400 	strd	r4, r4, [r0]
    868c:	d91d      	bls.n	86ca <_calloc_r+0x66>
    868e:	2a24      	cmp	r2, #36	; 0x24
    8690:	bf14      	ite	ne
    8692:	f100 0210 	addne.w	r2, r0, #16
    8696:	f100 0218 	addeq.w	r2, r0, #24
    869a:	f04f 0300 	mov.w	r3, #0
    869e:	e9c0 4402 	strd	r4, r4, [r0, #8]
    86a2:	bf04      	itt	eq
    86a4:	6104      	streq	r4, [r0, #16]
    86a6:	6144      	streq	r4, [r0, #20]
    86a8:	e9c2 3300 	strd	r3, r3, [r2]
    86ac:	6093      	str	r3, [r2, #8]
    86ae:	4628      	mov	r0, r5
    86b0:	bd38      	pop	{r3, r4, r5, pc}
    86b2:	4621      	mov	r1, r4
    86b4:	f7fd f8d8 	bl	5868 <memset>
    86b8:	4628      	mov	r0, r5
    86ba:	bd38      	pop	{r3, r4, r5, pc}
    86bc:	4602      	mov	r2, r0
    86be:	2300      	movs	r3, #0
    86c0:	e9c2 3300 	strd	r3, r3, [r2]
    86c4:	6093      	str	r3, [r2, #8]
    86c6:	4628      	mov	r0, r5
    86c8:	bd38      	pop	{r3, r4, r5, pc}
    86ca:	f100 0208 	add.w	r2, r0, #8
    86ce:	e7f6      	b.n	86be <_calloc_r+0x5a>
    86d0:	f7fd f9ba 	bl	5a48 <__errno>
    86d4:	230c      	movs	r3, #12
    86d6:	2500      	movs	r5, #0
    86d8:	6003      	str	r3, [r0, #0]
    86da:	e7e8      	b.n	86ae <_calloc_r+0x4a>

000086dc <quorem>:
    86dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86e0:	6903      	ldr	r3, [r0, #16]
    86e2:	690c      	ldr	r4, [r1, #16]
    86e4:	42a3      	cmp	r3, r4
    86e6:	b083      	sub	sp, #12
    86e8:	f2c0 8087 	blt.w	87fa <quorem+0x11e>
    86ec:	3c01      	subs	r4, #1
    86ee:	f101 0514 	add.w	r5, r1, #20
    86f2:	00a3      	lsls	r3, r4, #2
    86f4:	f100 0814 	add.w	r8, r0, #20
    86f8:	9300      	str	r3, [sp, #0]
    86fa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    86fe:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    8702:	3301      	adds	r3, #1
    8704:	4681      	mov	r9, r0
    8706:	429a      	cmp	r2, r3
    8708:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    870c:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    8710:	9001      	str	r0, [sp, #4]
    8712:	fbb2 f6f3 	udiv	r6, r2, r3
    8716:	d33b      	bcc.n	8790 <quorem+0xb4>
    8718:	f04f 0c00 	mov.w	ip, #0
    871c:	46ae      	mov	lr, r5
    871e:	4640      	mov	r0, r8
    8720:	46e2      	mov	sl, ip
    8722:	4663      	mov	r3, ip
    8724:	f85e bb04 	ldr.w	fp, [lr], #4
    8728:	6802      	ldr	r2, [r0, #0]
    872a:	fa1f fc8b 	uxth.w	ip, fp
    872e:	fb06 330c 	mla	r3, r6, ip, r3
    8732:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    8736:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    873a:	fb06 cc0b 	mla	ip, r6, fp, ip
    873e:	b29b      	uxth	r3, r3
    8740:	ebaa 0303 	sub.w	r3, sl, r3
    8744:	fa1f fa8c 	uxth.w	sl, ip
    8748:	fa13 f382 	uxtah	r3, r3, r2
    874c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    8750:	eb02 4223 	add.w	r2, r2, r3, asr #16
    8754:	b29b      	uxth	r3, r3
    8756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    875a:	4577      	cmp	r7, lr
    875c:	f840 3b04 	str.w	r3, [r0], #4
    8760:	ea4f 4a22 	mov.w	sl, r2, asr #16
    8764:	ea4f 431c 	mov.w	r3, ip, lsr #16
    8768:	d2dc      	bcs.n	8724 <quorem+0x48>
    876a:	9b00      	ldr	r3, [sp, #0]
    876c:	f858 3003 	ldr.w	r3, [r8, r3]
    8770:	b973      	cbnz	r3, 8790 <quorem+0xb4>
    8772:	9b01      	ldr	r3, [sp, #4]
    8774:	3b04      	subs	r3, #4
    8776:	4598      	cmp	r8, r3
    8778:	d304      	bcc.n	8784 <quorem+0xa8>
    877a:	e007      	b.n	878c <quorem+0xb0>
    877c:	4598      	cmp	r8, r3
    877e:	f104 34ff 	add.w	r4, r4, #4294967295
    8782:	d203      	bcs.n	878c <quorem+0xb0>
    8784:	f853 2904 	ldr.w	r2, [r3], #-4
    8788:	2a00      	cmp	r2, #0
    878a:	d0f7      	beq.n	877c <quorem+0xa0>
    878c:	f8c9 4010 	str.w	r4, [r9, #16]
    8790:	4648      	mov	r0, r9
    8792:	f7fd fe05 	bl	63a0 <__mcmp>
    8796:	2800      	cmp	r0, #0
    8798:	db2b      	blt.n	87f2 <quorem+0x116>
    879a:	3601      	adds	r6, #1
    879c:	4641      	mov	r1, r8
    879e:	2300      	movs	r3, #0
    87a0:	f855 0b04 	ldr.w	r0, [r5], #4
    87a4:	f8d1 c000 	ldr.w	ip, [r1]
    87a8:	b282      	uxth	r2, r0
    87aa:	1a9a      	subs	r2, r3, r2
    87ac:	0c03      	lsrs	r3, r0, #16
    87ae:	fa12 f28c 	uxtah	r2, r2, ip
    87b2:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    87b6:	eb03 4322 	add.w	r3, r3, r2, asr #16
    87ba:	b292      	uxth	r2, r2
    87bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    87c0:	42af      	cmp	r7, r5
    87c2:	f841 2b04 	str.w	r2, [r1], #4
    87c6:	ea4f 4323 	mov.w	r3, r3, asr #16
    87ca:	d2e9      	bcs.n	87a0 <quorem+0xc4>
    87cc:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    87d0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    87d4:	b96a      	cbnz	r2, 87f2 <quorem+0x116>
    87d6:	3b04      	subs	r3, #4
    87d8:	4598      	cmp	r8, r3
    87da:	d304      	bcc.n	87e6 <quorem+0x10a>
    87dc:	e007      	b.n	87ee <quorem+0x112>
    87de:	4598      	cmp	r8, r3
    87e0:	f104 34ff 	add.w	r4, r4, #4294967295
    87e4:	d203      	bcs.n	87ee <quorem+0x112>
    87e6:	f853 2904 	ldr.w	r2, [r3], #-4
    87ea:	2a00      	cmp	r2, #0
    87ec:	d0f7      	beq.n	87de <quorem+0x102>
    87ee:	f8c9 4010 	str.w	r4, [r9, #16]
    87f2:	4630      	mov	r0, r6
    87f4:	b003      	add	sp, #12
    87f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87fa:	2000      	movs	r0, #0
    87fc:	b003      	add	sp, #12
    87fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8802:	bf00      	nop
    8804:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00008808 <_dtoa_r>:
    8808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    880c:	ed2d 8b06 	vpush	{d8-d10}
    8810:	b095      	sub	sp, #84	; 0x54
    8812:	ed8d 0b02 	vstr	d0, [sp, #8]
    8816:	9101      	str	r1, [sp, #4]
    8818:	6b81      	ldr	r1, [r0, #56]	; 0x38
    881a:	9d24      	ldr	r5, [sp, #144]	; 0x90
    881c:	9209      	str	r2, [sp, #36]	; 0x24
    881e:	ec59 8b10 	vmov	r8, r9, d0
    8822:	4604      	mov	r4, r0
    8824:	9306      	str	r3, [sp, #24]
    8826:	b141      	cbz	r1, 883a <_dtoa_r+0x32>
    8828:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    882a:	604a      	str	r2, [r1, #4]
    882c:	2301      	movs	r3, #1
    882e:	4093      	lsls	r3, r2
    8830:	608b      	str	r3, [r1, #8]
    8832:	f7fd fb55 	bl	5ee0 <_Bfree>
    8836:	2300      	movs	r3, #0
    8838:	63a3      	str	r3, [r4, #56]	; 0x38
    883a:	f1b9 0a00 	subs.w	sl, r9, #0
    883e:	bfb4      	ite	lt
    8840:	2301      	movlt	r3, #1
    8842:	2300      	movge	r3, #0
    8844:	602b      	str	r3, [r5, #0]
    8846:	4b7c      	ldr	r3, [pc, #496]	; (8a38 <_dtoa_r+0x230>)
    8848:	bfbc      	itt	lt
    884a:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
    884e:	f8cd a00c 	strlt.w	sl, [sp, #12]
    8852:	ea33 030a 	bics.w	r3, r3, sl
    8856:	f000 80b3 	beq.w	89c0 <_dtoa_r+0x1b8>
    885a:	ed9d 7b02 	vldr	d7, [sp, #8]
    885e:	2200      	movs	r2, #0
    8860:	ec51 0b17 	vmov	r0, r1, d7
    8864:	eeb0 9a47 	vmov.f32	s18, s14
    8868:	eef0 9a67 	vmov.f32	s19, s15
    886c:	2300      	movs	r3, #0
    886e:	f7fc f8ff 	bl	4a70 <__aeabi_dcmpeq>
    8872:	4607      	mov	r7, r0
    8874:	b188      	cbz	r0, 889a <_dtoa_r+0x92>
    8876:	9a06      	ldr	r2, [sp, #24]
    8878:	2301      	movs	r3, #1
    887a:	6013      	str	r3, [r2, #0]
    887c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    887e:	2b00      	cmp	r3, #0
    8880:	f000 83ce 	beq.w	9020 <_dtoa_r+0x818>
    8884:	4b6d      	ldr	r3, [pc, #436]	; (8a3c <_dtoa_r+0x234>)
    8886:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8888:	6013      	str	r3, [r2, #0]
    888a:	3b01      	subs	r3, #1
    888c:	9300      	str	r3, [sp, #0]
    888e:	9800      	ldr	r0, [sp, #0]
    8890:	b015      	add	sp, #84	; 0x54
    8892:	ecbd 8b06 	vpop	{d8-d10}
    8896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    889a:	aa12      	add	r2, sp, #72	; 0x48
    889c:	a913      	add	r1, sp, #76	; 0x4c
    889e:	4620      	mov	r0, r4
    88a0:	eeb0 0a49 	vmov.f32	s0, s18
    88a4:	eef0 0a69 	vmov.f32	s1, s19
    88a8:	f7fd fe46 	bl	6538 <__d2b>
    88ac:	eeb0 8a49 	vmov.f32	s16, s18
    88b0:	eef0 8a69 	vmov.f32	s17, s19
    88b4:	ea5f 561a 	movs.w	r6, sl, lsr #20
    88b8:	4605      	mov	r5, r0
    88ba:	f040 8099 	bne.w	89f0 <_dtoa_r+0x1e8>
    88be:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
    88c2:	443e      	add	r6, r7
    88c4:	f206 4332 	addw	r3, r6, #1074	; 0x432
    88c8:	2b20      	cmp	r3, #32
    88ca:	f340 83c2 	ble.w	9052 <_dtoa_r+0x84a>
    88ce:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    88d2:	fa0a fa03 	lsl.w	sl, sl, r3
    88d6:	f206 4312 	addw	r3, r6, #1042	; 0x412
    88da:	fa28 f003 	lsr.w	r0, r8, r3
    88de:	ea4a 0000 	orr.w	r0, sl, r0
    88e2:	f7fb fff5 	bl	48d0 <__aeabi_ui2d>
    88e6:	2301      	movs	r3, #1
    88e8:	3e01      	subs	r6, #1
    88ea:	930d      	str	r3, [sp, #52]	; 0x34
    88ec:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    88f0:	4b53      	ldr	r3, [pc, #332]	; (8a40 <_dtoa_r+0x238>)
    88f2:	2200      	movs	r2, #0
    88f4:	f7fb feae 	bl	4654 <__aeabi_dsub>
    88f8:	a349      	add	r3, pc, #292	; (adr r3, 8a20 <_dtoa_r+0x218>)
    88fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    88fe:	f002 fc15 	bl	b12c <__aeabi_dmul>
    8902:	a349      	add	r3, pc, #292	; (adr r3, 8a28 <_dtoa_r+0x220>)
    8904:	e9d3 2300 	ldrd	r2, r3, [r3]
    8908:	f7fb fea6 	bl	4658 <__adddf3>
    890c:	4680      	mov	r8, r0
    890e:	4630      	mov	r0, r6
    8910:	4689      	mov	r9, r1
    8912:	f7fb ffed 	bl	48f0 <__aeabi_i2d>
    8916:	a346      	add	r3, pc, #280	; (adr r3, 8a30 <_dtoa_r+0x228>)
    8918:	e9d3 2300 	ldrd	r2, r3, [r3]
    891c:	f002 fc06 	bl	b12c <__aeabi_dmul>
    8920:	4602      	mov	r2, r0
    8922:	460b      	mov	r3, r1
    8924:	4640      	mov	r0, r8
    8926:	4649      	mov	r1, r9
    8928:	f7fb fe96 	bl	4658 <__adddf3>
    892c:	4680      	mov	r8, r0
    892e:	4689      	mov	r9, r1
    8930:	f002 fe0e 	bl	b550 <__aeabi_d2iz>
    8934:	2200      	movs	r2, #0
    8936:	4683      	mov	fp, r0
    8938:	2300      	movs	r3, #0
    893a:	4640      	mov	r0, r8
    893c:	4649      	mov	r1, r9
    893e:	f7fc f8a1 	bl	4a84 <__aeabi_dcmplt>
    8942:	2800      	cmp	r0, #0
    8944:	f040 835f 	bne.w	9006 <_dtoa_r+0x7fe>
    8948:	f1bb 0f16 	cmp.w	fp, #22
    894c:	f200 834e 	bhi.w	8fec <_dtoa_r+0x7e4>
    8950:	4b3c      	ldr	r3, [pc, #240]	; (8a44 <_dtoa_r+0x23c>)
    8952:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    8956:	e9d3 2300 	ldrd	r2, r3, [r3]
    895a:	ec51 0b19 	vmov	r0, r1, d9
    895e:	f7fc f891 	bl	4a84 <__aeabi_dcmplt>
    8962:	2800      	cmp	r0, #0
    8964:	d074      	beq.n	8a50 <_dtoa_r+0x248>
    8966:	2300      	movs	r3, #0
    8968:	1bbf      	subs	r7, r7, r6
    896a:	930c      	str	r3, [sp, #48]	; 0x30
    896c:	1e7b      	subs	r3, r7, #1
    896e:	f10b 3bff 	add.w	fp, fp, #4294967295
    8972:	9304      	str	r3, [sp, #16]
    8974:	f100 8341 	bmi.w	8ffa <_dtoa_r+0x7f2>
    8978:	2300      	movs	r3, #0
    897a:	9308      	str	r3, [sp, #32]
    897c:	f1bb 0f00 	cmp.w	fp, #0
    8980:	da6d      	bge.n	8a5e <_dtoa_r+0x256>
    8982:	9b08      	ldr	r3, [sp, #32]
    8984:	f8cd b014 	str.w	fp, [sp, #20]
    8988:	eba3 030b 	sub.w	r3, r3, fp
    898c:	9308      	str	r3, [sp, #32]
    898e:	f1cb 0300 	rsb	r3, fp, #0
    8992:	930b      	str	r3, [sp, #44]	; 0x2c
    8994:	9b01      	ldr	r3, [sp, #4]
    8996:	2b09      	cmp	r3, #9
    8998:	f04f 0b00 	mov.w	fp, #0
    899c:	d868      	bhi.n	8a70 <_dtoa_r+0x268>
    899e:	2b05      	cmp	r3, #5
    89a0:	f340 8355 	ble.w	904e <_dtoa_r+0x846>
    89a4:	3b04      	subs	r3, #4
    89a6:	9301      	str	r3, [sp, #4]
    89a8:	2600      	movs	r6, #0
    89aa:	9b01      	ldr	r3, [sp, #4]
    89ac:	3b02      	subs	r3, #2
    89ae:	2b03      	cmp	r3, #3
    89b0:	f200 86a4 	bhi.w	96fc <_dtoa_r+0xef4>
    89b4:	e8df f013 	tbh	[pc, r3, lsl #1]
    89b8:	04630466 	.word	0x04630466
    89bc:	043e045b 	.word	0x043e045b
    89c0:	9a06      	ldr	r2, [sp, #24]
    89c2:	f3ca 0a13 	ubfx	sl, sl, #0, #20
    89c6:	f242 730f 	movw	r3, #9999	; 0x270f
    89ca:	ea5a 0a08 	orrs.w	sl, sl, r8
    89ce:	6013      	str	r3, [r2, #0]
    89d0:	d11d      	bne.n	8a0e <_dtoa_r+0x206>
    89d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    89d4:	2b00      	cmp	r3, #0
    89d6:	f000 86a0 	beq.w	971a <_dtoa_r+0xf12>
    89da:	4b1b      	ldr	r3, [pc, #108]	; (8a48 <_dtoa_r+0x240>)
    89dc:	9300      	str	r3, [sp, #0]
    89de:	3308      	adds	r3, #8
    89e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    89e2:	9800      	ldr	r0, [sp, #0]
    89e4:	6013      	str	r3, [r2, #0]
    89e6:	b015      	add	sp, #84	; 0x54
    89e8:	ecbd 8b06 	vpop	{d8-d10}
    89ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89f0:	ee18 3a90 	vmov	r3, s17
    89f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    89f8:	ec51 0b19 	vmov	r0, r1, d9
    89fc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    8a00:	970d      	str	r7, [sp, #52]	; 0x34
    8a02:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    8a06:	9f12      	ldr	r7, [sp, #72]	; 0x48
    8a08:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    8a0c:	e770      	b.n	88f0 <_dtoa_r+0xe8>
    8a0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8a10:	2b00      	cmp	r3, #0
    8a12:	f040 83f0 	bne.w	91f6 <_dtoa_r+0x9ee>
    8a16:	4b0d      	ldr	r3, [pc, #52]	; (8a4c <_dtoa_r+0x244>)
    8a18:	9300      	str	r3, [sp, #0]
    8a1a:	e738      	b.n	888e <_dtoa_r+0x86>
    8a1c:	f3af 8000 	nop.w
    8a20:	636f4361 	.word	0x636f4361
    8a24:	3fd287a7 	.word	0x3fd287a7
    8a28:	8b60c8b3 	.word	0x8b60c8b3
    8a2c:	3fc68a28 	.word	0x3fc68a28
    8a30:	509f79fb 	.word	0x509f79fb
    8a34:	3fd34413 	.word	0x3fd34413
    8a38:	7ff00000 	.word	0x7ff00000
    8a3c:	0000bc2d 	.word	0x0000bc2d
    8a40:	3ff80000 	.word	0x3ff80000
    8a44:	0000bb18 	.word	0x0000bb18
    8a48:	0000bc90 	.word	0x0000bc90
    8a4c:	0000bc9c 	.word	0x0000bc9c
    8a50:	1bbf      	subs	r7, r7, r6
    8a52:	1e7b      	subs	r3, r7, #1
    8a54:	9304      	str	r3, [sp, #16]
    8a56:	f100 849b 	bmi.w	9390 <_dtoa_r+0xb88>
    8a5a:	900c      	str	r0, [sp, #48]	; 0x30
    8a5c:	9008      	str	r0, [sp, #32]
    8a5e:	9b04      	ldr	r3, [sp, #16]
    8a60:	445b      	add	r3, fp
    8a62:	e9cd 3b04 	strd	r3, fp, [sp, #16]
    8a66:	2300      	movs	r3, #0
    8a68:	930b      	str	r3, [sp, #44]	; 0x2c
    8a6a:	9b01      	ldr	r3, [sp, #4]
    8a6c:	2b09      	cmp	r3, #9
    8a6e:	d996      	bls.n	899e <_dtoa_r+0x196>
    8a70:	2300      	movs	r3, #0
    8a72:	2601      	movs	r6, #1
    8a74:	f04f 32ff 	mov.w	r2, #4294967295
    8a78:	9301      	str	r3, [sp, #4]
    8a7a:	960a      	str	r6, [sp, #40]	; 0x28
    8a7c:	9207      	str	r2, [sp, #28]
    8a7e:	9309      	str	r3, [sp, #36]	; 0x24
    8a80:	9b07      	ldr	r3, [sp, #28]
    8a82:	930f      	str	r3, [sp, #60]	; 0x3c
    8a84:	2100      	movs	r1, #0
    8a86:	63e1      	str	r1, [r4, #60]	; 0x3c
    8a88:	4620      	mov	r0, r4
    8a8a:	f7fd fa03 	bl	5e94 <_Balloc>
    8a8e:	9000      	str	r0, [sp, #0]
    8a90:	2800      	cmp	r0, #0
    8a92:	f000 863b 	beq.w	970c <_dtoa_r+0xf04>
    8a96:	9b00      	ldr	r3, [sp, #0]
    8a98:	63a3      	str	r3, [r4, #56]	; 0x38
    8a9a:	9b07      	ldr	r3, [sp, #28]
    8a9c:	2b0e      	cmp	r3, #14
    8a9e:	f200 811e 	bhi.w	8cde <_dtoa_r+0x4d6>
    8aa2:	2e00      	cmp	r6, #0
    8aa4:	f000 811b 	beq.w	8cde <_dtoa_r+0x4d6>
    8aa8:	9905      	ldr	r1, [sp, #20]
    8aaa:	2900      	cmp	r1, #0
    8aac:	f340 8472 	ble.w	9394 <_dtoa_r+0xb8c>
    8ab0:	4bd0      	ldr	r3, [pc, #832]	; (8df4 <_dtoa_r+0x5ec>)
    8ab2:	f001 020f 	and.w	r2, r1, #15
    8ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8aba:	ea4f 1821 	mov.w	r8, r1, asr #4
    8abe:	05c9      	lsls	r1, r1, #23
    8ac0:	e9d3 6700 	ldrd	r6, r7, [r3]
    8ac4:	f140 842e 	bpl.w	9324 <_dtoa_r+0xb1c>
    8ac8:	4bcb      	ldr	r3, [pc, #812]	; (8df8 <_dtoa_r+0x5f0>)
    8aca:	ec51 0b19 	vmov	r0, r1, d9
    8ace:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    8ad2:	f002 fc55 	bl	b380 <__aeabi_ddiv>
    8ad6:	ec41 0b18 	vmov	d8, r0, r1
    8ada:	f008 080f 	and.w	r8, r8, #15
    8ade:	f04f 0a03 	mov.w	sl, #3
    8ae2:	f1b8 0f00 	cmp.w	r8, #0
    8ae6:	d013      	beq.n	8b10 <_dtoa_r+0x308>
    8ae8:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8df8 <_dtoa_r+0x5f0>
    8aec:	f018 0f01 	tst.w	r8, #1
    8af0:	d009      	beq.n	8b06 <_dtoa_r+0x2fe>
    8af2:	4630      	mov	r0, r6
    8af4:	4639      	mov	r1, r7
    8af6:	e9d9 2300 	ldrd	r2, r3, [r9]
    8afa:	f002 fb17 	bl	b12c <__aeabi_dmul>
    8afe:	f10a 0a01 	add.w	sl, sl, #1
    8b02:	4606      	mov	r6, r0
    8b04:	460f      	mov	r7, r1
    8b06:	ea5f 0868 	movs.w	r8, r8, asr #1
    8b0a:	f109 0908 	add.w	r9, r9, #8
    8b0e:	d1ed      	bne.n	8aec <_dtoa_r+0x2e4>
    8b10:	ec51 0b18 	vmov	r0, r1, d8
    8b14:	4632      	mov	r2, r6
    8b16:	463b      	mov	r3, r7
    8b18:	f002 fc32 	bl	b380 <__aeabi_ddiv>
    8b1c:	ec41 0b1a 	vmov	d10, r0, r1
    8b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8b22:	b15b      	cbz	r3, 8b3c <_dtoa_r+0x334>
    8b24:	ec57 6b1a 	vmov	r6, r7, d10
    8b28:	4bb4      	ldr	r3, [pc, #720]	; (8dfc <_dtoa_r+0x5f4>)
    8b2a:	ee1a 0a10 	vmov	r0, s20
    8b2e:	2200      	movs	r2, #0
    8b30:	4639      	mov	r1, r7
    8b32:	f7fb ffa7 	bl	4a84 <__aeabi_dcmplt>
    8b36:	2800      	cmp	r0, #0
    8b38:	f040 854e 	bne.w	95d8 <_dtoa_r+0xdd0>
    8b3c:	4650      	mov	r0, sl
    8b3e:	f7fb fed7 	bl	48f0 <__aeabi_i2d>
    8b42:	ec53 2b1a 	vmov	r2, r3, d10
    8b46:	f002 faf1 	bl	b12c <__aeabi_dmul>
    8b4a:	4bad      	ldr	r3, [pc, #692]	; (8e00 <_dtoa_r+0x5f8>)
    8b4c:	2200      	movs	r2, #0
    8b4e:	f7fb fd83 	bl	4658 <__adddf3>
    8b52:	9b07      	ldr	r3, [sp, #28]
    8b54:	4680      	mov	r8, r0
    8b56:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	f000 80a5 	beq.w	8caa <_dtoa_r+0x4a2>
    8b60:	9b05      	ldr	r3, [sp, #20]
    8b62:	9310      	str	r3, [sp, #64]	; 0x40
    8b64:	9b07      	ldr	r3, [sp, #28]
    8b66:	930e      	str	r3, [sp, #56]	; 0x38
    8b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	f000 84bc 	beq.w	94e8 <_dtoa_r+0xce0>
    8b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8b72:	4ba0      	ldr	r3, [pc, #640]	; (8df4 <_dtoa_r+0x5ec>)
    8b74:	49a3      	ldr	r1, [pc, #652]	; (8e04 <_dtoa_r+0x5fc>)
    8b76:	f8dd a000 	ldr.w	sl, [sp]
    8b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8b7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    8b82:	2000      	movs	r0, #0
    8b84:	f002 fbfc 	bl	b380 <__aeabi_ddiv>
    8b88:	4642      	mov	r2, r8
    8b8a:	464b      	mov	r3, r9
    8b8c:	f7fb fd62 	bl	4654 <__aeabi_dsub>
    8b90:	ec59 8b1a 	vmov	r8, r9, d10
    8b94:	ec41 0b18 	vmov	d8, r0, r1
    8b98:	4649      	mov	r1, r9
    8b9a:	ee1a 0a10 	vmov	r0, s20
    8b9e:	f002 fcd7 	bl	b550 <__aeabi_d2iz>
    8ba2:	4607      	mov	r7, r0
    8ba4:	f7fb fea4 	bl	48f0 <__aeabi_i2d>
    8ba8:	4602      	mov	r2, r0
    8baa:	460b      	mov	r3, r1
    8bac:	ee1a 0a10 	vmov	r0, s20
    8bb0:	4649      	mov	r1, r9
    8bb2:	f7fb fd4f 	bl	4654 <__aeabi_dsub>
    8bb6:	3730      	adds	r7, #48	; 0x30
    8bb8:	4606      	mov	r6, r0
    8bba:	f80a 7b01 	strb.w	r7, [sl], #1
    8bbe:	460f      	mov	r7, r1
    8bc0:	4632      	mov	r2, r6
    8bc2:	ec51 0b18 	vmov	r0, r1, d8
    8bc6:	463b      	mov	r3, r7
    8bc8:	f7fb ff7a 	bl	4ac0 <__aeabi_dcmpgt>
    8bcc:	2800      	cmp	r0, #0
    8bce:	f040 854f 	bne.w	9670 <_dtoa_r+0xe68>
    8bd2:	f04f 0800 	mov.w	r8, #0
    8bd6:	ee0a 5a10 	vmov	s20, r5
    8bda:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    8bde:	4655      	mov	r5, sl
    8be0:	ec5b ab18 	vmov	sl, fp, d8
    8be4:	ee08 4a10 	vmov	s16, r4
    8be8:	4644      	mov	r4, r8
    8bea:	e02b      	b.n	8c44 <_dtoa_r+0x43c>
    8bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bee:	3401      	adds	r4, #1
    8bf0:	429c      	cmp	r4, r3
    8bf2:	f280 854d 	bge.w	9690 <_dtoa_r+0xe88>
    8bf6:	4b84      	ldr	r3, [pc, #528]	; (8e08 <_dtoa_r+0x600>)
    8bf8:	4650      	mov	r0, sl
    8bfa:	4659      	mov	r1, fp
    8bfc:	2200      	movs	r2, #0
    8bfe:	f002 fa95 	bl	b12c <__aeabi_dmul>
    8c02:	4b81      	ldr	r3, [pc, #516]	; (8e08 <_dtoa_r+0x600>)
    8c04:	2200      	movs	r2, #0
    8c06:	4682      	mov	sl, r0
    8c08:	468b      	mov	fp, r1
    8c0a:	4630      	mov	r0, r6
    8c0c:	4639      	mov	r1, r7
    8c0e:	f002 fa8d 	bl	b12c <__aeabi_dmul>
    8c12:	4689      	mov	r9, r1
    8c14:	4680      	mov	r8, r0
    8c16:	f002 fc9b 	bl	b550 <__aeabi_d2iz>
    8c1a:	4607      	mov	r7, r0
    8c1c:	f7fb fe68 	bl	48f0 <__aeabi_i2d>
    8c20:	4602      	mov	r2, r0
    8c22:	460b      	mov	r3, r1
    8c24:	4640      	mov	r0, r8
    8c26:	4649      	mov	r1, r9
    8c28:	f7fb fd14 	bl	4654 <__aeabi_dsub>
    8c2c:	3730      	adds	r7, #48	; 0x30
    8c2e:	f805 7b01 	strb.w	r7, [r5], #1
    8c32:	4652      	mov	r2, sl
    8c34:	465b      	mov	r3, fp
    8c36:	4606      	mov	r6, r0
    8c38:	460f      	mov	r7, r1
    8c3a:	f7fb ff23 	bl	4a84 <__aeabi_dcmplt>
    8c3e:	2800      	cmp	r0, #0
    8c40:	f040 8511 	bne.w	9666 <_dtoa_r+0xe5e>
    8c44:	4632      	mov	r2, r6
    8c46:	463b      	mov	r3, r7
    8c48:	496c      	ldr	r1, [pc, #432]	; (8dfc <_dtoa_r+0x5f4>)
    8c4a:	2000      	movs	r0, #0
    8c4c:	f7fb fd02 	bl	4654 <__aeabi_dsub>
    8c50:	4652      	mov	r2, sl
    8c52:	465b      	mov	r3, fp
    8c54:	f7fb ff16 	bl	4a84 <__aeabi_dcmplt>
    8c58:	2800      	cmp	r0, #0
    8c5a:	d0c7      	beq.n	8bec <_dtoa_r+0x3e4>
    8c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c5e:	9a00      	ldr	r2, [sp, #0]
    8c60:	9305      	str	r3, [sp, #20]
    8c62:	46aa      	mov	sl, r5
    8c64:	ee18 4a10 	vmov	r4, s16
    8c68:	ee1a 5a10 	vmov	r5, s20
    8c6c:	e002      	b.n	8c74 <_dtoa_r+0x46c>
    8c6e:	4552      	cmp	r2, sl
    8c70:	f000 84e3 	beq.w	963a <_dtoa_r+0xe32>
    8c74:	46d1      	mov	r9, sl
    8c76:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
    8c7a:	2b39      	cmp	r3, #57	; 0x39
    8c7c:	d0f7      	beq.n	8c6e <_dtoa_r+0x466>
    8c7e:	3301      	adds	r3, #1
    8c80:	b2db      	uxtb	r3, r3
    8c82:	f88a 3000 	strb.w	r3, [sl]
    8c86:	9b05      	ldr	r3, [sp, #20]
    8c88:	3301      	adds	r3, #1
    8c8a:	9305      	str	r3, [sp, #20]
    8c8c:	e198      	b.n	8fc0 <_dtoa_r+0x7b8>
    8c8e:	4650      	mov	r0, sl
    8c90:	f7fb fe2e 	bl	48f0 <__aeabi_i2d>
    8c94:	ec53 2b1a 	vmov	r2, r3, d10
    8c98:	f002 fa48 	bl	b12c <__aeabi_dmul>
    8c9c:	4b58      	ldr	r3, [pc, #352]	; (8e00 <_dtoa_r+0x5f8>)
    8c9e:	2200      	movs	r2, #0
    8ca0:	f7fb fcda 	bl	4658 <__adddf3>
    8ca4:	4680      	mov	r8, r0
    8ca6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    8caa:	4b58      	ldr	r3, [pc, #352]	; (8e0c <_dtoa_r+0x604>)
    8cac:	2200      	movs	r2, #0
    8cae:	ec51 0b1a 	vmov	r0, r1, d10
    8cb2:	f7fb fccf 	bl	4654 <__aeabi_dsub>
    8cb6:	4642      	mov	r2, r8
    8cb8:	464b      	mov	r3, r9
    8cba:	4606      	mov	r6, r0
    8cbc:	460f      	mov	r7, r1
    8cbe:	f7fb feff 	bl	4ac0 <__aeabi_dcmpgt>
    8cc2:	4682      	mov	sl, r0
    8cc4:	2800      	cmp	r0, #0
    8cc6:	f040 84c8 	bne.w	965a <_dtoa_r+0xe52>
    8cca:	4630      	mov	r0, r6
    8ccc:	4639      	mov	r1, r7
    8cce:	4642      	mov	r2, r8
    8cd0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    8cd4:	f7fb fed6 	bl	4a84 <__aeabi_dcmplt>
    8cd8:	2800      	cmp	r0, #0
    8cda:	f040 8357 	bne.w	938c <_dtoa_r+0xb84>
    8cde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8ce0:	2b00      	cmp	r3, #0
    8ce2:	f2c0 8095 	blt.w	8e10 <_dtoa_r+0x608>
    8ce6:	9a05      	ldr	r2, [sp, #20]
    8ce8:	2a0e      	cmp	r2, #14
    8cea:	f300 8091 	bgt.w	8e10 <_dtoa_r+0x608>
    8cee:	4b41      	ldr	r3, [pc, #260]	; (8df4 <_dtoa_r+0x5ec>)
    8cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
    8cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8cfa:	2b00      	cmp	r3, #0
    8cfc:	da1b      	bge.n	8d36 <_dtoa_r+0x52e>
    8cfe:	9b07      	ldr	r3, [sp, #28]
    8d00:	2b00      	cmp	r3, #0
    8d02:	dc18      	bgt.n	8d36 <_dtoa_r+0x52e>
    8d04:	f040 8340 	bne.w	9388 <_dtoa_r+0xb80>
    8d08:	4b40      	ldr	r3, [pc, #256]	; (8e0c <_dtoa_r+0x604>)
    8d0a:	2200      	movs	r2, #0
    8d0c:	4640      	mov	r0, r8
    8d0e:	4649      	mov	r1, r9
    8d10:	f002 fa0c 	bl	b12c <__aeabi_dmul>
    8d14:	4602      	mov	r2, r0
    8d16:	460b      	mov	r3, r1
    8d18:	ec51 0b19 	vmov	r0, r1, d9
    8d1c:	f7fb febc 	bl	4a98 <__aeabi_dcmple>
    8d20:	f8dd a01c 	ldr.w	sl, [sp, #28]
    8d24:	4656      	mov	r6, sl
    8d26:	2800      	cmp	r0, #0
    8d28:	f000 82c4 	beq.w	92b4 <_dtoa_r+0xaac>
    8d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d2e:	f8dd 8000 	ldr.w	r8, [sp]
    8d32:	43df      	mvns	r7, r3
    8d34:	e2c6      	b.n	92c4 <_dtoa_r+0xabc>
    8d36:	4642      	mov	r2, r8
    8d38:	464b      	mov	r3, r9
    8d3a:	ec51 0b19 	vmov	r0, r1, d9
    8d3e:	f002 fb1f 	bl	b380 <__aeabi_ddiv>
    8d42:	f002 fc05 	bl	b550 <__aeabi_d2iz>
    8d46:	4606      	mov	r6, r0
    8d48:	4683      	mov	fp, r0
    8d4a:	f7fb fdd1 	bl	48f0 <__aeabi_i2d>
    8d4e:	4642      	mov	r2, r8
    8d50:	464b      	mov	r3, r9
    8d52:	f002 f9eb 	bl	b12c <__aeabi_dmul>
    8d56:	460b      	mov	r3, r1
    8d58:	4602      	mov	r2, r0
    8d5a:	ec51 0b19 	vmov	r0, r1, d9
    8d5e:	f7fb fc79 	bl	4654 <__aeabi_dsub>
    8d62:	f8dd a000 	ldr.w	sl, [sp]
    8d66:	4633      	mov	r3, r6
    8d68:	3330      	adds	r3, #48	; 0x30
    8d6a:	f80a 3b01 	strb.w	r3, [sl], #1
    8d6e:	9b07      	ldr	r3, [sp, #28]
    8d70:	2b01      	cmp	r3, #1
    8d72:	f000 8371 	beq.w	9458 <_dtoa_r+0xc50>
    8d76:	f04f 0b01 	mov.w	fp, #1
    8d7a:	ee08 5a10 	vmov	s16, r5
    8d7e:	ee08 4a90 	vmov	s17, r4
    8d82:	461d      	mov	r5, r3
    8d84:	4654      	mov	r4, sl
    8d86:	46da      	mov	sl, fp
    8d88:	e01d      	b.n	8dc6 <_dtoa_r+0x5be>
    8d8a:	4642      	mov	r2, r8
    8d8c:	464b      	mov	r3, r9
    8d8e:	4630      	mov	r0, r6
    8d90:	4639      	mov	r1, r7
    8d92:	f002 faf5 	bl	b380 <__aeabi_ddiv>
    8d96:	f002 fbdb 	bl	b550 <__aeabi_d2iz>
    8d9a:	4683      	mov	fp, r0
    8d9c:	f7fb fda8 	bl	48f0 <__aeabi_i2d>
    8da0:	4642      	mov	r2, r8
    8da2:	464b      	mov	r3, r9
    8da4:	f002 f9c2 	bl	b12c <__aeabi_dmul>
    8da8:	f10a 0a01 	add.w	sl, sl, #1
    8dac:	460b      	mov	r3, r1
    8dae:	4602      	mov	r2, r0
    8db0:	4639      	mov	r1, r7
    8db2:	4630      	mov	r0, r6
    8db4:	f7fb fc4e 	bl	4654 <__aeabi_dsub>
    8db8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    8dbc:	45aa      	cmp	sl, r5
    8dbe:	f804 3b01 	strb.w	r3, [r4], #1
    8dc2:	f000 8344 	beq.w	944e <_dtoa_r+0xc46>
    8dc6:	4b10      	ldr	r3, [pc, #64]	; (8e08 <_dtoa_r+0x600>)
    8dc8:	2200      	movs	r2, #0
    8dca:	f002 f9af 	bl	b12c <__aeabi_dmul>
    8dce:	2200      	movs	r2, #0
    8dd0:	2300      	movs	r3, #0
    8dd2:	4606      	mov	r6, r0
    8dd4:	460f      	mov	r7, r1
    8dd6:	f7fb fe4b 	bl	4a70 <__aeabi_dcmpeq>
    8dda:	2800      	cmp	r0, #0
    8ddc:	d0d5      	beq.n	8d8a <_dtoa_r+0x582>
    8dde:	46a2      	mov	sl, r4
    8de0:	ee18 5a10 	vmov	r5, s16
    8de4:	ee18 4a90 	vmov	r4, s17
    8de8:	9b05      	ldr	r3, [sp, #20]
    8dea:	3301      	adds	r3, #1
    8dec:	9305      	str	r3, [sp, #20]
    8dee:	46d1      	mov	r9, sl
    8df0:	e0e6      	b.n	8fc0 <_dtoa_r+0x7b8>
    8df2:	bf00      	nop
    8df4:	0000bb18 	.word	0x0000bb18
    8df8:	0000baf0 	.word	0x0000baf0
    8dfc:	3ff00000 	.word	0x3ff00000
    8e00:	401c0000 	.word	0x401c0000
    8e04:	3fe00000 	.word	0x3fe00000
    8e08:	40240000 	.word	0x40240000
    8e0c:	40140000 	.word	0x40140000
    8e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8e12:	2a00      	cmp	r2, #0
    8e14:	f000 810c 	beq.w	9030 <_dtoa_r+0x828>
    8e18:	9a01      	ldr	r2, [sp, #4]
    8e1a:	2a01      	cmp	r2, #1
    8e1c:	f340 829d 	ble.w	935a <_dtoa_r+0xb52>
    8e20:	9b07      	ldr	r3, [sp, #28]
    8e22:	f103 38ff 	add.w	r8, r3, #4294967295
    8e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e28:	4543      	cmp	r3, r8
    8e2a:	f280 8260 	bge.w	92ee <_dtoa_r+0xae6>
    8e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e30:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    8e34:	eba8 0303 	sub.w	r3, r8, r3
    8e38:	449b      	add	fp, r3
    8e3a:	f04f 0800 	mov.w	r8, #0
    8e3e:	9b07      	ldr	r3, [sp, #28]
    8e40:	2b00      	cmp	r3, #0
    8e42:	f2c0 833b 	blt.w	94bc <_dtoa_r+0xcb4>
    8e46:	9a04      	ldr	r2, [sp, #16]
    8e48:	441a      	add	r2, r3
    8e4a:	9204      	str	r2, [sp, #16]
    8e4c:	9a08      	ldr	r2, [sp, #32]
    8e4e:	4617      	mov	r7, r2
    8e50:	441a      	add	r2, r3
    8e52:	9208      	str	r2, [sp, #32]
    8e54:	2101      	movs	r1, #1
    8e56:	4620      	mov	r0, r4
    8e58:	f7fd f8ee 	bl	6038 <__i2b>
    8e5c:	4606      	mov	r6, r0
    8e5e:	b167      	cbz	r7, 8e7a <_dtoa_r+0x672>
    8e60:	9a04      	ldr	r2, [sp, #16]
    8e62:	2a00      	cmp	r2, #0
    8e64:	dd09      	ble.n	8e7a <_dtoa_r+0x672>
    8e66:	9908      	ldr	r1, [sp, #32]
    8e68:	42ba      	cmp	r2, r7
    8e6a:	4613      	mov	r3, r2
    8e6c:	bfa8      	it	ge
    8e6e:	463b      	movge	r3, r7
    8e70:	1ac9      	subs	r1, r1, r3
    8e72:	1aff      	subs	r7, r7, r3
    8e74:	1ad3      	subs	r3, r2, r3
    8e76:	9108      	str	r1, [sp, #32]
    8e78:	9304      	str	r3, [sp, #16]
    8e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e7c:	b163      	cbz	r3, 8e98 <_dtoa_r+0x690>
    8e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e80:	2b00      	cmp	r3, #0
    8e82:	f000 82bf 	beq.w	9404 <_dtoa_r+0xbfc>
    8e86:	f1b8 0f00 	cmp.w	r8, #0
    8e8a:	f300 8233 	bgt.w	92f4 <_dtoa_r+0xaec>
    8e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e90:	ebb3 0208 	subs.w	r2, r3, r8
    8e94:	f040 8322 	bne.w	94dc <_dtoa_r+0xcd4>
    8e98:	2101      	movs	r1, #1
    8e9a:	4620      	mov	r0, r4
    8e9c:	f7fd f8cc 	bl	6038 <__i2b>
    8ea0:	f1bb 0f00 	cmp.w	fp, #0
    8ea4:	4682      	mov	sl, r0
    8ea6:	f300 80d9 	bgt.w	905c <_dtoa_r+0x854>
    8eaa:	9b01      	ldr	r3, [sp, #4]
    8eac:	2b01      	cmp	r3, #1
    8eae:	f340 81a9 	ble.w	9204 <_dtoa_r+0x9fc>
    8eb2:	f04f 0800 	mov.w	r8, #0
    8eb6:	2001      	movs	r0, #1
    8eb8:	f1bb 0f00 	cmp.w	fp, #0
    8ebc:	f040 80da 	bne.w	9074 <_dtoa_r+0x86c>
    8ec0:	9b04      	ldr	r3, [sp, #16]
    8ec2:	4418      	add	r0, r3
    8ec4:	f010 001f 	ands.w	r0, r0, #31
    8ec8:	f000 819a 	beq.w	9200 <_dtoa_r+0x9f8>
    8ecc:	f1c0 0320 	rsb	r3, r0, #32
    8ed0:	2b04      	cmp	r3, #4
    8ed2:	f300 80b2 	bgt.w	903a <_dtoa_r+0x832>
    8ed6:	f040 822d 	bne.w	9334 <_dtoa_r+0xb2c>
    8eda:	9b08      	ldr	r3, [sp, #32]
    8edc:	2b00      	cmp	r3, #0
    8ede:	dd05      	ble.n	8eec <_dtoa_r+0x6e4>
    8ee0:	4629      	mov	r1, r5
    8ee2:	461a      	mov	r2, r3
    8ee4:	4620      	mov	r0, r4
    8ee6:	f7fd f9e3 	bl	62b0 <__lshift>
    8eea:	4605      	mov	r5, r0
    8eec:	9b04      	ldr	r3, [sp, #16]
    8eee:	2b00      	cmp	r3, #0
    8ef0:	dd05      	ble.n	8efe <_dtoa_r+0x6f6>
    8ef2:	4651      	mov	r1, sl
    8ef4:	461a      	mov	r2, r3
    8ef6:	4620      	mov	r0, r4
    8ef8:	f7fd f9da 	bl	62b0 <__lshift>
    8efc:	4682      	mov	sl, r0
    8efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8f00:	2b00      	cmp	r3, #0
    8f02:	f040 815d 	bne.w	91c0 <_dtoa_r+0x9b8>
    8f06:	9b07      	ldr	r3, [sp, #28]
    8f08:	2b00      	cmp	r3, #0
    8f0a:	f340 8144 	ble.w	9196 <_dtoa_r+0x98e>
    8f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8f10:	2b00      	cmp	r3, #0
    8f12:	f040 80c7 	bne.w	90a4 <_dtoa_r+0x89c>
    8f16:	9b05      	ldr	r3, [sp, #20]
    8f18:	3301      	adds	r3, #1
    8f1a:	9305      	str	r3, [sp, #20]
    8f1c:	f8dd 8000 	ldr.w	r8, [sp]
    8f20:	f8dd 901c 	ldr.w	r9, [sp, #28]
    8f24:	2701      	movs	r7, #1
    8f26:	e007      	b.n	8f38 <_dtoa_r+0x730>
    8f28:	4629      	mov	r1, r5
    8f2a:	2300      	movs	r3, #0
    8f2c:	220a      	movs	r2, #10
    8f2e:	4620      	mov	r0, r4
    8f30:	f7fc ffe0 	bl	5ef4 <__multadd>
    8f34:	3701      	adds	r7, #1
    8f36:	4605      	mov	r5, r0
    8f38:	4651      	mov	r1, sl
    8f3a:	4628      	mov	r0, r5
    8f3c:	f7ff fbce 	bl	86dc <quorem>
    8f40:	45b9      	cmp	r9, r7
    8f42:	f100 0030 	add.w	r0, r0, #48	; 0x30
    8f46:	f808 0b01 	strb.w	r0, [r8], #1
    8f4a:	dced      	bgt.n	8f28 <_dtoa_r+0x720>
    8f4c:	9a07      	ldr	r2, [sp, #28]
    8f4e:	2a00      	cmp	r2, #0
    8f50:	bfc8      	it	gt
    8f52:	4693      	movgt	fp, r2
    8f54:	9a00      	ldr	r2, [sp, #0]
    8f56:	bfd8      	it	le
    8f58:	f04f 0b01 	movle.w	fp, #1
    8f5c:	4603      	mov	r3, r0
    8f5e:	4493      	add	fp, r2
    8f60:	2700      	movs	r7, #0
    8f62:	4629      	mov	r1, r5
    8f64:	2201      	movs	r2, #1
    8f66:	4620      	mov	r0, r4
    8f68:	9301      	str	r3, [sp, #4]
    8f6a:	f7fd f9a1 	bl	62b0 <__lshift>
    8f6e:	4651      	mov	r1, sl
    8f70:	4605      	mov	r5, r0
    8f72:	f7fd fa15 	bl	63a0 <__mcmp>
    8f76:	2800      	cmp	r0, #0
    8f78:	f340 81e4 	ble.w	9344 <_dtoa_r+0xb3c>
    8f7c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    8f80:	9a00      	ldr	r2, [sp, #0]
    8f82:	f10b 3bff 	add.w	fp, fp, #4294967295
    8f86:	e004      	b.n	8f92 <_dtoa_r+0x78a>
    8f88:	455a      	cmp	r2, fp
    8f8a:	f000 81f6 	beq.w	937a <_dtoa_r+0xb72>
    8f8e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    8f92:	2b39      	cmp	r3, #57	; 0x39
    8f94:	f10b 0901 	add.w	r9, fp, #1
    8f98:	d0f6      	beq.n	8f88 <_dtoa_r+0x780>
    8f9a:	3301      	adds	r3, #1
    8f9c:	f88b 3000 	strb.w	r3, [fp]
    8fa0:	4651      	mov	r1, sl
    8fa2:	4620      	mov	r0, r4
    8fa4:	f7fc ff9c 	bl	5ee0 <_Bfree>
    8fa8:	b156      	cbz	r6, 8fc0 <_dtoa_r+0x7b8>
    8faa:	b12f      	cbz	r7, 8fb8 <_dtoa_r+0x7b0>
    8fac:	42b7      	cmp	r7, r6
    8fae:	d003      	beq.n	8fb8 <_dtoa_r+0x7b0>
    8fb0:	4639      	mov	r1, r7
    8fb2:	4620      	mov	r0, r4
    8fb4:	f7fc ff94 	bl	5ee0 <_Bfree>
    8fb8:	4631      	mov	r1, r6
    8fba:	4620      	mov	r0, r4
    8fbc:	f7fc ff90 	bl	5ee0 <_Bfree>
    8fc0:	4629      	mov	r1, r5
    8fc2:	4620      	mov	r0, r4
    8fc4:	f7fc ff8c 	bl	5ee0 <_Bfree>
    8fc8:	2300      	movs	r3, #0
    8fca:	f889 3000 	strb.w	r3, [r9]
    8fce:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    8fd2:	601a      	str	r2, [r3, #0]
    8fd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	f43f ac59 	beq.w	888e <_dtoa_r+0x86>
    8fdc:	9800      	ldr	r0, [sp, #0]
    8fde:	f8c3 9000 	str.w	r9, [r3]
    8fe2:	b015      	add	sp, #84	; 0x54
    8fe4:	ecbd 8b06 	vpop	{d8-d10}
    8fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8fec:	2301      	movs	r3, #1
    8fee:	1bbf      	subs	r7, r7, r6
    8ff0:	930c      	str	r3, [sp, #48]	; 0x30
    8ff2:	1e7b      	subs	r3, r7, #1
    8ff4:	9304      	str	r3, [sp, #16]
    8ff6:	f57f acbf 	bpl.w	8978 <_dtoa_r+0x170>
    8ffa:	f1c7 0301 	rsb	r3, r7, #1
    8ffe:	9308      	str	r3, [sp, #32]
    9000:	2300      	movs	r3, #0
    9002:	9304      	str	r3, [sp, #16]
    9004:	e4ba      	b.n	897c <_dtoa_r+0x174>
    9006:	4658      	mov	r0, fp
    9008:	f7fb fc72 	bl	48f0 <__aeabi_i2d>
    900c:	4642      	mov	r2, r8
    900e:	464b      	mov	r3, r9
    9010:	f7fb fd2e 	bl	4a70 <__aeabi_dcmpeq>
    9014:	2800      	cmp	r0, #0
    9016:	f47f ac97 	bne.w	8948 <_dtoa_r+0x140>
    901a:	f10b 3bff 	add.w	fp, fp, #4294967295
    901e:	e493      	b.n	8948 <_dtoa_r+0x140>
    9020:	4bbd      	ldr	r3, [pc, #756]	; (9318 <_dtoa_r+0xb10>)
    9022:	9300      	str	r3, [sp, #0]
    9024:	9800      	ldr	r0, [sp, #0]
    9026:	b015      	add	sp, #84	; 0x54
    9028:	ecbd 8b06 	vpop	{d8-d10}
    902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9030:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    9034:	9f08      	ldr	r7, [sp, #32]
    9036:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9038:	e711      	b.n	8e5e <_dtoa_r+0x656>
    903a:	f1c0 001c 	rsb	r0, r0, #28
    903e:	9b08      	ldr	r3, [sp, #32]
    9040:	4403      	add	r3, r0
    9042:	9308      	str	r3, [sp, #32]
    9044:	9b04      	ldr	r3, [sp, #16]
    9046:	4403      	add	r3, r0
    9048:	4407      	add	r7, r0
    904a:	9304      	str	r3, [sp, #16]
    904c:	e745      	b.n	8eda <_dtoa_r+0x6d2>
    904e:	2601      	movs	r6, #1
    9050:	e4ab      	b.n	89aa <_dtoa_r+0x1a2>
    9052:	f1c3 0320 	rsb	r3, r3, #32
    9056:	fa08 f003 	lsl.w	r0, r8, r3
    905a:	e442      	b.n	88e2 <_dtoa_r+0xda>
    905c:	4601      	mov	r1, r0
    905e:	465a      	mov	r2, fp
    9060:	4620      	mov	r0, r4
    9062:	f7fd f8c5 	bl	61f0 <__pow5mult>
    9066:	9b01      	ldr	r3, [sp, #4]
    9068:	2b01      	cmp	r3, #1
    906a:	4682      	mov	sl, r0
    906c:	f340 81be 	ble.w	93ec <_dtoa_r+0xbe4>
    9070:	f04f 0800 	mov.w	r8, #0
    9074:	f8da 3010 	ldr.w	r3, [sl, #16]
    9078:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    907c:	6918      	ldr	r0, [r3, #16]
    907e:	f7fc ff8b 	bl	5f98 <__hi0bits>
    9082:	f1c0 0020 	rsb	r0, r0, #32
    9086:	e71b      	b.n	8ec0 <_dtoa_r+0x6b8>
    9088:	4631      	mov	r1, r6
    908a:	2300      	movs	r3, #0
    908c:	220a      	movs	r2, #10
    908e:	4620      	mov	r0, r4
    9090:	f7fc ff30 	bl	5ef4 <__multadd>
    9094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9096:	2b00      	cmp	r3, #0
    9098:	4606      	mov	r6, r0
    909a:	f340 8319 	ble.w	96d0 <_dtoa_r+0xec8>
    909e:	f8cd 9014 	str.w	r9, [sp, #20]
    90a2:	9307      	str	r3, [sp, #28]
    90a4:	2f00      	cmp	r7, #0
    90a6:	f300 811b 	bgt.w	92e0 <_dtoa_r+0xad8>
    90aa:	f1b8 0f00 	cmp.w	r8, #0
    90ae:	f040 81ee 	bne.w	948e <_dtoa_r+0xc86>
    90b2:	46b0      	mov	r8, r6
    90b4:	9b02      	ldr	r3, [sp, #8]
    90b6:	9f00      	ldr	r7, [sp, #0]
    90b8:	9907      	ldr	r1, [sp, #28]
    90ba:	f003 0201 	and.w	r2, r3, #1
    90be:	1e7b      	subs	r3, r7, #1
    90c0:	4419      	add	r1, r3
    90c2:	9b01      	ldr	r3, [sp, #4]
    90c4:	920a      	str	r2, [sp, #40]	; 0x28
    90c6:	4313      	orrs	r3, r2
    90c8:	9108      	str	r1, [sp, #32]
    90ca:	9309      	str	r3, [sp, #36]	; 0x24
    90cc:	4651      	mov	r1, sl
    90ce:	4628      	mov	r0, r5
    90d0:	f7ff fb04 	bl	86dc <quorem>
    90d4:	4631      	mov	r1, r6
    90d6:	4683      	mov	fp, r0
    90d8:	4628      	mov	r0, r5
    90da:	f7fd f961 	bl	63a0 <__mcmp>
    90de:	4642      	mov	r2, r8
    90e0:	4651      	mov	r1, sl
    90e2:	4681      	mov	r9, r0
    90e4:	4620      	mov	r0, r4
    90e6:	f7fd f97d 	bl	63e4 <__mdiff>
    90ea:	68c2      	ldr	r2, [r0, #12]
    90ec:	4601      	mov	r1, r0
    90ee:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    90f2:	2a00      	cmp	r2, #0
    90f4:	d142      	bne.n	917c <_dtoa_r+0x974>
    90f6:	9004      	str	r0, [sp, #16]
    90f8:	4628      	mov	r0, r5
    90fa:	9307      	str	r3, [sp, #28]
    90fc:	f7fd f950 	bl	63a0 <__mcmp>
    9100:	9904      	ldr	r1, [sp, #16]
    9102:	9002      	str	r0, [sp, #8]
    9104:	4620      	mov	r0, r4
    9106:	f7fc feeb 	bl	5ee0 <_Bfree>
    910a:	9a02      	ldr	r2, [sp, #8]
    910c:	9b07      	ldr	r3, [sp, #28]
    910e:	b91a      	cbnz	r2, 9118 <_dtoa_r+0x910>
    9110:	9909      	ldr	r1, [sp, #36]	; 0x24
    9112:	2900      	cmp	r1, #0
    9114:	f000 82c4 	beq.w	96a0 <_dtoa_r+0xe98>
    9118:	f1b9 0f00 	cmp.w	r9, #0
    911c:	f2c0 8179 	blt.w	9412 <_dtoa_r+0xc0a>
    9120:	9901      	ldr	r1, [sp, #4]
    9122:	ea49 0901 	orr.w	r9, r9, r1
    9126:	990a      	ldr	r1, [sp, #40]	; 0x28
    9128:	ea51 0909 	orrs.w	r9, r1, r9
    912c:	f000 8171 	beq.w	9412 <_dtoa_r+0xc0a>
    9130:	2a00      	cmp	r2, #0
    9132:	f300 81c7 	bgt.w	94c4 <_dtoa_r+0xcbc>
    9136:	9a08      	ldr	r2, [sp, #32]
    9138:	703b      	strb	r3, [r7, #0]
    913a:	f107 0901 	add.w	r9, r7, #1
    913e:	4297      	cmp	r7, r2
    9140:	46cb      	mov	fp, r9
    9142:	f000 81c5 	beq.w	94d0 <_dtoa_r+0xcc8>
    9146:	4629      	mov	r1, r5
    9148:	2300      	movs	r3, #0
    914a:	220a      	movs	r2, #10
    914c:	4620      	mov	r0, r4
    914e:	f7fc fed1 	bl	5ef4 <__multadd>
    9152:	4546      	cmp	r6, r8
    9154:	4605      	mov	r5, r0
    9156:	4631      	mov	r1, r6
    9158:	f04f 0300 	mov.w	r3, #0
    915c:	f04f 020a 	mov.w	r2, #10
    9160:	4620      	mov	r0, r4
    9162:	d012      	beq.n	918a <_dtoa_r+0x982>
    9164:	f7fc fec6 	bl	5ef4 <__multadd>
    9168:	4641      	mov	r1, r8
    916a:	4606      	mov	r6, r0
    916c:	2300      	movs	r3, #0
    916e:	220a      	movs	r2, #10
    9170:	4620      	mov	r0, r4
    9172:	f7fc febf 	bl	5ef4 <__multadd>
    9176:	464f      	mov	r7, r9
    9178:	4680      	mov	r8, r0
    917a:	e7a7      	b.n	90cc <_dtoa_r+0x8c4>
    917c:	4620      	mov	r0, r4
    917e:	9302      	str	r3, [sp, #8]
    9180:	f7fc feae 	bl	5ee0 <_Bfree>
    9184:	9b02      	ldr	r3, [sp, #8]
    9186:	2201      	movs	r2, #1
    9188:	e7c6      	b.n	9118 <_dtoa_r+0x910>
    918a:	f7fc feb3 	bl	5ef4 <__multadd>
    918e:	464f      	mov	r7, r9
    9190:	4606      	mov	r6, r0
    9192:	4680      	mov	r8, r0
    9194:	e79a      	b.n	90cc <_dtoa_r+0x8c4>
    9196:	9b01      	ldr	r3, [sp, #4]
    9198:	2b02      	cmp	r3, #2
    919a:	dc7a      	bgt.n	9292 <_dtoa_r+0xa8a>
    919c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    919e:	2b00      	cmp	r3, #0
    91a0:	d180      	bne.n	90a4 <_dtoa_r+0x89c>
    91a2:	9b05      	ldr	r3, [sp, #20]
    91a4:	4651      	mov	r1, sl
    91a6:	3301      	adds	r3, #1
    91a8:	4628      	mov	r0, r5
    91aa:	9305      	str	r3, [sp, #20]
    91ac:	f7ff fa96 	bl	86dc <quorem>
    91b0:	f8dd b000 	ldr.w	fp, [sp]
    91b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
    91b8:	f80b 3b01 	strb.w	r3, [fp], #1
    91bc:	2700      	movs	r7, #0
    91be:	e6d0      	b.n	8f62 <_dtoa_r+0x75a>
    91c0:	4651      	mov	r1, sl
    91c2:	4628      	mov	r0, r5
    91c4:	f7fd f8ec 	bl	63a0 <__mcmp>
    91c8:	2800      	cmp	r0, #0
    91ca:	f6bf ae9c 	bge.w	8f06 <_dtoa_r+0x6fe>
    91ce:	4629      	mov	r1, r5
    91d0:	2300      	movs	r3, #0
    91d2:	220a      	movs	r2, #10
    91d4:	4620      	mov	r0, r4
    91d6:	f7fc fe8d 	bl	5ef4 <__multadd>
    91da:	9b05      	ldr	r3, [sp, #20]
    91dc:	f103 39ff 	add.w	r9, r3, #4294967295
    91e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    91e2:	4605      	mov	r5, r0
    91e4:	2b00      	cmp	r3, #0
    91e6:	f47f af4f 	bne.w	9088 <_dtoa_r+0x880>
    91ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    91ec:	2b00      	cmp	r3, #0
    91ee:	f340 825e 	ble.w	96ae <_dtoa_r+0xea6>
    91f2:	9307      	str	r3, [sp, #28]
    91f4:	e692      	b.n	8f1c <_dtoa_r+0x714>
    91f6:	4b49      	ldr	r3, [pc, #292]	; (931c <_dtoa_r+0xb14>)
    91f8:	9300      	str	r3, [sp, #0]
    91fa:	3303      	adds	r3, #3
    91fc:	f7ff bbf0 	b.w	89e0 <_dtoa_r+0x1d8>
    9200:	201c      	movs	r0, #28
    9202:	e71c      	b.n	903e <_dtoa_r+0x836>
    9204:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    9208:	2900      	cmp	r1, #0
    920a:	f47f ae52 	bne.w	8eb2 <_dtoa_r+0x6aa>
    920e:	f3c2 0313 	ubfx	r3, r2, #0, #20
    9212:	2b00      	cmp	r3, #0
    9214:	f47f ae4d 	bne.w	8eb2 <_dtoa_r+0x6aa>
    9218:	4b41      	ldr	r3, [pc, #260]	; (9320 <_dtoa_r+0xb18>)
    921a:	4013      	ands	r3, r2
    921c:	2b00      	cmp	r3, #0
    921e:	f000 8220 	beq.w	9662 <_dtoa_r+0xe5a>
    9222:	9b08      	ldr	r3, [sp, #32]
    9224:	3301      	adds	r3, #1
    9226:	9308      	str	r3, [sp, #32]
    9228:	9b04      	ldr	r3, [sp, #16]
    922a:	3301      	adds	r3, #1
    922c:	9304      	str	r3, [sp, #16]
    922e:	f04f 0801 	mov.w	r8, #1
    9232:	e640      	b.n	8eb6 <_dtoa_r+0x6ae>
    9234:	2301      	movs	r3, #1
    9236:	930a      	str	r3, [sp, #40]	; 0x28
    9238:	9b09      	ldr	r3, [sp, #36]	; 0x24
    923a:	9a05      	ldr	r2, [sp, #20]
    923c:	4413      	add	r3, r2
    923e:	930f      	str	r3, [sp, #60]	; 0x3c
    9240:	3301      	adds	r3, #1
    9242:	2b01      	cmp	r3, #1
    9244:	461f      	mov	r7, r3
    9246:	9307      	str	r3, [sp, #28]
    9248:	bfb8      	it	lt
    924a:	2701      	movlt	r7, #1
    924c:	2100      	movs	r1, #0
    924e:	2f17      	cmp	r7, #23
    9250:	63e1      	str	r1, [r4, #60]	; 0x3c
    9252:	f77f ac19 	ble.w	8a88 <_dtoa_r+0x280>
    9256:	2201      	movs	r2, #1
    9258:	2304      	movs	r3, #4
    925a:	005b      	lsls	r3, r3, #1
    925c:	f103 0014 	add.w	r0, r3, #20
    9260:	42b8      	cmp	r0, r7
    9262:	4611      	mov	r1, r2
    9264:	f102 0201 	add.w	r2, r2, #1
    9268:	d9f7      	bls.n	925a <_dtoa_r+0xa52>
    926a:	63e1      	str	r1, [r4, #60]	; 0x3c
    926c:	e40c      	b.n	8a88 <_dtoa_r+0x280>
    926e:	2301      	movs	r3, #1
    9270:	930a      	str	r3, [sp, #40]	; 0x28
    9272:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9274:	2f00      	cmp	r7, #0
    9276:	dd60      	ble.n	933a <_dtoa_r+0xb32>
    9278:	970f      	str	r7, [sp, #60]	; 0x3c
    927a:	9707      	str	r7, [sp, #28]
    927c:	e7e6      	b.n	924c <_dtoa_r+0xa44>
    927e:	2300      	movs	r3, #0
    9280:	930a      	str	r3, [sp, #40]	; 0x28
    9282:	e7d9      	b.n	9238 <_dtoa_r+0xa30>
    9284:	2300      	movs	r3, #0
    9286:	930a      	str	r3, [sp, #40]	; 0x28
    9288:	e7f3      	b.n	9272 <_dtoa_r+0xa6a>
    928a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    928c:	9307      	str	r3, [sp, #28]
    928e:	f8cd 9014 	str.w	r9, [sp, #20]
    9292:	9b07      	ldr	r3, [sp, #28]
    9294:	2b00      	cmp	r3, #0
    9296:	f47f ad49 	bne.w	8d2c <_dtoa_r+0x524>
    929a:	4651      	mov	r1, sl
    929c:	2205      	movs	r2, #5
    929e:	4620      	mov	r0, r4
    92a0:	f7fc fe28 	bl	5ef4 <__multadd>
    92a4:	4601      	mov	r1, r0
    92a6:	4682      	mov	sl, r0
    92a8:	4628      	mov	r0, r5
    92aa:	f7fd f879 	bl	63a0 <__mcmp>
    92ae:	2800      	cmp	r0, #0
    92b0:	f77f ad3c 	ble.w	8d2c <_dtoa_r+0x524>
    92b4:	9b00      	ldr	r3, [sp, #0]
    92b6:	9f05      	ldr	r7, [sp, #20]
    92b8:	2231      	movs	r2, #49	; 0x31
    92ba:	4698      	mov	r8, r3
    92bc:	f803 2b01 	strb.w	r2, [r3], #1
    92c0:	3701      	adds	r7, #1
    92c2:	9300      	str	r3, [sp, #0]
    92c4:	4651      	mov	r1, sl
    92c6:	4620      	mov	r0, r4
    92c8:	f7fc fe0a 	bl	5ee0 <_Bfree>
    92cc:	1c7b      	adds	r3, r7, #1
    92ce:	f8dd 9000 	ldr.w	r9, [sp]
    92d2:	9305      	str	r3, [sp, #20]
    92d4:	f8cd 8000 	str.w	r8, [sp]
    92d8:	2e00      	cmp	r6, #0
    92da:	f47f ae6d 	bne.w	8fb8 <_dtoa_r+0x7b0>
    92de:	e66f      	b.n	8fc0 <_dtoa_r+0x7b8>
    92e0:	4631      	mov	r1, r6
    92e2:	463a      	mov	r2, r7
    92e4:	4620      	mov	r0, r4
    92e6:	f7fc ffe3 	bl	62b0 <__lshift>
    92ea:	4606      	mov	r6, r0
    92ec:	e6dd      	b.n	90aa <_dtoa_r+0x8a2>
    92ee:	eba3 0808 	sub.w	r8, r3, r8
    92f2:	e5a4      	b.n	8e3e <_dtoa_r+0x636>
    92f4:	4631      	mov	r1, r6
    92f6:	4642      	mov	r2, r8
    92f8:	4620      	mov	r0, r4
    92fa:	f7fc ff79 	bl	61f0 <__pow5mult>
    92fe:	462a      	mov	r2, r5
    9300:	4601      	mov	r1, r0
    9302:	4606      	mov	r6, r0
    9304:	4620      	mov	r0, r4
    9306:	f7fc fec5 	bl	6094 <__multiply>
    930a:	4629      	mov	r1, r5
    930c:	4605      	mov	r5, r0
    930e:	4620      	mov	r0, r4
    9310:	f7fc fde6 	bl	5ee0 <_Bfree>
    9314:	e5bb      	b.n	8e8e <_dtoa_r+0x686>
    9316:	bf00      	nop
    9318:	0000bc2c 	.word	0x0000bc2c
    931c:	0000bc9c 	.word	0x0000bc9c
    9320:	7ff00000 	.word	0x7ff00000
    9324:	f04f 0a02 	mov.w	sl, #2
    9328:	eeb0 8a49 	vmov.f32	s16, s18
    932c:	eef0 8a69 	vmov.f32	s17, s19
    9330:	f7ff bbd7 	b.w	8ae2 <_dtoa_r+0x2da>
    9334:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    9338:	e681      	b.n	903e <_dtoa_r+0x836>
    933a:	2301      	movs	r3, #1
    933c:	9309      	str	r3, [sp, #36]	; 0x24
    933e:	9307      	str	r3, [sp, #28]
    9340:	f7ff bb9e 	b.w	8a80 <_dtoa_r+0x278>
    9344:	d103      	bne.n	934e <_dtoa_r+0xb46>
    9346:	9b01      	ldr	r3, [sp, #4]
    9348:	07db      	lsls	r3, r3, #31
    934a:	f53f ae17 	bmi.w	8f7c <_dtoa_r+0x774>
    934e:	46d9      	mov	r9, fp
    9350:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    9354:	2b30      	cmp	r3, #48	; 0x30
    9356:	d0fa      	beq.n	934e <_dtoa_r+0xb46>
    9358:	e622      	b.n	8fa0 <_dtoa_r+0x798>
    935a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    935c:	2a00      	cmp	r2, #0
    935e:	f000 8137 	beq.w	95d0 <_dtoa_r+0xdc8>
    9362:	f203 4333 	addw	r3, r3, #1075	; 0x433
    9366:	9a04      	ldr	r2, [sp, #16]
    9368:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    936c:	441a      	add	r2, r3
    936e:	9204      	str	r2, [sp, #16]
    9370:	9a08      	ldr	r2, [sp, #32]
    9372:	4617      	mov	r7, r2
    9374:	441a      	add	r2, r3
    9376:	9208      	str	r2, [sp, #32]
    9378:	e56c      	b.n	8e54 <_dtoa_r+0x64c>
    937a:	9b05      	ldr	r3, [sp, #20]
    937c:	9a00      	ldr	r2, [sp, #0]
    937e:	3301      	adds	r3, #1
    9380:	9305      	str	r3, [sp, #20]
    9382:	2331      	movs	r3, #49	; 0x31
    9384:	7013      	strb	r3, [r2, #0]
    9386:	e60b      	b.n	8fa0 <_dtoa_r+0x798>
    9388:	f04f 0a00 	mov.w	sl, #0
    938c:	4656      	mov	r6, sl
    938e:	e4cd      	b.n	8d2c <_dtoa_r+0x524>
    9390:	900c      	str	r0, [sp, #48]	; 0x30
    9392:	e632      	b.n	8ffa <_dtoa_r+0x7f2>
    9394:	f000 8149 	beq.w	962a <_dtoa_r+0xe22>
    9398:	9a05      	ldr	r2, [sp, #20]
    939a:	4bc8      	ldr	r3, [pc, #800]	; (96bc <_dtoa_r+0xeb4>)
    939c:	4256      	negs	r6, r2
    939e:	f006 020f 	and.w	r2, r6, #15
    93a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    93a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    93aa:	ec51 0b19 	vmov	r0, r1, d9
    93ae:	f001 febd 	bl	b12c <__aeabi_dmul>
    93b2:	1136      	asrs	r6, r6, #4
    93b4:	ec41 0b1a 	vmov	d10, r0, r1
    93b8:	f000 8195 	beq.w	96e6 <_dtoa_r+0xede>
    93bc:	4fc0      	ldr	r7, [pc, #768]	; (96c0 <_dtoa_r+0xeb8>)
    93be:	2300      	movs	r3, #0
    93c0:	f04f 0a02 	mov.w	sl, #2
    93c4:	07f2      	lsls	r2, r6, #31
    93c6:	d506      	bpl.n	93d6 <_dtoa_r+0xbce>
    93c8:	e9d7 2300 	ldrd	r2, r3, [r7]
    93cc:	f001 feae 	bl	b12c <__aeabi_dmul>
    93d0:	f10a 0a01 	add.w	sl, sl, #1
    93d4:	2301      	movs	r3, #1
    93d6:	1076      	asrs	r6, r6, #1
    93d8:	f107 0708 	add.w	r7, r7, #8
    93dc:	d1f2      	bne.n	93c4 <_dtoa_r+0xbbc>
    93de:	2b00      	cmp	r3, #0
    93e0:	f43f ab9e 	beq.w	8b20 <_dtoa_r+0x318>
    93e4:	ec41 0b1a 	vmov	d10, r0, r1
    93e8:	f7ff bb9a 	b.w	8b20 <_dtoa_r+0x318>
    93ec:	9b02      	ldr	r3, [sp, #8]
    93ee:	2b00      	cmp	r3, #0
    93f0:	f47f ae3e 	bne.w	9070 <_dtoa_r+0x868>
    93f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    93f8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    93fc:	2b00      	cmp	r3, #0
    93fe:	f43f af0b 	beq.w	9218 <_dtoa_r+0xa10>
    9402:	e635      	b.n	9070 <_dtoa_r+0x868>
    9404:	4629      	mov	r1, r5
    9406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9408:	4620      	mov	r0, r4
    940a:	f7fc fef1 	bl	61f0 <__pow5mult>
    940e:	4605      	mov	r5, r0
    9410:	e542      	b.n	8e98 <_dtoa_r+0x690>
    9412:	2a00      	cmp	r2, #0
    9414:	dd12      	ble.n	943c <_dtoa_r+0xc34>
    9416:	4629      	mov	r1, r5
    9418:	2201      	movs	r2, #1
    941a:	4620      	mov	r0, r4
    941c:	9301      	str	r3, [sp, #4]
    941e:	f7fc ff47 	bl	62b0 <__lshift>
    9422:	4651      	mov	r1, sl
    9424:	4605      	mov	r5, r0
    9426:	f7fc ffbb 	bl	63a0 <__mcmp>
    942a:	2800      	cmp	r0, #0
    942c:	9b01      	ldr	r3, [sp, #4]
    942e:	f340 8129 	ble.w	9684 <_dtoa_r+0xe7c>
    9432:	2b39      	cmp	r3, #57	; 0x39
    9434:	f000 8107 	beq.w	9646 <_dtoa_r+0xe3e>
    9438:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    943c:	46b9      	mov	r9, r7
    943e:	f809 3b01 	strb.w	r3, [r9], #1
    9442:	9b05      	ldr	r3, [sp, #20]
    9444:	3301      	adds	r3, #1
    9446:	4637      	mov	r7, r6
    9448:	9305      	str	r3, [sp, #20]
    944a:	4646      	mov	r6, r8
    944c:	e5a8      	b.n	8fa0 <_dtoa_r+0x798>
    944e:	46a2      	mov	sl, r4
    9450:	ee18 5a10 	vmov	r5, s16
    9454:	ee18 4a90 	vmov	r4, s17
    9458:	4602      	mov	r2, r0
    945a:	460b      	mov	r3, r1
    945c:	f7fb f8fc 	bl	4658 <__adddf3>
    9460:	4642      	mov	r2, r8
    9462:	464b      	mov	r3, r9
    9464:	4606      	mov	r6, r0
    9466:	460f      	mov	r7, r1
    9468:	f7fb fb2a 	bl	4ac0 <__aeabi_dcmpgt>
    946c:	b960      	cbnz	r0, 9488 <_dtoa_r+0xc80>
    946e:	4642      	mov	r2, r8
    9470:	464b      	mov	r3, r9
    9472:	4630      	mov	r0, r6
    9474:	4639      	mov	r1, r7
    9476:	f7fb fafb 	bl	4a70 <__aeabi_dcmpeq>
    947a:	2800      	cmp	r0, #0
    947c:	f43f acb4 	beq.w	8de8 <_dtoa_r+0x5e0>
    9480:	ea5f 71cb 	movs.w	r1, fp, lsl #31
    9484:	f57f acb0 	bpl.w	8de8 <_dtoa_r+0x5e0>
    9488:	9a00      	ldr	r2, [sp, #0]
    948a:	f7ff bbf3 	b.w	8c74 <_dtoa_r+0x46c>
    948e:	6871      	ldr	r1, [r6, #4]
    9490:	4620      	mov	r0, r4
    9492:	f7fc fcff 	bl	5e94 <_Balloc>
    9496:	4607      	mov	r7, r0
    9498:	2800      	cmp	r0, #0
    949a:	f000 8128 	beq.w	96ee <_dtoa_r+0xee6>
    949e:	6933      	ldr	r3, [r6, #16]
    94a0:	3302      	adds	r3, #2
    94a2:	009a      	lsls	r2, r3, #2
    94a4:	f106 010c 	add.w	r1, r6, #12
    94a8:	300c      	adds	r0, #12
    94aa:	f7f9 fe17 	bl	30dc <memcpy>
    94ae:	4639      	mov	r1, r7
    94b0:	2201      	movs	r2, #1
    94b2:	4620      	mov	r0, r4
    94b4:	f7fc fefc 	bl	62b0 <__lshift>
    94b8:	4680      	mov	r8, r0
    94ba:	e5fb      	b.n	90b4 <_dtoa_r+0x8ac>
    94bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
    94c0:	1a9f      	subs	r7, r3, r2
    94c2:	e4c7      	b.n	8e54 <_dtoa_r+0x64c>
    94c4:	2b39      	cmp	r3, #57	; 0x39
    94c6:	f000 80be 	beq.w	9646 <_dtoa_r+0xe3e>
    94ca:	46b9      	mov	r9, r7
    94cc:	3301      	adds	r3, #1
    94ce:	e7b6      	b.n	943e <_dtoa_r+0xc36>
    94d0:	9a05      	ldr	r2, [sp, #20]
    94d2:	3201      	adds	r2, #1
    94d4:	4637      	mov	r7, r6
    94d6:	9205      	str	r2, [sp, #20]
    94d8:	4646      	mov	r6, r8
    94da:	e542      	b.n	8f62 <_dtoa_r+0x75a>
    94dc:	4629      	mov	r1, r5
    94de:	4620      	mov	r0, r4
    94e0:	f7fc fe86 	bl	61f0 <__pow5mult>
    94e4:	4605      	mov	r5, r0
    94e6:	e4d7      	b.n	8e98 <_dtoa_r+0x690>
    94e8:	980e      	ldr	r0, [sp, #56]	; 0x38
    94ea:	4974      	ldr	r1, [pc, #464]	; (96bc <_dtoa_r+0xeb4>)
    94ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    94f0:	4642      	mov	r2, r8
    94f2:	464b      	mov	r3, r9
    94f4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
    94f8:	f001 fe18 	bl	b12c <__aeabi_dmul>
    94fc:	ec5a 9b1a 	vmov	r9, sl, d10
    9500:	ec41 0b18 	vmov	d8, r0, r1
    9504:	4651      	mov	r1, sl
    9506:	ee1a 0a10 	vmov	r0, s20
    950a:	f002 f821 	bl	b550 <__aeabi_d2iz>
    950e:	4607      	mov	r7, r0
    9510:	f7fb f9ee 	bl	48f0 <__aeabi_i2d>
    9514:	4602      	mov	r2, r0
    9516:	460b      	mov	r3, r1
    9518:	ee1a 0a10 	vmov	r0, s20
    951c:	4651      	mov	r1, sl
    951e:	f7fb f899 	bl	4654 <__aeabi_dsub>
    9522:	4606      	mov	r6, r0
    9524:	980e      	ldr	r0, [sp, #56]	; 0x38
    9526:	f8dd 8000 	ldr.w	r8, [sp]
    952a:	3730      	adds	r7, #48	; 0x30
    952c:	2801      	cmp	r0, #1
    952e:	f808 7b01 	strb.w	r7, [r8], #1
    9532:	460f      	mov	r7, r1
    9534:	f000 80d5 	beq.w	96e2 <_dtoa_r+0xeda>
    9538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    953a:	9a00      	ldr	r2, [sp, #0]
    953c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    9540:	4413      	add	r3, r2
    9542:	469b      	mov	fp, r3
    9544:	46c2      	mov	sl, r8
    9546:	4b5f      	ldr	r3, [pc, #380]	; (96c4 <_dtoa_r+0xebc>)
    9548:	2200      	movs	r2, #0
    954a:	4630      	mov	r0, r6
    954c:	4639      	mov	r1, r7
    954e:	f001 fded 	bl	b12c <__aeabi_dmul>
    9552:	4689      	mov	r9, r1
    9554:	4680      	mov	r8, r0
    9556:	f001 fffb 	bl	b550 <__aeabi_d2iz>
    955a:	4607      	mov	r7, r0
    955c:	f7fb f9c8 	bl	48f0 <__aeabi_i2d>
    9560:	3730      	adds	r7, #48	; 0x30
    9562:	4602      	mov	r2, r0
    9564:	460b      	mov	r3, r1
    9566:	4640      	mov	r0, r8
    9568:	4649      	mov	r1, r9
    956a:	f7fb f873 	bl	4654 <__aeabi_dsub>
    956e:	f80a 7b01 	strb.w	r7, [sl], #1
    9572:	45d3      	cmp	fp, sl
    9574:	4606      	mov	r6, r0
    9576:	460f      	mov	r7, r1
    9578:	d1e5      	bne.n	9546 <_dtoa_r+0xd3e>
    957a:	46da      	mov	sl, fp
    957c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    9580:	4b51      	ldr	r3, [pc, #324]	; (96c8 <_dtoa_r+0xec0>)
    9582:	ec59 8b18 	vmov	r8, r9, d8
    9586:	2200      	movs	r2, #0
    9588:	ee18 0a10 	vmov	r0, s16
    958c:	4649      	mov	r1, r9
    958e:	f7fb f863 	bl	4658 <__adddf3>
    9592:	4632      	mov	r2, r6
    9594:	463b      	mov	r3, r7
    9596:	f7fb fa75 	bl	4a84 <__aeabi_dcmplt>
    959a:	2800      	cmp	r0, #0
    959c:	d16d      	bne.n	967a <_dtoa_r+0xe72>
    959e:	ee18 2a10 	vmov	r2, s16
    95a2:	464b      	mov	r3, r9
    95a4:	4948      	ldr	r1, [pc, #288]	; (96c8 <_dtoa_r+0xec0>)
    95a6:	2000      	movs	r0, #0
    95a8:	f7fb f854 	bl	4654 <__aeabi_dsub>
    95ac:	4632      	mov	r2, r6
    95ae:	463b      	mov	r3, r7
    95b0:	f7fb fa86 	bl	4ac0 <__aeabi_dcmpgt>
    95b4:	2800      	cmp	r0, #0
    95b6:	f43f ab92 	beq.w	8cde <_dtoa_r+0x4d6>
    95ba:	46d1      	mov	r9, sl
    95bc:	f10a 3aff 	add.w	sl, sl, #4294967295
    95c0:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    95c4:	2b30      	cmp	r3, #48	; 0x30
    95c6:	d0f8      	beq.n	95ba <_dtoa_r+0xdb2>
    95c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    95ca:	3301      	adds	r3, #1
    95cc:	9305      	str	r3, [sp, #20]
    95ce:	e4f7      	b.n	8fc0 <_dtoa_r+0x7b8>
    95d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    95d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    95d6:	e6c6      	b.n	9366 <_dtoa_r+0xb5e>
    95d8:	9b07      	ldr	r3, [sp, #28]
    95da:	2b00      	cmp	r3, #0
    95dc:	f43f ab57 	beq.w	8c8e <_dtoa_r+0x486>
    95e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    95e2:	2b00      	cmp	r3, #0
    95e4:	f77f ab7b 	ble.w	8cde <_dtoa_r+0x4d6>
    95e8:	9a05      	ldr	r2, [sp, #20]
    95ea:	930e      	str	r3, [sp, #56]	; 0x38
    95ec:	3a01      	subs	r2, #1
    95ee:	4b35      	ldr	r3, [pc, #212]	; (96c4 <_dtoa_r+0xebc>)
    95f0:	9210      	str	r2, [sp, #64]	; 0x40
    95f2:	ee1a 0a10 	vmov	r0, s20
    95f6:	4639      	mov	r1, r7
    95f8:	2200      	movs	r2, #0
    95fa:	f001 fd97 	bl	b12c <__aeabi_dmul>
    95fe:	4602      	mov	r2, r0
    9600:	4616      	mov	r6, r2
    9602:	460f      	mov	r7, r1
    9604:	f10a 0001 	add.w	r0, sl, #1
    9608:	f7fb f972 	bl	48f0 <__aeabi_i2d>
    960c:	4632      	mov	r2, r6
    960e:	463b      	mov	r3, r7
    9610:	f001 fd8c 	bl	b12c <__aeabi_dmul>
    9614:	4b2d      	ldr	r3, [pc, #180]	; (96cc <_dtoa_r+0xec4>)
    9616:	2200      	movs	r2, #0
    9618:	f7fb f81e 	bl	4658 <__adddf3>
    961c:	ec47 6b1a 	vmov	d10, r6, r7
    9620:	4680      	mov	r8, r0
    9622:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    9626:	f7ff ba9f 	b.w	8b68 <_dtoa_r+0x360>
    962a:	f04f 0a02 	mov.w	sl, #2
    962e:	eeb0 aa49 	vmov.f32	s20, s18
    9632:	eef0 aa69 	vmov.f32	s21, s19
    9636:	f7ff ba73 	b.w	8b20 <_dtoa_r+0x318>
    963a:	9b05      	ldr	r3, [sp, #20]
    963c:	3301      	adds	r3, #1
    963e:	9305      	str	r3, [sp, #20]
    9640:	2331      	movs	r3, #49	; 0x31
    9642:	f7ff bb1e 	b.w	8c82 <_dtoa_r+0x47a>
    9646:	9b05      	ldr	r3, [sp, #20]
    9648:	46bb      	mov	fp, r7
    964a:	3301      	adds	r3, #1
    964c:	9305      	str	r3, [sp, #20]
    964e:	2339      	movs	r3, #57	; 0x39
    9650:	4637      	mov	r7, r6
    9652:	f80b 3b01 	strb.w	r3, [fp], #1
    9656:	4646      	mov	r6, r8
    9658:	e492      	b.n	8f80 <_dtoa_r+0x778>
    965a:	f04f 0a00 	mov.w	sl, #0
    965e:	4656      	mov	r6, sl
    9660:	e628      	b.n	92b4 <_dtoa_r+0xaac>
    9662:	4698      	mov	r8, r3
    9664:	e427      	b.n	8eb6 <_dtoa_r+0x6ae>
    9666:	46aa      	mov	sl, r5
    9668:	ee18 4a10 	vmov	r4, s16
    966c:	ee1a 5a10 	vmov	r5, s20
    9670:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9672:	3301      	adds	r3, #1
    9674:	9305      	str	r3, [sp, #20]
    9676:	46d1      	mov	r9, sl
    9678:	e4a2      	b.n	8fc0 <_dtoa_r+0x7b8>
    967a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    967c:	9a00      	ldr	r2, [sp, #0]
    967e:	9305      	str	r3, [sp, #20]
    9680:	f7ff baf8 	b.w	8c74 <_dtoa_r+0x46c>
    9684:	f47f aeda 	bne.w	943c <_dtoa_r+0xc34>
    9688:	07da      	lsls	r2, r3, #31
    968a:	f57f aed7 	bpl.w	943c <_dtoa_r+0xc34>
    968e:	e6d0      	b.n	9432 <_dtoa_r+0xc2a>
    9690:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    9694:	ee1a 5a10 	vmov	r5, s20
    9698:	ee18 4a10 	vmov	r4, s16
    969c:	f7ff bb1f 	b.w	8cde <_dtoa_r+0x4d6>
    96a0:	2b39      	cmp	r3, #57	; 0x39
    96a2:	d0d0      	beq.n	9646 <_dtoa_r+0xe3e>
    96a4:	f1b9 0f00 	cmp.w	r9, #0
    96a8:	f73f aec6 	bgt.w	9438 <_dtoa_r+0xc30>
    96ac:	e6c6      	b.n	943c <_dtoa_r+0xc34>
    96ae:	9b01      	ldr	r3, [sp, #4]
    96b0:	2b02      	cmp	r3, #2
    96b2:	f73f adea 	bgt.w	928a <_dtoa_r+0xa82>
    96b6:	f8cd 9014 	str.w	r9, [sp, #20]
    96ba:	e572      	b.n	91a2 <_dtoa_r+0x99a>
    96bc:	0000bb18 	.word	0x0000bb18
    96c0:	0000baf0 	.word	0x0000baf0
    96c4:	40240000 	.word	0x40240000
    96c8:	3fe00000 	.word	0x3fe00000
    96cc:	401c0000 	.word	0x401c0000
    96d0:	9b01      	ldr	r3, [sp, #4]
    96d2:	2b02      	cmp	r3, #2
    96d4:	f73f add9 	bgt.w	928a <_dtoa_r+0xa82>
    96d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    96da:	f8cd 9014 	str.w	r9, [sp, #20]
    96de:	9307      	str	r3, [sp, #28]
    96e0:	e4e0      	b.n	90a4 <_dtoa_r+0x89c>
    96e2:	46c2      	mov	sl, r8
    96e4:	e74c      	b.n	9580 <_dtoa_r+0xd78>
    96e6:	f04f 0a02 	mov.w	sl, #2
    96ea:	f7ff ba19 	b.w	8b20 <_dtoa_r+0x318>
    96ee:	4b12      	ldr	r3, [pc, #72]	; (9738 <_dtoa_r+0xf30>)
    96f0:	4812      	ldr	r0, [pc, #72]	; (973c <_dtoa_r+0xf34>)
    96f2:	463a      	mov	r2, r7
    96f4:	f240 21ef 	movw	r1, #751	; 0x2ef
    96f8:	f7fe ff94 	bl	8624 <__assert_func>
    96fc:	2600      	movs	r6, #0
    96fe:	63e6      	str	r6, [r4, #60]	; 0x3c
    9700:	4631      	mov	r1, r6
    9702:	4620      	mov	r0, r4
    9704:	f7fc fbc6 	bl	5e94 <_Balloc>
    9708:	9000      	str	r0, [sp, #0]
    970a:	b950      	cbnz	r0, 9722 <_dtoa_r+0xf1a>
    970c:	4b0a      	ldr	r3, [pc, #40]	; (9738 <_dtoa_r+0xf30>)
    970e:	480b      	ldr	r0, [pc, #44]	; (973c <_dtoa_r+0xf34>)
    9710:	2200      	movs	r2, #0
    9712:	f240 11af 	movw	r1, #431	; 0x1af
    9716:	f7fe ff85 	bl	8624 <__assert_func>
    971a:	4b09      	ldr	r3, [pc, #36]	; (9740 <_dtoa_r+0xf38>)
    971c:	9300      	str	r3, [sp, #0]
    971e:	f7ff b8b6 	b.w	888e <_dtoa_r+0x86>
    9722:	9b00      	ldr	r3, [sp, #0]
    9724:	63a3      	str	r3, [r4, #56]	; 0x38
    9726:	f04f 33ff 	mov.w	r3, #4294967295
    972a:	930f      	str	r3, [sp, #60]	; 0x3c
    972c:	9307      	str	r3, [sp, #28]
    972e:	2301      	movs	r3, #1
    9730:	9609      	str	r6, [sp, #36]	; 0x24
    9732:	930a      	str	r3, [sp, #40]	; 0x28
    9734:	f7ff bad3 	b.w	8cde <_dtoa_r+0x4d6>
    9738:	0000ba7c 	.word	0x0000ba7c
    973c:	0000bca0 	.word	0x0000bca0
    9740:	0000bc90 	.word	0x0000bc90

00009744 <_wcrtomb_r>:
    9744:	b570      	push	{r4, r5, r6, lr}
    9746:	4605      	mov	r5, r0
    9748:	b084      	sub	sp, #16
    974a:	b15b      	cbz	r3, 9764 <_wcrtomb_r+0x20>
    974c:	461c      	mov	r4, r3
    974e:	b169      	cbz	r1, 976c <_wcrtomb_r+0x28>
    9750:	4b0e      	ldr	r3, [pc, #56]	; (978c <_wcrtomb_r+0x48>)
    9752:	4628      	mov	r0, r5
    9754:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    9758:	4623      	mov	r3, r4
    975a:	47b0      	blx	r6
    975c:	1c43      	adds	r3, r0, #1
    975e:	d00f      	beq.n	9780 <_wcrtomb_r+0x3c>
    9760:	b004      	add	sp, #16
    9762:	bd70      	pop	{r4, r5, r6, pc}
    9764:	f500 7482 	add.w	r4, r0, #260	; 0x104
    9768:	2900      	cmp	r1, #0
    976a:	d1f1      	bne.n	9750 <_wcrtomb_r+0xc>
    976c:	4a07      	ldr	r2, [pc, #28]	; (978c <_wcrtomb_r+0x48>)
    976e:	4623      	mov	r3, r4
    9770:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    9774:	4628      	mov	r0, r5
    9776:	460a      	mov	r2, r1
    9778:	a901      	add	r1, sp, #4
    977a:	47b0      	blx	r6
    977c:	1c43      	adds	r3, r0, #1
    977e:	d1ef      	bne.n	9760 <_wcrtomb_r+0x1c>
    9780:	2200      	movs	r2, #0
    9782:	238a      	movs	r3, #138	; 0x8a
    9784:	6022      	str	r2, [r4, #0]
    9786:	602b      	str	r3, [r5, #0]
    9788:	b004      	add	sp, #16
    978a:	bd70      	pop	{r4, r5, r6, pc}
    978c:	1fff0c30 	.word	0x1fff0c30

00009790 <_wcsrtombs_r>:
    9790:	b510      	push	{r4, lr}
    9792:	b082      	sub	sp, #8
    9794:	9c04      	ldr	r4, [sp, #16]
    9796:	e9cd 3400 	strd	r3, r4, [sp]
    979a:	f04f 33ff 	mov.w	r3, #4294967295
    979e:	f001 fbc7 	bl	af30 <_wcsnrtombs_r>
    97a2:	b002      	add	sp, #8
    97a4:	bd10      	pop	{r4, pc}
    97a6:	bf00      	nop

000097a8 <fiprintf>:
    97a8:	b40e      	push	{r1, r2, r3}
    97aa:	b510      	push	{r4, lr}
    97ac:	b083      	sub	sp, #12
    97ae:	ab05      	add	r3, sp, #20
    97b0:	4c06      	ldr	r4, [pc, #24]	; (97cc <fiprintf+0x24>)
    97b2:	f853 2b04 	ldr.w	r2, [r3], #4
    97b6:	9301      	str	r3, [sp, #4]
    97b8:	4601      	mov	r1, r0
    97ba:	6820      	ldr	r0, [r4, #0]
    97bc:	f000 f8c4 	bl	9948 <_vfiprintf_r>
    97c0:	b003      	add	sp, #12
    97c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97c6:	b003      	add	sp, #12
    97c8:	4770      	bx	lr
    97ca:	bf00      	nop
    97cc:	1fff0ec0 	.word	0x1fff0ec0

000097d0 <__ssprint_r>:
    97d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97d4:	6893      	ldr	r3, [r2, #8]
    97d6:	6817      	ldr	r7, [r2, #0]
    97d8:	b083      	sub	sp, #12
    97da:	4692      	mov	sl, r2
    97dc:	2b00      	cmp	r3, #0
    97de:	d070      	beq.n	98c2 <__ssprint_r+0xf2>
    97e0:	4681      	mov	r9, r0
    97e2:	688a      	ldr	r2, [r1, #8]
    97e4:	6808      	ldr	r0, [r1, #0]
    97e6:	460c      	mov	r4, r1
    97e8:	3708      	adds	r7, #8
    97ea:	e043      	b.n	9874 <__ssprint_r+0xa4>
    97ec:	89a3      	ldrh	r3, [r4, #12]
    97ee:	f413 6f90 	tst.w	r3, #1152	; 0x480
    97f2:	d02e      	beq.n	9852 <__ssprint_r+0x82>
    97f4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    97f8:	eba0 0801 	sub.w	r8, r0, r1
    97fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    9800:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    9804:	f108 0001 	add.w	r0, r8, #1
    9808:	1076      	asrs	r6, r6, #1
    980a:	4428      	add	r0, r5
    980c:	42b0      	cmp	r0, r6
    980e:	4632      	mov	r2, r6
    9810:	bf84      	itt	hi
    9812:	4606      	movhi	r6, r0
    9814:	4632      	movhi	r2, r6
    9816:	055b      	lsls	r3, r3, #21
    9818:	d537      	bpl.n	988a <__ssprint_r+0xba>
    981a:	4611      	mov	r1, r2
    981c:	4648      	mov	r0, r9
    981e:	f7fb f96f 	bl	4b00 <_malloc_r>
    9822:	9001      	str	r0, [sp, #4]
    9824:	2800      	cmp	r0, #0
    9826:	d03a      	beq.n	989e <__ssprint_r+0xce>
    9828:	4642      	mov	r2, r8
    982a:	6921      	ldr	r1, [r4, #16]
    982c:	f7f9 fc56 	bl	30dc <memcpy>
    9830:	89a2      	ldrh	r2, [r4, #12]
    9832:	9b01      	ldr	r3, [sp, #4]
    9834:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    9838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    983c:	81a2      	strh	r2, [r4, #12]
    983e:	eba6 0208 	sub.w	r2, r6, r8
    9842:	eb03 0008 	add.w	r0, r3, r8
    9846:	6166      	str	r6, [r4, #20]
    9848:	60a2      	str	r2, [r4, #8]
    984a:	6123      	str	r3, [r4, #16]
    984c:	6020      	str	r0, [r4, #0]
    984e:	462e      	mov	r6, r5
    9850:	46a8      	mov	r8, r5
    9852:	4642      	mov	r2, r8
    9854:	4659      	mov	r1, fp
    9856:	f7fb ff8b 	bl	5770 <memmove>
    985a:	f8da 3008 	ldr.w	r3, [sl, #8]
    985e:	68a2      	ldr	r2, [r4, #8]
    9860:	6820      	ldr	r0, [r4, #0]
    9862:	1b92      	subs	r2, r2, r6
    9864:	4440      	add	r0, r8
    9866:	1b5b      	subs	r3, r3, r5
    9868:	60a2      	str	r2, [r4, #8]
    986a:	6020      	str	r0, [r4, #0]
    986c:	f8ca 3008 	str.w	r3, [sl, #8]
    9870:	b33b      	cbz	r3, 98c2 <__ssprint_r+0xf2>
    9872:	3708      	adds	r7, #8
    9874:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    9878:	2d00      	cmp	r5, #0
    987a:	d0fa      	beq.n	9872 <__ssprint_r+0xa2>
    987c:	42aa      	cmp	r2, r5
    987e:	4616      	mov	r6, r2
    9880:	4690      	mov	r8, r2
    9882:	d9b3      	bls.n	97ec <__ssprint_r+0x1c>
    9884:	462e      	mov	r6, r5
    9886:	46a8      	mov	r8, r5
    9888:	e7e3      	b.n	9852 <__ssprint_r+0x82>
    988a:	4648      	mov	r0, r9
    988c:	f7fb fbf4 	bl	5078 <_realloc_r>
    9890:	4603      	mov	r3, r0
    9892:	2800      	cmp	r0, #0
    9894:	d1d3      	bne.n	983e <__ssprint_r+0x6e>
    9896:	6921      	ldr	r1, [r4, #16]
    9898:	4648      	mov	r0, r9
    989a:	f7fc f9df 	bl	5c5c <_free_r>
    989e:	89a3      	ldrh	r3, [r4, #12]
    98a0:	220c      	movs	r2, #12
    98a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    98a6:	f8c9 2000 	str.w	r2, [r9]
    98aa:	f04f 30ff 	mov.w	r0, #4294967295
    98ae:	81a3      	strh	r3, [r4, #12]
    98b0:	2200      	movs	r2, #0
    98b2:	2300      	movs	r3, #0
    98b4:	f8ca 2008 	str.w	r2, [sl, #8]
    98b8:	f8ca 3004 	str.w	r3, [sl, #4]
    98bc:	b003      	add	sp, #12
    98be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98c2:	2000      	movs	r0, #0
    98c4:	2300      	movs	r3, #0
    98c6:	f8ca 3004 	str.w	r3, [sl, #4]
    98ca:	b003      	add	sp, #12
    98cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000098d0 <__sprint_r.part.0>:
    98d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    98d6:	049c      	lsls	r4, r3, #18
    98d8:	4690      	mov	r8, r2
    98da:	d52d      	bpl.n	9938 <__sprint_r.part.0+0x68>
    98dc:	6893      	ldr	r3, [r2, #8]
    98de:	6812      	ldr	r2, [r2, #0]
    98e0:	b343      	cbz	r3, 9934 <__sprint_r.part.0+0x64>
    98e2:	468b      	mov	fp, r1
    98e4:	4606      	mov	r6, r0
    98e6:	f102 0908 	add.w	r9, r2, #8
    98ea:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    98ee:	ea5f 079a 	movs.w	r7, sl, lsr #2
    98f2:	d015      	beq.n	9920 <__sprint_r.part.0+0x50>
    98f4:	3d04      	subs	r5, #4
    98f6:	2400      	movs	r4, #0
    98f8:	e001      	b.n	98fe <__sprint_r.part.0+0x2e>
    98fa:	42a7      	cmp	r7, r4
    98fc:	d00e      	beq.n	991c <__sprint_r.part.0+0x4c>
    98fe:	f855 1f04 	ldr.w	r1, [r5, #4]!
    9902:	465a      	mov	r2, fp
    9904:	4630      	mov	r0, r6
    9906:	f001 fa5b 	bl	adc0 <_fputwc_r>
    990a:	1c43      	adds	r3, r0, #1
    990c:	f104 0401 	add.w	r4, r4, #1
    9910:	d1f3      	bne.n	98fa <__sprint_r.part.0+0x2a>
    9912:	2300      	movs	r3, #0
    9914:	e9c8 3301 	strd	r3, r3, [r8, #4]
    9918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    991c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    9920:	f02a 0a03 	bic.w	sl, sl, #3
    9924:	eba3 030a 	sub.w	r3, r3, sl
    9928:	f8c8 3008 	str.w	r3, [r8, #8]
    992c:	f109 0908 	add.w	r9, r9, #8
    9930:	2b00      	cmp	r3, #0
    9932:	d1da      	bne.n	98ea <__sprint_r.part.0+0x1a>
    9934:	2000      	movs	r0, #0
    9936:	e7ec      	b.n	9912 <__sprint_r.part.0+0x42>
    9938:	f001 f80c 	bl	a954 <__sfvwrite_r>
    993c:	2300      	movs	r3, #0
    993e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    9942:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9946:	bf00      	nop

00009948 <_vfiprintf_r>:
    9948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    994c:	ed2d 8b02 	vpush	{d8}
    9950:	b0c5      	sub	sp, #276	; 0x114
    9952:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    9956:	4683      	mov	fp, r0
    9958:	ee08 1a10 	vmov	s16, r1
    995c:	4616      	mov	r6, r2
    995e:	2100      	movs	r1, #0
    9960:	2208      	movs	r2, #8
    9962:	4650      	mov	r0, sl
    9964:	461c      	mov	r4, r3
    9966:	9307      	str	r3, [sp, #28]
    9968:	f7fb ff7e 	bl	5868 <memset>
    996c:	f1bb 0f00 	cmp.w	fp, #0
    9970:	d004      	beq.n	997c <_vfiprintf_r+0x34>
    9972:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    9976:	2b00      	cmp	r3, #0
    9978:	f000 86a0 	beq.w	a6bc <_vfiprintf_r+0xd74>
    997c:	ee18 2a10 	vmov	r2, s16
    9980:	6e53      	ldr	r3, [r2, #100]	; 0x64
    9982:	07db      	lsls	r3, r3, #31
    9984:	f140 8513 	bpl.w	a3ae <_vfiprintf_r+0xa66>
    9988:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    998c:	b28a      	uxth	r2, r1
    998e:	0495      	lsls	r5, r2, #18
    9990:	d40b      	bmi.n	99aa <_vfiprintf_r+0x62>
    9992:	ee18 3a10 	vmov	r3, s16
    9996:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    999a:	8199      	strh	r1, [r3, #12]
    999c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    999e:	b28a      	uxth	r2, r1
    99a0:	ee18 1a10 	vmov	r1, s16
    99a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    99a8:	664b      	str	r3, [r1, #100]	; 0x64
    99aa:	0710      	lsls	r0, r2, #28
    99ac:	f140 8105 	bpl.w	9bba <_vfiprintf_r+0x272>
    99b0:	ee18 3a10 	vmov	r3, s16
    99b4:	691b      	ldr	r3, [r3, #16]
    99b6:	2b00      	cmp	r3, #0
    99b8:	f000 80ff 	beq.w	9bba <_vfiprintf_r+0x272>
    99bc:	f002 031a 	and.w	r3, r2, #26
    99c0:	2b0a      	cmp	r3, #10
    99c2:	f000 810a 	beq.w	9bda <_vfiprintf_r+0x292>
    99c6:	2300      	movs	r3, #0
    99c8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    99cc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    99d0:	aa1b      	add	r2, sp, #108	; 0x6c
    99d2:	930c      	str	r3, [sp, #48]	; 0x30
    99d4:	9218      	str	r2, [sp, #96]	; 0x60
    99d6:	4691      	mov	r9, r2
    99d8:	930b      	str	r3, [sp, #44]	; 0x2c
    99da:	9305      	str	r3, [sp, #20]
    99dc:	46b0      	mov	r8, r6
    99de:	4644      	mov	r4, r8
    99e0:	4ba8      	ldr	r3, [pc, #672]	; (9c84 <_vfiprintf_r+0x33c>)
    99e2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    99e6:	f7fb ffc3 	bl	5970 <__locale_mb_cur_max>
    99ea:	4622      	mov	r2, r4
    99ec:	4603      	mov	r3, r0
    99ee:	a912      	add	r1, sp, #72	; 0x48
    99f0:	f8cd a000 	str.w	sl, [sp]
    99f4:	4658      	mov	r0, fp
    99f6:	47a8      	blx	r5
    99f8:	2800      	cmp	r0, #0
    99fa:	f000 8145 	beq.w	9c88 <_vfiprintf_r+0x340>
    99fe:	f2c0 8139 	blt.w	9c74 <_vfiprintf_r+0x32c>
    9a02:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9a04:	2a25      	cmp	r2, #37	; 0x25
    9a06:	4603      	mov	r3, r0
    9a08:	d001      	beq.n	9a0e <_vfiprintf_r+0xc6>
    9a0a:	441c      	add	r4, r3
    9a0c:	e7e8      	b.n	99e0 <_vfiprintf_r+0x98>
    9a0e:	ebb4 0608 	subs.w	r6, r4, r8
    9a12:	4605      	mov	r5, r0
    9a14:	f040 813c 	bne.w	9c90 <_vfiprintf_r+0x348>
    9a18:	2300      	movs	r3, #0
    9a1a:	7861      	ldrb	r1, [r4, #1]
    9a1c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9a20:	f104 0801 	add.w	r8, r4, #1
    9a24:	9306      	str	r3, [sp, #24]
    9a26:	f04f 37ff 	mov.w	r7, #4294967295
    9a2a:	461e      	mov	r6, r3
    9a2c:	242b      	movs	r4, #43	; 0x2b
    9a2e:	f108 0801 	add.w	r8, r8, #1
    9a32:	f1a1 0320 	sub.w	r3, r1, #32
    9a36:	2b5a      	cmp	r3, #90	; 0x5a
    9a38:	f200 8178 	bhi.w	9d2c <_vfiprintf_r+0x3e4>
    9a3c:	e8df f013 	tbh	[pc, r3, lsl #1]
    9a40:	017602b5 	.word	0x017602b5
    9a44:	02b00176 	.word	0x02b00176
    9a48:	01760176 	.word	0x01760176
    9a4c:	006a0176 	.word	0x006a0176
    9a50:	01760176 	.word	0x01760176
    9a54:	028d027d 	.word	0x028d027d
    9a58:	02880176 	.word	0x02880176
    9a5c:	01760297 	.word	0x01760297
    9a60:	005b0292 	.word	0x005b0292
    9a64:	005b005b 	.word	0x005b005b
    9a68:	005b005b 	.word	0x005b005b
    9a6c:	005b005b 	.word	0x005b005b
    9a70:	005b005b 	.word	0x005b005b
    9a74:	01760176 	.word	0x01760176
    9a78:	01760176 	.word	0x01760176
    9a7c:	01760176 	.word	0x01760176
    9a80:	01760176 	.word	0x01760176
    9a84:	025c0176 	.word	0x025c0176
    9a88:	01760084 	.word	0x01760084
    9a8c:	01760176 	.word	0x01760176
    9a90:	01760176 	.word	0x01760176
    9a94:	01760176 	.word	0x01760176
    9a98:	01760176 	.word	0x01760176
    9a9c:	00e80176 	.word	0x00e80176
    9aa0:	01760176 	.word	0x01760176
    9aa4:	02330176 	.word	0x02330176
    9aa8:	02da0176 	.word	0x02da0176
    9aac:	01760176 	.word	0x01760176
    9ab0:	0176058b 	.word	0x0176058b
    9ab4:	01760176 	.word	0x01760176
    9ab8:	01760176 	.word	0x01760176
    9abc:	01760176 	.word	0x01760176
    9ac0:	01760176 	.word	0x01760176
    9ac4:	025c0176 	.word	0x025c0176
    9ac8:	01760086 	.word	0x01760086
    9acc:	01760176 	.word	0x01760176
    9ad0:	008602cd 	.word	0x008602cd
    9ad4:	0176007f 	.word	0x0176007f
    9ad8:	017602c0 	.word	0x017602c0
    9adc:	00ea02fd 	.word	0x00ea02fd
    9ae0:	007f02ed 	.word	0x007f02ed
    9ae4:	02330176 	.word	0x02330176
    9ae8:	0569007c 	.word	0x0569007c
    9aec:	01760176 	.word	0x01760176
    9af0:	0176056b 	.word	0x0176056b
    9af4:	007c      	.short	0x007c
    9af6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    9afa:	2200      	movs	r2, #0
    9afc:	f818 1b01 	ldrb.w	r1, [r8], #1
    9b00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9b04:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    9b08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    9b0c:	2b09      	cmp	r3, #9
    9b0e:	d9f5      	bls.n	9afc <_vfiprintf_r+0x1b4>
    9b10:	9206      	str	r2, [sp, #24]
    9b12:	e78e      	b.n	9a32 <_vfiprintf_r+0xea>
    9b14:	4658      	mov	r0, fp
    9b16:	f7fe fc9d 	bl	8454 <_localeconv_r>
    9b1a:	6843      	ldr	r3, [r0, #4]
    9b1c:	930d      	str	r3, [sp, #52]	; 0x34
    9b1e:	4618      	mov	r0, r3
    9b20:	f7fb ffce 	bl	5ac0 <strlen>
    9b24:	900e      	str	r0, [sp, #56]	; 0x38
    9b26:	4605      	mov	r5, r0
    9b28:	4658      	mov	r0, fp
    9b2a:	f7fe fc93 	bl	8454 <_localeconv_r>
    9b2e:	6883      	ldr	r3, [r0, #8]
    9b30:	930b      	str	r3, [sp, #44]	; 0x2c
    9b32:	2d00      	cmp	r5, #0
    9b34:	f040 84d6 	bne.w	a4e4 <_vfiprintf_r+0xb9c>
    9b38:	f898 1000 	ldrb.w	r1, [r8]
    9b3c:	e777      	b.n	9a2e <_vfiprintf_r+0xe6>
    9b3e:	f898 1000 	ldrb.w	r1, [r8]
    9b42:	f046 0620 	orr.w	r6, r6, #32
    9b46:	e772      	b.n	9a2e <_vfiprintf_r+0xe6>
    9b48:	f046 0610 	orr.w	r6, r6, #16
    9b4c:	06b4      	lsls	r4, r6, #26
    9b4e:	f140 818e 	bpl.w	9e6e <_vfiprintf_r+0x526>
    9b52:	9b07      	ldr	r3, [sp, #28]
    9b54:	3307      	adds	r3, #7
    9b56:	f023 0307 	bic.w	r3, r3, #7
    9b5a:	461a      	mov	r2, r3
    9b5c:	6859      	ldr	r1, [r3, #4]
    9b5e:	f852 3b08 	ldr.w	r3, [r2], #8
    9b62:	9207      	str	r2, [sp, #28]
    9b64:	460a      	mov	r2, r1
    9b66:	2900      	cmp	r1, #0
    9b68:	f2c0 8470 	blt.w	a44c <_vfiprintf_r+0xb04>
    9b6c:	1c79      	adds	r1, r7, #1
    9b6e:	f000 85a2 	beq.w	a6b6 <_vfiprintf_r+0xd6e>
    9b72:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    9b76:	9103      	str	r1, [sp, #12]
    9b78:	ea53 0102 	orrs.w	r1, r3, r2
    9b7c:	f000 843f 	beq.w	a3fe <_vfiprintf_r+0xab6>
    9b80:	2b0a      	cmp	r3, #10
    9b82:	f172 0100 	sbcs.w	r1, r2, #0
    9b86:	f080 8541 	bcs.w	a60c <_vfiprintf_r+0xcc4>
    9b8a:	3330      	adds	r3, #48	; 0x30
    9b8c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    9b90:	9e03      	ldr	r6, [sp, #12]
    9b92:	2301      	movs	r3, #1
    9b94:	9304      	str	r3, [sp, #16]
    9b96:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    9b9a:	9b04      	ldr	r3, [sp, #16]
    9b9c:	42bb      	cmp	r3, r7
    9b9e:	bfb8      	it	lt
    9ba0:	463b      	movlt	r3, r7
    9ba2:	9303      	str	r3, [sp, #12]
    9ba4:	2300      	movs	r3, #0
    9ba6:	9308      	str	r3, [sp, #32]
    9ba8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    9bac:	2b00      	cmp	r3, #0
    9bae:	f000 80cb 	beq.w	9d48 <_vfiprintf_r+0x400>
    9bb2:	9b03      	ldr	r3, [sp, #12]
    9bb4:	3301      	adds	r3, #1
    9bb6:	9303      	str	r3, [sp, #12]
    9bb8:	e0c6      	b.n	9d48 <_vfiprintf_r+0x400>
    9bba:	ee18 1a10 	vmov	r1, s16
    9bbe:	4658      	mov	r0, fp
    9bc0:	ee18 5a10 	vmov	r5, s16
    9bc4:	f001 f840 	bl	ac48 <__swsetup_r>
    9bc8:	2800      	cmp	r0, #0
    9bca:	f040 8652 	bne.w	a872 <_vfiprintf_r+0xf2a>
    9bce:	89aa      	ldrh	r2, [r5, #12]
    9bd0:	f002 031a 	and.w	r3, r2, #26
    9bd4:	2b0a      	cmp	r3, #10
    9bd6:	f47f aef6 	bne.w	99c6 <_vfiprintf_r+0x7e>
    9bda:	ee18 1a10 	vmov	r1, s16
    9bde:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    9be2:	2b00      	cmp	r3, #0
    9be4:	f6ff aeef 	blt.w	99c6 <_vfiprintf_r+0x7e>
    9be8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    9bea:	07db      	lsls	r3, r3, #31
    9bec:	d402      	bmi.n	9bf4 <_vfiprintf_r+0x2ac>
    9bee:	0597      	lsls	r7, r2, #22
    9bf0:	f140 8612 	bpl.w	a818 <_vfiprintf_r+0xed0>
    9bf4:	ee18 1a10 	vmov	r1, s16
    9bf8:	4623      	mov	r3, r4
    9bfa:	4632      	mov	r2, r6
    9bfc:	4658      	mov	r0, fp
    9bfe:	f000 fe69 	bl	a8d4 <__sbprintf>
    9c02:	9005      	str	r0, [sp, #20]
    9c04:	9805      	ldr	r0, [sp, #20]
    9c06:	b045      	add	sp, #276	; 0x114
    9c08:	ecbd 8b02 	vpop	{d8}
    9c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c10:	f046 0610 	orr.w	r6, r6, #16
    9c14:	f016 0220 	ands.w	r2, r6, #32
    9c18:	f000 8136 	beq.w	9e88 <_vfiprintf_r+0x540>
    9c1c:	9b07      	ldr	r3, [sp, #28]
    9c1e:	3307      	adds	r3, #7
    9c20:	f023 0307 	bic.w	r3, r3, #7
    9c24:	4619      	mov	r1, r3
    9c26:	685a      	ldr	r2, [r3, #4]
    9c28:	f851 3b08 	ldr.w	r3, [r1], #8
    9c2c:	9107      	str	r1, [sp, #28]
    9c2e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    9c32:	9103      	str	r1, [sp, #12]
    9c34:	2100      	movs	r1, #0
    9c36:	2000      	movs	r0, #0
    9c38:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    9c3c:	1c78      	adds	r0, r7, #1
    9c3e:	f000 8210 	beq.w	a062 <_vfiprintf_r+0x71a>
    9c42:	9803      	ldr	r0, [sp, #12]
    9c44:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    9c48:	ea53 0002 	orrs.w	r0, r3, r2
    9c4c:	f040 8208 	bne.w	a060 <_vfiprintf_r+0x718>
    9c50:	2f00      	cmp	r7, #0
    9c52:	f040 8538 	bne.w	a6c6 <_vfiprintf_r+0xd7e>
    9c56:	2900      	cmp	r1, #0
    9c58:	f040 83d5 	bne.w	a406 <_vfiprintf_r+0xabe>
    9c5c:	9b03      	ldr	r3, [sp, #12]
    9c5e:	f013 0301 	ands.w	r3, r3, #1
    9c62:	9304      	str	r3, [sp, #16]
    9c64:	f000 8411 	beq.w	a48a <_vfiprintf_r+0xb42>
    9c68:	2330      	movs	r3, #48	; 0x30
    9c6a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    9c6e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    9c72:	e792      	b.n	9b9a <_vfiprintf_r+0x252>
    9c74:	2208      	movs	r2, #8
    9c76:	2100      	movs	r1, #0
    9c78:	4650      	mov	r0, sl
    9c7a:	f7fb fdf5 	bl	5868 <memset>
    9c7e:	2301      	movs	r3, #1
    9c80:	441c      	add	r4, r3
    9c82:	e6ad      	b.n	99e0 <_vfiprintf_r+0x98>
    9c84:	1fff0c30 	.word	0x1fff0c30
    9c88:	ebb4 0608 	subs.w	r6, r4, r8
    9c8c:	4605      	mov	r5, r0
    9c8e:	d01b      	beq.n	9cc8 <_vfiprintf_r+0x380>
    9c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9c92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9c94:	3301      	adds	r3, #1
    9c96:	4432      	add	r2, r6
    9c98:	2b07      	cmp	r3, #7
    9c9a:	e9c9 8600 	strd	r8, r6, [r9]
    9c9e:	921a      	str	r2, [sp, #104]	; 0x68
    9ca0:	9319      	str	r3, [sp, #100]	; 0x64
    9ca2:	dd1c      	ble.n	9cde <_vfiprintf_r+0x396>
    9ca4:	2a00      	cmp	r2, #0
    9ca6:	f000 83a6 	beq.w	a3f6 <_vfiprintf_r+0xaae>
    9caa:	ee18 1a10 	vmov	r1, s16
    9cae:	aa18      	add	r2, sp, #96	; 0x60
    9cb0:	4658      	mov	r0, fp
    9cb2:	f7ff fe0d 	bl	98d0 <__sprint_r.part.0>
    9cb6:	bb20      	cbnz	r0, 9d02 <_vfiprintf_r+0x3ba>
    9cb8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9cbc:	9b05      	ldr	r3, [sp, #20]
    9cbe:	4433      	add	r3, r6
    9cc0:	9305      	str	r3, [sp, #20]
    9cc2:	2d00      	cmp	r5, #0
    9cc4:	f47f aea8 	bne.w	9a18 <_vfiprintf_r+0xd0>
    9cc8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9cca:	2b00      	cmp	r3, #0
    9ccc:	f040 85c1 	bne.w	a852 <_vfiprintf_r+0xf0a>
    9cd0:	ee18 3a10 	vmov	r3, s16
    9cd4:	2200      	movs	r2, #0
    9cd6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    9cda:	9219      	str	r2, [sp, #100]	; 0x64
    9cdc:	e015      	b.n	9d0a <_vfiprintf_r+0x3c2>
    9cde:	f109 0908 	add.w	r9, r9, #8
    9ce2:	e7eb      	b.n	9cbc <_vfiprintf_r+0x374>
    9ce4:	ee18 1a10 	vmov	r1, s16
    9ce8:	aa18      	add	r2, sp, #96	; 0x60
    9cea:	4658      	mov	r0, fp
    9cec:	f7ff fdf0 	bl	98d0 <__sprint_r.part.0>
    9cf0:	2800      	cmp	r0, #0
    9cf2:	f000 80a6 	beq.w	9e42 <_vfiprintf_r+0x4fa>
    9cf6:	9b08      	ldr	r3, [sp, #32]
    9cf8:	b11b      	cbz	r3, 9d02 <_vfiprintf_r+0x3ba>
    9cfa:	9908      	ldr	r1, [sp, #32]
    9cfc:	4658      	mov	r0, fp
    9cfe:	f7fb ffad 	bl	5c5c <_free_r>
    9d02:	ee18 3a10 	vmov	r3, s16
    9d06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    9d0a:	ee18 2a10 	vmov	r2, s16
    9d0e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    9d10:	f012 0f01 	tst.w	r2, #1
    9d14:	b29a      	uxth	r2, r3
    9d16:	f000 80a0 	beq.w	9e5a <_vfiprintf_r+0x512>
    9d1a:	0650      	lsls	r0, r2, #25
    9d1c:	f100 85b2 	bmi.w	a884 <_vfiprintf_r+0xf3c>
    9d20:	9805      	ldr	r0, [sp, #20]
    9d22:	b045      	add	sp, #276	; 0x114
    9d24:	ecbd 8b02 	vpop	{d8}
    9d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d2c:	2900      	cmp	r1, #0
    9d2e:	d0cb      	beq.n	9cc8 <_vfiprintf_r+0x380>
    9d30:	2300      	movs	r3, #0
    9d32:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9d36:	2301      	movs	r3, #1
    9d38:	e9cd 3303 	strd	r3, r3, [sp, #12]
    9d3c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    9d40:	ac2b      	add	r4, sp, #172	; 0xac
    9d42:	2300      	movs	r3, #0
    9d44:	9308      	str	r3, [sp, #32]
    9d46:	461f      	mov	r7, r3
    9d48:	f016 0302 	ands.w	r3, r6, #2
    9d4c:	9309      	str	r3, [sp, #36]	; 0x24
    9d4e:	d002      	beq.n	9d56 <_vfiprintf_r+0x40e>
    9d50:	9b03      	ldr	r3, [sp, #12]
    9d52:	3302      	adds	r3, #2
    9d54:	9303      	str	r3, [sp, #12]
    9d56:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    9d5a:	930a      	str	r3, [sp, #40]	; 0x28
    9d5c:	d105      	bne.n	9d6a <_vfiprintf_r+0x422>
    9d5e:	9b06      	ldr	r3, [sp, #24]
    9d60:	9a03      	ldr	r2, [sp, #12]
    9d62:	1a9d      	subs	r5, r3, r2
    9d64:	2d00      	cmp	r5, #0
    9d66:	f300 827b 	bgt.w	a260 <_vfiprintf_r+0x918>
    9d6a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9d6e:	1c41      	adds	r1, r0, #1
    9d70:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    9d74:	b182      	cbz	r2, 9d98 <_vfiprintf_r+0x450>
    9d76:	2201      	movs	r2, #1
    9d78:	3301      	adds	r3, #1
    9d7a:	f8c9 2004 	str.w	r2, [r9, #4]
    9d7e:	2907      	cmp	r1, #7
    9d80:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    9d84:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    9d88:	f8c9 2000 	str.w	r2, [r9]
    9d8c:	f300 824a 	bgt.w	a224 <_vfiprintf_r+0x8dc>
    9d90:	4608      	mov	r0, r1
    9d92:	f109 0908 	add.w	r9, r9, #8
    9d96:	3101      	adds	r1, #1
    9d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d9a:	b1e2      	cbz	r2, 9dd6 <_vfiprintf_r+0x48e>
    9d9c:	aa11      	add	r2, sp, #68	; 0x44
    9d9e:	3302      	adds	r3, #2
    9da0:	f8c9 2000 	str.w	r2, [r9]
    9da4:	2907      	cmp	r1, #7
    9da6:	f04f 0202 	mov.w	r2, #2
    9daa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    9dae:	f8c9 2004 	str.w	r2, [r9, #4]
    9db2:	f340 8250 	ble.w	a256 <_vfiprintf_r+0x90e>
    9db6:	2b00      	cmp	r3, #0
    9db8:	f000 8343 	beq.w	a442 <_vfiprintf_r+0xafa>
    9dbc:	ee18 1a10 	vmov	r1, s16
    9dc0:	aa18      	add	r2, sp, #96	; 0x60
    9dc2:	4658      	mov	r0, fp
    9dc4:	f7ff fd84 	bl	98d0 <__sprint_r.part.0>
    9dc8:	2800      	cmp	r0, #0
    9dca:	d194      	bne.n	9cf6 <_vfiprintf_r+0x3ae>
    9dcc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9dd0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9dd4:	1c41      	adds	r1, r0, #1
    9dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9dd8:	2a80      	cmp	r2, #128	; 0x80
    9dda:	f000 8184 	beq.w	a0e6 <_vfiprintf_r+0x79e>
    9dde:	9a04      	ldr	r2, [sp, #16]
    9de0:	1abd      	subs	r5, r7, r2
    9de2:	2d00      	cmp	r5, #0
    9de4:	f300 81d7 	bgt.w	a196 <_vfiprintf_r+0x84e>
    9de8:	9a04      	ldr	r2, [sp, #16]
    9dea:	f8c9 4000 	str.w	r4, [r9]
    9dee:	4413      	add	r3, r2
    9df0:	2907      	cmp	r1, #7
    9df2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    9df6:	f8c9 2004 	str.w	r2, [r9, #4]
    9dfa:	f340 816e 	ble.w	a0da <_vfiprintf_r+0x792>
    9dfe:	2b00      	cmp	r3, #0
    9e00:	f000 8275 	beq.w	a2ee <_vfiprintf_r+0x9a6>
    9e04:	ee18 1a10 	vmov	r1, s16
    9e08:	aa18      	add	r2, sp, #96	; 0x60
    9e0a:	4658      	mov	r0, fp
    9e0c:	f7ff fd60 	bl	98d0 <__sprint_r.part.0>
    9e10:	2800      	cmp	r0, #0
    9e12:	f47f af70 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    9e16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9e18:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9e1c:	0775      	lsls	r5, r6, #29
    9e1e:	d505      	bpl.n	9e2c <_vfiprintf_r+0x4e4>
    9e20:	9a06      	ldr	r2, [sp, #24]
    9e22:	9903      	ldr	r1, [sp, #12]
    9e24:	1a54      	subs	r4, r2, r1
    9e26:	2c00      	cmp	r4, #0
    9e28:	f300 826b 	bgt.w	a302 <_vfiprintf_r+0x9ba>
    9e2c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    9e30:	9803      	ldr	r0, [sp, #12]
    9e32:	4281      	cmp	r1, r0
    9e34:	bfac      	ite	ge
    9e36:	1852      	addge	r2, r2, r1
    9e38:	1812      	addlt	r2, r2, r0
    9e3a:	9205      	str	r2, [sp, #20]
    9e3c:	2b00      	cmp	r3, #0
    9e3e:	f47f af51 	bne.w	9ce4 <_vfiprintf_r+0x39c>
    9e42:	9908      	ldr	r1, [sp, #32]
    9e44:	2300      	movs	r3, #0
    9e46:	9319      	str	r3, [sp, #100]	; 0x64
    9e48:	2900      	cmp	r1, #0
    9e4a:	f000 8149 	beq.w	a0e0 <_vfiprintf_r+0x798>
    9e4e:	4658      	mov	r0, fp
    9e50:	f7fb ff04 	bl	5c5c <_free_r>
    9e54:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9e58:	e5c1      	b.n	99de <_vfiprintf_r+0x96>
    9e5a:	059c      	lsls	r4, r3, #22
    9e5c:	f53f af5d 	bmi.w	9d1a <_vfiprintf_r+0x3d2>
    9e60:	ee18 4a10 	vmov	r4, s16
    9e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9e66:	f7fb fe1f 	bl	5aa8 <__retarget_lock_release_recursive>
    9e6a:	89a2      	ldrh	r2, [r4, #12]
    9e6c:	e755      	b.n	9d1a <_vfiprintf_r+0x3d2>
    9e6e:	06f0      	lsls	r0, r6, #27
    9e70:	9a07      	ldr	r2, [sp, #28]
    9e72:	f100 831f 	bmi.w	a4b4 <_vfiprintf_r+0xb6c>
    9e76:	0671      	lsls	r1, r6, #25
    9e78:	f140 8319 	bpl.w	a4ae <_vfiprintf_r+0xb66>
    9e7c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    9e80:	9207      	str	r2, [sp, #28]
    9e82:	17da      	asrs	r2, r3, #31
    9e84:	4611      	mov	r1, r2
    9e86:	e66e      	b.n	9b66 <_vfiprintf_r+0x21e>
    9e88:	f016 0310 	ands.w	r3, r6, #16
    9e8c:	9907      	ldr	r1, [sp, #28]
    9e8e:	f040 8309 	bne.w	a4a4 <_vfiprintf_r+0xb5c>
    9e92:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    9e96:	f000 8301 	beq.w	a49c <_vfiprintf_r+0xb54>
    9e9a:	461a      	mov	r2, r3
    9e9c:	f851 3b04 	ldr.w	r3, [r1], #4
    9ea0:	9107      	str	r1, [sp, #28]
    9ea2:	b29b      	uxth	r3, r3
    9ea4:	e6c3      	b.n	9c2e <_vfiprintf_r+0x2e6>
    9ea6:	9b07      	ldr	r3, [sp, #28]
    9ea8:	461a      	mov	r2, r3
    9eaa:	2300      	movs	r3, #0
    9eac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9eb0:	4613      	mov	r3, r2
    9eb2:	f853 4b04 	ldr.w	r4, [r3], #4
    9eb6:	9303      	str	r3, [sp, #12]
    9eb8:	2c00      	cmp	r4, #0
    9eba:	f000 8412 	beq.w	a6e2 <_vfiprintf_r+0xd9a>
    9ebe:	2953      	cmp	r1, #83	; 0x53
    9ec0:	f000 8365 	beq.w	a58e <_vfiprintf_r+0xc46>
    9ec4:	f016 0510 	ands.w	r5, r6, #16
    9ec8:	f040 8361 	bne.w	a58e <_vfiprintf_r+0xc46>
    9ecc:	1c7b      	adds	r3, r7, #1
    9ece:	f000 84b3 	beq.w	a838 <_vfiprintf_r+0xef0>
    9ed2:	463a      	mov	r2, r7
    9ed4:	4629      	mov	r1, r5
    9ed6:	4620      	mov	r0, r4
    9ed8:	f7fe fada 	bl	8490 <memchr>
    9edc:	9008      	str	r0, [sp, #32]
    9ede:	2800      	cmp	r0, #0
    9ee0:	f000 849f 	beq.w	a822 <_vfiprintf_r+0xeda>
    9ee4:	1b03      	subs	r3, r0, r4
    9ee6:	9a03      	ldr	r2, [sp, #12]
    9ee8:	9304      	str	r3, [sp, #16]
    9eea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9eee:	462f      	mov	r7, r5
    9ef0:	9207      	str	r2, [sp, #28]
    9ef2:	9303      	str	r3, [sp, #12]
    9ef4:	9508      	str	r5, [sp, #32]
    9ef6:	e657      	b.n	9ba8 <_vfiprintf_r+0x260>
    9ef8:	2943      	cmp	r1, #67	; 0x43
    9efa:	d002      	beq.n	9f02 <_vfiprintf_r+0x5ba>
    9efc:	06f5      	lsls	r5, r6, #27
    9efe:	f140 832d 	bpl.w	a55c <_vfiprintf_r+0xc14>
    9f02:	9d07      	ldr	r5, [sp, #28]
    9f04:	2208      	movs	r2, #8
    9f06:	2100      	movs	r1, #0
    9f08:	a816      	add	r0, sp, #88	; 0x58
    9f0a:	ac2b      	add	r4, sp, #172	; 0xac
    9f0c:	f7fb fcac 	bl	5868 <memset>
    9f10:	ab16      	add	r3, sp, #88	; 0x58
    9f12:	f855 2b04 	ldr.w	r2, [r5], #4
    9f16:	4621      	mov	r1, r4
    9f18:	4658      	mov	r0, fp
    9f1a:	f7ff fc13 	bl	9744 <_wcrtomb_r>
    9f1e:	4603      	mov	r3, r0
    9f20:	3301      	adds	r3, #1
    9f22:	9004      	str	r0, [sp, #16]
    9f24:	f000 84b3 	beq.w	a88e <_vfiprintf_r+0xf46>
    9f28:	9b04      	ldr	r3, [sp, #16]
    9f2a:	9507      	str	r5, [sp, #28]
    9f2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9f30:	9303      	str	r3, [sp, #12]
    9f32:	2300      	movs	r3, #0
    9f34:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9f38:	e703      	b.n	9d42 <_vfiprintf_r+0x3fa>
    9f3a:	9b07      	ldr	r3, [sp, #28]
    9f3c:	f853 2b04 	ldr.w	r2, [r3], #4
    9f40:	9206      	str	r2, [sp, #24]
    9f42:	2a00      	cmp	r2, #0
    9f44:	f280 829c 	bge.w	a480 <_vfiprintf_r+0xb38>
    9f48:	9a06      	ldr	r2, [sp, #24]
    9f4a:	4252      	negs	r2, r2
    9f4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9f50:	f898 1000 	ldrb.w	r1, [r8]
    9f54:	f046 0604 	orr.w	r6, r6, #4
    9f58:	e569      	b.n	9a2e <_vfiprintf_r+0xe6>
    9f5a:	f898 1000 	ldrb.w	r1, [r8]
    9f5e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    9f62:	e564      	b.n	9a2e <_vfiprintf_r+0xe6>
    9f64:	f898 1000 	ldrb.w	r1, [r8]
    9f68:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    9f6c:	e55f      	b.n	9a2e <_vfiprintf_r+0xe6>
    9f6e:	4642      	mov	r2, r8
    9f70:	f812 1b01 	ldrb.w	r1, [r2], #1
    9f74:	292a      	cmp	r1, #42	; 0x2a
    9f76:	f000 8496 	beq.w	a8a6 <_vfiprintf_r+0xf5e>
    9f7a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    9f7e:	2b09      	cmp	r3, #9
    9f80:	4690      	mov	r8, r2
    9f82:	f04f 0700 	mov.w	r7, #0
    9f86:	f63f ad54 	bhi.w	9a32 <_vfiprintf_r+0xea>
    9f8a:	f818 1b01 	ldrb.w	r1, [r8], #1
    9f8e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    9f92:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    9f96:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    9f9a:	2b09      	cmp	r3, #9
    9f9c:	d9f5      	bls.n	9f8a <_vfiprintf_r+0x642>
    9f9e:	e548      	b.n	9a32 <_vfiprintf_r+0xea>
    9fa0:	f898 1000 	ldrb.w	r1, [r8]
    9fa4:	f046 0601 	orr.w	r6, r6, #1
    9fa8:	e541      	b.n	9a2e <_vfiprintf_r+0xe6>
    9faa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    9fae:	2b00      	cmp	r3, #0
    9fb0:	f47f adc2 	bne.w	9b38 <_vfiprintf_r+0x1f0>
    9fb4:	2320      	movs	r3, #32
    9fb6:	f898 1000 	ldrb.w	r1, [r8]
    9fba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9fbe:	e536      	b.n	9a2e <_vfiprintf_r+0xe6>
    9fc0:	f898 1000 	ldrb.w	r1, [r8]
    9fc4:	296c      	cmp	r1, #108	; 0x6c
    9fc6:	bf03      	ittte	eq
    9fc8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    9fcc:	f046 0620 	orreq.w	r6, r6, #32
    9fd0:	f108 0801 	addeq.w	r8, r8, #1
    9fd4:	f046 0610 	orrne.w	r6, r6, #16
    9fd8:	e529      	b.n	9a2e <_vfiprintf_r+0xe6>
    9fda:	f898 1000 	ldrb.w	r1, [r8]
    9fde:	2968      	cmp	r1, #104	; 0x68
    9fe0:	bf03      	ittte	eq
    9fe2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    9fe6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    9fea:	f108 0801 	addeq.w	r8, r8, #1
    9fee:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    9ff2:	e51c      	b.n	9a2e <_vfiprintf_r+0xe6>
    9ff4:	f046 0310 	orr.w	r3, r6, #16
    9ff8:	9303      	str	r3, [sp, #12]
    9ffa:	9b03      	ldr	r3, [sp, #12]
    9ffc:	f013 0220 	ands.w	r2, r3, #32
    a000:	f000 8206 	beq.w	a410 <_vfiprintf_r+0xac8>
    a004:	9b07      	ldr	r3, [sp, #28]
    a006:	3307      	adds	r3, #7
    a008:	f023 0307 	bic.w	r3, r3, #7
    a00c:	4619      	mov	r1, r3
    a00e:	685a      	ldr	r2, [r3, #4]
    a010:	f851 3b08 	ldr.w	r3, [r1], #8
    a014:	9107      	str	r1, [sp, #28]
    a016:	2101      	movs	r1, #1
    a018:	e60d      	b.n	9c36 <_vfiprintf_r+0x2ee>
    a01a:	9a07      	ldr	r2, [sp, #28]
    a01c:	f046 0302 	orr.w	r3, r6, #2
    a020:	9303      	str	r3, [sp, #12]
    a022:	f852 3b04 	ldr.w	r3, [r2], #4
    a026:	9207      	str	r2, [sp, #28]
    a028:	f647 0230 	movw	r2, #30768	; 0x7830
    a02c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    a030:	4ab8      	ldr	r2, [pc, #736]	; (a314 <_vfiprintf_r+0x9cc>)
    a032:	920c      	str	r2, [sp, #48]	; 0x30
    a034:	2102      	movs	r1, #2
    a036:	2200      	movs	r2, #0
    a038:	e5fd      	b.n	9c36 <_vfiprintf_r+0x2ee>
    a03a:	06b7      	lsls	r7, r6, #26
    a03c:	f100 8248 	bmi.w	a4d0 <_vfiprintf_r+0xb88>
    a040:	06f5      	lsls	r5, r6, #27
    a042:	f100 8346 	bmi.w	a6d2 <_vfiprintf_r+0xd8a>
    a046:	0674      	lsls	r4, r6, #25
    a048:	f100 83d5 	bmi.w	a7f6 <_vfiprintf_r+0xeae>
    a04c:	05b0      	lsls	r0, r6, #22
    a04e:	f140 8340 	bpl.w	a6d2 <_vfiprintf_r+0xd8a>
    a052:	9b07      	ldr	r3, [sp, #28]
    a054:	9905      	ldr	r1, [sp, #20]
    a056:	f853 2b04 	ldr.w	r2, [r3], #4
    a05a:	9307      	str	r3, [sp, #28]
    a05c:	7011      	strb	r1, [r2, #0]
    a05e:	e4be      	b.n	99de <_vfiprintf_r+0x96>
    a060:	9603      	str	r6, [sp, #12]
    a062:	2901      	cmp	r1, #1
    a064:	f43f ad8c 	beq.w	9b80 <_vfiprintf_r+0x238>
    a068:	2902      	cmp	r1, #2
    a06a:	ac44      	add	r4, sp, #272	; 0x110
    a06c:	d111      	bne.n	a092 <_vfiprintf_r+0x74a>
    a06e:	980c      	ldr	r0, [sp, #48]	; 0x30
    a070:	f003 010f 	and.w	r1, r3, #15
    a074:	091b      	lsrs	r3, r3, #4
    a076:	5c41      	ldrb	r1, [r0, r1]
    a078:	f804 1d01 	strb.w	r1, [r4, #-1]!
    a07c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    a080:	0912      	lsrs	r2, r2, #4
    a082:	ea53 0102 	orrs.w	r1, r3, r2
    a086:	d1f3      	bne.n	a070 <_vfiprintf_r+0x728>
    a088:	9e03      	ldr	r6, [sp, #12]
    a08a:	ab44      	add	r3, sp, #272	; 0x110
    a08c:	1b1b      	subs	r3, r3, r4
    a08e:	9304      	str	r3, [sp, #16]
    a090:	e583      	b.n	9b9a <_vfiprintf_r+0x252>
    a092:	f003 0107 	and.w	r1, r3, #7
    a096:	08db      	lsrs	r3, r3, #3
    a098:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    a09c:	08d2      	lsrs	r2, r2, #3
    a09e:	3130      	adds	r1, #48	; 0x30
    a0a0:	ea53 0502 	orrs.w	r5, r3, r2
    a0a4:	4620      	mov	r0, r4
    a0a6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    a0aa:	d1f2      	bne.n	a092 <_vfiprintf_r+0x74a>
    a0ac:	9e03      	ldr	r6, [sp, #12]
    a0ae:	07f3      	lsls	r3, r6, #31
    a0b0:	d5eb      	bpl.n	a08a <_vfiprintf_r+0x742>
    a0b2:	2930      	cmp	r1, #48	; 0x30
    a0b4:	d0e8      	beq.n	a088 <_vfiprintf_r+0x740>
    a0b6:	2330      	movs	r3, #48	; 0x30
    a0b8:	3802      	subs	r0, #2
    a0ba:	f804 3c01 	strb.w	r3, [r4, #-1]
    a0be:	ab44      	add	r3, sp, #272	; 0x110
    a0c0:	1a1b      	subs	r3, r3, r0
    a0c2:	9e03      	ldr	r6, [sp, #12]
    a0c4:	9304      	str	r3, [sp, #16]
    a0c6:	4604      	mov	r4, r0
    a0c8:	e567      	b.n	9b9a <_vfiprintf_r+0x252>
    a0ca:	9b04      	ldr	r3, [sp, #16]
    a0cc:	941b      	str	r4, [sp, #108]	; 0x6c
    a0ce:	2201      	movs	r2, #1
    a0d0:	931c      	str	r3, [sp, #112]	; 0x70
    a0d2:	931a      	str	r3, [sp, #104]	; 0x68
    a0d4:	9219      	str	r2, [sp, #100]	; 0x64
    a0d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a0da:	f109 0908 	add.w	r9, r9, #8
    a0de:	e69d      	b.n	9e1c <_vfiprintf_r+0x4d4>
    a0e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a0e4:	e47b      	b.n	99de <_vfiprintf_r+0x96>
    a0e6:	9a06      	ldr	r2, [sp, #24]
    a0e8:	9d03      	ldr	r5, [sp, #12]
    a0ea:	1b55      	subs	r5, r2, r5
    a0ec:	2d00      	cmp	r5, #0
    a0ee:	f77f ae76 	ble.w	9dde <_vfiprintf_r+0x496>
    a0f2:	2d10      	cmp	r5, #16
    a0f4:	f340 83bb 	ble.w	a86e <_vfiprintf_r+0xf26>
    a0f8:	9409      	str	r4, [sp, #36]	; 0x24
    a0fa:	ee18 4a10 	vmov	r4, s16
    a0fe:	e007      	b.n	a110 <_vfiprintf_r+0x7c8>
    a100:	f100 0c02 	add.w	ip, r0, #2
    a104:	f109 0908 	add.w	r9, r9, #8
    a108:	4610      	mov	r0, r2
    a10a:	3d10      	subs	r5, #16
    a10c:	2d10      	cmp	r5, #16
    a10e:	dd1e      	ble.n	a14e <_vfiprintf_r+0x806>
    a110:	4981      	ldr	r1, [pc, #516]	; (a318 <_vfiprintf_r+0x9d0>)
    a112:	f8c9 1000 	str.w	r1, [r9]
    a116:	1c42      	adds	r2, r0, #1
    a118:	3310      	adds	r3, #16
    a11a:	2110      	movs	r1, #16
    a11c:	2a07      	cmp	r2, #7
    a11e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    a122:	f8c9 1004 	str.w	r1, [r9, #4]
    a126:	ddeb      	ble.n	a100 <_vfiprintf_r+0x7b8>
    a128:	aa18      	add	r2, sp, #96	; 0x60
    a12a:	2b00      	cmp	r3, #0
    a12c:	d074      	beq.n	a218 <_vfiprintf_r+0x8d0>
    a12e:	4621      	mov	r1, r4
    a130:	4658      	mov	r0, fp
    a132:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a136:	f7ff fbcb 	bl	98d0 <__sprint_r.part.0>
    a13a:	2800      	cmp	r0, #0
    a13c:	f47f addb 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a140:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a144:	3d10      	subs	r5, #16
    a146:	2d10      	cmp	r5, #16
    a148:	f100 0c01 	add.w	ip, r0, #1
    a14c:	dce0      	bgt.n	a110 <_vfiprintf_r+0x7c8>
    a14e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a150:	4a71      	ldr	r2, [pc, #452]	; (a318 <_vfiprintf_r+0x9d0>)
    a152:	f8c9 5004 	str.w	r5, [r9, #4]
    a156:	442b      	add	r3, r5
    a158:	f1bc 0f07 	cmp.w	ip, #7
    a15c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    a160:	f8c9 2000 	str.w	r2, [r9]
    a164:	f340 8194 	ble.w	a490 <_vfiprintf_r+0xb48>
    a168:	2b00      	cmp	r3, #0
    a16a:	f000 831f 	beq.w	a7ac <_vfiprintf_r+0xe64>
    a16e:	ee18 1a10 	vmov	r1, s16
    a172:	aa18      	add	r2, sp, #96	; 0x60
    a174:	4658      	mov	r0, fp
    a176:	f7ff fbab 	bl	98d0 <__sprint_r.part.0>
    a17a:	2800      	cmp	r0, #0
    a17c:	f47f adbb 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a180:	9a04      	ldr	r2, [sp, #16]
    a182:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a186:	1abd      	subs	r5, r7, r2
    a188:	2d00      	cmp	r5, #0
    a18a:	f100 0101 	add.w	r1, r0, #1
    a18e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a192:	f77f ae29 	ble.w	9de8 <_vfiprintf_r+0x4a0>
    a196:	2d10      	cmp	r5, #16
    a198:	dd29      	ble.n	a1ee <_vfiprintf_r+0x8a6>
    a19a:	9409      	str	r4, [sp, #36]	; 0x24
    a19c:	2710      	movs	r7, #16
    a19e:	ee18 4a10 	vmov	r4, s16
    a1a2:	e007      	b.n	a1b4 <_vfiprintf_r+0x86c>
    a1a4:	f100 0c02 	add.w	ip, r0, #2
    a1a8:	f109 0908 	add.w	r9, r9, #8
    a1ac:	4610      	mov	r0, r2
    a1ae:	3d10      	subs	r5, #16
    a1b0:	2d10      	cmp	r5, #16
    a1b2:	dd1a      	ble.n	a1ea <_vfiprintf_r+0x8a2>
    a1b4:	1c42      	adds	r2, r0, #1
    a1b6:	4958      	ldr	r1, [pc, #352]	; (a318 <_vfiprintf_r+0x9d0>)
    a1b8:	3310      	adds	r3, #16
    a1ba:	2a07      	cmp	r2, #7
    a1bc:	e9c9 1700 	strd	r1, r7, [r9]
    a1c0:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    a1c4:	ddee      	ble.n	a1a4 <_vfiprintf_r+0x85c>
    a1c6:	aa18      	add	r2, sp, #96	; 0x60
    a1c8:	b303      	cbz	r3, a20c <_vfiprintf_r+0x8c4>
    a1ca:	4621      	mov	r1, r4
    a1cc:	4658      	mov	r0, fp
    a1ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a1d2:	f7ff fb7d 	bl	98d0 <__sprint_r.part.0>
    a1d6:	2800      	cmp	r0, #0
    a1d8:	f47f ad8d 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a1dc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a1e0:	3d10      	subs	r5, #16
    a1e2:	2d10      	cmp	r5, #16
    a1e4:	f100 0c01 	add.w	ip, r0, #1
    a1e8:	dce4      	bgt.n	a1b4 <_vfiprintf_r+0x86c>
    a1ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a1ec:	4661      	mov	r1, ip
    a1ee:	4a4a      	ldr	r2, [pc, #296]	; (a318 <_vfiprintf_r+0x9d0>)
    a1f0:	f8c9 5004 	str.w	r5, [r9, #4]
    a1f4:	442b      	add	r3, r5
    a1f6:	2907      	cmp	r1, #7
    a1f8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    a1fc:	f8c9 2000 	str.w	r2, [r9]
    a200:	f300 80e7 	bgt.w	a3d2 <_vfiprintf_r+0xa8a>
    a204:	f109 0908 	add.w	r9, r9, #8
    a208:	3101      	adds	r1, #1
    a20a:	e5ed      	b.n	9de8 <_vfiprintf_r+0x4a0>
    a20c:	f04f 0c01 	mov.w	ip, #1
    a210:	4618      	mov	r0, r3
    a212:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a216:	e7ca      	b.n	a1ae <_vfiprintf_r+0x866>
    a218:	f04f 0c01 	mov.w	ip, #1
    a21c:	4618      	mov	r0, r3
    a21e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a222:	e772      	b.n	a10a <_vfiprintf_r+0x7c2>
    a224:	2b00      	cmp	r3, #0
    a226:	f000 8104 	beq.w	a432 <_vfiprintf_r+0xaea>
    a22a:	ee18 1a10 	vmov	r1, s16
    a22e:	aa18      	add	r2, sp, #96	; 0x60
    a230:	4658      	mov	r0, fp
    a232:	f7ff fb4d 	bl	98d0 <__sprint_r.part.0>
    a236:	2800      	cmp	r0, #0
    a238:	f47f ad5d 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a23c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a240:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a244:	1c41      	adds	r1, r0, #1
    a246:	e5a7      	b.n	9d98 <_vfiprintf_r+0x450>
    a248:	2302      	movs	r3, #2
    a24a:	aa11      	add	r2, sp, #68	; 0x44
    a24c:	931c      	str	r3, [sp, #112]	; 0x70
    a24e:	921b      	str	r2, [sp, #108]	; 0x6c
    a250:	2101      	movs	r1, #1
    a252:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a256:	4608      	mov	r0, r1
    a258:	f109 0908 	add.w	r9, r9, #8
    a25c:	1c41      	adds	r1, r0, #1
    a25e:	e5ba      	b.n	9dd6 <_vfiprintf_r+0x48e>
    a260:	2d10      	cmp	r5, #16
    a262:	f340 82e5 	ble.w	a830 <_vfiprintf_r+0xee8>
    a266:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    a26a:	940f      	str	r4, [sp, #60]	; 0x3c
    a26c:	4608      	mov	r0, r1
    a26e:	ee18 4a10 	vmov	r4, s16
    a272:	e007      	b.n	a284 <_vfiprintf_r+0x93c>
    a274:	f100 0c02 	add.w	ip, r0, #2
    a278:	f109 0908 	add.w	r9, r9, #8
    a27c:	4610      	mov	r0, r2
    a27e:	3d10      	subs	r5, #16
    a280:	2d10      	cmp	r5, #16
    a282:	dd1d      	ble.n	a2c0 <_vfiprintf_r+0x978>
    a284:	4925      	ldr	r1, [pc, #148]	; (a31c <_vfiprintf_r+0x9d4>)
    a286:	f8c9 1000 	str.w	r1, [r9]
    a28a:	1c42      	adds	r2, r0, #1
    a28c:	3310      	adds	r3, #16
    a28e:	2110      	movs	r1, #16
    a290:	2a07      	cmp	r2, #7
    a292:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    a296:	f8c9 1004 	str.w	r1, [r9, #4]
    a29a:	ddeb      	ble.n	a274 <_vfiprintf_r+0x92c>
    a29c:	aa18      	add	r2, sp, #96	; 0x60
    a29e:	b303      	cbz	r3, a2e2 <_vfiprintf_r+0x99a>
    a2a0:	4621      	mov	r1, r4
    a2a2:	4658      	mov	r0, fp
    a2a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a2a8:	f7ff fb12 	bl	98d0 <__sprint_r.part.0>
    a2ac:	2800      	cmp	r0, #0
    a2ae:	f47f ad22 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a2b2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a2b6:	3d10      	subs	r5, #16
    a2b8:	2d10      	cmp	r5, #16
    a2ba:	f100 0c01 	add.w	ip, r0, #1
    a2be:	dce1      	bgt.n	a284 <_vfiprintf_r+0x93c>
    a2c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    a2c2:	4660      	mov	r0, ip
    a2c4:	4a15      	ldr	r2, [pc, #84]	; (a31c <_vfiprintf_r+0x9d4>)
    a2c6:	f8c9 5004 	str.w	r5, [r9, #4]
    a2ca:	442b      	add	r3, r5
    a2cc:	2807      	cmp	r0, #7
    a2ce:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    a2d2:	f8c9 2000 	str.w	r2, [r9]
    a2d6:	f300 80c1 	bgt.w	a45c <_vfiprintf_r+0xb14>
    a2da:	f109 0908 	add.w	r9, r9, #8
    a2de:	1c41      	adds	r1, r0, #1
    a2e0:	e546      	b.n	9d70 <_vfiprintf_r+0x428>
    a2e2:	4618      	mov	r0, r3
    a2e4:	f04f 0c01 	mov.w	ip, #1
    a2e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a2ec:	e7c7      	b.n	a27e <_vfiprintf_r+0x936>
    a2ee:	0776      	lsls	r6, r6, #29
    a2f0:	9319      	str	r3, [sp, #100]	; 0x64
    a2f2:	d553      	bpl.n	a39c <_vfiprintf_r+0xa54>
    a2f4:	9a06      	ldr	r2, [sp, #24]
    a2f6:	9903      	ldr	r1, [sp, #12]
    a2f8:	1a54      	subs	r4, r2, r1
    a2fa:	2c00      	cmp	r4, #0
    a2fc:	dd4e      	ble.n	a39c <_vfiprintf_r+0xa54>
    a2fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a302:	2c10      	cmp	r4, #16
    a304:	f340 82b0 	ble.w	a868 <_vfiprintf_r+0xf20>
    a308:	9919      	ldr	r1, [sp, #100]	; 0x64
    a30a:	ee18 6a10 	vmov	r6, s16
    a30e:	2510      	movs	r5, #16
    a310:	e00d      	b.n	a32e <_vfiprintf_r+0x9e6>
    a312:	bf00      	nop
    a314:	0000bbfc 	.word	0x0000bbfc
    a318:	0000bd0c 	.word	0x0000bd0c
    a31c:	0000bcfc 	.word	0x0000bcfc
    a320:	1c88      	adds	r0, r1, #2
    a322:	f109 0908 	add.w	r9, r9, #8
    a326:	4611      	mov	r1, r2
    a328:	3c10      	subs	r4, #16
    a32a:	2c10      	cmp	r4, #16
    a32c:	dd1a      	ble.n	a364 <_vfiprintf_r+0xa1c>
    a32e:	1c4a      	adds	r2, r1, #1
    a330:	48b3      	ldr	r0, [pc, #716]	; (a600 <_vfiprintf_r+0xcb8>)
    a332:	3310      	adds	r3, #16
    a334:	2a07      	cmp	r2, #7
    a336:	e9c9 0500 	strd	r0, r5, [r9]
    a33a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    a33e:	ddef      	ble.n	a320 <_vfiprintf_r+0x9d8>
    a340:	aa18      	add	r2, sp, #96	; 0x60
    a342:	b333      	cbz	r3, a392 <_vfiprintf_r+0xa4a>
    a344:	4631      	mov	r1, r6
    a346:	4658      	mov	r0, fp
    a348:	f7ff fac2 	bl	98d0 <__sprint_r.part.0>
    a34c:	2800      	cmp	r0, #0
    a34e:	f47f acd2 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a352:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    a356:	3c10      	subs	r4, #16
    a358:	2c10      	cmp	r4, #16
    a35a:	f101 0001 	add.w	r0, r1, #1
    a35e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a362:	dce4      	bgt.n	a32e <_vfiprintf_r+0x9e6>
    a364:	4aa6      	ldr	r2, [pc, #664]	; (a600 <_vfiprintf_r+0xcb8>)
    a366:	f8c9 4004 	str.w	r4, [r9, #4]
    a36a:	4423      	add	r3, r4
    a36c:	2807      	cmp	r0, #7
    a36e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    a372:	f8c9 2000 	str.w	r2, [r9]
    a376:	f77f ad59 	ble.w	9e2c <_vfiprintf_r+0x4e4>
    a37a:	b17b      	cbz	r3, a39c <_vfiprintf_r+0xa54>
    a37c:	ee18 1a10 	vmov	r1, s16
    a380:	aa18      	add	r2, sp, #96	; 0x60
    a382:	4658      	mov	r0, fp
    a384:	f7ff faa4 	bl	98d0 <__sprint_r.part.0>
    a388:	2800      	cmp	r0, #0
    a38a:	f47f acb4 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a38e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a390:	e54c      	b.n	9e2c <_vfiprintf_r+0x4e4>
    a392:	2001      	movs	r0, #1
    a394:	4619      	mov	r1, r3
    a396:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a39a:	e7c5      	b.n	a328 <_vfiprintf_r+0x9e0>
    a39c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    a3a0:	9903      	ldr	r1, [sp, #12]
    a3a2:	428a      	cmp	r2, r1
    a3a4:	bfac      	ite	ge
    a3a6:	189b      	addge	r3, r3, r2
    a3a8:	185b      	addlt	r3, r3, r1
    a3aa:	9305      	str	r3, [sp, #20]
    a3ac:	e549      	b.n	9e42 <_vfiprintf_r+0x4fa>
    a3ae:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    a3b2:	058f      	lsls	r7, r1, #22
    a3b4:	ee18 3a10 	vmov	r3, s16
    a3b8:	b28a      	uxth	r2, r1
    a3ba:	f53f aae8 	bmi.w	998e <_vfiprintf_r+0x46>
    a3be:	ee18 5a10 	vmov	r5, s16
    a3c2:	6d98      	ldr	r0, [r3, #88]	; 0x58
    a3c4:	f7fb fb6e 	bl	5aa4 <__retarget_lock_acquire_recursive>
    a3c8:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    a3cc:	b28a      	uxth	r2, r1
    a3ce:	f7ff bade 	b.w	998e <_vfiprintf_r+0x46>
    a3d2:	2b00      	cmp	r3, #0
    a3d4:	f43f ae79 	beq.w	a0ca <_vfiprintf_r+0x782>
    a3d8:	ee18 1a10 	vmov	r1, s16
    a3dc:	aa18      	add	r2, sp, #96	; 0x60
    a3de:	4658      	mov	r0, fp
    a3e0:	f7ff fa76 	bl	98d0 <__sprint_r.part.0>
    a3e4:	2800      	cmp	r0, #0
    a3e6:	f47f ac86 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a3ea:	9919      	ldr	r1, [sp, #100]	; 0x64
    a3ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a3ee:	3101      	adds	r1, #1
    a3f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a3f4:	e4f8      	b.n	9de8 <_vfiprintf_r+0x4a0>
    a3f6:	9219      	str	r2, [sp, #100]	; 0x64
    a3f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a3fc:	e45e      	b.n	9cbc <_vfiprintf_r+0x374>
    a3fe:	2f00      	cmp	r7, #0
    a400:	f47f abc3 	bne.w	9b8a <_vfiprintf_r+0x242>
    a404:	9e03      	ldr	r6, [sp, #12]
    a406:	2700      	movs	r7, #0
    a408:	9704      	str	r7, [sp, #16]
    a40a:	ac44      	add	r4, sp, #272	; 0x110
    a40c:	f7ff bbc5 	b.w	9b9a <_vfiprintf_r+0x252>
    a410:	9b03      	ldr	r3, [sp, #12]
    a412:	f013 0310 	ands.w	r3, r3, #16
    a416:	d154      	bne.n	a4c2 <_vfiprintf_r+0xb7a>
    a418:	9a03      	ldr	r2, [sp, #12]
    a41a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    a41e:	f000 816b 	beq.w	a6f8 <_vfiprintf_r+0xdb0>
    a422:	9907      	ldr	r1, [sp, #28]
    a424:	461a      	mov	r2, r3
    a426:	f851 3b04 	ldr.w	r3, [r1], #4
    a42a:	9107      	str	r1, [sp, #28]
    a42c:	b29b      	uxth	r3, r3
    a42e:	2101      	movs	r1, #1
    a430:	e401      	b.n	9c36 <_vfiprintf_r+0x2ee>
    a432:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a434:	2a00      	cmp	r2, #0
    a436:	d164      	bne.n	a502 <_vfiprintf_r+0xbba>
    a438:	4618      	mov	r0, r3
    a43a:	2101      	movs	r1, #1
    a43c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a440:	e4c9      	b.n	9dd6 <_vfiprintf_r+0x48e>
    a442:	2101      	movs	r1, #1
    a444:	4618      	mov	r0, r3
    a446:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a44a:	e4c4      	b.n	9dd6 <_vfiprintf_r+0x48e>
    a44c:	425b      	negs	r3, r3
    a44e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    a452:	9603      	str	r6, [sp, #12]
    a454:	202d      	movs	r0, #45	; 0x2d
    a456:	2101      	movs	r1, #1
    a458:	f7ff bbee 	b.w	9c38 <_vfiprintf_r+0x2f0>
    a45c:	2b00      	cmp	r3, #0
    a45e:	f000 8088 	beq.w	a572 <_vfiprintf_r+0xc2a>
    a462:	ee18 1a10 	vmov	r1, s16
    a466:	aa18      	add	r2, sp, #96	; 0x60
    a468:	4658      	mov	r0, fp
    a46a:	f7ff fa31 	bl	98d0 <__sprint_r.part.0>
    a46e:	2800      	cmp	r0, #0
    a470:	f47f ac41 	bne.w	9cf6 <_vfiprintf_r+0x3ae>
    a474:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a478:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a47c:	1c41      	adds	r1, r0, #1
    a47e:	e477      	b.n	9d70 <_vfiprintf_r+0x428>
    a480:	f898 1000 	ldrb.w	r1, [r8]
    a484:	9307      	str	r3, [sp, #28]
    a486:	f7ff bad2 	b.w	9a2e <_vfiprintf_r+0xe6>
    a48a:	ac44      	add	r4, sp, #272	; 0x110
    a48c:	f7ff bb85 	b.w	9b9a <_vfiprintf_r+0x252>
    a490:	f109 0908 	add.w	r9, r9, #8
    a494:	f10c 0101 	add.w	r1, ip, #1
    a498:	4660      	mov	r0, ip
    a49a:	e4a0      	b.n	9dde <_vfiprintf_r+0x496>
    a49c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    a4a0:	f040 8197 	bne.w	a7d2 <_vfiprintf_r+0xe8a>
    a4a4:	f851 3b04 	ldr.w	r3, [r1], #4
    a4a8:	9107      	str	r1, [sp, #28]
    a4aa:	f7ff bbc0 	b.w	9c2e <_vfiprintf_r+0x2e6>
    a4ae:	05b3      	lsls	r3, r6, #22
    a4b0:	f100 8188 	bmi.w	a7c4 <_vfiprintf_r+0xe7c>
    a4b4:	f852 3b04 	ldr.w	r3, [r2], #4
    a4b8:	9207      	str	r2, [sp, #28]
    a4ba:	17da      	asrs	r2, r3, #31
    a4bc:	4611      	mov	r1, r2
    a4be:	f7ff bb52 	b.w	9b66 <_vfiprintf_r+0x21e>
    a4c2:	9907      	ldr	r1, [sp, #28]
    a4c4:	f851 3b04 	ldr.w	r3, [r1], #4
    a4c8:	9107      	str	r1, [sp, #28]
    a4ca:	2101      	movs	r1, #1
    a4cc:	f7ff bbb3 	b.w	9c36 <_vfiprintf_r+0x2ee>
    a4d0:	9b07      	ldr	r3, [sp, #28]
    a4d2:	9805      	ldr	r0, [sp, #20]
    a4d4:	f853 1b04 	ldr.w	r1, [r3], #4
    a4d8:	9307      	str	r3, [sp, #28]
    a4da:	17c2      	asrs	r2, r0, #31
    a4dc:	e9c1 0200 	strd	r0, r2, [r1]
    a4e0:	f7ff ba7d 	b.w	99de <_vfiprintf_r+0x96>
    a4e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	f43f ab26 	beq.w	9b38 <_vfiprintf_r+0x1f0>
    a4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a4ee:	781b      	ldrb	r3, [r3, #0]
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	f43f ab21 	beq.w	9b38 <_vfiprintf_r+0x1f0>
    a4f6:	f898 1000 	ldrb.w	r1, [r8]
    a4fa:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    a4fe:	f7ff ba96 	b.w	9a2e <_vfiprintf_r+0xe6>
    a502:	2302      	movs	r3, #2
    a504:	aa11      	add	r2, sp, #68	; 0x44
    a506:	931c      	str	r3, [sp, #112]	; 0x70
    a508:	921b      	str	r2, [sp, #108]	; 0x6c
    a50a:	2001      	movs	r0, #1
    a50c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a510:	e6a2      	b.n	a258 <_vfiprintf_r+0x910>
    a512:	9603      	str	r6, [sp, #12]
    a514:	e571      	b.n	9ffa <_vfiprintf_r+0x6b2>
    a516:	4b3b      	ldr	r3, [pc, #236]	; (a604 <_vfiprintf_r+0xcbc>)
    a518:	930c      	str	r3, [sp, #48]	; 0x30
    a51a:	f016 0220 	ands.w	r2, r6, #32
    a51e:	d059      	beq.n	a5d4 <_vfiprintf_r+0xc8c>
    a520:	9b07      	ldr	r3, [sp, #28]
    a522:	3307      	adds	r3, #7
    a524:	f023 0307 	bic.w	r3, r3, #7
    a528:	4618      	mov	r0, r3
    a52a:	685a      	ldr	r2, [r3, #4]
    a52c:	f850 3b08 	ldr.w	r3, [r0], #8
    a530:	9007      	str	r0, [sp, #28]
    a532:	07f4      	lsls	r4, r6, #31
    a534:	d509      	bpl.n	a54a <_vfiprintf_r+0xc02>
    a536:	ea53 0002 	orrs.w	r0, r3, r2
    a53a:	d006      	beq.n	a54a <_vfiprintf_r+0xc02>
    a53c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    a540:	2130      	movs	r1, #48	; 0x30
    a542:	f046 0602 	orr.w	r6, r6, #2
    a546:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    a54a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    a54e:	9103      	str	r1, [sp, #12]
    a550:	2102      	movs	r1, #2
    a552:	f7ff bb70 	b.w	9c36 <_vfiprintf_r+0x2ee>
    a556:	4b2c      	ldr	r3, [pc, #176]	; (a608 <_vfiprintf_r+0xcc0>)
    a558:	930c      	str	r3, [sp, #48]	; 0x30
    a55a:	e7de      	b.n	a51a <_vfiprintf_r+0xbd2>
    a55c:	9b07      	ldr	r3, [sp, #28]
    a55e:	2101      	movs	r1, #1
    a560:	f853 2b04 	ldr.w	r2, [r3], #4
    a564:	9103      	str	r1, [sp, #12]
    a566:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    a56a:	9307      	str	r3, [sp, #28]
    a56c:	9104      	str	r1, [sp, #16]
    a56e:	ac2b      	add	r4, sp, #172	; 0xac
    a570:	e4df      	b.n	9f32 <_vfiprintf_r+0x5ea>
    a572:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    a576:	2a00      	cmp	r2, #0
    a578:	f040 8132 	bne.w	a7e0 <_vfiprintf_r+0xe98>
    a57c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a57e:	2a00      	cmp	r2, #0
    a580:	f47f ae62 	bne.w	a248 <_vfiprintf_r+0x900>
    a584:	4618      	mov	r0, r3
    a586:	2101      	movs	r1, #1
    a588:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a58c:	e427      	b.n	9dde <_vfiprintf_r+0x496>
    a58e:	2100      	movs	r1, #0
    a590:	2208      	movs	r2, #8
    a592:	a816      	add	r0, sp, #88	; 0x58
    a594:	9413      	str	r4, [sp, #76]	; 0x4c
    a596:	f7fb f967 	bl	5868 <memset>
    a59a:	1c79      	adds	r1, r7, #1
    a59c:	f000 80bc 	beq.w	a718 <_vfiprintf_r+0xdd0>
    a5a0:	2500      	movs	r5, #0
    a5a2:	9407      	str	r4, [sp, #28]
    a5a4:	462c      	mov	r4, r5
    a5a6:	e00c      	b.n	a5c2 <_vfiprintf_r+0xc7a>
    a5a8:	a92b      	add	r1, sp, #172	; 0xac
    a5aa:	4658      	mov	r0, fp
    a5ac:	f7ff f8ca 	bl	9744 <_wcrtomb_r>
    a5b0:	1c42      	adds	r2, r0, #1
    a5b2:	4420      	add	r0, r4
    a5b4:	f000 816b 	beq.w	a88e <_vfiprintf_r+0xf46>
    a5b8:	42b8      	cmp	r0, r7
    a5ba:	dc08      	bgt.n	a5ce <_vfiprintf_r+0xc86>
    a5bc:	f000 8170 	beq.w	a8a0 <_vfiprintf_r+0xf58>
    a5c0:	4604      	mov	r4, r0
    a5c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a5c4:	5952      	ldr	r2, [r2, r5]
    a5c6:	ab16      	add	r3, sp, #88	; 0x58
    a5c8:	3504      	adds	r5, #4
    a5ca:	2a00      	cmp	r2, #0
    a5cc:	d1ec      	bne.n	a5a8 <_vfiprintf_r+0xc60>
    a5ce:	9404      	str	r4, [sp, #16]
    a5d0:	9c07      	ldr	r4, [sp, #28]
    a5d2:	e0af      	b.n	a734 <_vfiprintf_r+0xdec>
    a5d4:	f016 0310 	ands.w	r3, r6, #16
    a5d8:	9807      	ldr	r0, [sp, #28]
    a5da:	d10c      	bne.n	a5f6 <_vfiprintf_r+0xcae>
    a5dc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    a5e0:	d005      	beq.n	a5ee <_vfiprintf_r+0xca6>
    a5e2:	461a      	mov	r2, r3
    a5e4:	f850 3b04 	ldr.w	r3, [r0], #4
    a5e8:	9007      	str	r0, [sp, #28]
    a5ea:	b29b      	uxth	r3, r3
    a5ec:	e7a1      	b.n	a532 <_vfiprintf_r+0xbea>
    a5ee:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    a5f2:	f040 80e1 	bne.w	a7b8 <_vfiprintf_r+0xe70>
    a5f6:	f850 3b04 	ldr.w	r3, [r0], #4
    a5fa:	9007      	str	r0, [sp, #28]
    a5fc:	e799      	b.n	a532 <_vfiprintf_r+0xbea>
    a5fe:	bf00      	nop
    a600:	0000bcfc 	.word	0x0000bcfc
    a604:	0000bbfc 	.word	0x0000bbfc
    a608:	0000bc10 	.word	0x0000bc10
    a60c:	9903      	ldr	r1, [sp, #12]
    a60e:	9704      	str	r7, [sp, #16]
    a610:	ac44      	add	r4, sp, #272	; 0x110
    a612:	469e      	mov	lr, r3
    a614:	ee08 ba90 	vmov	s17, fp
    a618:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    a61c:	f04f 0c00 	mov.w	ip, #0
    a620:	4623      	mov	r3, r4
    a622:	e006      	b.n	a632 <_vfiprintf_r+0xcea>
    a624:	f1be 0f0a 	cmp.w	lr, #10
    a628:	f172 0200 	sbcs.w	r2, r2, #0
    a62c:	d339      	bcc.n	a6a2 <_vfiprintf_r+0xd5a>
    a62e:	46a6      	mov	lr, r4
    a630:	462a      	mov	r2, r5
    a632:	49a6      	ldr	r1, [pc, #664]	; (a8cc <_vfiprintf_r+0xf84>)
    a634:	eb1e 0002 	adds.w	r0, lr, r2
    a638:	f140 0000 	adc.w	r0, r0, #0
    a63c:	460f      	mov	r7, r1
    a63e:	fba1 1400 	umull	r1, r4, r1, r0
    a642:	f024 0103 	bic.w	r1, r4, #3
    a646:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    a64a:	1a40      	subs	r0, r0, r1
    a64c:	ebbe 0100 	subs.w	r1, lr, r0
    a650:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    a654:	f162 0400 	sbc.w	r4, r2, #0
    a658:	fb05 f501 	mul.w	r5, r5, r1
    a65c:	fb07 5504 	mla	r5, r7, r4, r5
    a660:	fba1 4107 	umull	r4, r1, r1, r7
    a664:	440d      	add	r5, r1
    a666:	2705      	movs	r7, #5
    a668:	f004 0101 	and.w	r1, r4, #1
    a66c:	fba1 1b07 	umull	r1, fp, r1, r7
    a670:	1809      	adds	r1, r1, r0
    a672:	0864      	lsrs	r4, r4, #1
    a674:	3130      	adds	r1, #48	; 0x30
    a676:	f803 1c01 	strb.w	r1, [r3, #-1]
    a67a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    a67e:	f10c 0c01 	add.w	ip, ip, #1
    a682:	3b01      	subs	r3, #1
    a684:	086d      	lsrs	r5, r5, #1
    a686:	2e00      	cmp	r6, #0
    a688:	d0cc      	beq.n	a624 <_vfiprintf_r+0xcdc>
    a68a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a68c:	7809      	ldrb	r1, [r1, #0]
    a68e:	4561      	cmp	r1, ip
    a690:	d1c8      	bne.n	a624 <_vfiprintf_r+0xcdc>
    a692:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    a696:	d0c5      	beq.n	a624 <_vfiprintf_r+0xcdc>
    a698:	f1be 0f0a 	cmp.w	lr, #10
    a69c:	f172 0200 	sbcs.w	r2, r2, #0
    a6a0:	d26c      	bcs.n	a77c <_vfiprintf_r+0xe34>
    a6a2:	461c      	mov	r4, r3
    a6a4:	ab44      	add	r3, sp, #272	; 0x110
    a6a6:	1b1b      	subs	r3, r3, r4
    a6a8:	9f04      	ldr	r7, [sp, #16]
    a6aa:	9e03      	ldr	r6, [sp, #12]
    a6ac:	9304      	str	r3, [sp, #16]
    a6ae:	ee18 ba90 	vmov	fp, s17
    a6b2:	f7ff ba72 	b.w	9b9a <_vfiprintf_r+0x252>
    a6b6:	9603      	str	r6, [sp, #12]
    a6b8:	f7ff ba62 	b.w	9b80 <_vfiprintf_r+0x238>
    a6bc:	4658      	mov	r0, fp
    a6be:	f7fa ff5d 	bl	557c <__sinit>
    a6c2:	f7ff b95b 	b.w	997c <_vfiprintf_r+0x34>
    a6c6:	2901      	cmp	r1, #1
    a6c8:	9603      	str	r6, [sp, #12]
    a6ca:	f47f accd 	bne.w	a068 <_vfiprintf_r+0x720>
    a6ce:	f7ff ba5c 	b.w	9b8a <_vfiprintf_r+0x242>
    a6d2:	9b07      	ldr	r3, [sp, #28]
    a6d4:	9905      	ldr	r1, [sp, #20]
    a6d6:	f853 2b04 	ldr.w	r2, [r3], #4
    a6da:	6011      	str	r1, [r2, #0]
    a6dc:	9307      	str	r3, [sp, #28]
    a6de:	f7ff b97e 	b.w	99de <_vfiprintf_r+0x96>
    a6e2:	2f06      	cmp	r7, #6
    a6e4:	463b      	mov	r3, r7
    a6e6:	9a03      	ldr	r2, [sp, #12]
    a6e8:	4c79      	ldr	r4, [pc, #484]	; (a8d0 <_vfiprintf_r+0xf88>)
    a6ea:	9207      	str	r2, [sp, #28]
    a6ec:	bf28      	it	cs
    a6ee:	2306      	movcs	r3, #6
    a6f0:	9304      	str	r3, [sp, #16]
    a6f2:	9303      	str	r3, [sp, #12]
    a6f4:	f7ff bb25 	b.w	9d42 <_vfiprintf_r+0x3fa>
    a6f8:	9b03      	ldr	r3, [sp, #12]
    a6fa:	9907      	ldr	r1, [sp, #28]
    a6fc:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    a700:	bf14      	ite	ne
    a702:	f851 3b04 	ldrne.w	r3, [r1], #4
    a706:	f851 3b04 	ldreq.w	r3, [r1], #4
    a70a:	9107      	str	r1, [sp, #28]
    a70c:	bf1c      	itt	ne
    a70e:	4602      	movne	r2, r0
    a710:	b2db      	uxtbne	r3, r3
    a712:	2101      	movs	r1, #1
    a714:	f7ff ba8f 	b.w	9c36 <_vfiprintf_r+0x2ee>
    a718:	ab16      	add	r3, sp, #88	; 0x58
    a71a:	9300      	str	r3, [sp, #0]
    a71c:	2300      	movs	r3, #0
    a71e:	4619      	mov	r1, r3
    a720:	aa13      	add	r2, sp, #76	; 0x4c
    a722:	4658      	mov	r0, fp
    a724:	f7ff f834 	bl	9790 <_wcsrtombs_r>
    a728:	4603      	mov	r3, r0
    a72a:	3301      	adds	r3, #1
    a72c:	9004      	str	r0, [sp, #16]
    a72e:	f000 80ae 	beq.w	a88e <_vfiprintf_r+0xf46>
    a732:	9413      	str	r4, [sp, #76]	; 0x4c
    a734:	9b04      	ldr	r3, [sp, #16]
    a736:	2b00      	cmp	r3, #0
    a738:	d030      	beq.n	a79c <_vfiprintf_r+0xe54>
    a73a:	2b63      	cmp	r3, #99	; 0x63
    a73c:	dc63      	bgt.n	a806 <_vfiprintf_r+0xebe>
    a73e:	2300      	movs	r3, #0
    a740:	9308      	str	r3, [sp, #32]
    a742:	ac2b      	add	r4, sp, #172	; 0xac
    a744:	2208      	movs	r2, #8
    a746:	2100      	movs	r1, #0
    a748:	a816      	add	r0, sp, #88	; 0x58
    a74a:	f7fb f88d 	bl	5868 <memset>
    a74e:	9d04      	ldr	r5, [sp, #16]
    a750:	ab16      	add	r3, sp, #88	; 0x58
    a752:	9300      	str	r3, [sp, #0]
    a754:	aa13      	add	r2, sp, #76	; 0x4c
    a756:	462b      	mov	r3, r5
    a758:	4621      	mov	r1, r4
    a75a:	4658      	mov	r0, fp
    a75c:	f7ff f818 	bl	9790 <_wcsrtombs_r>
    a760:	4285      	cmp	r5, r0
    a762:	f040 80ab 	bne.w	a8bc <_vfiprintf_r+0xf74>
    a766:	9b03      	ldr	r3, [sp, #12]
    a768:	9a04      	ldr	r2, [sp, #16]
    a76a:	9307      	str	r3, [sp, #28]
    a76c:	2300      	movs	r3, #0
    a76e:	54a3      	strb	r3, [r4, r2]
    a770:	461f      	mov	r7, r3
    a772:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    a776:	9303      	str	r3, [sp, #12]
    a778:	f7ff ba16 	b.w	9ba8 <_vfiprintf_r+0x260>
    a77c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a77e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a780:	1a9b      	subs	r3, r3, r2
    a782:	4618      	mov	r0, r3
    a784:	9308      	str	r3, [sp, #32]
    a786:	f7fb f8c1 	bl	590c <strncpy>
    a78a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a78c:	9b08      	ldr	r3, [sp, #32]
    a78e:	784a      	ldrb	r2, [r1, #1]
    a790:	b10a      	cbz	r2, a796 <_vfiprintf_r+0xe4e>
    a792:	3101      	adds	r1, #1
    a794:	910b      	str	r1, [sp, #44]	; 0x2c
    a796:	f04f 0c00 	mov.w	ip, #0
    a79a:	e748      	b.n	a62e <_vfiprintf_r+0xce6>
    a79c:	9b03      	ldr	r3, [sp, #12]
    a79e:	9307      	str	r3, [sp, #28]
    a7a0:	9b04      	ldr	r3, [sp, #16]
    a7a2:	9303      	str	r3, [sp, #12]
    a7a4:	461f      	mov	r7, r3
    a7a6:	9308      	str	r3, [sp, #32]
    a7a8:	f7ff b9fe 	b.w	9ba8 <_vfiprintf_r+0x260>
    a7ac:	2101      	movs	r1, #1
    a7ae:	4618      	mov	r0, r3
    a7b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a7b4:	f7ff bb13 	b.w	9dde <_vfiprintf_r+0x496>
    a7b8:	f850 3b04 	ldr.w	r3, [r0], #4
    a7bc:	9007      	str	r0, [sp, #28]
    a7be:	4622      	mov	r2, r4
    a7c0:	b2db      	uxtb	r3, r3
    a7c2:	e6b6      	b.n	a532 <_vfiprintf_r+0xbea>
    a7c4:	f912 3b04 	ldrsb.w	r3, [r2], #4
    a7c8:	9207      	str	r2, [sp, #28]
    a7ca:	17da      	asrs	r2, r3, #31
    a7cc:	4611      	mov	r1, r2
    a7ce:	f7ff b9ca 	b.w	9b66 <_vfiprintf_r+0x21e>
    a7d2:	f851 3b04 	ldr.w	r3, [r1], #4
    a7d6:	9107      	str	r1, [sp, #28]
    a7d8:	4602      	mov	r2, r0
    a7da:	b2db      	uxtb	r3, r3
    a7dc:	f7ff ba27 	b.w	9c2e <_vfiprintf_r+0x2e6>
    a7e0:	2301      	movs	r3, #1
    a7e2:	931c      	str	r3, [sp, #112]	; 0x70
    a7e4:	2101      	movs	r1, #1
    a7e6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    a7ea:	931b      	str	r3, [sp, #108]	; 0x6c
    a7ec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a7f0:	460b      	mov	r3, r1
    a7f2:	f7ff bacd 	b.w	9d90 <_vfiprintf_r+0x448>
    a7f6:	9b07      	ldr	r3, [sp, #28]
    a7f8:	9905      	ldr	r1, [sp, #20]
    a7fa:	f853 2b04 	ldr.w	r2, [r3], #4
    a7fe:	9307      	str	r3, [sp, #28]
    a800:	8011      	strh	r1, [r2, #0]
    a802:	f7ff b8ec 	b.w	99de <_vfiprintf_r+0x96>
    a806:	1c59      	adds	r1, r3, #1
    a808:	4658      	mov	r0, fp
    a80a:	f7fa f979 	bl	4b00 <_malloc_r>
    a80e:	4604      	mov	r4, r0
    a810:	2800      	cmp	r0, #0
    a812:	d03c      	beq.n	a88e <_vfiprintf_r+0xf46>
    a814:	9008      	str	r0, [sp, #32]
    a816:	e795      	b.n	a744 <_vfiprintf_r+0xdfc>
    a818:	6d88      	ldr	r0, [r1, #88]	; 0x58
    a81a:	f7fb f945 	bl	5aa8 <__retarget_lock_release_recursive>
    a81e:	f7ff b9e9 	b.w	9bf4 <_vfiprintf_r+0x2ac>
    a822:	9b03      	ldr	r3, [sp, #12]
    a824:	9307      	str	r3, [sp, #28]
    a826:	e9cd 7703 	strd	r7, r7, [sp, #12]
    a82a:	9f08      	ldr	r7, [sp, #32]
    a82c:	f7ff b9bc 	b.w	9ba8 <_vfiprintf_r+0x260>
    a830:	9819      	ldr	r0, [sp, #100]	; 0x64
    a832:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a834:	3001      	adds	r0, #1
    a836:	e545      	b.n	a2c4 <_vfiprintf_r+0x97c>
    a838:	9b03      	ldr	r3, [sp, #12]
    a83a:	9307      	str	r3, [sp, #28]
    a83c:	4620      	mov	r0, r4
    a83e:	f7fb f93f 	bl	5ac0 <strlen>
    a842:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    a846:	462f      	mov	r7, r5
    a848:	9004      	str	r0, [sp, #16]
    a84a:	9303      	str	r3, [sp, #12]
    a84c:	9508      	str	r5, [sp, #32]
    a84e:	f7ff b9ab 	b.w	9ba8 <_vfiprintf_r+0x260>
    a852:	ee18 1a10 	vmov	r1, s16
    a856:	aa18      	add	r2, sp, #96	; 0x60
    a858:	4658      	mov	r0, fp
    a85a:	f7ff f839 	bl	98d0 <__sprint_r.part.0>
    a85e:	2800      	cmp	r0, #0
    a860:	f43f aa36 	beq.w	9cd0 <_vfiprintf_r+0x388>
    a864:	f7ff ba4d 	b.w	9d02 <_vfiprintf_r+0x3ba>
    a868:	9819      	ldr	r0, [sp, #100]	; 0x64
    a86a:	3001      	adds	r0, #1
    a86c:	e57a      	b.n	a364 <_vfiprintf_r+0xa1c>
    a86e:	468c      	mov	ip, r1
    a870:	e46e      	b.n	a150 <_vfiprintf_r+0x808>
    a872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    a874:	07d9      	lsls	r1, r3, #31
    a876:	d405      	bmi.n	a884 <_vfiprintf_r+0xf3c>
    a878:	89ab      	ldrh	r3, [r5, #12]
    a87a:	059a      	lsls	r2, r3, #22
    a87c:	d402      	bmi.n	a884 <_vfiprintf_r+0xf3c>
    a87e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a880:	f7fb f912 	bl	5aa8 <__retarget_lock_release_recursive>
    a884:	f04f 33ff 	mov.w	r3, #4294967295
    a888:	9305      	str	r3, [sp, #20]
    a88a:	f7ff ba49 	b.w	9d20 <_vfiprintf_r+0x3d8>
    a88e:	ee18 2a10 	vmov	r2, s16
    a892:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    a896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a89a:	8193      	strh	r3, [r2, #12]
    a89c:	f7ff ba35 	b.w	9d0a <_vfiprintf_r+0x3c2>
    a8a0:	9c07      	ldr	r4, [sp, #28]
    a8a2:	9704      	str	r7, [sp, #16]
    a8a4:	e746      	b.n	a734 <_vfiprintf_r+0xdec>
    a8a6:	9b07      	ldr	r3, [sp, #28]
    a8a8:	f898 1001 	ldrb.w	r1, [r8, #1]
    a8ac:	f853 7b04 	ldr.w	r7, [r3], #4
    a8b0:	9307      	str	r3, [sp, #28]
    a8b2:	4690      	mov	r8, r2
    a8b4:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    a8b8:	f7ff b8b9 	b.w	9a2e <_vfiprintf_r+0xe6>
    a8bc:	ee18 2a10 	vmov	r2, s16
    a8c0:	8993      	ldrh	r3, [r2, #12]
    a8c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a8c6:	8193      	strh	r3, [r2, #12]
    a8c8:	f7ff ba15 	b.w	9cf6 <_vfiprintf_r+0x3ae>
    a8cc:	cccccccd 	.word	0xcccccccd
    a8d0:	0000bc24 	.word	0x0000bc24

0000a8d4 <__sbprintf>:
    a8d4:	b570      	push	{r4, r5, r6, lr}
    a8d6:	460c      	mov	r4, r1
    a8d8:	8989      	ldrh	r1, [r1, #12]
    a8da:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    a8de:	f021 0102 	bic.w	r1, r1, #2
    a8e2:	f8ad 1014 	strh.w	r1, [sp, #20]
    a8e6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    a8e8:	911b      	str	r1, [sp, #108]	; 0x6c
    a8ea:	89e1      	ldrh	r1, [r4, #14]
    a8ec:	f8ad 1016 	strh.w	r1, [sp, #22]
    a8f0:	69e1      	ldr	r1, [r4, #28]
    a8f2:	9109      	str	r1, [sp, #36]	; 0x24
    a8f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a8f6:	910b      	str	r1, [sp, #44]	; 0x2c
    a8f8:	a91c      	add	r1, sp, #112	; 0x70
    a8fa:	9102      	str	r1, [sp, #8]
    a8fc:	9106      	str	r1, [sp, #24]
    a8fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
    a902:	4606      	mov	r6, r0
    a904:	9104      	str	r1, [sp, #16]
    a906:	9107      	str	r1, [sp, #28]
    a908:	a818      	add	r0, sp, #96	; 0x60
    a90a:	2100      	movs	r1, #0
    a90c:	e9cd 3200 	strd	r3, r2, [sp]
    a910:	9108      	str	r1, [sp, #32]
    a912:	f7fb f8c3 	bl	5a9c <__retarget_lock_init_recursive>
    a916:	e9dd 3200 	ldrd	r3, r2, [sp]
    a91a:	a902      	add	r1, sp, #8
    a91c:	4630      	mov	r0, r6
    a91e:	f7ff f813 	bl	9948 <_vfiprintf_r>
    a922:	1e05      	subs	r5, r0, #0
    a924:	db07      	blt.n	a936 <__sbprintf+0x62>
    a926:	a902      	add	r1, sp, #8
    a928:	4630      	mov	r0, r6
    a92a:	f7fd fd69 	bl	8400 <_fflush_r>
    a92e:	2800      	cmp	r0, #0
    a930:	bf18      	it	ne
    a932:	f04f 35ff 	movne.w	r5, #4294967295
    a936:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a93a:	065b      	lsls	r3, r3, #25
    a93c:	d503      	bpl.n	a946 <__sbprintf+0x72>
    a93e:	89a3      	ldrh	r3, [r4, #12]
    a940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a944:	81a3      	strh	r3, [r4, #12]
    a946:	9818      	ldr	r0, [sp, #96]	; 0x60
    a948:	f7fb f8aa 	bl	5aa0 <__retarget_lock_close_recursive>
    a94c:	4628      	mov	r0, r5
    a94e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    a952:	bd70      	pop	{r4, r5, r6, pc}

0000a954 <__sfvwrite_r>:
    a954:	6893      	ldr	r3, [r2, #8]
    a956:	2b00      	cmp	r3, #0
    a958:	f000 8085 	beq.w	aa66 <__sfvwrite_r+0x112>
    a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a960:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    a964:	460c      	mov	r4, r1
    a966:	0719      	lsls	r1, r3, #28
    a968:	4680      	mov	r8, r0
    a96a:	b083      	sub	sp, #12
    a96c:	4617      	mov	r7, r2
    a96e:	b298      	uxth	r0, r3
    a970:	d525      	bpl.n	a9be <__sfvwrite_r+0x6a>
    a972:	6923      	ldr	r3, [r4, #16]
    a974:	b31b      	cbz	r3, a9be <__sfvwrite_r+0x6a>
    a976:	f010 0302 	ands.w	r3, r0, #2
    a97a:	683d      	ldr	r5, [r7, #0]
    a97c:	d02d      	beq.n	a9da <__sfvwrite_r+0x86>
    a97e:	f04f 0a00 	mov.w	sl, #0
    a982:	f8df b2c0 	ldr.w	fp, [pc, #704]	; ac44 <__sfvwrite_r+0x2f0>
    a986:	4656      	mov	r6, sl
    a988:	46b9      	mov	r9, r7
    a98a:	455e      	cmp	r6, fp
    a98c:	4633      	mov	r3, r6
    a98e:	4652      	mov	r2, sl
    a990:	bf28      	it	cs
    a992:	465b      	movcs	r3, fp
    a994:	4640      	mov	r0, r8
    a996:	2e00      	cmp	r6, #0
    a998:	d052      	beq.n	aa40 <__sfvwrite_r+0xec>
    a99a:	69e1      	ldr	r1, [r4, #28]
    a99c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    a99e:	47b8      	blx	r7
    a9a0:	2800      	cmp	r0, #0
    a9a2:	dd56      	ble.n	aa52 <__sfvwrite_r+0xfe>
    a9a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    a9a8:	1a1b      	subs	r3, r3, r0
    a9aa:	4482      	add	sl, r0
    a9ac:	1a36      	subs	r6, r6, r0
    a9ae:	f8c9 3008 	str.w	r3, [r9, #8]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d1e9      	bne.n	a98a <__sfvwrite_r+0x36>
    a9b6:	2000      	movs	r0, #0
    a9b8:	b003      	add	sp, #12
    a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9be:	4621      	mov	r1, r4
    a9c0:	4640      	mov	r0, r8
    a9c2:	f000 f941 	bl	ac48 <__swsetup_r>
    a9c6:	2800      	cmp	r0, #0
    a9c8:	f040 8138 	bne.w	ac3c <__sfvwrite_r+0x2e8>
    a9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a9d0:	683d      	ldr	r5, [r7, #0]
    a9d2:	b298      	uxth	r0, r3
    a9d4:	f010 0302 	ands.w	r3, r0, #2
    a9d8:	d1d1      	bne.n	a97e <__sfvwrite_r+0x2a>
    a9da:	f010 0901 	ands.w	r9, r0, #1
    a9de:	d144      	bne.n	aa6a <__sfvwrite_r+0x116>
    a9e0:	464e      	mov	r6, r9
    a9e2:	9700      	str	r7, [sp, #0]
    a9e4:	b346      	cbz	r6, aa38 <__sfvwrite_r+0xe4>
    a9e6:	0582      	lsls	r2, r0, #22
    a9e8:	f8d4 b008 	ldr.w	fp, [r4, #8]
    a9ec:	f140 8085 	bpl.w	aafa <__sfvwrite_r+0x1a6>
    a9f0:	45b3      	cmp	fp, r6
    a9f2:	465a      	mov	r2, fp
    a9f4:	f200 80b4 	bhi.w	ab60 <__sfvwrite_r+0x20c>
    a9f8:	f410 6f90 	tst.w	r0, #1152	; 0x480
    a9fc:	f040 80c1 	bne.w	ab82 <__sfvwrite_r+0x22e>
    aa00:	6820      	ldr	r0, [r4, #0]
    aa02:	9201      	str	r2, [sp, #4]
    aa04:	4649      	mov	r1, r9
    aa06:	f7fa feb3 	bl	5770 <memmove>
    aa0a:	68a3      	ldr	r3, [r4, #8]
    aa0c:	9a01      	ldr	r2, [sp, #4]
    aa0e:	eba3 010b 	sub.w	r1, r3, fp
    aa12:	6823      	ldr	r3, [r4, #0]
    aa14:	60a1      	str	r1, [r4, #8]
    aa16:	4413      	add	r3, r2
    aa18:	46b2      	mov	sl, r6
    aa1a:	6023      	str	r3, [r4, #0]
    aa1c:	2600      	movs	r6, #0
    aa1e:	9a00      	ldr	r2, [sp, #0]
    aa20:	6893      	ldr	r3, [r2, #8]
    aa22:	eba3 030a 	sub.w	r3, r3, sl
    aa26:	44d1      	add	r9, sl
    aa28:	6093      	str	r3, [r2, #8]
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d0c3      	beq.n	a9b6 <__sfvwrite_r+0x62>
    aa2e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    aa32:	b280      	uxth	r0, r0
    aa34:	2e00      	cmp	r6, #0
    aa36:	d1d6      	bne.n	a9e6 <__sfvwrite_r+0x92>
    aa38:	e9d5 9600 	ldrd	r9, r6, [r5]
    aa3c:	3508      	adds	r5, #8
    aa3e:	e7d1      	b.n	a9e4 <__sfvwrite_r+0x90>
    aa40:	e9d5 a600 	ldrd	sl, r6, [r5]
    aa44:	3508      	adds	r5, #8
    aa46:	e7a0      	b.n	a98a <__sfvwrite_r+0x36>
    aa48:	4621      	mov	r1, r4
    aa4a:	4640      	mov	r0, r8
    aa4c:	f7fd fcd8 	bl	8400 <_fflush_r>
    aa50:	b388      	cbz	r0, aab6 <__sfvwrite_r+0x162>
    aa52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    aa56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa5a:	f04f 30ff 	mov.w	r0, #4294967295
    aa5e:	81a3      	strh	r3, [r4, #12]
    aa60:	b003      	add	sp, #12
    aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa66:	2000      	movs	r0, #0
    aa68:	4770      	bx	lr
    aa6a:	461e      	mov	r6, r3
    aa6c:	46ba      	mov	sl, r7
    aa6e:	4699      	mov	r9, r3
    aa70:	4618      	mov	r0, r3
    aa72:	9500      	str	r5, [sp, #0]
    aa74:	461f      	mov	r7, r3
    aa76:	b366      	cbz	r6, aad2 <__sfvwrite_r+0x17e>
    aa78:	2800      	cmp	r0, #0
    aa7a:	d032      	beq.n	aae2 <__sfvwrite_r+0x18e>
    aa7c:	464a      	mov	r2, r9
    aa7e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    aa82:	6820      	ldr	r0, [r4, #0]
    aa84:	68a5      	ldr	r5, [r4, #8]
    aa86:	42b2      	cmp	r2, r6
    aa88:	bf28      	it	cs
    aa8a:	4632      	movcs	r2, r6
    aa8c:	4288      	cmp	r0, r1
    aa8e:	d904      	bls.n	aa9a <__sfvwrite_r+0x146>
    aa90:	eb05 0b03 	add.w	fp, r5, r3
    aa94:	455a      	cmp	r2, fp
    aa96:	f300 80a7 	bgt.w	abe8 <__sfvwrite_r+0x294>
    aa9a:	4293      	cmp	r3, r2
    aa9c:	dc64      	bgt.n	ab68 <__sfvwrite_r+0x214>
    aa9e:	69e1      	ldr	r1, [r4, #28]
    aaa0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    aaa2:	463a      	mov	r2, r7
    aaa4:	4640      	mov	r0, r8
    aaa6:	47a8      	blx	r5
    aaa8:	f1b0 0b00 	subs.w	fp, r0, #0
    aaac:	ddd1      	ble.n	aa52 <__sfvwrite_r+0xfe>
    aaae:	ebb9 090b 	subs.w	r9, r9, fp
    aab2:	d0c9      	beq.n	aa48 <__sfvwrite_r+0xf4>
    aab4:	2001      	movs	r0, #1
    aab6:	f8da 3008 	ldr.w	r3, [sl, #8]
    aaba:	eba3 030b 	sub.w	r3, r3, fp
    aabe:	445f      	add	r7, fp
    aac0:	eba6 060b 	sub.w	r6, r6, fp
    aac4:	f8ca 3008 	str.w	r3, [sl, #8]
    aac8:	2b00      	cmp	r3, #0
    aaca:	f43f af74 	beq.w	a9b6 <__sfvwrite_r+0x62>
    aace:	2e00      	cmp	r6, #0
    aad0:	d1d2      	bne.n	aa78 <__sfvwrite_r+0x124>
    aad2:	9a00      	ldr	r2, [sp, #0]
    aad4:	6856      	ldr	r6, [r2, #4]
    aad6:	4613      	mov	r3, r2
    aad8:	3208      	adds	r2, #8
    aada:	9200      	str	r2, [sp, #0]
    aadc:	2e00      	cmp	r6, #0
    aade:	d0f8      	beq.n	aad2 <__sfvwrite_r+0x17e>
    aae0:	681f      	ldr	r7, [r3, #0]
    aae2:	4632      	mov	r2, r6
    aae4:	210a      	movs	r1, #10
    aae6:	4638      	mov	r0, r7
    aae8:	f7fd fcd2 	bl	8490 <memchr>
    aaec:	2800      	cmp	r0, #0
    aaee:	f000 809c 	beq.w	ac2a <__sfvwrite_r+0x2d6>
    aaf2:	3001      	adds	r0, #1
    aaf4:	eba0 0907 	sub.w	r9, r0, r7
    aaf8:	e7c0      	b.n	aa7c <__sfvwrite_r+0x128>
    aafa:	6820      	ldr	r0, [r4, #0]
    aafc:	6923      	ldr	r3, [r4, #16]
    aafe:	4298      	cmp	r0, r3
    ab00:	d816      	bhi.n	ab30 <__sfvwrite_r+0x1dc>
    ab02:	6962      	ldr	r2, [r4, #20]
    ab04:	42b2      	cmp	r2, r6
    ab06:	d813      	bhi.n	ab30 <__sfvwrite_r+0x1dc>
    ab08:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ab0c:	42b3      	cmp	r3, r6
    ab0e:	bf28      	it	cs
    ab10:	4633      	movcs	r3, r6
    ab12:	69e1      	ldr	r1, [r4, #28]
    ab14:	fb93 f3f2 	sdiv	r3, r3, r2
    ab18:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ab1a:	fb02 f303 	mul.w	r3, r2, r3
    ab1e:	4640      	mov	r0, r8
    ab20:	464a      	mov	r2, r9
    ab22:	47b8      	blx	r7
    ab24:	f1b0 0a00 	subs.w	sl, r0, #0
    ab28:	dd93      	ble.n	aa52 <__sfvwrite_r+0xfe>
    ab2a:	eba6 060a 	sub.w	r6, r6, sl
    ab2e:	e776      	b.n	aa1e <__sfvwrite_r+0xca>
    ab30:	45b3      	cmp	fp, r6
    ab32:	46da      	mov	sl, fp
    ab34:	bf28      	it	cs
    ab36:	46b2      	movcs	sl, r6
    ab38:	4652      	mov	r2, sl
    ab3a:	4649      	mov	r1, r9
    ab3c:	f7fa fe18 	bl	5770 <memmove>
    ab40:	68a3      	ldr	r3, [r4, #8]
    ab42:	6822      	ldr	r2, [r4, #0]
    ab44:	eba3 030a 	sub.w	r3, r3, sl
    ab48:	4452      	add	r2, sl
    ab4a:	60a3      	str	r3, [r4, #8]
    ab4c:	6022      	str	r2, [r4, #0]
    ab4e:	2b00      	cmp	r3, #0
    ab50:	d1eb      	bne.n	ab2a <__sfvwrite_r+0x1d6>
    ab52:	4621      	mov	r1, r4
    ab54:	4640      	mov	r0, r8
    ab56:	f7fd fc53 	bl	8400 <_fflush_r>
    ab5a:	2800      	cmp	r0, #0
    ab5c:	d0e5      	beq.n	ab2a <__sfvwrite_r+0x1d6>
    ab5e:	e778      	b.n	aa52 <__sfvwrite_r+0xfe>
    ab60:	6820      	ldr	r0, [r4, #0]
    ab62:	46b3      	mov	fp, r6
    ab64:	4632      	mov	r2, r6
    ab66:	e74c      	b.n	aa02 <__sfvwrite_r+0xae>
    ab68:	4639      	mov	r1, r7
    ab6a:	9201      	str	r2, [sp, #4]
    ab6c:	f7fa fe00 	bl	5770 <memmove>
    ab70:	9a01      	ldr	r2, [sp, #4]
    ab72:	68a3      	ldr	r3, [r4, #8]
    ab74:	1a9b      	subs	r3, r3, r2
    ab76:	60a3      	str	r3, [r4, #8]
    ab78:	6823      	ldr	r3, [r4, #0]
    ab7a:	4413      	add	r3, r2
    ab7c:	6023      	str	r3, [r4, #0]
    ab7e:	4693      	mov	fp, r2
    ab80:	e795      	b.n	aaae <__sfvwrite_r+0x15a>
    ab82:	6823      	ldr	r3, [r4, #0]
    ab84:	6921      	ldr	r1, [r4, #16]
    ab86:	eba3 0b01 	sub.w	fp, r3, r1
    ab8a:	6963      	ldr	r3, [r4, #20]
    ab8c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    ab90:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    ab94:	f10b 0301 	add.w	r3, fp, #1
    ab98:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    ab9c:	4433      	add	r3, r6
    ab9e:	4553      	cmp	r3, sl
    aba0:	4652      	mov	r2, sl
    aba2:	bf84      	itt	hi
    aba4:	469a      	movhi	sl, r3
    aba6:	4652      	movhi	r2, sl
    aba8:	0543      	lsls	r3, r0, #21
    abaa:	d52c      	bpl.n	ac06 <__sfvwrite_r+0x2b2>
    abac:	4611      	mov	r1, r2
    abae:	4640      	mov	r0, r8
    abb0:	f7f9 ffa6 	bl	4b00 <_malloc_r>
    abb4:	2800      	cmp	r0, #0
    abb6:	d03b      	beq.n	ac30 <__sfvwrite_r+0x2dc>
    abb8:	465a      	mov	r2, fp
    abba:	6921      	ldr	r1, [r4, #16]
    abbc:	9001      	str	r0, [sp, #4]
    abbe:	f7f8 fa8d 	bl	30dc <memcpy>
    abc2:	89a2      	ldrh	r2, [r4, #12]
    abc4:	9b01      	ldr	r3, [sp, #4]
    abc6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    abca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    abce:	81a2      	strh	r2, [r4, #12]
    abd0:	eb03 000b 	add.w	r0, r3, fp
    abd4:	6123      	str	r3, [r4, #16]
    abd6:	ebaa 030b 	sub.w	r3, sl, fp
    abda:	f8c4 a014 	str.w	sl, [r4, #20]
    abde:	60a3      	str	r3, [r4, #8]
    abe0:	6020      	str	r0, [r4, #0]
    abe2:	46b3      	mov	fp, r6
    abe4:	4632      	mov	r2, r6
    abe6:	e70c      	b.n	aa02 <__sfvwrite_r+0xae>
    abe8:	4639      	mov	r1, r7
    abea:	465a      	mov	r2, fp
    abec:	f7fa fdc0 	bl	5770 <memmove>
    abf0:	6823      	ldr	r3, [r4, #0]
    abf2:	445b      	add	r3, fp
    abf4:	6023      	str	r3, [r4, #0]
    abf6:	4621      	mov	r1, r4
    abf8:	4640      	mov	r0, r8
    abfa:	f7fd fc01 	bl	8400 <_fflush_r>
    abfe:	2800      	cmp	r0, #0
    ac00:	f43f af55 	beq.w	aaae <__sfvwrite_r+0x15a>
    ac04:	e725      	b.n	aa52 <__sfvwrite_r+0xfe>
    ac06:	4640      	mov	r0, r8
    ac08:	f7fa fa36 	bl	5078 <_realloc_r>
    ac0c:	4603      	mov	r3, r0
    ac0e:	2800      	cmp	r0, #0
    ac10:	d1de      	bne.n	abd0 <__sfvwrite_r+0x27c>
    ac12:	6921      	ldr	r1, [r4, #16]
    ac14:	4640      	mov	r0, r8
    ac16:	f7fb f821 	bl	5c5c <_free_r>
    ac1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ac1e:	220c      	movs	r2, #12
    ac20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ac24:	f8c8 2000 	str.w	r2, [r8]
    ac28:	e715      	b.n	aa56 <__sfvwrite_r+0x102>
    ac2a:	1c72      	adds	r2, r6, #1
    ac2c:	4691      	mov	r9, r2
    ac2e:	e726      	b.n	aa7e <__sfvwrite_r+0x12a>
    ac30:	220c      	movs	r2, #12
    ac32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ac36:	f8c8 2000 	str.w	r2, [r8]
    ac3a:	e70c      	b.n	aa56 <__sfvwrite_r+0x102>
    ac3c:	f04f 30ff 	mov.w	r0, #4294967295
    ac40:	e6ba      	b.n	a9b8 <__sfvwrite_r+0x64>
    ac42:	bf00      	nop
    ac44:	7ffffc00 	.word	0x7ffffc00

0000ac48 <__swsetup_r>:
    ac48:	b538      	push	{r3, r4, r5, lr}
    ac4a:	4b31      	ldr	r3, [pc, #196]	; (ad10 <__swsetup_r+0xc8>)
    ac4c:	681b      	ldr	r3, [r3, #0]
    ac4e:	4605      	mov	r5, r0
    ac50:	460c      	mov	r4, r1
    ac52:	b113      	cbz	r3, ac5a <__swsetup_r+0x12>
    ac54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ac56:	2a00      	cmp	r2, #0
    ac58:	d04e      	beq.n	acf8 <__swsetup_r+0xb0>
    ac5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ac5e:	0718      	lsls	r0, r3, #28
    ac60:	b29a      	uxth	r2, r3
    ac62:	d51c      	bpl.n	ac9e <__swsetup_r+0x56>
    ac64:	6921      	ldr	r1, [r4, #16]
    ac66:	b329      	cbz	r1, acb4 <__swsetup_r+0x6c>
    ac68:	f012 0001 	ands.w	r0, r2, #1
    ac6c:	d007      	beq.n	ac7e <__swsetup_r+0x36>
    ac6e:	2000      	movs	r0, #0
    ac70:	60a0      	str	r0, [r4, #8]
    ac72:	6960      	ldr	r0, [r4, #20]
    ac74:	4240      	negs	r0, r0
    ac76:	61a0      	str	r0, [r4, #24]
    ac78:	b139      	cbz	r1, ac8a <__swsetup_r+0x42>
    ac7a:	2000      	movs	r0, #0
    ac7c:	bd38      	pop	{r3, r4, r5, pc}
    ac7e:	0795      	lsls	r5, r2, #30
    ac80:	bf58      	it	pl
    ac82:	6960      	ldrpl	r0, [r4, #20]
    ac84:	60a0      	str	r0, [r4, #8]
    ac86:	2900      	cmp	r1, #0
    ac88:	d1f7      	bne.n	ac7a <__swsetup_r+0x32>
    ac8a:	0612      	lsls	r2, r2, #24
    ac8c:	bf58      	it	pl
    ac8e:	4608      	movpl	r0, r1
    ac90:	d5f4      	bpl.n	ac7c <__swsetup_r+0x34>
    ac92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac96:	81a3      	strh	r3, [r4, #12]
    ac98:	f04f 30ff 	mov.w	r0, #4294967295
    ac9c:	bd38      	pop	{r3, r4, r5, pc}
    ac9e:	06d1      	lsls	r1, r2, #27
    aca0:	d52e      	bpl.n	ad00 <__swsetup_r+0xb8>
    aca2:	0752      	lsls	r2, r2, #29
    aca4:	d414      	bmi.n	acd0 <__swsetup_r+0x88>
    aca6:	6921      	ldr	r1, [r4, #16]
    aca8:	f043 0308 	orr.w	r3, r3, #8
    acac:	81a3      	strh	r3, [r4, #12]
    acae:	b29a      	uxth	r2, r3
    acb0:	2900      	cmp	r1, #0
    acb2:	d1d9      	bne.n	ac68 <__swsetup_r+0x20>
    acb4:	f402 7020 	and.w	r0, r2, #640	; 0x280
    acb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    acbc:	d0d4      	beq.n	ac68 <__swsetup_r+0x20>
    acbe:	4621      	mov	r1, r4
    acc0:	4628      	mov	r0, r5
    acc2:	f000 f947 	bl	af54 <__smakebuf_r>
    acc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    acca:	6921      	ldr	r1, [r4, #16]
    accc:	b29a      	uxth	r2, r3
    acce:	e7cb      	b.n	ac68 <__swsetup_r+0x20>
    acd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    acd2:	b151      	cbz	r1, acea <__swsetup_r+0xa2>
    acd4:	f104 0240 	add.w	r2, r4, #64	; 0x40
    acd8:	4291      	cmp	r1, r2
    acda:	d004      	beq.n	ace6 <__swsetup_r+0x9e>
    acdc:	4628      	mov	r0, r5
    acde:	f7fa ffbd 	bl	5c5c <_free_r>
    ace2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ace6:	2200      	movs	r2, #0
    ace8:	6322      	str	r2, [r4, #48]	; 0x30
    acea:	6921      	ldr	r1, [r4, #16]
    acec:	2200      	movs	r2, #0
    acee:	e9c4 1200 	strd	r1, r2, [r4]
    acf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    acf6:	e7d7      	b.n	aca8 <__swsetup_r+0x60>
    acf8:	4618      	mov	r0, r3
    acfa:	f7fa fc3f 	bl	557c <__sinit>
    acfe:	e7ac      	b.n	ac5a <__swsetup_r+0x12>
    ad00:	2209      	movs	r2, #9
    ad02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ad06:	602a      	str	r2, [r5, #0]
    ad08:	f04f 30ff 	mov.w	r0, #4294967295
    ad0c:	81a3      	strh	r3, [r4, #12]
    ad0e:	bd38      	pop	{r3, r4, r5, pc}
    ad10:	1fff0ec0 	.word	0x1fff0ec0

0000ad14 <__fputwc>:
    ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad18:	b082      	sub	sp, #8
    ad1a:	4682      	mov	sl, r0
    ad1c:	4688      	mov	r8, r1
    ad1e:	4614      	mov	r4, r2
    ad20:	f7fa fe26 	bl	5970 <__locale_mb_cur_max>
    ad24:	2801      	cmp	r0, #1
    ad26:	d103      	bne.n	ad30 <__fputwc+0x1c>
    ad28:	f108 33ff 	add.w	r3, r8, #4294967295
    ad2c:	2bfe      	cmp	r3, #254	; 0xfe
    ad2e:	d936      	bls.n	ad9e <__fputwc+0x8a>
    ad30:	f10d 0904 	add.w	r9, sp, #4
    ad34:	4642      	mov	r2, r8
    ad36:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    ad3a:	4649      	mov	r1, r9
    ad3c:	4650      	mov	r0, sl
    ad3e:	f7fe fd01 	bl	9744 <_wcrtomb_r>
    ad42:	1c42      	adds	r2, r0, #1
    ad44:	4606      	mov	r6, r0
    ad46:	d032      	beq.n	adae <__fputwc+0x9a>
    ad48:	b320      	cbz	r0, ad94 <__fputwc+0x80>
    ad4a:	f89d c004 	ldrb.w	ip, [sp, #4]
    ad4e:	2500      	movs	r5, #0
    ad50:	e009      	b.n	ad66 <__fputwc+0x52>
    ad52:	6823      	ldr	r3, [r4, #0]
    ad54:	1c5a      	adds	r2, r3, #1
    ad56:	6022      	str	r2, [r4, #0]
    ad58:	f883 c000 	strb.w	ip, [r3]
    ad5c:	3501      	adds	r5, #1
    ad5e:	42b5      	cmp	r5, r6
    ad60:	d218      	bcs.n	ad94 <__fputwc+0x80>
    ad62:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    ad66:	68a3      	ldr	r3, [r4, #8]
    ad68:	3b01      	subs	r3, #1
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	60a3      	str	r3, [r4, #8]
    ad6e:	daf0      	bge.n	ad52 <__fputwc+0x3e>
    ad70:	69a7      	ldr	r7, [r4, #24]
    ad72:	42bb      	cmp	r3, r7
    ad74:	4661      	mov	r1, ip
    ad76:	4622      	mov	r2, r4
    ad78:	4650      	mov	r0, sl
    ad7a:	db02      	blt.n	ad82 <__fputwc+0x6e>
    ad7c:	f1bc 0f0a 	cmp.w	ip, #10
    ad80:	d1e7      	bne.n	ad52 <__fputwc+0x3e>
    ad82:	f000 f953 	bl	b02c <__swbuf_r>
    ad86:	1c43      	adds	r3, r0, #1
    ad88:	d1e8      	bne.n	ad5c <__fputwc+0x48>
    ad8a:	4606      	mov	r6, r0
    ad8c:	4630      	mov	r0, r6
    ad8e:	b002      	add	sp, #8
    ad90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad94:	4646      	mov	r6, r8
    ad96:	4630      	mov	r0, r6
    ad98:	b002      	add	sp, #8
    ad9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad9e:	fa5f fc88 	uxtb.w	ip, r8
    ada2:	f88d c004 	strb.w	ip, [sp, #4]
    ada6:	4606      	mov	r6, r0
    ada8:	f10d 0904 	add.w	r9, sp, #4
    adac:	e7cf      	b.n	ad4e <__fputwc+0x3a>
    adae:	89a3      	ldrh	r3, [r4, #12]
    adb0:	4630      	mov	r0, r6
    adb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    adb6:	81a3      	strh	r3, [r4, #12]
    adb8:	b002      	add	sp, #8
    adba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    adbe:	bf00      	nop

0000adc0 <_fputwc_r>:
    adc0:	b530      	push	{r4, r5, lr}
    adc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
    adc4:	f013 0f01 	tst.w	r3, #1
    adc8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    adcc:	4614      	mov	r4, r2
    adce:	b083      	sub	sp, #12
    add0:	4605      	mov	r5, r0
    add2:	b29a      	uxth	r2, r3
    add4:	d101      	bne.n	adda <_fputwc_r+0x1a>
    add6:	0598      	lsls	r0, r3, #22
    add8:	d51c      	bpl.n	ae14 <_fputwc_r+0x54>
    adda:	0490      	lsls	r0, r2, #18
    addc:	d406      	bmi.n	adec <_fputwc_r+0x2c>
    adde:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ade0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ade4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ade8:	81a3      	strh	r3, [r4, #12]
    adea:	6662      	str	r2, [r4, #100]	; 0x64
    adec:	4622      	mov	r2, r4
    adee:	4628      	mov	r0, r5
    adf0:	f7ff ff90 	bl	ad14 <__fputwc>
    adf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    adf6:	07da      	lsls	r2, r3, #31
    adf8:	4605      	mov	r5, r0
    adfa:	d402      	bmi.n	ae02 <_fputwc_r+0x42>
    adfc:	89a3      	ldrh	r3, [r4, #12]
    adfe:	059b      	lsls	r3, r3, #22
    ae00:	d502      	bpl.n	ae08 <_fputwc_r+0x48>
    ae02:	4628      	mov	r0, r5
    ae04:	b003      	add	sp, #12
    ae06:	bd30      	pop	{r4, r5, pc}
    ae08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ae0a:	f7fa fe4d 	bl	5aa8 <__retarget_lock_release_recursive>
    ae0e:	4628      	mov	r0, r5
    ae10:	b003      	add	sp, #12
    ae12:	bd30      	pop	{r4, r5, pc}
    ae14:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ae16:	9101      	str	r1, [sp, #4]
    ae18:	f7fa fe44 	bl	5aa4 <__retarget_lock_acquire_recursive>
    ae1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ae20:	9901      	ldr	r1, [sp, #4]
    ae22:	b29a      	uxth	r2, r3
    ae24:	e7d9      	b.n	adda <_fputwc_r+0x1a>
    ae26:	bf00      	nop

0000ae28 <_wcsnrtombs_l>:
    ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae2c:	b08b      	sub	sp, #44	; 0x2c
    ae2e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    ae32:	9f14      	ldr	r7, [sp, #80]	; 0x50
    ae34:	9103      	str	r1, [sp, #12]
    ae36:	4681      	mov	r9, r0
    ae38:	9205      	str	r2, [sp, #20]
    ae3a:	461e      	mov	r6, r3
    ae3c:	f1b8 0f00 	cmp.w	r8, #0
    ae40:	d05c      	beq.n	aefc <_wcsnrtombs_l+0xd4>
    ae42:	9b03      	ldr	r3, [sp, #12]
    ae44:	2b00      	cmp	r3, #0
    ae46:	d05e      	beq.n	af06 <_wcsnrtombs_l+0xde>
    ae48:	9b05      	ldr	r3, [sp, #20]
    ae4a:	681d      	ldr	r5, [r3, #0]
    ae4c:	2f00      	cmp	r7, #0
    ae4e:	d06a      	beq.n	af26 <_wcsnrtombs_l+0xfe>
    ae50:	1e74      	subs	r4, r6, #1
    ae52:	b34e      	cbz	r6, aea8 <_wcsnrtombs_l+0x80>
    ae54:	9b03      	ldr	r3, [sp, #12]
    ae56:	9304      	str	r3, [sp, #16]
    ae58:	3d04      	subs	r5, #4
    ae5a:	2600      	movs	r6, #0
    ae5c:	9501      	str	r5, [sp, #4]
    ae5e:	e00b      	b.n	ae78 <_wcsnrtombs_l+0x50>
    ae60:	9b03      	ldr	r3, [sp, #12]
    ae62:	bb2b      	cbnz	r3, aeb0 <_wcsnrtombs_l+0x88>
    ae64:	9b01      	ldr	r3, [sp, #4]
    ae66:	681a      	ldr	r2, [r3, #0]
    ae68:	2a00      	cmp	r2, #0
    ae6a:	d03a      	beq.n	aee2 <_wcsnrtombs_l+0xba>
    ae6c:	45bc      	cmp	ip, r7
    ae6e:	d25c      	bcs.n	af2a <_wcsnrtombs_l+0x102>
    ae70:	3c01      	subs	r4, #1
    ae72:	1c63      	adds	r3, r4, #1
    ae74:	4666      	mov	r6, ip
    ae76:	d017      	beq.n	aea8 <_wcsnrtombs_l+0x80>
    ae78:	f8d8 3000 	ldr.w	r3, [r8]
    ae7c:	9302      	str	r3, [sp, #8]
    ae7e:	9b01      	ldr	r3, [sp, #4]
    ae80:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    ae84:	f853 2f04 	ldr.w	r2, [r3, #4]!
    ae88:	9301      	str	r3, [sp, #4]
    ae8a:	a907      	add	r1, sp, #28
    ae8c:	4643      	mov	r3, r8
    ae8e:	4648      	mov	r0, r9
    ae90:	f8d8 b004 	ldr.w	fp, [r8, #4]
    ae94:	47a8      	blx	r5
    ae96:	1c42      	adds	r2, r0, #1
    ae98:	d03a      	beq.n	af10 <_wcsnrtombs_l+0xe8>
    ae9a:	eb00 0c06 	add.w	ip, r0, r6
    ae9e:	45bc      	cmp	ip, r7
    aea0:	d9de      	bls.n	ae60 <_wcsnrtombs_l+0x38>
    aea2:	9b02      	ldr	r3, [sp, #8]
    aea4:	e9c8 3b00 	strd	r3, fp, [r8]
    aea8:	4630      	mov	r0, r6
    aeaa:	b00b      	add	sp, #44	; 0x2c
    aeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aeb0:	2800      	cmp	r0, #0
    aeb2:	dd0e      	ble.n	aed2 <_wcsnrtombs_l+0xaa>
    aeb4:	9b04      	ldr	r3, [sp, #16]
    aeb6:	9d01      	ldr	r5, [sp, #4]
    aeb8:	4418      	add	r0, r3
    aeba:	1e5a      	subs	r2, r3, #1
    aebc:	a907      	add	r1, sp, #28
    aebe:	f100 3eff 	add.w	lr, r0, #4294967295
    aec2:	f811 3b01 	ldrb.w	r3, [r1], #1
    aec6:	f802 3f01 	strb.w	r3, [r2, #1]!
    aeca:	4572      	cmp	r2, lr
    aecc:	d1f9      	bne.n	aec2 <_wcsnrtombs_l+0x9a>
    aece:	9501      	str	r5, [sp, #4]
    aed0:	9004      	str	r0, [sp, #16]
    aed2:	9b05      	ldr	r3, [sp, #20]
    aed4:	681a      	ldr	r2, [r3, #0]
    aed6:	3204      	adds	r2, #4
    aed8:	601a      	str	r2, [r3, #0]
    aeda:	9b01      	ldr	r3, [sp, #4]
    aedc:	681a      	ldr	r2, [r3, #0]
    aede:	2a00      	cmp	r2, #0
    aee0:	d1c4      	bne.n	ae6c <_wcsnrtombs_l+0x44>
    aee2:	9b03      	ldr	r3, [sp, #12]
    aee4:	b10b      	cbz	r3, aeea <_wcsnrtombs_l+0xc2>
    aee6:	9b05      	ldr	r3, [sp, #20]
    aee8:	601a      	str	r2, [r3, #0]
    aeea:	f10c 36ff 	add.w	r6, ip, #4294967295
    aeee:	2200      	movs	r2, #0
    aef0:	4630      	mov	r0, r6
    aef2:	f8c8 2000 	str.w	r2, [r8]
    aef6:	b00b      	add	sp, #44	; 0x2c
    aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aefc:	9b03      	ldr	r3, [sp, #12]
    aefe:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    af02:	2b00      	cmp	r3, #0
    af04:	d1a0      	bne.n	ae48 <_wcsnrtombs_l+0x20>
    af06:	9b05      	ldr	r3, [sp, #20]
    af08:	f04f 37ff 	mov.w	r7, #4294967295
    af0c:	681d      	ldr	r5, [r3, #0]
    af0e:	e79f      	b.n	ae50 <_wcsnrtombs_l+0x28>
    af10:	4606      	mov	r6, r0
    af12:	218a      	movs	r1, #138	; 0x8a
    af14:	2200      	movs	r2, #0
    af16:	4630      	mov	r0, r6
    af18:	f8c9 1000 	str.w	r1, [r9]
    af1c:	f8c8 2000 	str.w	r2, [r8]
    af20:	b00b      	add	sp, #44	; 0x2c
    af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af26:	463e      	mov	r6, r7
    af28:	e7be      	b.n	aea8 <_wcsnrtombs_l+0x80>
    af2a:	4666      	mov	r6, ip
    af2c:	e7bc      	b.n	aea8 <_wcsnrtombs_l+0x80>
    af2e:	bf00      	nop

0000af30 <_wcsnrtombs_r>:
    af30:	b510      	push	{r4, lr}
    af32:	b084      	sub	sp, #16
    af34:	4c05      	ldr	r4, [pc, #20]	; (af4c <_wcsnrtombs_r+0x1c>)
    af36:	9806      	ldr	r0, [sp, #24]
    af38:	9000      	str	r0, [sp, #0]
    af3a:	9807      	ldr	r0, [sp, #28]
    af3c:	9001      	str	r0, [sp, #4]
    af3e:	4804      	ldr	r0, [pc, #16]	; (af50 <_wcsnrtombs_r+0x20>)
    af40:	6800      	ldr	r0, [r0, #0]
    af42:	9402      	str	r4, [sp, #8]
    af44:	f7ff ff70 	bl	ae28 <_wcsnrtombs_l>
    af48:	b004      	add	sp, #16
    af4a:	bd10      	pop	{r4, pc}
    af4c:	1fff0c30 	.word	0x1fff0c30
    af50:	1fff0ec0 	.word	0x1fff0ec0

0000af54 <__smakebuf_r>:
    af54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af58:	898b      	ldrh	r3, [r1, #12]
    af5a:	460c      	mov	r4, r1
    af5c:	0799      	lsls	r1, r3, #30
    af5e:	b096      	sub	sp, #88	; 0x58
    af60:	d508      	bpl.n	af74 <__smakebuf_r+0x20>
    af62:	f104 0343 	add.w	r3, r4, #67	; 0x43
    af66:	2201      	movs	r2, #1
    af68:	e9c4 3204 	strd	r3, r2, [r4, #16]
    af6c:	6023      	str	r3, [r4, #0]
    af6e:	b016      	add	sp, #88	; 0x58
    af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    af78:	2900      	cmp	r1, #0
    af7a:	4606      	mov	r6, r0
    af7c:	db25      	blt.n	afca <__smakebuf_r+0x76>
    af7e:	466a      	mov	r2, sp
    af80:	f000 f8ac 	bl	b0dc <_fstat_r>
    af84:	2800      	cmp	r0, #0
    af86:	db1f      	blt.n	afc8 <__smakebuf_r+0x74>
    af88:	9d01      	ldr	r5, [sp, #4]
    af8a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    af8e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    af92:	fab5 f585 	clz	r5, r5
    af96:	f44f 6880 	mov.w	r8, #1024	; 0x400
    af9a:	096d      	lsrs	r5, r5, #5
    af9c:	f44f 6700 	mov.w	r7, #2048	; 0x800
    afa0:	4641      	mov	r1, r8
    afa2:	4630      	mov	r0, r6
    afa4:	f7f9 fdac 	bl	4b00 <_malloc_r>
    afa8:	b1e0      	cbz	r0, afe4 <__smakebuf_r+0x90>
    afaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    afae:	f8c4 8014 	str.w	r8, [r4, #20]
    afb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    afb6:	6020      	str	r0, [r4, #0]
    afb8:	6120      	str	r0, [r4, #16]
    afba:	81a3      	strh	r3, [r4, #12]
    afbc:	bb35      	cbnz	r5, b00c <__smakebuf_r+0xb8>
    afbe:	433b      	orrs	r3, r7
    afc0:	81a3      	strh	r3, [r4, #12]
    afc2:	b016      	add	sp, #88	; 0x58
    afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afc8:	89a3      	ldrh	r3, [r4, #12]
    afca:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    afce:	d019      	beq.n	b004 <__smakebuf_r+0xb0>
    afd0:	f04f 0840 	mov.w	r8, #64	; 0x40
    afd4:	2500      	movs	r5, #0
    afd6:	4641      	mov	r1, r8
    afd8:	4630      	mov	r0, r6
    afda:	462f      	mov	r7, r5
    afdc:	f7f9 fd90 	bl	4b00 <_malloc_r>
    afe0:	2800      	cmp	r0, #0
    afe2:	d1e2      	bne.n	afaa <__smakebuf_r+0x56>
    afe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    afe8:	059a      	lsls	r2, r3, #22
    afea:	d4c0      	bmi.n	af6e <__smakebuf_r+0x1a>
    afec:	f023 0303 	bic.w	r3, r3, #3
    aff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
    aff4:	f043 0302 	orr.w	r3, r3, #2
    aff8:	2101      	movs	r1, #1
    affa:	e9c4 2104 	strd	r2, r1, [r4, #16]
    affe:	81a3      	strh	r3, [r4, #12]
    b000:	6022      	str	r2, [r4, #0]
    b002:	e7b4      	b.n	af6e <__smakebuf_r+0x1a>
    b004:	f44f 6880 	mov.w	r8, #1024	; 0x400
    b008:	462f      	mov	r7, r5
    b00a:	e7c9      	b.n	afa0 <__smakebuf_r+0x4c>
    b00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b010:	4630      	mov	r0, r6
    b012:	f000 f879 	bl	b108 <_isatty_r>
    b016:	b910      	cbnz	r0, b01e <__smakebuf_r+0xca>
    b018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b01c:	e7cf      	b.n	afbe <__smakebuf_r+0x6a>
    b01e:	89a3      	ldrh	r3, [r4, #12]
    b020:	f023 0303 	bic.w	r3, r3, #3
    b024:	f043 0301 	orr.w	r3, r3, #1
    b028:	b21b      	sxth	r3, r3
    b02a:	e7c8      	b.n	afbe <__smakebuf_r+0x6a>

0000b02c <__swbuf_r>:
    b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b02e:	460d      	mov	r5, r1
    b030:	4614      	mov	r4, r2
    b032:	4606      	mov	r6, r0
    b034:	b110      	cbz	r0, b03c <__swbuf_r+0x10>
    b036:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b038:	2b00      	cmp	r3, #0
    b03a:	d04c      	beq.n	b0d6 <__swbuf_r+0xaa>
    b03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    b040:	69a3      	ldr	r3, [r4, #24]
    b042:	60a3      	str	r3, [r4, #8]
    b044:	0717      	lsls	r7, r2, #28
    b046:	b290      	uxth	r0, r2
    b048:	d51b      	bpl.n	b082 <__swbuf_r+0x56>
    b04a:	6923      	ldr	r3, [r4, #16]
    b04c:	b1cb      	cbz	r3, b082 <__swbuf_r+0x56>
    b04e:	b2ed      	uxtb	r5, r5
    b050:	0481      	lsls	r1, r0, #18
    b052:	462f      	mov	r7, r5
    b054:	d522      	bpl.n	b09c <__swbuf_r+0x70>
    b056:	6822      	ldr	r2, [r4, #0]
    b058:	6961      	ldr	r1, [r4, #20]
    b05a:	1ad3      	subs	r3, r2, r3
    b05c:	4299      	cmp	r1, r3
    b05e:	dd29      	ble.n	b0b4 <__swbuf_r+0x88>
    b060:	3301      	adds	r3, #1
    b062:	68a1      	ldr	r1, [r4, #8]
    b064:	3901      	subs	r1, #1
    b066:	60a1      	str	r1, [r4, #8]
    b068:	1c51      	adds	r1, r2, #1
    b06a:	6021      	str	r1, [r4, #0]
    b06c:	7015      	strb	r5, [r2, #0]
    b06e:	6962      	ldr	r2, [r4, #20]
    b070:	429a      	cmp	r2, r3
    b072:	d027      	beq.n	b0c4 <__swbuf_r+0x98>
    b074:	89a3      	ldrh	r3, [r4, #12]
    b076:	07db      	lsls	r3, r3, #31
    b078:	d501      	bpl.n	b07e <__swbuf_r+0x52>
    b07a:	2d0a      	cmp	r5, #10
    b07c:	d022      	beq.n	b0c4 <__swbuf_r+0x98>
    b07e:	4638      	mov	r0, r7
    b080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b082:	4621      	mov	r1, r4
    b084:	4630      	mov	r0, r6
    b086:	f7ff fddf 	bl	ac48 <__swsetup_r>
    b08a:	bb08      	cbnz	r0, b0d0 <__swbuf_r+0xa4>
    b08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    b090:	6923      	ldr	r3, [r4, #16]
    b092:	b290      	uxth	r0, r2
    b094:	b2ed      	uxtb	r5, r5
    b096:	0481      	lsls	r1, r0, #18
    b098:	462f      	mov	r7, r5
    b09a:	d4dc      	bmi.n	b056 <__swbuf_r+0x2a>
    b09c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b0a0:	81a2      	strh	r2, [r4, #12]
    b0a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    b0a4:	6961      	ldr	r1, [r4, #20]
    b0a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    b0aa:	6662      	str	r2, [r4, #100]	; 0x64
    b0ac:	6822      	ldr	r2, [r4, #0]
    b0ae:	1ad3      	subs	r3, r2, r3
    b0b0:	4299      	cmp	r1, r3
    b0b2:	dcd5      	bgt.n	b060 <__swbuf_r+0x34>
    b0b4:	4621      	mov	r1, r4
    b0b6:	4630      	mov	r0, r6
    b0b8:	f7fd f9a2 	bl	8400 <_fflush_r>
    b0bc:	b940      	cbnz	r0, b0d0 <__swbuf_r+0xa4>
    b0be:	6822      	ldr	r2, [r4, #0]
    b0c0:	2301      	movs	r3, #1
    b0c2:	e7ce      	b.n	b062 <__swbuf_r+0x36>
    b0c4:	4621      	mov	r1, r4
    b0c6:	4630      	mov	r0, r6
    b0c8:	f7fd f99a 	bl	8400 <_fflush_r>
    b0cc:	2800      	cmp	r0, #0
    b0ce:	d0d6      	beq.n	b07e <__swbuf_r+0x52>
    b0d0:	f04f 37ff 	mov.w	r7, #4294967295
    b0d4:	e7d3      	b.n	b07e <__swbuf_r+0x52>
    b0d6:	f7fa fa51 	bl	557c <__sinit>
    b0da:	e7af      	b.n	b03c <__swbuf_r+0x10>

0000b0dc <_fstat_r>:
    b0dc:	b570      	push	{r4, r5, r6, lr}
    b0de:	460c      	mov	r4, r1
    b0e0:	4d08      	ldr	r5, [pc, #32]	; (b104 <_fstat_r+0x28>)
    b0e2:	4603      	mov	r3, r0
    b0e4:	2600      	movs	r6, #0
    b0e6:	4620      	mov	r0, r4
    b0e8:	4611      	mov	r1, r2
    b0ea:	461c      	mov	r4, r3
    b0ec:	602e      	str	r6, [r5, #0]
    b0ee:	f7f8 f917 	bl	3320 <_fstat>
    b0f2:	1c43      	adds	r3, r0, #1
    b0f4:	d000      	beq.n	b0f8 <_fstat_r+0x1c>
    b0f6:	bd70      	pop	{r4, r5, r6, pc}
    b0f8:	682b      	ldr	r3, [r5, #0]
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d0fb      	beq.n	b0f6 <_fstat_r+0x1a>
    b0fe:	6023      	str	r3, [r4, #0]
    b100:	bd70      	pop	{r4, r5, r6, pc}
    b102:	bf00      	nop
    b104:	1fff63dc 	.word	0x1fff63dc

0000b108 <_isatty_r>:
    b108:	b538      	push	{r3, r4, r5, lr}
    b10a:	4d07      	ldr	r5, [pc, #28]	; (b128 <_isatty_r+0x20>)
    b10c:	2200      	movs	r2, #0
    b10e:	4604      	mov	r4, r0
    b110:	4608      	mov	r0, r1
    b112:	602a      	str	r2, [r5, #0]
    b114:	f7f8 f90a 	bl	332c <_isatty>
    b118:	1c43      	adds	r3, r0, #1
    b11a:	d000      	beq.n	b11e <_isatty_r+0x16>
    b11c:	bd38      	pop	{r3, r4, r5, pc}
    b11e:	682b      	ldr	r3, [r5, #0]
    b120:	2b00      	cmp	r3, #0
    b122:	d0fb      	beq.n	b11c <_isatty_r+0x14>
    b124:	6023      	str	r3, [r4, #0]
    b126:	bd38      	pop	{r3, r4, r5, pc}
    b128:	1fff63dc 	.word	0x1fff63dc

0000b12c <__aeabi_dmul>:
    b12c:	b570      	push	{r4, r5, r6, lr}
    b12e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b132:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b136:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b13a:	bf1d      	ittte	ne
    b13c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b140:	ea94 0f0c 	teqne	r4, ip
    b144:	ea95 0f0c 	teqne	r5, ip
    b148:	f000 f8de 	bleq	b308 <__aeabi_dmul+0x1dc>
    b14c:	442c      	add	r4, r5
    b14e:	ea81 0603 	eor.w	r6, r1, r3
    b152:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b156:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b15a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b15e:	bf18      	it	ne
    b160:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b16c:	d038      	beq.n	b1e0 <__aeabi_dmul+0xb4>
    b16e:	fba0 ce02 	umull	ip, lr, r0, r2
    b172:	f04f 0500 	mov.w	r5, #0
    b176:	fbe1 e502 	umlal	lr, r5, r1, r2
    b17a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b17e:	fbe0 e503 	umlal	lr, r5, r0, r3
    b182:	f04f 0600 	mov.w	r6, #0
    b186:	fbe1 5603 	umlal	r5, r6, r1, r3
    b18a:	f09c 0f00 	teq	ip, #0
    b18e:	bf18      	it	ne
    b190:	f04e 0e01 	orrne.w	lr, lr, #1
    b194:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b198:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b19c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b1a0:	d204      	bcs.n	b1ac <__aeabi_dmul+0x80>
    b1a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b1a6:	416d      	adcs	r5, r5
    b1a8:	eb46 0606 	adc.w	r6, r6, r6
    b1ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b1b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b1b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b1b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b1bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b1c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b1c4:	bf88      	it	hi
    b1c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b1ca:	d81e      	bhi.n	b20a <__aeabi_dmul+0xde>
    b1cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b1d0:	bf08      	it	eq
    b1d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b1d6:	f150 0000 	adcs.w	r0, r0, #0
    b1da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b1de:	bd70      	pop	{r4, r5, r6, pc}
    b1e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b1e4:	ea46 0101 	orr.w	r1, r6, r1
    b1e8:	ea40 0002 	orr.w	r0, r0, r2
    b1ec:	ea81 0103 	eor.w	r1, r1, r3
    b1f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b1f4:	bfc2      	ittt	gt
    b1f6:	ebd4 050c 	rsbsgt	r5, r4, ip
    b1fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b1fe:	bd70      	popgt	{r4, r5, r6, pc}
    b200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b204:	f04f 0e00 	mov.w	lr, #0
    b208:	3c01      	subs	r4, #1
    b20a:	f300 80ab 	bgt.w	b364 <__aeabi_dmul+0x238>
    b20e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b212:	bfde      	ittt	le
    b214:	2000      	movle	r0, #0
    b216:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b21a:	bd70      	pople	{r4, r5, r6, pc}
    b21c:	f1c4 0400 	rsb	r4, r4, #0
    b220:	3c20      	subs	r4, #32
    b222:	da35      	bge.n	b290 <__aeabi_dmul+0x164>
    b224:	340c      	adds	r4, #12
    b226:	dc1b      	bgt.n	b260 <__aeabi_dmul+0x134>
    b228:	f104 0414 	add.w	r4, r4, #20
    b22c:	f1c4 0520 	rsb	r5, r4, #32
    b230:	fa00 f305 	lsl.w	r3, r0, r5
    b234:	fa20 f004 	lsr.w	r0, r0, r4
    b238:	fa01 f205 	lsl.w	r2, r1, r5
    b23c:	ea40 0002 	orr.w	r0, r0, r2
    b240:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b248:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b24c:	fa21 f604 	lsr.w	r6, r1, r4
    b250:	eb42 0106 	adc.w	r1, r2, r6
    b254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b258:	bf08      	it	eq
    b25a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b25e:	bd70      	pop	{r4, r5, r6, pc}
    b260:	f1c4 040c 	rsb	r4, r4, #12
    b264:	f1c4 0520 	rsb	r5, r4, #32
    b268:	fa00 f304 	lsl.w	r3, r0, r4
    b26c:	fa20 f005 	lsr.w	r0, r0, r5
    b270:	fa01 f204 	lsl.w	r2, r1, r4
    b274:	ea40 0002 	orr.w	r0, r0, r2
    b278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b27c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b280:	f141 0100 	adc.w	r1, r1, #0
    b284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b288:	bf08      	it	eq
    b28a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b28e:	bd70      	pop	{r4, r5, r6, pc}
    b290:	f1c4 0520 	rsb	r5, r4, #32
    b294:	fa00 f205 	lsl.w	r2, r0, r5
    b298:	ea4e 0e02 	orr.w	lr, lr, r2
    b29c:	fa20 f304 	lsr.w	r3, r0, r4
    b2a0:	fa01 f205 	lsl.w	r2, r1, r5
    b2a4:	ea43 0302 	orr.w	r3, r3, r2
    b2a8:	fa21 f004 	lsr.w	r0, r1, r4
    b2ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b2b0:	fa21 f204 	lsr.w	r2, r1, r4
    b2b4:	ea20 0002 	bic.w	r0, r0, r2
    b2b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b2bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b2c0:	bf08      	it	eq
    b2c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b2c6:	bd70      	pop	{r4, r5, r6, pc}
    b2c8:	f094 0f00 	teq	r4, #0
    b2cc:	d10f      	bne.n	b2ee <__aeabi_dmul+0x1c2>
    b2ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b2d2:	0040      	lsls	r0, r0, #1
    b2d4:	eb41 0101 	adc.w	r1, r1, r1
    b2d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b2dc:	bf08      	it	eq
    b2de:	3c01      	subeq	r4, #1
    b2e0:	d0f7      	beq.n	b2d2 <__aeabi_dmul+0x1a6>
    b2e2:	ea41 0106 	orr.w	r1, r1, r6
    b2e6:	f095 0f00 	teq	r5, #0
    b2ea:	bf18      	it	ne
    b2ec:	4770      	bxne	lr
    b2ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b2f2:	0052      	lsls	r2, r2, #1
    b2f4:	eb43 0303 	adc.w	r3, r3, r3
    b2f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b2fc:	bf08      	it	eq
    b2fe:	3d01      	subeq	r5, #1
    b300:	d0f7      	beq.n	b2f2 <__aeabi_dmul+0x1c6>
    b302:	ea43 0306 	orr.w	r3, r3, r6
    b306:	4770      	bx	lr
    b308:	ea94 0f0c 	teq	r4, ip
    b30c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b310:	bf18      	it	ne
    b312:	ea95 0f0c 	teqne	r5, ip
    b316:	d00c      	beq.n	b332 <__aeabi_dmul+0x206>
    b318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b31c:	bf18      	it	ne
    b31e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b322:	d1d1      	bne.n	b2c8 <__aeabi_dmul+0x19c>
    b324:	ea81 0103 	eor.w	r1, r1, r3
    b328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b32c:	f04f 0000 	mov.w	r0, #0
    b330:	bd70      	pop	{r4, r5, r6, pc}
    b332:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b336:	bf06      	itte	eq
    b338:	4610      	moveq	r0, r2
    b33a:	4619      	moveq	r1, r3
    b33c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b340:	d019      	beq.n	b376 <__aeabi_dmul+0x24a>
    b342:	ea94 0f0c 	teq	r4, ip
    b346:	d102      	bne.n	b34e <__aeabi_dmul+0x222>
    b348:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b34c:	d113      	bne.n	b376 <__aeabi_dmul+0x24a>
    b34e:	ea95 0f0c 	teq	r5, ip
    b352:	d105      	bne.n	b360 <__aeabi_dmul+0x234>
    b354:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b358:	bf1c      	itt	ne
    b35a:	4610      	movne	r0, r2
    b35c:	4619      	movne	r1, r3
    b35e:	d10a      	bne.n	b376 <__aeabi_dmul+0x24a>
    b360:	ea81 0103 	eor.w	r1, r1, r3
    b364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b368:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b36c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b370:	f04f 0000 	mov.w	r0, #0
    b374:	bd70      	pop	{r4, r5, r6, pc}
    b376:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b37a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b37e:	bd70      	pop	{r4, r5, r6, pc}

0000b380 <__aeabi_ddiv>:
    b380:	b570      	push	{r4, r5, r6, lr}
    b382:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b386:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b38a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b38e:	bf1d      	ittte	ne
    b390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b394:	ea94 0f0c 	teqne	r4, ip
    b398:	ea95 0f0c 	teqne	r5, ip
    b39c:	f000 f8a7 	bleq	b4ee <__aeabi_ddiv+0x16e>
    b3a0:	eba4 0405 	sub.w	r4, r4, r5
    b3a4:	ea81 0e03 	eor.w	lr, r1, r3
    b3a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b3ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b3b0:	f000 8088 	beq.w	b4c4 <__aeabi_ddiv+0x144>
    b3b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b3b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b3bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b3c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b3c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b3c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b3cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b3d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b3d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b3d8:	429d      	cmp	r5, r3
    b3da:	bf08      	it	eq
    b3dc:	4296      	cmpeq	r6, r2
    b3de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b3e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b3e6:	d202      	bcs.n	b3ee <__aeabi_ddiv+0x6e>
    b3e8:	085b      	lsrs	r3, r3, #1
    b3ea:	ea4f 0232 	mov.w	r2, r2, rrx
    b3ee:	1ab6      	subs	r6, r6, r2
    b3f0:	eb65 0503 	sbc.w	r5, r5, r3
    b3f4:	085b      	lsrs	r3, r3, #1
    b3f6:	ea4f 0232 	mov.w	r2, r2, rrx
    b3fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b3fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b402:	ebb6 0e02 	subs.w	lr, r6, r2
    b406:	eb75 0e03 	sbcs.w	lr, r5, r3
    b40a:	bf22      	ittt	cs
    b40c:	1ab6      	subcs	r6, r6, r2
    b40e:	4675      	movcs	r5, lr
    b410:	ea40 000c 	orrcs.w	r0, r0, ip
    b414:	085b      	lsrs	r3, r3, #1
    b416:	ea4f 0232 	mov.w	r2, r2, rrx
    b41a:	ebb6 0e02 	subs.w	lr, r6, r2
    b41e:	eb75 0e03 	sbcs.w	lr, r5, r3
    b422:	bf22      	ittt	cs
    b424:	1ab6      	subcs	r6, r6, r2
    b426:	4675      	movcs	r5, lr
    b428:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b42c:	085b      	lsrs	r3, r3, #1
    b42e:	ea4f 0232 	mov.w	r2, r2, rrx
    b432:	ebb6 0e02 	subs.w	lr, r6, r2
    b436:	eb75 0e03 	sbcs.w	lr, r5, r3
    b43a:	bf22      	ittt	cs
    b43c:	1ab6      	subcs	r6, r6, r2
    b43e:	4675      	movcs	r5, lr
    b440:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b444:	085b      	lsrs	r3, r3, #1
    b446:	ea4f 0232 	mov.w	r2, r2, rrx
    b44a:	ebb6 0e02 	subs.w	lr, r6, r2
    b44e:	eb75 0e03 	sbcs.w	lr, r5, r3
    b452:	bf22      	ittt	cs
    b454:	1ab6      	subcs	r6, r6, r2
    b456:	4675      	movcs	r5, lr
    b458:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b45c:	ea55 0e06 	orrs.w	lr, r5, r6
    b460:	d018      	beq.n	b494 <__aeabi_ddiv+0x114>
    b462:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b466:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b46a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b46e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b472:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b476:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b47a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b47e:	d1c0      	bne.n	b402 <__aeabi_ddiv+0x82>
    b480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b484:	d10b      	bne.n	b49e <__aeabi_ddiv+0x11e>
    b486:	ea41 0100 	orr.w	r1, r1, r0
    b48a:	f04f 0000 	mov.w	r0, #0
    b48e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b492:	e7b6      	b.n	b402 <__aeabi_ddiv+0x82>
    b494:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b498:	bf04      	itt	eq
    b49a:	4301      	orreq	r1, r0
    b49c:	2000      	moveq	r0, #0
    b49e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b4a2:	bf88      	it	hi
    b4a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b4a8:	f63f aeaf 	bhi.w	b20a <__aeabi_dmul+0xde>
    b4ac:	ebb5 0c03 	subs.w	ip, r5, r3
    b4b0:	bf04      	itt	eq
    b4b2:	ebb6 0c02 	subseq.w	ip, r6, r2
    b4b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b4ba:	f150 0000 	adcs.w	r0, r0, #0
    b4be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b4c2:	bd70      	pop	{r4, r5, r6, pc}
    b4c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b4c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b4cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b4d0:	bfc2      	ittt	gt
    b4d2:	ebd4 050c 	rsbsgt	r5, r4, ip
    b4d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b4da:	bd70      	popgt	{r4, r5, r6, pc}
    b4dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b4e0:	f04f 0e00 	mov.w	lr, #0
    b4e4:	3c01      	subs	r4, #1
    b4e6:	e690      	b.n	b20a <__aeabi_dmul+0xde>
    b4e8:	ea45 0e06 	orr.w	lr, r5, r6
    b4ec:	e68d      	b.n	b20a <__aeabi_dmul+0xde>
    b4ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b4f2:	ea94 0f0c 	teq	r4, ip
    b4f6:	bf08      	it	eq
    b4f8:	ea95 0f0c 	teqeq	r5, ip
    b4fc:	f43f af3b 	beq.w	b376 <__aeabi_dmul+0x24a>
    b500:	ea94 0f0c 	teq	r4, ip
    b504:	d10a      	bne.n	b51c <__aeabi_ddiv+0x19c>
    b506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b50a:	f47f af34 	bne.w	b376 <__aeabi_dmul+0x24a>
    b50e:	ea95 0f0c 	teq	r5, ip
    b512:	f47f af25 	bne.w	b360 <__aeabi_dmul+0x234>
    b516:	4610      	mov	r0, r2
    b518:	4619      	mov	r1, r3
    b51a:	e72c      	b.n	b376 <__aeabi_dmul+0x24a>
    b51c:	ea95 0f0c 	teq	r5, ip
    b520:	d106      	bne.n	b530 <__aeabi_ddiv+0x1b0>
    b522:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b526:	f43f aefd 	beq.w	b324 <__aeabi_dmul+0x1f8>
    b52a:	4610      	mov	r0, r2
    b52c:	4619      	mov	r1, r3
    b52e:	e722      	b.n	b376 <__aeabi_dmul+0x24a>
    b530:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b534:	bf18      	it	ne
    b536:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b53a:	f47f aec5 	bne.w	b2c8 <__aeabi_dmul+0x19c>
    b53e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b542:	f47f af0d 	bne.w	b360 <__aeabi_dmul+0x234>
    b546:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b54a:	f47f aeeb 	bne.w	b324 <__aeabi_dmul+0x1f8>
    b54e:	e712      	b.n	b376 <__aeabi_dmul+0x24a>

0000b550 <__aeabi_d2iz>:
    b550:	ea4f 0241 	mov.w	r2, r1, lsl #1
    b554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b558:	d215      	bcs.n	b586 <__aeabi_d2iz+0x36>
    b55a:	d511      	bpl.n	b580 <__aeabi_d2iz+0x30>
    b55c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b564:	d912      	bls.n	b58c <__aeabi_d2iz+0x3c>
    b566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b56a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b56e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b572:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b576:	fa23 f002 	lsr.w	r0, r3, r2
    b57a:	bf18      	it	ne
    b57c:	4240      	negne	r0, r0
    b57e:	4770      	bx	lr
    b580:	f04f 0000 	mov.w	r0, #0
    b584:	4770      	bx	lr
    b586:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b58a:	d105      	bne.n	b598 <__aeabi_d2iz+0x48>
    b58c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    b590:	bf08      	it	eq
    b592:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    b596:	4770      	bx	lr
    b598:	f04f 0000 	mov.w	r0, #0
    b59c:	4770      	bx	lr
    b59e:	bf00      	nop
    b5a0:	314e4143 	.word	0x314e4143
    b5a4:	20736920 	.word	0x20736920
    b5a8:	20746f6e 	.word	0x20746f6e
    b5ac:	65636572 	.word	0x65636572
    b5b0:	6e697669 	.word	0x6e697669
    b5b4:	656d2067 	.word	0x656d2067
    b5b8:	67617373 	.word	0x67617373
    b5bc:	202c7365 	.word	0x202c7365
    b5c0:	74736572 	.word	0x74736572
    b5c4:	69747261 	.word	0x69747261
    b5c8:	2e2e676e 	.word	0x2e2e676e
    b5cc:	ffff002e 	.word	0xffff002e
    b5d0:	74726f50 	.word	0x74726f50
    b5d4:	2520203a 	.word	0x2520203a
    b5d8:	43202c64 	.word	0x43202c64
    b5dc:	65746e65 	.word	0x65746e65
    b5e0:	25203a72 	.word	0x25203a72
    b5e4:	53202c64 	.word	0x53202c64
    b5e8:	62726174 	.word	0x62726174
    b5ec:	6472616f 	.word	0x6472616f
    b5f0:	6425203a 	.word	0x6425203a
    b5f4:	202d2020 	.word	0x202d2020
    b5f8:	314e4143 	.word	0x314e4143
    b5fc:	2520203a 	.word	0x2520203a
    b600:	20583830 	.word	0x20583830
    b604:	00000000 	.word	0x00000000
    b608:	58323025 	.word	0x58323025
    b60c:	ffff0020 	.word	0xffff0020

0000b610 <vtable for FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>>:
	...
    b618:	00002a5d 000004ad 00001419 00000739     ]*..........9...
    b628:	0000179d 0000073d 00000741              ....=...A...

0000b634 <vtable for FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>>:
	...
    b63c:	000021f1 000005ed 00001179 0000072d     .!......y...-...
    b64c:	00001655 00000731 00000735 01010000     U...1...5.......
    b65c:	01010100 01010201 02010202 03020103     ................
    b66c:	02040202 02020502 06020305 03070203     ................
    b67c:	03040702 07030407 05070405 05060704     ................
    b68c:	07060607 07070606 00070707 00000000     ................
    b69c:	00000000 08000000 00000000 00000000     ................
    b6ac:	00000000                                ....

0000b6b0 <digital_pin_to_info_PGM>:
    b6b0:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    b6c0:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    b6d0:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    b6e0:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    b6f0:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    b700:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    b710:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    b720:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    b730:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    b740:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    b750:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    b760:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    b770:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
    b780:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
    b790:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
    b7a0:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
    b7b0:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
    b7c0:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
    b7d0:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
    b7e0:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
    b7f0:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
    b800:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
    b810:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
    b820:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
    b830:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
    b840:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
    b850:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
    b860:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
    b870:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
    b880:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
    b890:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
    b8a0:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@

0000b8b0 <vtable for usb_serial_class>:
	...
    b8b8:	0000403d 00004035 00004031 0000402d     =@..5@..1@..-@..
    b8c8:	00004029 00004025 00004021 0000401d     )@..%@..!@...@..

0000b8d8 <_serialEvent_default>:
    b8d8:	ffffff00                                ....

0000b8dc <usb_descriptor_list>:
    b8dc:	00000100 1fff07b4 00000012 00000200     ................
    b8ec:	1fff0770 00000043 00000300 1fff07c8     p...C...........
    b8fc:	00000000 04090301 1fff07cc 00000000     ................
    b90c:	04090302 1fff07e4 00000000 04090303     ................
    b91c:	1fff07fc 00000000 00000000 00000000     ................
    b92c:	00000000                                ....

0000b930 <usb_endpoint_config_table>:
    b930:	15191500                                ....

0000b934 <_ctype_>:
    b934:	20202000 20202020 28282020 20282828     .         ((((( 
    b944:	20202020 20202020 20202020 20202020                     
    b954:	10108820 10101010 10101010 10101010      ...............
    b964:	04040410 04040404 10040404 10101010     ................
    b974:	41411010 41414141 01010101 01010101     ..AAAAAA........
    b984:	01010101 01010101 01010101 10101010     ................
    b994:	42421010 42424242 02020202 02020202     ..BBBBBB........
    b9a4:	02020202 02020202 02020202 10101010     ................
    b9b4:	00000020 00000000 00000000 00000000      ...............
	...
    ba34:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
    ba44:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
    ba54:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
    ba64:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
    ba74:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
    ba84:	65636375 64656465 00000000 7461642f     ucceeded..../dat
    ba94:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
    baa4:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
    bab4:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
    bac4:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
    bad4:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
    bae4:	2e636572 ffff0063 ffffffff              rec.c.......

0000baf0 <__mprec_bigtens>:
    baf0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    bb00:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    bb10:	7f73bf3c 75154fdd                       <.s..O.u

0000bb18 <__mprec_tens>:
    bb18:	00000000 3ff00000 00000000 40240000     .......?......$@
    bb28:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    bb38:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    bb48:	00000000 412e8480 00000000 416312d0     .......A......cA
    bb58:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    bb68:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    bb78:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    bb88:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    bb98:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    bba8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    bbb8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    bbc8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    bbd8:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
    bbe8:	0000007d 00464e49 00666e69 004e414e     }...INF.inf.NAN.
    bbf8:	006e616e 33323130 37363534 62613938     nan.0123456789ab
    bc08:	66656463 00000000 33323130 37363534     cdef....01234567
    bc18:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
    bc28:	0000296c ffff0030 20202020 20202020     l)..0...        
    bc38:	20202020 20202020 30303030 30303030             00000000
    bc48:	30303030 30303030 7566202c 6974636e     00000000, functi
    bc58:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
    bc68:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
    bc78:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
    bc88:	25732564 ff000a73 69666e49 7974696e     d%s%s...Infinity
    bc98:	00000000 004e614e 7461642f 656a2f61     ....NaN./data/je
    bca8:	6e696b6e 6f772f73 70736b72 2f656361     nkins/workspace/
    bcb8:	2d554e47 6c6f6f74 69616863 72612f6e     GNU-toolchain/ar
    bcc8:	31312d6d 6372732f 77656e2f 2d62696c     m-11/src/newlib-
    bcd8:	77677963 6e2f6e69 696c7765 696c2f62     cygwin/newlib/li
    bce8:	732f6362 696c6474 74642f62 632e616f     bc/stdlib/dtoa.c
    bcf8:	ffffff00 20202020 20202020 20202020     ....            
    bd08:	20202020 30303030 30303030 30303030         000000000000
    bd18:	30303030                                0000

0000bd1c <_init>:
    bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd1e:	bf00      	nop
    bd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bd22:	bc08      	pop	{r3}
    bd24:	469e      	mov	lr, r3
    bd26:	4770      	bx	lr

0000bd28 <__init_array_start>:
    bd28:	00005b9d 	.word	0x00005b9d

0000bd2c <__frame_dummy_init_array_entry>:
    bd2c:	00000435 00002f8d                       5..../..

Disassembly of section .fini:

0000bd34 <_fini>:
    bd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd36:	bf00      	nop
