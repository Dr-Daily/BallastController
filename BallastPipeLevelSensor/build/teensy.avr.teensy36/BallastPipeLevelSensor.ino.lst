
C:\Users\jdaily\AppData\Local\Temp\arduino\sketches\1A5E162EF370CCB3B603332BD36A0DAF/BallastPipeLevelSensor.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
       0:	00 00 03 20 d1 01 00 00 dd 40 00 00 99 40 00 00     ... .....@...@..
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
      10:	99 40 00 00 99 40 00 00 99 40 00 00 99 40 00 00     .@...@...@...@..
      20:	99 40 00 00 99 40 00 00 99 40 00 00 dd 40 00 00     .@...@...@...@..
    	if (isinf(number)) return print("inf");
      30:	dd 40 00 00 99 40 00 00 6d 52 00 00 71 52 00 00     .@...@..mR..qR..
      40:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
      50:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
      60:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
	
	// Handle negative numbers
	if (number < 0.0) {
      70:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
	uint8_t sign=0;
      80:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
      90:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
		rounding *= 0.1;
      a0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
	}
	number += rounding;
      b0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
      c0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
	double remainder = number - (double)int_part;
      d0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
      e0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
      f0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
     100:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
			remainder *= 10.0;
     110:	dd 40 00 00 75 45 00 00 dd 40 00 00 dd 40 00 00     .@..uE...@...@..
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
     120:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
			remainder -= n; 
     130:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
			buf[count++] = '0' + n;
     140:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
		}
		count += write(buf, count);
	}
	return count;
}
     150:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
     160:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
		number = -number;
     170:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
	number += rounding;
     180:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
	unsigned long int_part = (unsigned long)number;
     190:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
}
     1a0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
     1b0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..
     1c0:	dd 40 00 00 dd 40 00 00 dd 40 00 00 dd 40 00 00     .@...@...@...@..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5f      	ldr	r3, [pc, #380]	; (350 <ResetHandler+0x180>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
{
     1d6:	b510      	push	{r4, lr}
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	81da      	strh	r2, [r3, #14]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	81da      	strh	r2, [r3, #14]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f003 ff7e 	bl	40e4 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b5a      	ldr	r3, [pc, #360]	; (354 <ResetHandler+0x184>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	631a      	str	r2, [r3, #48]	; 0x30
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a59      	ldr	r2, [pc, #356]	; (358 <ResetHandler+0x188>)
     1f2:	639a      	str	r2, [r3, #56]	; 0x38
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a59      	ldr	r2, [pc, #356]	; (35c <ResetHandler+0x18c>)
     1f6:	63da      	str	r2, [r3, #60]	; 0x3c
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     1fc:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     200:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     204:	f503 23e8 	add.w	r3, r3, #475136	; 0x74000
     208:	4a55      	ldr	r2, [pc, #340]	; (360 <ResetHandler+0x190>)
     20a:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     20c:	4b55      	ldr	r3, [pc, #340]	; (364 <ResetHandler+0x194>)
     20e:	789a      	ldrb	r2, [r3, #2]
     210:	0711      	lsls	r1, r2, #28
     212:	d503      	bpl.n	21c <ResetHandler+0x4c>
     214:	789a      	ldrb	r2, [r3, #2]
     216:	f042 0208 	orr.w	r2, r2, #8
     21a:	709a      	strb	r2, [r3, #2]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21c:	4b52      	ldr	r3, [pc, #328]	; (368 <ResetHandler+0x198>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     21e:	4853      	ldr	r0, [pc, #332]	; (36c <ResetHandler+0x19c>)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     220:	22aa      	movs	r2, #170	; 0xaa
     222:	701a      	strb	r2, [r3, #0]
	while (dest < &_edata) *dest++ = *src++;
     224:	4b52      	ldr	r3, [pc, #328]	; (370 <ResetHandler+0x1a0>)
     226:	1cda      	adds	r2, r3, #3
     228:	1a12      	subs	r2, r2, r0
     22a:	1ec1      	subs	r1, r0, #3
     22c:	f022 0203 	bic.w	r2, r2, #3
     230:	4299      	cmp	r1, r3
     232:	bf88      	it	hi
     234:	2200      	movhi	r2, #0
     236:	494f      	ldr	r1, [pc, #316]	; (374 <ResetHandler+0x1a4>)
     238:	f003 fe5a 	bl	3ef0 <memcpy>
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     23c:	4b4e      	ldr	r3, [pc, #312]	; (378 <ResetHandler+0x1a8>)
     23e:	484f      	ldr	r0, [pc, #316]	; (37c <ResetHandler+0x1ac>)
     240:	1cda      	adds	r2, r3, #3
     242:	1a12      	subs	r2, r2, r0
     244:	1ec1      	subs	r1, r0, #3
     246:	f022 0203 	bic.w	r2, r2, #3
     24a:	4299      	cmp	r1, r3
     24c:	bf88      	it	hi
     24e:	2200      	movhi	r2, #0
     250:	2100      	movs	r1, #0
     252:	f006 f9c5 	bl	65e0 <memset>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     256:	494a      	ldr	r1, [pc, #296]	; (380 <ResetHandler+0x1b0>)
     258:	484a      	ldr	r0, [pc, #296]	; (384 <ResetHandler+0x1b4>)
     25a:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
     25e:	f003 fe47 	bl	3ef0 <memcpy>
     262:	4b49      	ldr	r3, [pc, #292]	; (388 <ResetHandler+0x1b8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     264:	4a49      	ldr	r2, [pc, #292]	; (38c <ResetHandler+0x1bc>)
     266:	2180      	movs	r1, #128	; 0x80
     268:	f803 1b01 	strb.w	r1, [r3], #1
     26c:	4293      	cmp	r3, r2
     26e:	d1fb      	bne.n	268 <ResetHandler+0x98>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     270:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     274:	4a43      	ldr	r2, [pc, #268]	; (384 <ResetHandler+0x1b4>)
     276:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27a:	4b45      	ldr	r3, [pc, #276]	; (390 <ResetHandler+0x1c0>)
     27c:	228a      	movs	r2, #138	; 0x8a
     27e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     280:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     284:	2224      	movs	r2, #36	; 0x24
     286:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     288:	22a0      	movs	r2, #160	; 0xa0
     28a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28c:	799a      	ldrb	r2, [r3, #6]
     28e:	0792      	lsls	r2, r2, #30
     290:	d5fc      	bpl.n	28c <ResetHandler+0xbc>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     292:	799a      	ldrb	r2, [r3, #6]
     294:	06d4      	lsls	r4, r2, #27
     296:	d4fc      	bmi.n	292 <ResetHandler+0xc2>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     298:	4a3e      	ldr	r2, [pc, #248]	; (394 <ResetHandler+0x1c4>)
     29a:	7993      	ldrb	r3, [r2, #6]
     29c:	f003 030c 	and.w	r3, r3, #12
     2a0:	2b08      	cmp	r3, #8
     2a2:	d1fa      	bne.n	29a <ResetHandler+0xca>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a4:	4b30      	ldr	r3, [pc, #192]	; (368 <ResetHandler+0x198>)
     2a6:	2260      	movs	r2, #96	; 0x60
     2a8:	705a      	strb	r2, [r3, #1]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2aa:	78da      	ldrb	r2, [r3, #3]
     2ac:	2a80      	cmp	r2, #128	; 0x80
     2ae:	d1fc      	bne.n	2aa <ResetHandler+0xda>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b0:	4b38      	ldr	r3, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b2:	2201      	movs	r2, #1
     2b4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2b6:	225d      	movs	r2, #93	; 0x5d
     2b8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2ba:	799a      	ldrb	r2, [r3, #6]
     2bc:	0690      	lsls	r0, r2, #26
     2be:	d5fc      	bpl.n	2ba <ResetHandler+0xea>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c0:	799a      	ldrb	r2, [r3, #6]
     2c2:	0651      	lsls	r1, r2, #25
     2c4:	d5fc      	bpl.n	2c0 <ResetHandler+0xf0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2c6:	4a23      	ldr	r2, [pc, #140]	; (354 <ResetHandler+0x184>)
     2c8:	4933      	ldr	r1, [pc, #204]	; (398 <ResetHandler+0x1c8>)
     2ca:	6451      	str	r1, [r2, #68]	; 0x44
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2cc:	2100      	movs	r1, #0
     2ce:	6491      	str	r1, [r2, #72]	; 0x48
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d0:	2120      	movs	r1, #32
     2d2:	7019      	strb	r1, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2d4:	492f      	ldr	r1, [pc, #188]	; (394 <ResetHandler+0x1c4>)
     2d6:	798b      	ldrb	r3, [r1, #6]
     2d8:	f003 030c 	and.w	r3, r3, #12
     2dc:	2b0c      	cmp	r3, #12
     2de:	d1fa      	bne.n	2d6 <ResetHandler+0x106>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e0:	4b2e      	ldr	r3, [pc, #184]	; (39c <ResetHandler+0x1cc>)
     2e2:	6053      	str	r3, [r2, #4]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2e4:	4a2e      	ldr	r2, [pc, #184]	; (3a0 <ResetHandler+0x1d0>)
     2e6:	6913      	ldr	r3, [r2, #16]
     2e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2ec:	d103      	bne.n	2f6 <ResetHandler+0x126>
		RTC_SR = 0;
     2ee:	6153      	str	r3, [r2, #20]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2f4:	6113      	str	r3, [r2, #16]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2fa:	4a2a      	ldr	r2, [pc, #168]	; (3a4 <ResetHandler+0x1d4>)
     2fc:	615a      	str	r2, [r3, #20]
	SYST_CVR = 0;
     2fe:	2200      	movs	r2, #0
     300:	619a      	str	r2, [r3, #24]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     302:	2207      	movs	r2, #7
     304:	611a      	str	r2, [r3, #16]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     306:	4a28      	ldr	r2, [pc, #160]	; (3a8 <ResetHandler+0x1d8>)
     308:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20

	//init_pins();
	__enable_irq();
     30c:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     30e:	f003 ff85 	bl	421c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     312:	4b23      	ldr	r3, [pc, #140]	; (3a0 <ResetHandler+0x1d0>)
     314:	695b      	ldr	r3, [r3, #20]
     316:	07da      	lsls	r2, r3, #31
     318:	d505      	bpl.n	326 <ResetHandler+0x156>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31a:	4824      	ldr	r0, [pc, #144]	; (3ac <ResetHandler+0x1dc>)
     31c:	f003 ff72 	bl	4204 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     320:	4b23      	ldr	r3, [pc, #140]	; (3b0 <ResetHandler+0x1e0>)
     322:	4a24      	ldr	r2, [pc, #144]	; (3b4 <ResetHandler+0x1e4>)
     324:	61da      	str	r2, [r3, #28]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     326:	4b24      	ldr	r3, [pc, #144]	; (3b8 <ResetHandler+0x1e8>)
     328:	781b      	ldrb	r3, [r3, #0]
     32a:	065b      	lsls	r3, r3, #25
     32c:	d509      	bpl.n	342 <ResetHandler+0x172>
     32e:	4c20      	ldr	r4, [pc, #128]	; (3b0 <ResetHandler+0x1e0>)
     330:	4b20      	ldr	r3, [pc, #128]	; (3b4 <ResetHandler+0x1e4>)
     332:	69e2      	ldr	r2, [r4, #28]
     334:	429a      	cmp	r2, r3
     336:	d104      	bne.n	342 <ResetHandler+0x172>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     338:	481c      	ldr	r0, [pc, #112]	; (3ac <ResetHandler+0x1dc>)
     33a:	f003 ff63 	bl	4204 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     33e:	2300      	movs	r3, #0
     340:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     342:	f003 fed5 	bl	40f0 <startup_late_hook>
	__libc_init_array();
     346:	f006 fa41 	bl	67cc <__libc_init_array>

	main();
     34a:	f003 fdc9 	bl	3ee0 <main>
	
	while (1) ;
     34e:	e7fe      	b.n	34e <ResetHandler+0x17e>
     350:	40052000 	.word	0x40052000
     354:	40048000 	.word	0x40048000
     358:	00043f82 	.word	0x00043f82
     35c:	2b000001 	.word	0x2b000001
     360:	85000003 	.word	0x85000003
     364:	4007d000 	.word	0x4007d000
     368:	4007e000 	.word	0x4007e000
     36c:	1fff0730 	.word	0x1fff0730
     370:	1fff0ec8 	.word	0x1fff0ec8
     374:	0000cc40 	.word	0x0000cc40
     378:	1fff6578 	.word	0x1fff6578
     37c:	1fff0ec8 	.word	0x1fff0ec8
     380:	00000000 	.word	0x00000000
     384:	1fff0200 	.word	0x1fff0200
     388:	e000e400 	.word	0xe000e400
     38c:	e000e464 	.word	0xe000e464
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	02060000 	.word	0x02060000
     39c:	000710c0 	.word	0x000710c0
     3a0:	4003d000 	.word	0x4003d000
     3a4:	0002bf1f 	.word	0x0002bf1f
     3a8:	20200000 	.word	0x20200000
     3ac:	665e173b 	.word	0x665e173b
     3b0:	4003e000 	.word	0x4003e000
     3b4:	5a94c3a5 	.word	0x5a94c3a5
     3b8:	4007f000 	.word	0x4007f000
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff0ec8 	.word	0x1fff0ec8
     42c:	1fff0ec8 	.word	0x1fff0ec8
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff0ec8 	.word	0x1fff0ec8
     454:	0000cc40 	.word	0x0000cc40

00000458 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
#define SIZE_LISTENERS 4

class CANListener {
  public:
    CANListener () { callbacksActive = 0; }
    virtual bool frameHandler (CAN_message_t &frame, int mailbox, uint8_t controller) { return false; }
     458:	2000      	movs	r0, #0
     45a:	4770      	bx	lr

0000045c <flexcan_isr_can0()>:
  if ( _CAN0 ) _CAN0->flexcan_interrupt();
}
#endif
#if defined(__MK66FX1M0__)
static void flexcan_isr_can0() {
  if ( _CAN0 ) _CAN0->flexcan_interrupt();
     45c:	4b03      	ldr	r3, [pc, #12]	; (46c <flexcan_isr_can0()+0x10>)
     45e:	6818      	ldr	r0, [r3, #0]
     460:	b110      	cbz	r0, 468 <flexcan_isr_can0()+0xc>
     462:	6803      	ldr	r3, [r0, #0]
     464:	681b      	ldr	r3, [r3, #0]
     466:	4718      	bx	r3
}
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	1fff6118 	.word	0x1fff6118

00000470 <flexcan_isr_can1()>:
static void flexcan_isr_can1() {
  if ( _CAN1 ) _CAN1->flexcan_interrupt();
     470:	4b03      	ldr	r3, [pc, #12]	; (480 <flexcan_isr_can1()+0x10>)
     472:	6818      	ldr	r0, [r3, #0]
     474:	b110      	cbz	r0, 47c <flexcan_isr_can1()+0xc>
     476:	6803      	ldr	r3, [r0, #0]
     478:	681b      	ldr	r3, [r3, #0]
     47a:	4718      	bx	r3
}
     47c:	4770      	bx	lr
     47e:	bf00      	nop
     480:	1fff611c 	.word	0x1fff611c

00000484 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
  currentBitrate = baud;
     484:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     48c:	4696      	mov	lr, r2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     48e:	4a4a      	ldr	r2, [pc, #296]	; (5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
  currentBitrate = baud;
     490:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     494:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     496:	6813      	ldr	r3, [r2, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     498:	4d48      	ldr	r5, [pc, #288]	; (5bc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
     49a:	fbb5 f0f1 	udiv	r0, r5, r1
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     49e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     4a2:	fbb5 f5f0 	udiv	r5, r5, r0
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     4a6:	b090      	sub	sp, #64	; 0x40
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     4a8:	1b4d      	subs	r5, r1, r5
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     4aa:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     4ae:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     4b0:	6813      	ldr	r3, [r2, #0]
     4b2:	01de      	lsls	r6, r3, #7
     4b4:	d5fc      	bpl.n	4b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x2c>
  while (result > 5) {
     4b6:	2805      	cmp	r0, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4b8:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     4bc:	d922      	bls.n	504 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x80>
      error = baud - (clockFreq / (result * (divisor + 1)));
     4be:	4e3f      	ldr	r6, [pc, #252]	; (5bc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4c0:	4663      	mov	r3, ip
    divisor++;
     4c2:	1c5a      	adds	r2, r3, #1
     4c4:	3302      	adds	r3, #2
    result = clockFreq / baud / (divisor + 1);
     4c6:	fbb0 f7f3 	udiv	r7, r0, r3
    if (result <= 25) {
     4ca:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     4cc:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     4d0:	d80f      	bhi.n	4f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
      error = baud - (clockFreq / (result * (divisor + 1)));
     4d2:	fbb6 f3f3 	udiv	r3, r6, r3
     4d6:	1acb      	subs	r3, r1, r3
     4d8:	2b00      	cmp	r3, #0
     4da:	bfb8      	it	lt
     4dc:	425b      	neglt	r3, r3
      if (error < bestError) {
     4de:	42ab      	cmp	r3, r5
     4e0:	da09      	bge.n	4f6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x72>
     4e2:	461d      	mov	r5, r3
        bestDivisor = divisor;
     4e4:	4694      	mov	ip, r2
      if ((error == bestError) && (result > 11) && (result < 19)) {
     4e6:	2f0b      	cmp	r7, #11
     4e8:	d906      	bls.n	4f8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x74>
     4ea:	2f12      	cmp	r7, #18
     4ec:	bf9c      	itt	ls
     4ee:	461d      	movls	r5, r3
     4f0:	4694      	movls	ip, r2
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     4f2:	4613      	mov	r3, r2
     4f4:	e7e5      	b.n	4c2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x3e>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     4f6:	d0f6      	beq.n	4e6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x62>
  while (result > 5) {
     4f8:	2f05      	cmp	r7, #5
     4fa:	d8fa      	bhi.n	4f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
  result = clockFreq / baud / (divisor + 1);
     4fc:	f10c 0301 	add.w	r3, ip, #1
     500:	fbb0 f0f3 	udiv	r0, r0, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     504:	3805      	subs	r0, #5
     506:	2814      	cmp	r0, #20
     508:	d848      	bhi.n	59c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
     50a:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     50e:	dc45      	bgt.n	59c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     510:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint8_t bitTimingTable[21][3] = {
     514:	4f2a      	ldr	r7, [pc, #168]	; (5c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x13c>)
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     516:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     51a:	f100 0340 	add.w	r3, r0, #64	; 0x40
     51e:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     522:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     524:	466e      	mov	r6, sp
     526:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     528:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     52a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     52c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     52e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     530:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     534:	c607      	stmia	r6!, {r0, r1, r2}
     536:	f826 3b02 	strh.w	r3, [r6], #2
     53a:	0c1b      	lsrs	r3, r3, #16
     53c:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     53e:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     542:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     546:	f815 1c40 	ldrb.w	r1, [r5, #-64]
     54a:	04db      	lsls	r3, r3, #19
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     54c:	0412      	lsls	r2, r2, #16
     54e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     552:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     556:	4313      	orrs	r3, r2
     558:	f001 0207 	and.w	r2, r1, #7
     55c:	4313      	orrs	r3, r2
     55e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     562:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     56a:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     56e:	f8d8 3004 	ldr.w	r3, [r8, #4]
     572:	f1be 0f02 	cmp.w	lr, #2
     576:	bf14      	ite	ne
     578:	f023 0308 	bicne.w	r3, r3, #8
     57c:	f043 0308 	orreq.w	r3, r3, #8
     580:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     584:	b93c      	cbnz	r4, 596 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     586:	4a0c      	ldr	r2, [pc, #48]	; (5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     588:	6813      	ldr	r3, [r2, #0]
     58a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     58e:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     590:	6813      	ldr	r3, [r2, #0]
     592:	01db      	lsls	r3, r3, #7
     594:	d4fc      	bmi.n	590 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x10c>
}
     596:	b010      	add	sp, #64	; 0x40
     598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     59c:	2c00      	cmp	r4, #0
     59e:	d1fa      	bne.n	596 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     5a0:	4a05      	ldr	r2, [pc, #20]	; (5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     5a2:	6813      	ldr	r3, [r2, #0]
     5a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     5a8:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5aa:	6813      	ldr	r3, [r2, #0]
     5ac:	01d9      	lsls	r1, r3, #7
     5ae:	d4fc      	bmi.n	5aa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x126>
}
     5b0:	b010      	add	sp, #64	; 0x40
     5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5b6:	bf00      	nop
     5b8:	40024000 	.word	0x40024000
     5bc:	00f42400 	.word	0x00f42400
     5c0:	0000c560 	.word	0x0000c560

000005c4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
  currentBitrate = baud;
     5c4:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5cc:	4696      	mov	lr, r2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5ce:	4a4a      	ldr	r2, [pc, #296]	; (6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
  currentBitrate = baud;
     5d0:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5d4:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5d6:	6813      	ldr	r3, [r2, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     5d8:	4d48      	ldr	r5, [pc, #288]	; (6fc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
     5da:	fbb5 f0f1 	udiv	r0, r5, r1
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5de:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     5e2:	fbb5 f5f0 	udiv	r5, r5, r0
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     5e6:	b090      	sub	sp, #64	; 0x40
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     5e8:	1b4d      	subs	r5, r1, r5
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5ea:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5ee:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     5f0:	6813      	ldr	r3, [r2, #0]
     5f2:	01de      	lsls	r6, r3, #7
     5f4:	d5fc      	bpl.n	5f0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x2c>
  while (result > 5) {
     5f6:	2805      	cmp	r0, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     5f8:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     5fc:	d922      	bls.n	644 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x80>
      error = baud - (clockFreq / (result * (divisor + 1)));
     5fe:	4e3f      	ldr	r6, [pc, #252]	; (6fc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     600:	4663      	mov	r3, ip
    divisor++;
     602:	1c5a      	adds	r2, r3, #1
     604:	3302      	adds	r3, #2
    result = clockFreq / baud / (divisor + 1);
     606:	fbb0 f7f3 	udiv	r7, r0, r3
    if (result <= 25) {
     60a:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     60c:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     610:	d80f      	bhi.n	632 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
      error = baud - (clockFreq / (result * (divisor + 1)));
     612:	fbb6 f3f3 	udiv	r3, r6, r3
     616:	1acb      	subs	r3, r1, r3
     618:	2b00      	cmp	r3, #0
     61a:	bfb8      	it	lt
     61c:	425b      	neglt	r3, r3
      if (error < bestError) {
     61e:	42ab      	cmp	r3, r5
     620:	da09      	bge.n	636 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x72>
     622:	461d      	mov	r5, r3
        bestDivisor = divisor;
     624:	4694      	mov	ip, r2
      if ((error == bestError) && (result > 11) && (result < 19)) {
     626:	2f0b      	cmp	r7, #11
     628:	d906      	bls.n	638 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x74>
     62a:	2f12      	cmp	r7, #18
     62c:	bf9c      	itt	ls
     62e:	461d      	movls	r5, r3
     630:	4694      	movls	ip, r2
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     632:	4613      	mov	r3, r2
     634:	e7e5      	b.n	602 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x3e>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     636:	d0f6      	beq.n	626 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x62>
  while (result > 5) {
     638:	2f05      	cmp	r7, #5
     63a:	d8fa      	bhi.n	632 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
  result = clockFreq / baud / (divisor + 1);
     63c:	f10c 0301 	add.w	r3, ip, #1
     640:	fbb0 f0f3 	udiv	r0, r0, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     644:	3805      	subs	r0, #5
     646:	2814      	cmp	r0, #20
     648:	d848      	bhi.n	6dc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
     64a:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     64e:	dc45      	bgt.n	6dc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint8_t bitTimingTable[21][3] = {
     654:	4f2a      	ldr	r7, [pc, #168]	; (700 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x13c>)
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     656:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     65a:	f100 0340 	add.w	r3, r0, #64	; 0x40
     65e:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     662:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     664:	466e      	mov	r6, sp
     666:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     668:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     66a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     66c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     66e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     670:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     674:	c607      	stmia	r6!, {r0, r1, r2}
     676:	f826 3b02 	strh.w	r3, [r6], #2
     67a:	0c1b      	lsrs	r3, r3, #16
     67c:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     67e:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     682:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     686:	f815 1c40 	ldrb.w	r1, [r5, #-64]
     68a:	04db      	lsls	r3, r3, #19
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     68c:	0412      	lsls	r2, r2, #16
     68e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     692:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     696:	4313      	orrs	r3, r2
     698:	f001 0207 	and.w	r2, r1, #7
     69c:	4313      	orrs	r3, r2
     69e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     6a2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     6a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6aa:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     6ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
     6b2:	f1be 0f02 	cmp.w	lr, #2
     6b6:	bf14      	ite	ne
     6b8:	f023 0308 	bicne.w	r3, r3, #8
     6bc:	f043 0308 	orreq.w	r3, r3, #8
     6c0:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     6c4:	b93c      	cbnz	r4, 6d6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     6c6:	4a0c      	ldr	r2, [pc, #48]	; (6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     6c8:	6813      	ldr	r3, [r2, #0]
     6ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     6ce:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     6d0:	6813      	ldr	r3, [r2, #0]
     6d2:	01db      	lsls	r3, r3, #7
     6d4:	d4fc      	bmi.n	6d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x10c>
}
     6d6:	b010      	add	sp, #64	; 0x40
     6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     6dc:	2c00      	cmp	r4, #0
     6de:	d1fa      	bne.n	6d6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     6e0:	4a05      	ldr	r2, [pc, #20]	; (6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     6e2:	6813      	ldr	r3, [r2, #0]
     6e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     6e8:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     6ea:	6813      	ldr	r3, [r2, #0]
     6ec:	01d9      	lsls	r1, r3, #7
     6ee:	d4fc      	bmi.n	6ea <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x126>
}
     6f0:	b010      	add	sp, #64	; 0x40
     6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     6f6:	bf00      	nop
     6f8:	400a4000 	.word	0x400a4000
     6fc:	00f42400 	.word	0x00f42400
     700:	0000c560 	.word	0x0000c560

00000704 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3); /* input 3 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4); /* input 4 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4, uint32_t id5); /* input 5 ID's to be filtered */
    bool setMBFilterRange(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2); /* filter a range of ids */
    int write(const CAN_message_t &msg); /* use any available mailbox for transmitting */
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     704:	2000      	movs	r0, #0
     706:	4770      	bx	lr

00000708 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     708:	2000      	movs	r0, #0
     70a:	4770      	bx	lr

0000070c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
#endif
    void enhanceFilter(FLEXCAN_MAILBOX mb_num);
    void distribute(bool state = 1) { distribution = state; }
    void enableDMA(bool state = 1);
    void disableDMA() { enableDMA(0); }
    uint8_t getFirstTxBoxSize(){ return 8; }
     70c:	2008      	movs	r0, #8
     70e:	4770      	bx	lr

00000710 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     710:	2000      	movs	r0, #0
     712:	4770      	bx	lr

00000714 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     714:	2000      	movs	r0, #0
     716:	4770      	bx	lr

00000718 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
    uint8_t getFirstTxBoxSize(){ return 8; }
     718:	2008      	movs	r0, #8
     71a:	4770      	bx	lr

0000071c <canSniff(CAN_message_t const&)>:
  msg.len = 8;
  msg.flags.extended = true;
}

void canSniff(const CAN_message_t &msg) {
  GREEN_state = !GREEN_state;
     71c:	4b03      	ldr	r3, [pc, #12]	; (72c <canSniff(CAN_message_t const&)+0x10>)
     71e:	7819      	ldrb	r1, [r3, #0]
  digitalWrite(GREEN, GREEN_state);
     720:	2014      	movs	r0, #20
  GREEN_state = !GREEN_state;
     722:	f081 0101 	eor.w	r1, r1, #1
     726:	7019      	strb	r1, [r3, #0]
  digitalWrite(GREEN, GREEN_state);
     728:	f003 bdf4 	b.w	4314 <digitalWrite>
     72c:	1fff0732 	.word	0x1fff0732

00000730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     730:	4910      	ldr	r1, [pc, #64]	; (774 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     732:	680b      	ldr	r3, [r1, #0]
     734:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     736:	680a      	ldr	r2, [r1, #0]
     738:	6b49      	ldr	r1, [r1, #52]	; 0x34
     73a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     73e:	f3c1 6103 	ubfx	r1, r1, #24, #4
     742:	3201      	adds	r2, #1
     744:	3104      	adds	r1, #4
     746:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     74a:	d310      	bcc.n	76e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     750:	f3c0 6003 	ubfx	r0, r0, #24, #4
     754:	3b05      	subs	r3, #5
     756:	3001      	adds	r0, #1
     758:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     75c:	b2db      	uxtb	r3, r3
     75e:	4a05      	ldr	r2, [pc, #20]	; (774 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     760:	6810      	ldr	r0, [r2, #0]
     762:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     766:	3001      	adds	r0, #1
     768:	1ac0      	subs	r0, r0, r3
}
     76a:	b2c0      	uxtb	r0, r0
     76c:	4770      	bx	lr
     76e:	2300      	movs	r3, #0
     770:	e7f5      	b.n	75e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     772:	bf00      	nop
     774:	40024000 	.word	0x40024000

00000778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     778:	4910      	ldr	r1, [pc, #64]	; (7bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     77a:	680b      	ldr	r3, [r1, #0]
     77c:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     77e:	680a      	ldr	r2, [r1, #0]
     780:	6b49      	ldr	r1, [r1, #52]	; 0x34
     782:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     786:	f3c1 6103 	ubfx	r1, r1, #24, #4
     78a:	3201      	adds	r2, #1
     78c:	3104      	adds	r1, #4
     78e:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     792:	d310      	bcc.n	7b6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     798:	f3c0 6003 	ubfx	r0, r0, #24, #4
     79c:	3b05      	subs	r3, #5
     79e:	3001      	adds	r0, #1
     7a0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     7a4:	b2db      	uxtb	r3, r3
     7a6:	4a05      	ldr	r2, [pc, #20]	; (7bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     7a8:	6810      	ldr	r0, [r2, #0]
     7aa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     7ae:	3001      	adds	r0, #1
     7b0:	1ac0      	subs	r0, r0, r3
}
     7b2:	b2c0      	uxtb	r0, r0
     7b4:	4770      	bx	lr
     7b6:	2300      	movs	r3, #0
     7b8:	e7f5      	b.n	7a6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     7ba:	bf00      	nop
     7bc:	400a4000 	.word	0x400a4000

000007c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7c0:	4a62      	ldr	r2, [pc, #392]	; (94c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7c6:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     7c8:	6813      	ldr	r3, [r2, #0]
     7ca:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7ce:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     7d2:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     7d4:	6813      	ldr	r3, [r2, #0]
     7d6:	01dd      	lsls	r5, r3, #7
     7d8:	d5fc      	bpl.n	7d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     7da:	6811      	ldr	r1, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     7dc:	f8df c174 	ldr.w	ip, [pc, #372]	; 954 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     7e0:	4f5b      	ldr	r7, [pc, #364]	; (950 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     7e2:	4e5a      	ldr	r6, [pc, #360]	; (94c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
  FLEXCANb_IMASK1(_bus) = value;
     7e4:	2300      	movs	r3, #0
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     7e6:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
     7ea:	6011      	str	r1, [r2, #0]
  FLEXCANb_IMASK1(_bus) = value;
     7ec:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     7ee:	6812      	ldr	r2, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     7f0:	4619      	mov	r1, r3
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     7f2:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     7f6:	19dd      	adds	r5, r3, r7
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     7f8:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     7fa:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     7fc:	60d1      	str	r1, [r2, #12]
     7fe:	6091      	str	r1, [r2, #8]
     800:	6051      	str	r1, [r2, #4]
     802:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     804:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     806:	6832      	ldr	r2, [r6, #0]
     808:	3301      	adds	r3, #1
     80a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     80e:	b2db      	uxtb	r3, r3
     810:	3201      	adds	r2, #1
     812:	4293      	cmp	r3, r2
     814:	d3ed      	bcc.n	7f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x32>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     816:	64b1      	str	r1, [r6, #72]	; 0x48
     818:	6131      	str	r1, [r6, #16]
  return FLEXCANb_IFLAG1(_bus);
     81a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     81c:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     81e:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     820:	2800      	cmp	r0, #0
     822:	d14b      	bne.n	8bc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfc>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     824:	f8df 812c 	ldr.w	r8, [pc, #300]	; 954 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     828:	4e48      	ldr	r6, [pc, #288]	; (94c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     82a:	4f49      	ldr	r7, [pc, #292]	; (950 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     82c:	4605      	mov	r5, r0
     82e:	e019      	b.n	864 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xa4>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     830:	6833      	ldr	r3, [r6, #0]
     832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     836:	3301      	adds	r3, #1
     838:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     83c:	bf34      	ite	cc
     83e:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     842:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     846:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     848:	6b73      	ldr	r3, [r6, #52]	; 0x34
     84a:	f3c3 4300 	ubfx	r3, r3, #16, #1
     84e:	079b      	lsls	r3, r3, #30
     850:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     852:	6833      	ldr	r3, [r6, #0]
     854:	3501      	adds	r5, #1
     856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     85a:	b2ed      	uxtb	r5, r5
     85c:	3301      	adds	r3, #1
     85e:	429d      	cmp	r5, r3
     860:	4628      	mov	r0, r5
     862:	d220      	bcs.n	8a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     864:	6833      	ldr	r3, [r6, #0]
     866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     86a:	3301      	adds	r3, #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     86c:	19e9      	adds	r1, r5, r7
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     86e:	eb05 0208 	add.w	r2, r5, r8
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     872:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     876:	ea4f 0181 	mov.w	r1, r1, lsl #2
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     87a:	ea4f 1202 	mov.w	r2, r2, lsl #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     87e:	d3d7      	bcc.n	830 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x70>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     884:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     886:	6833      	ldr	r3, [r6, #0]
     888:	009a      	lsls	r2, r3, #2
     88a:	d503      	bpl.n	894 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd4>
     88c:	f7ff ff50 	bl	730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     890:	42a8      	cmp	r0, r5
     892:	d8de      	bhi.n	852 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     894:	2301      	movs	r3, #1
     896:	2d1f      	cmp	r5, #31
     898:	fa03 f305 	lsl.w	r3, r3, r5
     89c:	d84c      	bhi.n	938 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x178>
     89e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     8a0:	4313      	orrs	r3, r2
     8a2:	62b3      	str	r3, [r6, #40]	; 0x28
     8a4:	e7d5      	b.n	852 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     8a6:	b93c      	cbnz	r4, 8b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf8>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     8a8:	4a28      	ldr	r2, [pc, #160]	; (94c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
     8aa:	6813      	ldr	r3, [r2, #0]
     8ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     8b0:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     8b2:	6813      	ldr	r3, [r2, #0]
     8b4:	01db      	lsls	r3, r3, #7
     8b6:	d4fc      	bmi.n	8b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf2>
}
     8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     8bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     8c0:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     8c2:	6835      	ldr	r5, [r6, #0]
     8c4:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     8c8:	d03e      	beq.n	948 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x188>
     8ca:	f7ff ff31 	bl	730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     8ce:	6833      	ldr	r3, [r6, #0]
     8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     8d4:	3301      	adds	r3, #1
     8d6:	4283      	cmp	r3, r0
     8d8:	4605      	mov	r5, r0
     8da:	d9e4      	bls.n	8a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     8dc:	4f1d      	ldr	r7, [pc, #116]	; (954 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     8de:	f8df 806c 	ldr.w	r8, [pc, #108]	; 94c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     8e2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
     8e6:	e00d      	b.n	904 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x144>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     8e8:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     8ec:	4313      	orrs	r3, r2
     8ee:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     8f2:	f8d8 3000 	ldr.w	r3, [r8]
     8f6:	3501      	adds	r5, #1
     8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     8fc:	b2ed      	uxtb	r5, r5
     8fe:	3301      	adds	r3, #1
     900:	429d      	cmp	r5, r3
     902:	d2d0      	bcs.n	8a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     904:	19eb      	adds	r3, r5, r7
     906:	011b      	lsls	r3, r3, #4
     908:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     90a:	f8d8 3000 	ldr.w	r3, [r8]
     90e:	0099      	lsls	r1, r3, #2
     910:	d503      	bpl.n	91a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15a>
     912:	f7ff ff0d 	bl	730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     916:	4285      	cmp	r5, r0
     918:	d3eb      	bcc.n	8f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     91a:	2301      	movs	r3, #1
     91c:	2d1f      	cmp	r5, #31
     91e:	fa03 f305 	lsl.w	r3, r3, r5
     922:	d9e1      	bls.n	8e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x128>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     924:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     928:	2301      	movs	r3, #1
     92a:	f1a5 0120 	sub.w	r1, r5, #32
     92e:	408b      	lsls	r3, r1
     930:	4313      	orrs	r3, r2
     932:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     936:	e7dc      	b.n	8f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
     938:	6a72      	ldr	r2, [r6, #36]	; 0x24
     93a:	f1a5 0120 	sub.w	r1, r5, #32
     93e:	2301      	movs	r3, #1
     940:	408b      	lsls	r3, r1
     942:	4313      	orrs	r3, r2
     944:	6273      	str	r3, [r6, #36]	; 0x24
     946:	e784      	b.n	852 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     948:	6833      	ldr	r3, [r6, #0]
     94a:	e7c7      	b.n	8dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11c>
     94c:	40024000 	.word	0x40024000
     950:	10009220 	.word	0x10009220
     954:	04002408 	.word	0x04002408

00000958 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     958:	4a62      	ldr	r2, [pc, #392]	; (ae4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     95e:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     960:	6813      	ldr	r3, [r2, #0]
     962:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     966:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     96a:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     96c:	6813      	ldr	r3, [r2, #0]
     96e:	01dd      	lsls	r5, r3, #7
     970:	d5fc      	bpl.n	96c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     972:	6811      	ldr	r1, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     974:	f8df c174 	ldr.w	ip, [pc, #372]	; aec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     978:	4f5b      	ldr	r7, [pc, #364]	; (ae8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     97a:	4e5a      	ldr	r6, [pc, #360]	; (ae4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
  FLEXCANb_IMASK1(_bus) = value;
     97c:	2300      	movs	r3, #0
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     97e:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
     982:	6011      	str	r1, [r2, #0]
  FLEXCANb_IMASK1(_bus) = value;
     984:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     986:	6812      	ldr	r2, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     988:	4619      	mov	r1, r3
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     98a:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     98e:	19dd      	adds	r5, r3, r7
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     990:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     992:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     994:	60d1      	str	r1, [r2, #12]
     996:	6091      	str	r1, [r2, #8]
     998:	6051      	str	r1, [r2, #4]
     99a:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     99c:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     99e:	6832      	ldr	r2, [r6, #0]
     9a0:	3301      	adds	r3, #1
     9a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     9a6:	b2db      	uxtb	r3, r3
     9a8:	3201      	adds	r2, #1
     9aa:	4293      	cmp	r3, r2
     9ac:	d3ed      	bcc.n	98a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x32>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     9ae:	64b1      	str	r1, [r6, #72]	; 0x48
     9b0:	6131      	str	r1, [r6, #16]
  return FLEXCANb_IFLAG1(_bus);
     9b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     9b4:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     9b6:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     9b8:	2800      	cmp	r0, #0
     9ba:	d14b      	bne.n	a54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfc>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9bc:	f8df 812c 	ldr.w	r8, [pc, #300]	; aec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     9c0:	4e48      	ldr	r6, [pc, #288]	; (ae4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     9c2:	4f49      	ldr	r7, [pc, #292]	; (ae8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9c4:	4605      	mov	r5, r0
     9c6:	e019      	b.n	9fc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xa4>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     9c8:	6833      	ldr	r3, [r6, #0]
     9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     9ce:	3301      	adds	r3, #1
     9d0:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     9d4:	bf34      	ite	cc
     9d6:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     9da:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     9de:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     9e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
     9e2:	f3c3 4300 	ubfx	r3, r3, #16, #1
     9e6:	079b      	lsls	r3, r3, #30
     9e8:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9ea:	6833      	ldr	r3, [r6, #0]
     9ec:	3501      	adds	r5, #1
     9ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     9f2:	b2ed      	uxtb	r5, r5
     9f4:	3301      	adds	r3, #1
     9f6:	429d      	cmp	r5, r3
     9f8:	4628      	mov	r0, r5
     9fa:	d220      	bcs.n	a3e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     9fc:	6833      	ldr	r3, [r6, #0]
     9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a02:	3301      	adds	r3, #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a04:	19e9      	adds	r1, r5, r7
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a06:	eb05 0208 	add.w	r2, r5, r8
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a0a:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a0e:	ea4f 0181 	mov.w	r1, r1, lsl #2
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a12:	ea4f 1202 	mov.w	r2, r2, lsl #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a16:	d3d7      	bcc.n	9c8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x70>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     a1c:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     a1e:	6833      	ldr	r3, [r6, #0]
     a20:	009a      	lsls	r2, r3, #2
     a22:	d503      	bpl.n	a2c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd4>
     a24:	f7ff fea8 	bl	778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     a28:	42a8      	cmp	r0, r5
     a2a:	d8de      	bhi.n	9ea <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     a2c:	2301      	movs	r3, #1
     a2e:	2d1f      	cmp	r5, #31
     a30:	fa03 f305 	lsl.w	r3, r3, r5
     a34:	d84c      	bhi.n	ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x178>
     a36:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     a38:	4313      	orrs	r3, r2
     a3a:	62b3      	str	r3, [r6, #40]	; 0x28
     a3c:	e7d5      	b.n	9ea <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     a3e:	b93c      	cbnz	r4, a50 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf8>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     a40:	4a28      	ldr	r2, [pc, #160]	; (ae4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
     a42:	6813      	ldr	r3, [r2, #0]
     a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     a48:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     a4a:	6813      	ldr	r3, [r2, #0]
     a4c:	01db      	lsls	r3, r3, #7
     a4e:	d4fc      	bmi.n	a4a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf2>
}
     a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     a58:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     a5a:	6835      	ldr	r5, [r6, #0]
     a5c:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     a60:	d03e      	beq.n	ae0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x188>
     a62:	f7ff fe89 	bl	778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     a66:	6833      	ldr	r3, [r6, #0]
     a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a6c:	3301      	adds	r3, #1
     a6e:	4283      	cmp	r3, r0
     a70:	4605      	mov	r5, r0
     a72:	d9e4      	bls.n	a3e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a74:	4f1d      	ldr	r7, [pc, #116]	; (aec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     a76:	f8df 806c 	ldr.w	r8, [pc, #108]	; ae4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a7a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
     a7e:	e00d      	b.n	a9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x144>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     a80:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     a84:	4313      	orrs	r3, r2
     a86:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     a8a:	f8d8 3000 	ldr.w	r3, [r8]
     a8e:	3501      	adds	r5, #1
     a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a94:	b2ed      	uxtb	r5, r5
     a96:	3301      	adds	r3, #1
     a98:	429d      	cmp	r5, r3
     a9a:	d2d0      	bcs.n	a3e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a9c:	19eb      	adds	r3, r5, r7
     a9e:	011b      	lsls	r3, r3, #4
     aa0:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     aa2:	f8d8 3000 	ldr.w	r3, [r8]
     aa6:	0099      	lsls	r1, r3, #2
     aa8:	d503      	bpl.n	ab2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15a>
     aaa:	f7ff fe65 	bl	778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     aae:	4285      	cmp	r5, r0
     ab0:	d3eb      	bcc.n	a8a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     ab2:	2301      	movs	r3, #1
     ab4:	2d1f      	cmp	r5, #31
     ab6:	fa03 f305 	lsl.w	r3, r3, r5
     aba:	d9e1      	bls.n	a80 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x128>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     abc:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     ac0:	2301      	movs	r3, #1
     ac2:	f1a5 0120 	sub.w	r1, r5, #32
     ac6:	408b      	lsls	r3, r1
     ac8:	4313      	orrs	r3, r2
     aca:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     ace:	e7dc      	b.n	a8a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
     ad0:	6a72      	ldr	r2, [r6, #36]	; 0x24
     ad2:	f1a5 0120 	sub.w	r1, r5, #32
     ad6:	2301      	movs	r3, #1
     ad8:	408b      	lsls	r3, r1
     ada:	4313      	orrs	r3, r2
     adc:	6273      	str	r3, [r6, #36]	; 0x24
     ade:	e784      	b.n	9ea <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     ae0:	6833      	ldr	r3, [r6, #0]
     ae2:	e7c7      	b.n	a74 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11c>
     ae4:	400a4000 	.word	0x400a4000
     ae8:	10029220 	.word	0x10029220
     aec:	0400a408 	.word	0x0400a408

00000af0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     af0:	b538      	push	{r3, r4, r5, lr}
    nvicIrq = IRQ_CAN0_MESSAGE;
     af2:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     af6:	2300      	movs	r3, #0
  OSC0_CR |= OSC_ERCLKEN;
     af8:	4961      	ldr	r1, [pc, #388]	; (c80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     afa:	6043      	str	r3, [r0, #4]
    nvicIrq = IRQ_CAN0_MESSAGE;
     afc:	224b      	movs	r2, #75	; 0x4b
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     afe:	6083      	str	r3, [r0, #8]
     b00:	60c3      	str	r3, [r0, #12]
     b02:	6103      	str	r3, [r0, #16]
    nvicIrq = IRQ_CAN0_MESSAGE;
     b04:	f8c5 290c 	str.w	r2, [r5, #2316]	; 0x90c
    busNumber = 0;
     b08:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
  OSC0_CR |= OSC_ERCLKEN;
     b0c:	780a      	ldrb	r2, [r1, #0]
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     b0e:	485d      	ldr	r0, [pc, #372]	; (c84 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x194>)
  OSC0_CR |= OSC_ERCLKEN;
     b10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b14:	700a      	strb	r2, [r1, #0]
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     b16:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     b18:	f5a1 2182 	sub.w	r1, r1, #266240	; 0x41000
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     b1c:	f042 0210 	orr.w	r2, r2, #16
     b20:	63c2      	str	r2, [r0, #60]	; 0x3c
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     b22:	684a      	ldr	r2, [r1, #4]
    if ( init_pins ) {
     b24:	4858      	ldr	r0, [pc, #352]	; (c88 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x198>)
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
     b2a:	604a      	str	r2, [r1, #4]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can0;
     b2c:	4a57      	ldr	r2, [pc, #348]	; (c8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x19c>)
     b2e:	4958      	ldr	r1, [pc, #352]	; (c90 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a0>)
     b30:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
    if ( init_pins ) {
     b34:	7802      	ldrb	r2, [r0, #0]
     b36:	2a00      	cmp	r2, #0
     b38:	f040 8084 	bne.w	c44 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x154>
      if ( CORE_PIN29_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN29_CONFIG = 0;
     b3c:	4b55      	ldr	r3, [pc, #340]	; (c94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     b3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
     b40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     b44:	bf04      	itt	eq
     b46:	2200      	moveq	r2, #0
     b48:	649a      	streq	r2, [r3, #72]	; 0x48
      CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
     b4a:	4b53      	ldr	r3, [pc, #332]	; (c98 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
     b50:	631a      	str	r2, [r3, #48]	; 0x30
    if ( init_pins ) {
     b52:	4b52      	ldr	r3, [pc, #328]	; (c9c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1ac>)
     b54:	781a      	ldrb	r2, [r3, #0]
     b56:	2a00      	cmp	r2, #0
     b58:	f000 8085 	beq.w	c66 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x176>
      pin = ( !CORE_PIN4_CONFIG ) ? DEF : ALT; 
     b5c:	4a4e      	ldr	r2, [pc, #312]	; (c98 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     b5e:	6b51      	ldr	r1, [r2, #52]	; 0x34
     b60:	2900      	cmp	r1, #0
     b62:	d07f      	beq.n	c64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x174>
      init_pins = 0;
     b64:	2100      	movs	r1, #0
     b66:	7019      	strb	r1, [r3, #0]
      if ( CORE_PIN4_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN4_CONFIG = 0;
     b68:	6b53      	ldr	r3, [r2, #52]	; 0x34
     b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      CORE_PIN30_CONFIG = PORT_PCR_MUX(2);
     b6e:	4b49      	ldr	r3, [pc, #292]	; (c94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
      if ( CORE_PIN4_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN4_CONFIG = 0;
     b70:	bf08      	it	eq
     b72:	6351      	streq	r1, [r2, #52]	; 0x34
      CORE_PIN30_CONFIG = PORT_PCR_MUX(2);
     b74:	f44f 7200 	mov.w	r2, #512	; 0x200
     b78:	64da      	str	r2, [r3, #76]	; 0x4c
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     b7a:	4a49      	ldr	r2, [pc, #292]	; (ca0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
     b7c:	6813      	ldr	r3, [r2, #0]
     b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     b82:	6013      	str	r3, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     b84:	6813      	ldr	r3, [r2, #0]
     b86:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     b8a:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     b8c:	6813      	ldr	r3, [r2, #0]
     b8e:	01dc      	lsls	r4, r3, #7
     b90:	d5fc      	bpl.n	b8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x9c>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     b92:	6853      	ldr	r3, [r2, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     b94:	4942      	ldr	r1, [pc, #264]	; (ca0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     b96:	f043 0308 	orr.w	r3, r3, #8
     b9a:	6053      	str	r3, [r2, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     b9c:	6813      	ldr	r3, [r2, #0]
     b9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     ba2:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     ba4:	680b      	ldr	r3, [r1, #0]
     ba6:	02d8      	lsls	r0, r3, #11
     ba8:	d4fc      	bmi.n	ba4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xb4>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     baa:	680b      	ldr	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     bac:	4a3c      	ldr	r2, [pc, #240]	; (ca0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     bb2:	600b      	str	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     bb4:	6813      	ldr	r3, [r2, #0]
     bb6:	0199      	lsls	r1, r3, #6
     bb8:	d4fc      	bmi.n	bb4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xc4>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     bba:	4c39      	ldr	r4, [pc, #228]	; (ca0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
     bbc:	6823      	ldr	r3, [r4, #0]
     bbe:	01da      	lsls	r2, r3, #7
     bc0:	d5fc      	bpl.n	bbc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xcc>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     bc2:	6823      	ldr	r3, [r4, #0]
     bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     bc8:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     bca:	6823      	ldr	r3, [r4, #0]
     bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     bd0:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     bd2:	6823      	ldr	r3, [r4, #0]
     bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     bd8:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     bda:	6823      	ldr	r3, [r4, #0]
     bdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     be0:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     be2:	6823      	ldr	r3, [r4, #0]
     be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     be8:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     bea:	6823      	ldr	r3, [r4, #0]
     bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     bf0:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     bf2:	6823      	ldr	r3, [r4, #0]
     bf4:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     bf8:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
     bfc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     c00:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     c02:	6823      	ldr	r3, [r4, #0]
     c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     c08:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     c0a:	6823      	ldr	r3, [r4, #0]
     c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     c10:	6023      	str	r3, [r4, #0]
    void disableFIFO() { enableFIFO(0); }
     c12:	2000      	movs	r0, #0
     c14:	f7ff fdd4 	bl	7c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     c18:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     c1a:	4a21      	ldr	r2, [pc, #132]	; (ca0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     c20:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     c22:	6813      	ldr	r3, [r2, #0]
     c24:	01db      	lsls	r3, r3, #7
     c26:	d4fc      	bmi.n	c22 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x132>
  NVIC_ENABLE_IRQ(nvicIrq);
     c28:	f8d5 290c 	ldr.w	r2, [r5, #2316]	; 0x90c
     c2c:	0953      	lsrs	r3, r2, #5
     c2e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     c32:	3340      	adds	r3, #64	; 0x40
     c34:	2101      	movs	r1, #1
     c36:	009b      	lsls	r3, r3, #2
     c38:	f002 021f 	and.w	r2, r2, #31
     c3c:	fa01 f202 	lsl.w	r2, r1, r2
     c40:	601a      	str	r2, [r3, #0]
}
     c42:	bd38      	pop	{r3, r4, r5, pc}
      pin = ( !CORE_PIN3_CONFIG ) ? DEF : ALT; 
     c44:	4a14      	ldr	r2, [pc, #80]	; (c98 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     c46:	6b11      	ldr	r1, [r2, #48]	; 0x30
     c48:	b909      	cbnz	r1, c4e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x15e>
      init_pins = 0;
     c4a:	7001      	strb	r1, [r0, #0]
     c4c:	e776      	b.n	b3c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x4c>
      if ( CORE_PIN3_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN3_CONFIG = 0;
     c4e:	6b11      	ldr	r1, [r2, #48]	; 0x30
      init_pins = 0;
     c50:	7003      	strb	r3, [r0, #0]
      if ( CORE_PIN3_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN3_CONFIG = 0;
     c52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     c56:	bf08      	it	eq
     c58:	6313      	streq	r3, [r2, #48]	; 0x30
      CORE_PIN29_CONFIG = PORT_PCR_MUX(2);
     c5a:	4b0e      	ldr	r3, [pc, #56]	; (c94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
     c60:	649a      	str	r2, [r3, #72]	; 0x48
     c62:	e776      	b.n	b52 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x62>
      init_pins = 0;
     c64:	7019      	strb	r1, [r3, #0]
      if ( CORE_PIN30_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN30_CONFIG = 0;
     c66:	4b0b      	ldr	r3, [pc, #44]	; (c94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     c6a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     c6e:	bf04      	itt	eq
     c70:	2200      	moveq	r2, #0
     c72:	64da      	streq	r2, [r3, #76]	; 0x4c
      CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
     c74:	4b08      	ldr	r3, [pc, #32]	; (c98 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     c76:	f44f 7200 	mov.w	r2, #512	; 0x200
     c7a:	635a      	str	r2, [r3, #52]	; 0x34
}
     c7c:	e77d      	b.n	b7a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x8a>
     c7e:	bf00      	nop
     c80:	40065000 	.word	0x40065000
     c84:	40048000 	.word	0x40048000
     c88:	1fff0731 	.word	0x1fff0731
     c8c:	1fff0200 	.word	0x1fff0200
     c90:	0000045d 	.word	0x0000045d
     c94:	4004a000 	.word	0x4004a000
     c98:	40049000 	.word	0x40049000
     c9c:	1fff0730 	.word	0x1fff0730
     ca0:	40024000 	.word	0x40024000

00000ca4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     ca4:	b538      	push	{r3, r4, r5, lr}
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     ca6:	2300      	movs	r3, #0
    nvicIrq = IRQ_CAN1_MESSAGE;
     ca8:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     cac:	6043      	str	r3, [r0, #4]
     cae:	6083      	str	r3, [r0, #8]
     cb0:	60c3      	str	r3, [r0, #12]
     cb2:	6103      	str	r3, [r0, #16]
  OSC0_CR |= OSC_ERCLKEN;
     cb4:	4a41      	ldr	r2, [pc, #260]	; (dbc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x118>)
    nvicIrq = IRQ_CAN1_MESSAGE;
     cb6:	215e      	movs	r1, #94	; 0x5e
    busNumber = 1;
     cb8:	2301      	movs	r3, #1
    nvicIrq = IRQ_CAN1_MESSAGE;
     cba:	f8c5 190c 	str.w	r1, [r5, #2316]	; 0x90c
    busNumber = 1;
     cbe:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
  OSC0_CR |= OSC_ERCLKEN;
     cc2:	7813      	ldrb	r3, [r2, #0]
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     cc4:	493e      	ldr	r1, [pc, #248]	; (dc0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x11c>)
  OSC0_CR |= OSC_ERCLKEN;
     cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     cca:	7013      	strb	r3, [r2, #0]
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     ccc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     cce:	4b3d      	ldr	r3, [pc, #244]	; (dc4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     cd0:	f042 0210 	orr.w	r2, r2, #16
     cd4:	630a      	str	r2, [r1, #48]	; 0x30
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     cd6:	685a      	ldr	r2, [r3, #4]
    CORE_PIN33_CONFIG = PORT_PCR_MUX(2);
     cd8:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
     cdc:	f44f 7000 	mov.w	r0, #512	; 0x200
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     ce0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
     ce4:	605a      	str	r2, [r3, #4]
    CORE_PIN33_CONFIG = PORT_PCR_MUX(2);
     ce6:	6608      	str	r0, [r1, #96]	; 0x60
    CORE_PIN34_CONFIG = PORT_PCR_MUX(2);
     ce8:	6648      	str	r0, [r1, #100]	; 0x64
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     cea:	681a      	ldr	r2, [r3, #0]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     cec:	4936      	ldr	r1, [pc, #216]	; (dc8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x124>)
     cee:	4837      	ldr	r0, [pc, #220]	; (dcc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x128>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     cf0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
     cf4:	601a      	str	r2, [r3, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     cf6:	681a      	ldr	r2, [r3, #0]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     cf8:	f8c1 01b8 	str.w	r0, [r1, #440]	; 0x1b8
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     cfc:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
     d00:	601a      	str	r2, [r3, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     d02:	681a      	ldr	r2, [r3, #0]
     d04:	01d2      	lsls	r2, r2, #7
     d06:	d5fc      	bpl.n	d02 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x5e>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     d08:	6859      	ldr	r1, [r3, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     d0a:	4a2e      	ldr	r2, [pc, #184]	; (dc4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     d0c:	f041 0108 	orr.w	r1, r1, #8
     d10:	6059      	str	r1, [r3, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     d12:	6819      	ldr	r1, [r3, #0]
     d14:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
     d18:	6019      	str	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     d1a:	6813      	ldr	r3, [r2, #0]
     d1c:	02dc      	lsls	r4, r3, #11
     d1e:	d4fc      	bmi.n	d1a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x76>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     d20:	6813      	ldr	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     d22:	4928      	ldr	r1, [pc, #160]	; (dc4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     d28:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     d2a:	680b      	ldr	r3, [r1, #0]
     d2c:	0198      	lsls	r0, r3, #6
     d2e:	d4fc      	bmi.n	d2a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x86>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     d30:	4c24      	ldr	r4, [pc, #144]	; (dc4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
     d32:	6823      	ldr	r3, [r4, #0]
     d34:	01da      	lsls	r2, r3, #7
     d36:	d5fc      	bpl.n	d32 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x8e>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     d38:	6823      	ldr	r3, [r4, #0]
     d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     d3e:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     d40:	6823      	ldr	r3, [r4, #0]
     d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     d46:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     d48:	6823      	ldr	r3, [r4, #0]
     d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     d4e:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     d50:	6823      	ldr	r3, [r4, #0]
     d52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     d56:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     d58:	6823      	ldr	r3, [r4, #0]
     d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     d5e:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     d60:	6823      	ldr	r3, [r4, #0]
     d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     d66:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     d68:	6823      	ldr	r3, [r4, #0]
     d6a:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     d6e:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
     d72:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     d76:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     d78:	6823      	ldr	r3, [r4, #0]
     d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     d7e:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     d80:	6823      	ldr	r3, [r4, #0]
     d82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     d86:	6023      	str	r3, [r4, #0]
     d88:	2000      	movs	r0, #0
     d8a:	f7ff fde5 	bl	958 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     d8e:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     d90:	4a0c      	ldr	r2, [pc, #48]	; (dc4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     d96:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     d98:	6813      	ldr	r3, [r2, #0]
     d9a:	01db      	lsls	r3, r3, #7
     d9c:	d4fc      	bmi.n	d98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xf4>
  NVIC_ENABLE_IRQ(nvicIrq);
     d9e:	f8d5 290c 	ldr.w	r2, [r5, #2316]	; 0x90c
     da2:	0953      	lsrs	r3, r2, #5
     da4:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     da8:	3340      	adds	r3, #64	; 0x40
     daa:	2101      	movs	r1, #1
     dac:	009b      	lsls	r3, r3, #2
     dae:	f002 021f 	and.w	r2, r2, #31
     db2:	fa01 f202 	lsl.w	r2, r1, r2
     db6:	601a      	str	r2, [r3, #0]
}
     db8:	bd38      	pop	{r3, r4, r5, pc}
     dba:	bf00      	nop
     dbc:	40065000 	.word	0x40065000
     dc0:	40048000 	.word	0x40048000
     dc4:	400a4000 	.word	0x400a4000
     dc8:	1fff0200 	.word	0x1fff0200
     dcc:	00000471 	.word	0x00000471

00000dd0 <setup>:
void setup() {
     dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pinMode(LED_BUILTIN, OUTPUT); digitalWrite(LED_BUILTIN, HIGH); 
     dd4:	2101      	movs	r1, #1
     dd6:	200d      	movs	r0, #13
     dd8:	f003 fad4 	bl	4384 <pinMode>
     ddc:	2101      	movs	r1, #1
     dde:	200d      	movs	r0, #13
     de0:	f003 fa98 	bl	4314 <digitalWrite>
  pinMode(6, OUTPUT); digitalWrite(6, LOW); /* optional tranceiver enable pin */
     de4:	2101      	movs	r1, #1
     de6:	2006      	movs	r0, #6
     de8:	f003 facc 	bl	4384 <pinMode>
     dec:	2100      	movs	r1, #0
     dee:	2006      	movs	r0, #6
     df0:	f003 fa90 	bl	4314 <digitalWrite>
  pinMode(RED, OUTPUT); digitalWrite(RED, RED_state); 
     df4:	2101      	movs	r1, #1
     df6:	2015      	movs	r0, #21
     df8:	f003 fac4 	bl	4384 <pinMode>
     dfc:	4b41      	ldr	r3, [pc, #260]	; (f04 <setup+0x134>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     dfe:	4c42      	ldr	r4, [pc, #264]	; (f08 <setup+0x138>)
     e00:	7819      	ldrb	r1, [r3, #0]
     e02:	2015      	movs	r0, #21
     e04:	f003 fa86 	bl	4314 <digitalWrite>
  pinMode(GREEN, OUTPUT); digitalWrite(GREEN, GREEN_state); 
     e08:	2101      	movs	r1, #1
     e0a:	2014      	movs	r0, #20
     e0c:	f003 faba 	bl	4384 <pinMode>
     e10:	4b3e      	ldr	r3, [pc, #248]	; (f0c <setup+0x13c>)
     e12:	2014      	movs	r0, #20
     e14:	7819      	ldrb	r1, [r3, #0]
     e16:	f003 fa7d 	bl	4314 <digitalWrite>
  pinMode(port_pin, INPUT_PULLUP);
     e1a:	2102      	movs	r1, #2
     e1c:	2006      	movs	r0, #6
     e1e:	f003 fab1 	bl	4384 <pinMode>
  pinMode(starboard_pin, INPUT_PULLUP);
     e22:	2102      	movs	r1, #2
     e24:	2007      	movs	r0, #7
     e26:	f003 faad 	bl	4384 <pinMode>
  pinMode(center_pin, INPUT_PULLUP);
     e2a:	2102      	movs	r1, #2
     e2c:	2008      	movs	r0, #8
     e2e:	f003 faa9 	bl	4384 <pinMode>
  Can0.begin();
     e32:	4837      	ldr	r0, [pc, #220]	; (f10 <setup+0x140>)
     e34:	f7ff fe5c 	bl	af0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can0.setBaudRate(250000);
     e38:	4936      	ldr	r1, [pc, #216]	; (f14 <setup+0x144>)
     e3a:	4835      	ldr	r0, [pc, #212]	; (f10 <setup+0x140>)
     e3c:	2200      	movs	r2, #0
     e3e:	f7ff fb21 	bl	484 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
     e42:	6823      	ldr	r3, [r4, #0]
     e44:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     e48:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     e4a:	6823      	ldr	r3, [r4, #0]
     e4c:	01da      	lsls	r2, r3, #7
     e4e:	d5fc      	bpl.n	e4a <setup+0x7a>
     e50:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
     e52:	6825      	ldr	r5, [r4, #0]
     e54:	f7ff fcb4 	bl	7c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return FLEXCANb_IFLAG1(_bus);
     e58:	6b23      	ldr	r3, [r4, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     e5a:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
     e5c:	6823      	ldr	r3, [r4, #0]
     e5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     e62:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     e64:	6823      	ldr	r3, [r4, #0]
     e66:	f043 030f 	orr.w	r3, r3, #15
     e6a:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
     e6c:	00ab      	lsls	r3, r5, #2
     e6e:	f100 84dc 	bmi.w	182a <setup+0xa5a>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     e72:	4c25      	ldr	r4, [pc, #148]	; (f08 <setup+0x138>)
     e74:	6823      	ldr	r3, [r4, #0]
     e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     e7a:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     e7c:	6823      	ldr	r3, [r4, #0]
     e7e:	01df      	lsls	r7, r3, #7
     e80:	d4fc      	bmi.n	e7c <setup+0xac>
  Can0.enableFIFO();
     e82:	2001      	movs	r0, #1
     e84:	f7ff fc9c 	bl	7c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
     e88:	6823      	ldr	r3, [r4, #0]
     e8a:	009e      	lsls	r6, r3, #2
     e8c:	d50a      	bpl.n	ea4 <setup+0xd4>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
     e8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e90:	069d      	lsls	r5, r3, #26
     e92:	d407      	bmi.n	ea4 <setup+0xd4>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
     e94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     e9a:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
     e9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e9e:	f043 0320 	orr.w	r3, r3, #32
     ea2:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     ea4:	4c18      	ldr	r4, [pc, #96]	; (f08 <setup+0x138>)
  _mainHandler = handler;
     ea6:	4a1c      	ldr	r2, [pc, #112]	; (f18 <setup+0x148>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     ea8:	6823      	ldr	r3, [r4, #0]
  _mainHandler = handler;
     eaa:	4e1c      	ldr	r6, [pc, #112]	; (f1c <setup+0x14c>)
     eac:	f8c2 6804 	str.w	r6, [r2, #2052]	; 0x804
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     eb0:	f013 5a00 	ands.w	sl, r3, #536870912	; 0x20000000
     eb4:	f040 842e 	bne.w	1714 <setup+0x944>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     eb8:	4819      	ldr	r0, [pc, #100]	; (f20 <setup+0x150>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
     eba:	4d1a      	ldr	r5, [pc, #104]	; (f24 <setup+0x154>)
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
     ebc:	4f1a      	ldr	r7, [pc, #104]	; (f28 <setup+0x158>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
     ebe:	f8df 806c 	ldr.w	r8, [pc, #108]	; f2c <setup+0x15c>
     ec2:	211a      	movs	r1, #26
     ec4:	f004 f830 	bl	4f28 <usb_serial_write>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
     ec8:	6823      	ldr	r3, [r4, #0]
     eca:	4654      	mov	r4, sl
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
     ecc:	eb04 0905 	add.w	r9, r4, r5
     ed0:	ea4f 1909 	mov.w	r9, r9, lsl #4
     ed4:	f8d9 3000 	ldr.w	r3, [r9]
     ed8:	f3c3 6303 	ubfx	r3, r3, #24, #4
     edc:	2b0e      	cmp	r3, #14
     ede:	f200 80b5 	bhi.w	104c <setup+0x27c>
     ee2:	e8df f013 	tbh	[pc, r3, lsl #1]
     ee6:	0283      	.short	0x0283
     ee8:	025f0271 	.word	0x025f0271
     eec:	024400b3 	.word	0x024400b3
     ef0:	023200b3 	.word	0x023200b3
     ef4:	022000b3 	.word	0x022000b3
     ef8:	01fc020e 	.word	0x01fc020e
     efc:	002500b3 	.word	0x002500b3
     f00:	01ea00b3 	.word	0x01ea00b3
     f04:	1fff0734 	.word	0x1fff0734
     f08:	40024000 	.word	0x40024000
     f0c:	1fff0732 	.word	0x1fff0732
     f10:	1fff0ee8 	.word	0x1fff0ee8
     f14:	0003d090 	.word	0x0003d090
     f18:	1fff2ee8 	.word	0x1fff2ee8
     f1c:	0000071d 	.word	0x0000071d
     f20:	0000c4bc 	.word	0x0000c4bc
     f24:	04002408 	.word	0x04002408
     f28:	4002408c 	.word	0x4002408c
     f2c:	bffdbf80 	.word	0xbffdbf80
     f30:	2104      	movs	r1, #4
     f32:	4880      	ldr	r0, [pc, #512]	; (1134 <setup+0x364>)
     f34:	f003 fff8 	bl	4f28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     f38:	2300      	movs	r3, #0
     f3a:	4651      	mov	r1, sl
     f3c:	220a      	movs	r2, #10
     f3e:	487e      	ldr	r0, [pc, #504]	; (1138 <setup+0x368>)
     f40:	f002 ffc4 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f44:	487d      	ldr	r0, [pc, #500]	; (113c <setup+0x36c>)
     f46:	211d      	movs	r1, #29
     f48:	f003 ffee 	bl	4f28 <usb_serial_write>
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
     f4c:	f8d9 3000 	ldr.w	r3, [r9]
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
     f50:	0298      	lsls	r0, r3, #10
     f52:	f140 847b 	bpl.w	184c <setup+0xa7c>
     f56:	487a      	ldr	r0, [pc, #488]	; (1140 <setup+0x370>)
     f58:	2110      	movs	r1, #16
     f5a:	f003 ffe5 	bl	4f28 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
     f5e:	f8d9 a008 	ldr.w	sl, [r9, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
     f62:	f8d9 3004 	ldr.w	r3, [r9, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
     f66:	eb09 0b08 	add.w	fp, r9, r8
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
     f6a:	f023 4960 	bic.w	r9, r3, #3758096384	; 0xe0000000
     f6e:	2107      	movs	r1, #7
     f70:	4874      	ldr	r0, [pc, #464]	; (1144 <setup+0x374>)
     f72:	f003 ffd9 	bl	4f28 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     f76:	2300      	movs	r3, #0
     f78:	2210      	movs	r2, #16
     f7a:	4649      	mov	r1, r9
     f7c:	486e      	ldr	r0, [pc, #440]	; (1138 <setup+0x368>)
     f7e:	f002 ffa5 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f82:	2101      	movs	r1, #1
     f84:	4870      	ldr	r0, [pc, #448]	; (1148 <setup+0x378>)
     f86:	f003 ffcf 	bl	4f28 <usb_serial_write>
     f8a:	210a      	movs	r1, #10
     f8c:	486f      	ldr	r0, [pc, #444]	; (114c <setup+0x37c>)
     f8e:	f003 ffcb 	bl	4f28 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     f92:	2300      	movs	r3, #0
     f94:	2210      	movs	r2, #16
     f96:	ea4f 611a 	mov.w	r1, sl, lsr #24
     f9a:	4867      	ldr	r0, [pc, #412]	; (1138 <setup+0x368>)
     f9c:	f002 ff96 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     fa0:	2101      	movs	r1, #1
     fa2:	486b      	ldr	r0, [pc, #428]	; (1150 <setup+0x380>)
     fa4:	f003 ffc0 	bl	4f28 <usb_serial_write>
     fa8:	2300      	movs	r3, #0
     faa:	2210      	movs	r2, #16
     fac:	f3ca 4107 	ubfx	r1, sl, #16, #8
     fb0:	4861      	ldr	r0, [pc, #388]	; (1138 <setup+0x368>)
     fb2:	f002 ff8b 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     fb6:	2101      	movs	r1, #1
     fb8:	4865      	ldr	r0, [pc, #404]	; (1150 <setup+0x380>)
     fba:	f003 ffb5 	bl	4f28 <usb_serial_write>
     fbe:	2300      	movs	r3, #0
     fc0:	2210      	movs	r2, #16
     fc2:	f3ca 2107 	ubfx	r1, sl, #8, #8
     fc6:	485c      	ldr	r0, [pc, #368]	; (1138 <setup+0x368>)
     fc8:	f002 ff80 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     fcc:	2101      	movs	r1, #1
     fce:	4860      	ldr	r0, [pc, #384]	; (1150 <setup+0x380>)
     fd0:	f003 ffaa 	bl	4f28 <usb_serial_write>
     fd4:	2300      	movs	r3, #0
     fd6:	2210      	movs	r2, #16
     fd8:	fa5f f18a 	uxtb.w	r1, sl
     fdc:	4856      	ldr	r0, [pc, #344]	; (1138 <setup+0x368>)
     fde:	f002 ff75 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
     fe2:	f85b 9007 	ldr.w	r9, [fp, r7]
     fe6:	485a      	ldr	r0, [pc, #360]	; (1150 <setup+0x380>)
     fe8:	2101      	movs	r1, #1
     fea:	f003 ff9d 	bl	4f28 <usb_serial_write>
     fee:	2300      	movs	r3, #0
     ff0:	2210      	movs	r2, #16
     ff2:	ea4f 6119 	mov.w	r1, r9, lsr #24
     ff6:	4850      	ldr	r0, [pc, #320]	; (1138 <setup+0x368>)
     ff8:	f002 ff68 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ffc:	2101      	movs	r1, #1
     ffe:	4854      	ldr	r0, [pc, #336]	; (1150 <setup+0x380>)
    1000:	f003 ff92 	bl	4f28 <usb_serial_write>
    1004:	2300      	movs	r3, #0
    1006:	2210      	movs	r2, #16
    1008:	f3c9 4107 	ubfx	r1, r9, #16, #8
    100c:	484a      	ldr	r0, [pc, #296]	; (1138 <setup+0x368>)
    100e:	f002 ff5d 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1012:	2101      	movs	r1, #1
    1014:	484e      	ldr	r0, [pc, #312]	; (1150 <setup+0x380>)
    1016:	f003 ff87 	bl	4f28 <usb_serial_write>
    101a:	2300      	movs	r3, #0
    101c:	2210      	movs	r2, #16
    101e:	f3c9 2107 	ubfx	r1, r9, #8, #8
    1022:	4845      	ldr	r0, [pc, #276]	; (1138 <setup+0x368>)
    1024:	f002 ff52 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1028:	2101      	movs	r1, #1
    102a:	4849      	ldr	r0, [pc, #292]	; (1150 <setup+0x380>)
    102c:	f003 ff7c 	bl	4f28 <usb_serial_write>
    1030:	fa5f f189 	uxtb.w	r1, r9
    1034:	2300      	movs	r3, #0
    1036:	2210      	movs	r2, #16
    1038:	483f      	ldr	r0, [pc, #252]	; (1138 <setup+0x368>)
    103a:	f002 ff47 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    103e:	4842      	ldr	r0, [pc, #264]	; (1148 <setup+0x378>)
    1040:	2101      	movs	r1, #1
    1042:	f003 ff71 	bl	4f28 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1046:	483c      	ldr	r0, [pc, #240]	; (1138 <setup+0x368>)
    1048:	f002 ff1a 	bl	3e80 <Print::println()>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    104c:	4b41      	ldr	r3, [pc, #260]	; (1154 <setup+0x384>)
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	3401      	adds	r4, #1
    1052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1056:	b2e4      	uxtb	r4, r4
    1058:	3301      	adds	r3, #1
    105a:	429c      	cmp	r4, r3
    105c:	46a2      	mov	sl, r4
    105e:	f4ff af35 	bcc.w	ecc <setup+0xfc>
  Can1.begin();
    1062:	483d      	ldr	r0, [pc, #244]	; (1158 <setup+0x388>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    1064:	4c3d      	ldr	r4, [pc, #244]	; (115c <setup+0x38c>)
    1066:	f7ff fe1d 	bl	ca4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can1.setBaudRate(250000);
    106a:	493d      	ldr	r1, [pc, #244]	; (1160 <setup+0x390>)
    106c:	483a      	ldr	r0, [pc, #232]	; (1158 <setup+0x388>)
    106e:	2200      	movs	r2, #0
    1070:	f7ff faa8 	bl	5c4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    1074:	6823      	ldr	r3, [r4, #0]
    1076:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    107a:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    107c:	6823      	ldr	r3, [r4, #0]
    107e:	01d9      	lsls	r1, r3, #7
    1080:	d5fc      	bpl.n	107c <setup+0x2ac>
    1082:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
    1084:	6825      	ldr	r5, [r4, #0]
    1086:	f7ff fc67 	bl	958 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return FLEXCANb_IFLAG1(_bus);
    108a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
    108c:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
    108e:	6823      	ldr	r3, [r4, #0]
    1090:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1094:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
    1096:	6823      	ldr	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
    1098:	00aa      	lsls	r2, r5, #2
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
    109a:	f043 030f 	orr.w	r3, r3, #15
    109e:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
    10a0:	f100 83bf 	bmi.w	1822 <setup+0xa52>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    10a4:	4c2d      	ldr	r4, [pc, #180]	; (115c <setup+0x38c>)
    10a6:	6823      	ldr	r3, [r4, #0]
    10a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    10ac:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    10ae:	6823      	ldr	r3, [r4, #0]
    10b0:	01db      	lsls	r3, r3, #7
    10b2:	d4fc      	bmi.n	10ae <setup+0x2de>
  Can1.enableFIFO();
    10b4:	2001      	movs	r0, #1
    10b6:	f7ff fc4f 	bl	958 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
    10ba:	6823      	ldr	r3, [r4, #0]
    10bc:	009f      	lsls	r7, r3, #2
    10be:	d50a      	bpl.n	10d6 <setup+0x306>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
    10c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10c2:	069d      	lsls	r5, r3, #26
    10c4:	d407      	bmi.n	10d6 <setup+0x306>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
    10c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    10cc:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
    10ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10d0:	f043 0320 	orr.w	r3, r3, #32
    10d4:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    10d6:	4c21      	ldr	r4, [pc, #132]	; (115c <setup+0x38c>)
  _mainHandler = handler;
    10d8:	4a22      	ldr	r2, [pc, #136]	; (1164 <setup+0x394>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    10da:	6823      	ldr	r3, [r4, #0]
  _mainHandler = handler;
    10dc:	f8c2 6804 	str.w	r6, [r2, #2052]	; 0x804
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    10e0:	f013 5900 	ands.w	r9, r3, #536870912	; 0x20000000
    10e4:	f040 826b 	bne.w	15be <setup+0x7ee>
    10e8:	481f      	ldr	r0, [pc, #124]	; (1168 <setup+0x398>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    10ea:	4d20      	ldr	r5, [pc, #128]	; (116c <setup+0x39c>)
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    10ec:	4e20      	ldr	r6, [pc, #128]	; (1170 <setup+0x3a0>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    10ee:	4f21      	ldr	r7, [pc, #132]	; (1174 <setup+0x3a4>)
    10f0:	211a      	movs	r1, #26
    10f2:	f003 ff19 	bl	4f28 <usb_serial_write>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    10f6:	6823      	ldr	r3, [r4, #0]
    10f8:	464c      	mov	r4, r9
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    10fa:	eb04 0805 	add.w	r8, r4, r5
    10fe:	ea4f 1808 	mov.w	r8, r8, lsl #4
    1102:	f8d8 3000 	ldr.w	r3, [r8]
    1106:	f3c3 6303 	ubfx	r3, r3, #24, #4
    110a:	2b0e      	cmp	r3, #14
    110c:	f200 80c1 	bhi.w	1292 <setup+0x4c2>
    1110:	e8df f013 	tbh	[pc, r3, lsl #1]
    1114:	02310243 	.word	0x02310243
    1118:	00bf021f 	.word	0x00bf021f
    111c:	00bf0204 	.word	0x00bf0204
    1120:	00bf01f2 	.word	0x00bf01f2
    1124:	01a201b4 	.word	0x01a201b4
    1128:	00bf0190 	.word	0x00bf0190
    112c:	00bf0032 	.word	0x00bf0032
    1130:	017e      	.short	0x017e
    1132:	bf00      	nop
    1134:	0000c38c 	.word	0x0000c38c
    1138:	1fff0758 	.word	0x1fff0758
    113c:	0000c44c 	.word	0x0000c44c
    1140:	0000c46c 	.word	0x0000c46c
    1144:	0000c494 	.word	0x0000c494
    1148:	0000c3c8 	.word	0x0000c3c8
    114c:	0000c49c 	.word	0x0000c49c
    1150:	0000c330 	.word	0x0000c330
    1154:	40024000 	.word	0x40024000
    1158:	1fff3800 	.word	0x1fff3800
    115c:	400a4000 	.word	0x400a4000
    1160:	0003d090 	.word	0x0003d090
    1164:	1fff5800 	.word	0x1fff5800
    1168:	0000c4bc 	.word	0x0000c4bc
    116c:	0400a408 	.word	0x0400a408
    1170:	400a408c 	.word	0x400a408c
    1174:	bff5bf80 	.word	0xbff5bf80
    1178:	2104      	movs	r1, #4
    117a:	48c9      	ldr	r0, [pc, #804]	; (14a0 <setup+0x6d0>)
    117c:	f003 fed4 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1180:	2300      	movs	r3, #0
    1182:	4649      	mov	r1, r9
    1184:	220a      	movs	r2, #10
    1186:	48c7      	ldr	r0, [pc, #796]	; (14a4 <setup+0x6d4>)
    1188:	f002 fea0 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    118c:	48c6      	ldr	r0, [pc, #792]	; (14a8 <setup+0x6d8>)
    118e:	211d      	movs	r1, #29
    1190:	f003 feca 	bl	4f28 <usb_serial_write>
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    1194:	f8d8 3000 	ldr.w	r3, [r8]
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    1198:	029b      	lsls	r3, r3, #10
    119a:	f140 834b 	bpl.w	1834 <setup+0xa64>
    119e:	48c3      	ldr	r0, [pc, #780]	; (14ac <setup+0x6dc>)
    11a0:	2110      	movs	r1, #16
    11a2:	f003 fec1 	bl	4f28 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    11a6:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    11aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    11ae:	44b8      	add	r8, r7
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    11b0:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
    11b4:	2107      	movs	r1, #7
    11b6:	48be      	ldr	r0, [pc, #760]	; (14b0 <setup+0x6e0>)
    11b8:	f003 feb6 	bl	4f28 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    11bc:	2300      	movs	r3, #0
    11be:	2210      	movs	r2, #16
    11c0:	4651      	mov	r1, sl
    11c2:	48b8      	ldr	r0, [pc, #736]	; (14a4 <setup+0x6d4>)
    11c4:	f002 fe82 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    11c8:	2101      	movs	r1, #1
    11ca:	48ba      	ldr	r0, [pc, #744]	; (14b4 <setup+0x6e4>)
    11cc:	f003 feac 	bl	4f28 <usb_serial_write>
    11d0:	210a      	movs	r1, #10
    11d2:	48b9      	ldr	r0, [pc, #740]	; (14b8 <setup+0x6e8>)
    11d4:	f003 fea8 	bl	4f28 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    11d8:	2300      	movs	r3, #0
    11da:	2210      	movs	r2, #16
    11dc:	ea4f 6119 	mov.w	r1, r9, lsr #24
    11e0:	48b0      	ldr	r0, [pc, #704]	; (14a4 <setup+0x6d4>)
    11e2:	f002 fe73 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    11e6:	2101      	movs	r1, #1
    11e8:	48b4      	ldr	r0, [pc, #720]	; (14bc <setup+0x6ec>)
    11ea:	f003 fe9d 	bl	4f28 <usb_serial_write>
    11ee:	2300      	movs	r3, #0
    11f0:	2210      	movs	r2, #16
    11f2:	f3c9 4107 	ubfx	r1, r9, #16, #8
    11f6:	48ab      	ldr	r0, [pc, #684]	; (14a4 <setup+0x6d4>)
    11f8:	f002 fe68 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    11fc:	2101      	movs	r1, #1
    11fe:	48af      	ldr	r0, [pc, #700]	; (14bc <setup+0x6ec>)
    1200:	f003 fe92 	bl	4f28 <usb_serial_write>
    1204:	2300      	movs	r3, #0
    1206:	2210      	movs	r2, #16
    1208:	f3c9 2107 	ubfx	r1, r9, #8, #8
    120c:	48a5      	ldr	r0, [pc, #660]	; (14a4 <setup+0x6d4>)
    120e:	f002 fe5d 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1212:	2101      	movs	r1, #1
    1214:	48a9      	ldr	r0, [pc, #676]	; (14bc <setup+0x6ec>)
    1216:	f003 fe87 	bl	4f28 <usb_serial_write>
    121a:	2300      	movs	r3, #0
    121c:	2210      	movs	r2, #16
    121e:	fa5f f189 	uxtb.w	r1, r9
    1222:	48a0      	ldr	r0, [pc, #640]	; (14a4 <setup+0x6d4>)
    1224:	f002 fe52 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    1228:	f858 8006 	ldr.w	r8, [r8, r6]
    122c:	48a3      	ldr	r0, [pc, #652]	; (14bc <setup+0x6ec>)
    122e:	2101      	movs	r1, #1
    1230:	f003 fe7a 	bl	4f28 <usb_serial_write>
    1234:	2300      	movs	r3, #0
    1236:	2210      	movs	r2, #16
    1238:	ea4f 6118 	mov.w	r1, r8, lsr #24
    123c:	4899      	ldr	r0, [pc, #612]	; (14a4 <setup+0x6d4>)
    123e:	f002 fe45 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1242:	2101      	movs	r1, #1
    1244:	489d      	ldr	r0, [pc, #628]	; (14bc <setup+0x6ec>)
    1246:	f003 fe6f 	bl	4f28 <usb_serial_write>
    124a:	2300      	movs	r3, #0
    124c:	2210      	movs	r2, #16
    124e:	f3c8 4107 	ubfx	r1, r8, #16, #8
    1252:	4894      	ldr	r0, [pc, #592]	; (14a4 <setup+0x6d4>)
    1254:	f002 fe3a 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1258:	2101      	movs	r1, #1
    125a:	4898      	ldr	r0, [pc, #608]	; (14bc <setup+0x6ec>)
    125c:	f003 fe64 	bl	4f28 <usb_serial_write>
    1260:	2300      	movs	r3, #0
    1262:	2210      	movs	r2, #16
    1264:	f3c8 2107 	ubfx	r1, r8, #8, #8
    1268:	488e      	ldr	r0, [pc, #568]	; (14a4 <setup+0x6d4>)
    126a:	f002 fe2f 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    126e:	2101      	movs	r1, #1
    1270:	4892      	ldr	r0, [pc, #584]	; (14bc <setup+0x6ec>)
    1272:	f003 fe59 	bl	4f28 <usb_serial_write>
    1276:	fa5f f188 	uxtb.w	r1, r8
    127a:	2300      	movs	r3, #0
    127c:	2210      	movs	r2, #16
    127e:	4889      	ldr	r0, [pc, #548]	; (14a4 <setup+0x6d4>)
    1280:	f002 fe24 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1284:	488b      	ldr	r0, [pc, #556]	; (14b4 <setup+0x6e4>)
    1286:	2101      	movs	r1, #1
    1288:	f003 fe4e 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    128c:	4885      	ldr	r0, [pc, #532]	; (14a4 <setup+0x6d4>)
    128e:	f002 fdf7 	bl	3e80 <Print::println()>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    1292:	4b8b      	ldr	r3, [pc, #556]	; (14c0 <setup+0x6f0>)
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	3401      	adds	r4, #1
    1298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    129c:	b2e4      	uxtb	r4, r4
    129e:	3301      	adds	r3, #1
    12a0:	429c      	cmp	r4, r3
    12a2:	46a1      	mov	r9, r4
    12a4:	f4ff af29 	bcc.w	10fa <setup+0x32a>
  msg.id = CAN_ID;
    12a8:	4b86      	ldr	r3, [pc, #536]	; (14c4 <setup+0x6f4>)
    12aa:	4887      	ldr	r0, [pc, #540]	; (14c8 <setup+0x6f8>)
    12ac:	6018      	str	r0, [r3, #0]
  msg.len = 8;
    12ae:	2108      	movs	r1, #8
  msg.flags.extended = true;
    12b0:	2201      	movs	r2, #1
  msg.len = 8;
    12b2:	72d9      	strb	r1, [r3, #11]
  msg.flags.extended = true;
    12b4:	71da      	strb	r2, [r3, #7]
}
    12b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ba:	2104      	movs	r1, #4
    12bc:	4878      	ldr	r0, [pc, #480]	; (14a0 <setup+0x6d0>)
    12be:	f003 fe33 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    12c2:	4651      	mov	r1, sl
    12c4:	2300      	movs	r3, #0
    12c6:	220a      	movs	r2, #10
    12c8:	4876      	ldr	r0, [pc, #472]	; (14a4 <setup+0x6d4>)
    12ca:	f002 fdff 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    12ce:	2111      	movs	r1, #17
    12d0:	487e      	ldr	r0, [pc, #504]	; (14cc <setup+0x6fc>)
    12d2:	f003 fe29 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    12d6:	4873      	ldr	r0, [pc, #460]	; (14a4 <setup+0x6d4>)
    12d8:	f002 fdd2 	bl	3e80 <Print::println()>
    12dc:	e6b6      	b.n	104c <setup+0x27c>
    12de:	2104      	movs	r1, #4
    12e0:	486f      	ldr	r0, [pc, #444]	; (14a0 <setup+0x6d0>)
    12e2:	f003 fe21 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    12e6:	4651      	mov	r1, sl
    12e8:	2300      	movs	r3, #0
    12ea:	220a      	movs	r2, #10
    12ec:	486d      	ldr	r0, [pc, #436]	; (14a4 <setup+0x6d4>)
    12ee:	f002 fded 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    12f2:	2111      	movs	r1, #17
    12f4:	4876      	ldr	r0, [pc, #472]	; (14d0 <setup+0x700>)
    12f6:	f003 fe17 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    12fa:	486a      	ldr	r0, [pc, #424]	; (14a4 <setup+0x6d4>)
    12fc:	f002 fdc0 	bl	3e80 <Print::println()>
    1300:	e6a4      	b.n	104c <setup+0x27c>
    1302:	2104      	movs	r1, #4
    1304:	4866      	ldr	r0, [pc, #408]	; (14a0 <setup+0x6d0>)
    1306:	f003 fe0f 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    130a:	4651      	mov	r1, sl
    130c:	2300      	movs	r3, #0
    130e:	220a      	movs	r2, #10
    1310:	4864      	ldr	r0, [pc, #400]	; (14a4 <setup+0x6d4>)
    1312:	f002 fddb 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1316:	210f      	movs	r1, #15
    1318:	486e      	ldr	r0, [pc, #440]	; (14d4 <setup+0x704>)
    131a:	f003 fe05 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    131e:	4861      	ldr	r0, [pc, #388]	; (14a4 <setup+0x6d4>)
    1320:	f002 fdae 	bl	3e80 <Print::println()>
    1324:	e692      	b.n	104c <setup+0x27c>
    1326:	2104      	movs	r1, #4
    1328:	485d      	ldr	r0, [pc, #372]	; (14a0 <setup+0x6d0>)
    132a:	f003 fdfd 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    132e:	4651      	mov	r1, sl
    1330:	2300      	movs	r3, #0
    1332:	220a      	movs	r2, #10
    1334:	485b      	ldr	r0, [pc, #364]	; (14a4 <setup+0x6d4>)
    1336:	f002 fdc9 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    133a:	2112      	movs	r1, #18
    133c:	4866      	ldr	r0, [pc, #408]	; (14d8 <setup+0x708>)
    133e:	f003 fdf3 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1342:	4858      	ldr	r0, [pc, #352]	; (14a4 <setup+0x6d4>)
    1344:	f002 fd9c 	bl	3e80 <Print::println()>
    1348:	e680      	b.n	104c <setup+0x27c>
    134a:	2104      	movs	r1, #4
    134c:	4854      	ldr	r0, [pc, #336]	; (14a0 <setup+0x6d0>)
    134e:	f003 fdeb 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1352:	4651      	mov	r1, sl
    1354:	2300      	movs	r3, #0
    1356:	220a      	movs	r2, #10
    1358:	4852      	ldr	r0, [pc, #328]	; (14a4 <setup+0x6d4>)
    135a:	f002 fdb7 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    135e:	2111      	movs	r1, #17
    1360:	485e      	ldr	r0, [pc, #376]	; (14dc <setup+0x70c>)
    1362:	f003 fde1 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1366:	484f      	ldr	r0, [pc, #316]	; (14a4 <setup+0x6d4>)
    1368:	f002 fd8a 	bl	3e80 <Print::println()>
    136c:	e66e      	b.n	104c <setup+0x27c>
    136e:	2104      	movs	r1, #4
    1370:	484b      	ldr	r0, [pc, #300]	; (14a0 <setup+0x6d0>)
    1372:	f003 fdd9 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1376:	220a      	movs	r2, #10
    1378:	4651      	mov	r1, sl
    137a:	2300      	movs	r3, #0
    137c:	4849      	ldr	r0, [pc, #292]	; (14a4 <setup+0x6d4>)
    137e:	f002 fda5 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1382:	210f      	movs	r1, #15
    1384:	4856      	ldr	r0, [pc, #344]	; (14e0 <setup+0x710>)
    1386:	f003 fdcf 	bl	4f28 <usb_serial_write>
          (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    138a:	f8d9 3000 	ldr.w	r3, [r9]
    138e:	029b      	lsls	r3, r3, #10
    1390:	bf4c      	ite	mi
    1392:	4854      	ldrmi	r0, [pc, #336]	; (14e4 <setup+0x714>)
    1394:	4854      	ldrpl	r0, [pc, #336]	; (14e8 <setup+0x718>)
    1396:	2111      	movs	r1, #17
    1398:	f003 fdc6 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    139c:	4841      	ldr	r0, [pc, #260]	; (14a4 <setup+0x6d4>)
    139e:	f002 fd6f 	bl	3e80 <Print::println()>
    13a2:	e653      	b.n	104c <setup+0x27c>
    13a4:	2104      	movs	r1, #4
    13a6:	483e      	ldr	r0, [pc, #248]	; (14a0 <setup+0x6d0>)
    13a8:	f003 fdbe 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    13ac:	4651      	mov	r1, sl
    13ae:	2300      	movs	r3, #0
    13b0:	220a      	movs	r2, #10
    13b2:	483c      	ldr	r0, [pc, #240]	; (14a4 <setup+0x6d4>)
    13b4:	f002 fd8a 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    13b8:	210e      	movs	r1, #14
    13ba:	484c      	ldr	r0, [pc, #304]	; (14ec <setup+0x71c>)
    13bc:	f003 fdb4 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    13c0:	4838      	ldr	r0, [pc, #224]	; (14a4 <setup+0x6d4>)
    13c2:	f002 fd5d 	bl	3e80 <Print::println()>
    13c6:	e641      	b.n	104c <setup+0x27c>
    13c8:	2104      	movs	r1, #4
    13ca:	4835      	ldr	r0, [pc, #212]	; (14a0 <setup+0x6d0>)
    13cc:	f003 fdac 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    13d0:	4651      	mov	r1, sl
    13d2:	2300      	movs	r3, #0
    13d4:	220a      	movs	r2, #10
    13d6:	4833      	ldr	r0, [pc, #204]	; (14a4 <setup+0x6d4>)
    13d8:	f002 fd78 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    13dc:	210e      	movs	r1, #14
    13de:	4844      	ldr	r0, [pc, #272]	; (14f0 <setup+0x720>)
    13e0:	f003 fda2 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    13e4:	482f      	ldr	r0, [pc, #188]	; (14a4 <setup+0x6d4>)
    13e6:	f002 fd4b 	bl	3e80 <Print::println()>
    13ea:	e62f      	b.n	104c <setup+0x27c>
    13ec:	2104      	movs	r1, #4
    13ee:	482c      	ldr	r0, [pc, #176]	; (14a0 <setup+0x6d0>)
    13f0:	f003 fd9a 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    13f4:	4651      	mov	r1, sl
    13f6:	2300      	movs	r3, #0
    13f8:	220a      	movs	r2, #10
    13fa:	482a      	ldr	r0, [pc, #168]	; (14a4 <setup+0x6d4>)
    13fc:	f002 fd66 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1400:	2112      	movs	r1, #18
    1402:	483c      	ldr	r0, [pc, #240]	; (14f4 <setup+0x724>)
    1404:	f003 fd90 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1408:	4826      	ldr	r0, [pc, #152]	; (14a4 <setup+0x6d4>)
    140a:	f002 fd39 	bl	3e80 <Print::println()>
    140e:	e61d      	b.n	104c <setup+0x27c>
    1410:	2104      	movs	r1, #4
    1412:	4823      	ldr	r0, [pc, #140]	; (14a0 <setup+0x6d0>)
    1414:	f003 fd88 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1418:	4649      	mov	r1, r9
    141a:	2300      	movs	r3, #0
    141c:	220a      	movs	r2, #10
    141e:	4821      	ldr	r0, [pc, #132]	; (14a4 <setup+0x6d4>)
    1420:	f002 fd54 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1424:	2111      	movs	r1, #17
    1426:	4829      	ldr	r0, [pc, #164]	; (14cc <setup+0x6fc>)
    1428:	f003 fd7e 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    142c:	481d      	ldr	r0, [pc, #116]	; (14a4 <setup+0x6d4>)
    142e:	f002 fd27 	bl	3e80 <Print::println()>
    1432:	e72e      	b.n	1292 <setup+0x4c2>
    1434:	2104      	movs	r1, #4
    1436:	481a      	ldr	r0, [pc, #104]	; (14a0 <setup+0x6d0>)
    1438:	f003 fd76 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    143c:	4649      	mov	r1, r9
    143e:	2300      	movs	r3, #0
    1440:	220a      	movs	r2, #10
    1442:	4818      	ldr	r0, [pc, #96]	; (14a4 <setup+0x6d4>)
    1444:	f002 fd42 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1448:	2111      	movs	r1, #17
    144a:	4821      	ldr	r0, [pc, #132]	; (14d0 <setup+0x700>)
    144c:	f003 fd6c 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1450:	4814      	ldr	r0, [pc, #80]	; (14a4 <setup+0x6d4>)
    1452:	f002 fd15 	bl	3e80 <Print::println()>
    1456:	e71c      	b.n	1292 <setup+0x4c2>
    1458:	2104      	movs	r1, #4
    145a:	4811      	ldr	r0, [pc, #68]	; (14a0 <setup+0x6d0>)
    145c:	f003 fd64 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1460:	4649      	mov	r1, r9
    1462:	2300      	movs	r3, #0
    1464:	220a      	movs	r2, #10
    1466:	480f      	ldr	r0, [pc, #60]	; (14a4 <setup+0x6d4>)
    1468:	f002 fd30 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    146c:	210f      	movs	r1, #15
    146e:	4819      	ldr	r0, [pc, #100]	; (14d4 <setup+0x704>)
    1470:	f003 fd5a 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1474:	480b      	ldr	r0, [pc, #44]	; (14a4 <setup+0x6d4>)
    1476:	f002 fd03 	bl	3e80 <Print::println()>
    147a:	e70a      	b.n	1292 <setup+0x4c2>
    147c:	2104      	movs	r1, #4
    147e:	4808      	ldr	r0, [pc, #32]	; (14a0 <setup+0x6d0>)
    1480:	f003 fd52 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1484:	4649      	mov	r1, r9
    1486:	2300      	movs	r3, #0
    1488:	220a      	movs	r2, #10
    148a:	4806      	ldr	r0, [pc, #24]	; (14a4 <setup+0x6d4>)
    148c:	f002 fd1e 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1490:	2112      	movs	r1, #18
    1492:	4811      	ldr	r0, [pc, #68]	; (14d8 <setup+0x708>)
    1494:	f003 fd48 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1498:	4802      	ldr	r0, [pc, #8]	; (14a4 <setup+0x6d4>)
    149a:	f002 fcf1 	bl	3e80 <Print::println()>
    149e:	e6f8      	b.n	1292 <setup+0x4c2>
    14a0:	0000c38c 	.word	0x0000c38c
    14a4:	1fff0758 	.word	0x1fff0758
    14a8:	0000c44c 	.word	0x0000c44c
    14ac:	0000c46c 	.word	0x0000c46c
    14b0:	0000c494 	.word	0x0000c494
    14b4:	0000c3c8 	.word	0x0000c3c8
    14b8:	0000c49c 	.word	0x0000c49c
    14bc:	0000c330 	.word	0x0000c330
    14c0:	400a4000 	.word	0x400a4000
    14c4:	1fff0738 	.word	0x1fff0738
    14c8:	19f21139 	.word	0x19f21139
    14cc:	0000c4a8 	.word	0x0000c4a8
    14d0:	0000c404 	.word	0x0000c404
    14d4:	0000c43c 	.word	0x0000c43c
    14d8:	0000c428 	.word	0x0000c428
    14dc:	0000c3f0 	.word	0x0000c3f0
    14e0:	0000c3a8 	.word	0x0000c3a8
    14e4:	0000c3b8 	.word	0x0000c3b8
    14e8:	0000c3cc 	.word	0x0000c3cc
    14ec:	0000c3e0 	.word	0x0000c3e0
    14f0:	0000c418 	.word	0x0000c418
    14f4:	0000c394 	.word	0x0000c394
    14f8:	2104      	movs	r1, #4
    14fa:	4874      	ldr	r0, [pc, #464]	; (16cc <setup+0x8fc>)
    14fc:	f003 fd14 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1500:	4649      	mov	r1, r9
    1502:	2300      	movs	r3, #0
    1504:	220a      	movs	r2, #10
    1506:	4872      	ldr	r0, [pc, #456]	; (16d0 <setup+0x900>)
    1508:	f002 fce0 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    150c:	2111      	movs	r1, #17
    150e:	4871      	ldr	r0, [pc, #452]	; (16d4 <setup+0x904>)
    1510:	f003 fd0a 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1514:	486e      	ldr	r0, [pc, #440]	; (16d0 <setup+0x900>)
    1516:	f002 fcb3 	bl	3e80 <Print::println()>
    151a:	e6ba      	b.n	1292 <setup+0x4c2>
    151c:	2104      	movs	r1, #4
    151e:	486b      	ldr	r0, [pc, #428]	; (16cc <setup+0x8fc>)
    1520:	f003 fd02 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1524:	220a      	movs	r2, #10
    1526:	4649      	mov	r1, r9
    1528:	2300      	movs	r3, #0
    152a:	4869      	ldr	r0, [pc, #420]	; (16d0 <setup+0x900>)
    152c:	f002 fcce 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1530:	210f      	movs	r1, #15
    1532:	4869      	ldr	r0, [pc, #420]	; (16d8 <setup+0x908>)
    1534:	f003 fcf8 	bl	4f28 <usb_serial_write>
    1538:	f8d8 3000 	ldr.w	r3, [r8]
    153c:	029a      	lsls	r2, r3, #10
    153e:	bf4c      	ite	mi
    1540:	4866      	ldrmi	r0, [pc, #408]	; (16dc <setup+0x90c>)
    1542:	4867      	ldrpl	r0, [pc, #412]	; (16e0 <setup+0x910>)
    1544:	2111      	movs	r1, #17
    1546:	f003 fcef 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    154a:	4861      	ldr	r0, [pc, #388]	; (16d0 <setup+0x900>)
    154c:	f002 fc98 	bl	3e80 <Print::println()>
    1550:	e69f      	b.n	1292 <setup+0x4c2>
    1552:	2104      	movs	r1, #4
    1554:	485d      	ldr	r0, [pc, #372]	; (16cc <setup+0x8fc>)
    1556:	f003 fce7 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    155a:	4649      	mov	r1, r9
    155c:	2300      	movs	r3, #0
    155e:	220a      	movs	r2, #10
    1560:	485b      	ldr	r0, [pc, #364]	; (16d0 <setup+0x900>)
    1562:	f002 fcb3 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1566:	210e      	movs	r1, #14
    1568:	485e      	ldr	r0, [pc, #376]	; (16e4 <setup+0x914>)
    156a:	f003 fcdd 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    156e:	4858      	ldr	r0, [pc, #352]	; (16d0 <setup+0x900>)
    1570:	f002 fc86 	bl	3e80 <Print::println()>
    1574:	e68d      	b.n	1292 <setup+0x4c2>
    1576:	2104      	movs	r1, #4
    1578:	4854      	ldr	r0, [pc, #336]	; (16cc <setup+0x8fc>)
    157a:	f003 fcd5 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    157e:	4649      	mov	r1, r9
    1580:	2300      	movs	r3, #0
    1582:	220a      	movs	r2, #10
    1584:	4852      	ldr	r0, [pc, #328]	; (16d0 <setup+0x900>)
    1586:	f002 fca1 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    158a:	210e      	movs	r1, #14
    158c:	4856      	ldr	r0, [pc, #344]	; (16e8 <setup+0x918>)
    158e:	f003 fccb 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1592:	484f      	ldr	r0, [pc, #316]	; (16d0 <setup+0x900>)
    1594:	f002 fc74 	bl	3e80 <Print::println()>
    1598:	e67b      	b.n	1292 <setup+0x4c2>
    159a:	2104      	movs	r1, #4
    159c:	484b      	ldr	r0, [pc, #300]	; (16cc <setup+0x8fc>)
    159e:	f003 fcc3 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    15a2:	4649      	mov	r1, r9
    15a4:	2300      	movs	r3, #0
    15a6:	220a      	movs	r2, #10
    15a8:	4849      	ldr	r0, [pc, #292]	; (16d0 <setup+0x900>)
    15aa:	f002 fc8f 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    15ae:	2112      	movs	r1, #18
    15b0:	484e      	ldr	r0, [pc, #312]	; (16ec <setup+0x91c>)
    15b2:	f003 fcb9 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    15b6:	4846      	ldr	r0, [pc, #280]	; (16d0 <setup+0x900>)
    15b8:	f002 fc62 	bl	3e80 <Print::println()>
    15bc:	e669      	b.n	1292 <setup+0x4c2>
    15be:	2111      	movs	r1, #17
    15c0:	484b      	ldr	r0, [pc, #300]	; (16f0 <setup+0x920>)
    15c2:	f003 fcb1 	bl	4f28 <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    15c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15c8:	069c      	lsls	r4, r3, #26
    15ca:	bf4b      	itete	mi
    15cc:	2111      	movmi	r1, #17
    15ce:	2112      	movpl	r1, #18
    15d0:	4848      	ldrmi	r0, [pc, #288]	; (16f4 <setup+0x924>)
    15d2:	4849      	ldrpl	r0, [pc, #292]	; (16f8 <setup+0x928>)
    15d4:	f003 fca8 	bl	4f28 <usb_serial_write>
    15d8:	483d      	ldr	r0, [pc, #244]	; (16d0 <setup+0x900>)
    15da:	f002 fc51 	bl	3e80 <Print::println()>
    15de:	2116      	movs	r1, #22
    15e0:	4846      	ldr	r0, [pc, #280]	; (16fc <setup+0x92c>)
    15e2:	f003 fca1 	bl	4f28 <usb_serial_write>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    15e6:	4a46      	ldr	r2, [pc, #280]	; (1700 <setup+0x930>)
    15e8:	6814      	ldr	r4, [r2, #0]
    15ea:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    15ec:	6813      	ldr	r3, [r2, #0]
    15ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
    15f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    15f4:	f3c2 6203 	ubfx	r2, r2, #24, #4
    15f8:	3301      	adds	r3, #1
    15fa:	3204      	adds	r2, #4
    15fc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    1600:	f0c0 8414 	bcc.w	1e2c <setup+0x105c>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    1604:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1608:	f3c1 6103 	ubfx	r1, r1, #24, #4
    160c:	3c05      	subs	r4, #5
    160e:	3101      	adds	r1, #1
    1610:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    1614:	b2e5      	uxtb	r5, r4
    1616:	4e3a      	ldr	r6, [pc, #232]	; (1700 <setup+0x930>)
	size_t print(int n)				{ return print((long)n); }
    1618:	482d      	ldr	r0, [pc, #180]	; (16d0 <setup+0x900>)
    161a:	6831      	ldr	r1, [r6, #0]
    161c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    1620:	3101      	adds	r1, #1
    1622:	1b49      	subs	r1, r1, r5
    1624:	b2c9      	uxtb	r1, r1
    1626:	2920      	cmp	r1, #32
    1628:	bfa8      	it	ge
    162a:	2120      	movge	r1, #32
    162c:	f002 fc20 	bl	3e70 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1630:	4827      	ldr	r0, [pc, #156]	; (16d0 <setup+0x900>)
    1632:	f002 fc25 	bl	3e80 <Print::println()>
    1636:	2116      	movs	r1, #22
    1638:	4832      	ldr	r0, [pc, #200]	; (1704 <setup+0x934>)
    163a:	f003 fc75 	bl	4f28 <usb_serial_write>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    163e:	6833      	ldr	r3, [r6, #0]
    1640:	6b72      	ldr	r2, [r6, #52]	; 0x34
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1642:	4823      	ldr	r0, [pc, #140]	; (16d0 <setup+0x900>)
    1644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1648:	f3c2 6203 	ubfx	r2, r2, #24, #4
    164c:	3301      	adds	r3, #1
    164e:	3204      	adds	r2, #4
    1650:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    1654:	bf38      	it	cc
    1656:	2400      	movcc	r4, #0
    1658:	f04f 0300 	mov.w	r3, #0
    165c:	4621      	mov	r1, r4
    165e:	f04f 020a 	mov.w	r2, #10
    1662:	bf38      	it	cc
    1664:	4625      	movcc	r5, r4
    1666:	f002 fc31 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    166a:	4819      	ldr	r0, [pc, #100]	; (16d0 <setup+0x900>)
    166c:	f002 fc08 	bl	3e80 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    1670:	4b23      	ldr	r3, [pc, #140]	; (1700 <setup+0x930>)
    1672:	681c      	ldr	r4, [r3, #0]
    1674:	681b      	ldr	r3, [r3, #0]
    1676:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    167a:	3401      	adds	r4, #1
    167c:	1b64      	subs	r4, r4, r5
    167e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1682:	b2e4      	uxtb	r4, r4
    1684:	3301      	adds	r3, #1
    1686:	42a3      	cmp	r3, r4
    1688:	f67f ae0e 	bls.w	12a8 <setup+0x4d8>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    168c:	4d1e      	ldr	r5, [pc, #120]	; (1708 <setup+0x938>)
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    168e:	4e1f      	ldr	r6, [pc, #124]	; (170c <setup+0x93c>)
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1690:	4f1f      	ldr	r7, [pc, #124]	; (1710 <setup+0x940>)
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    1692:	eb04 0805 	add.w	r8, r4, r5
    1696:	ea4f 1808 	mov.w	r8, r8, lsl #4
    169a:	f8d8 3000 	ldr.w	r3, [r8]
    169e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    16a2:	2b0e      	cmp	r3, #14
    16a4:	f200 82e2 	bhi.w	1c6c <setup+0xe9c>
    16a8:	e8df f013 	tbh	[pc, r3, lsl #1]
    16ac:	033d034f 	.word	0x033d034f
    16b0:	02e0032b 	.word	0x02e0032b
    16b4:	02e00310 	.word	0x02e00310
    16b8:	02e0039c 	.word	0x02e0039c
    16bc:	03ae0361 	.word	0x03ae0361
    16c0:	02e002fe 	.word	0x02e002fe
    16c4:	02e00253 	.word	0x02e00253
    16c8:	02ec      	.short	0x02ec
    16ca:	bf00      	nop
    16cc:	0000c38c 	.word	0x0000c38c
    16d0:	1fff0758 	.word	0x1fff0758
    16d4:	0000c3f0 	.word	0x0000c3f0
    16d8:	0000c3a8 	.word	0x0000c3a8
    16dc:	0000c3b8 	.word	0x0000c3b8
    16e0:	0000c3cc 	.word	0x0000c3cc
    16e4:	0000c3e0 	.word	0x0000c3e0
    16e8:	0000c418 	.word	0x0000c418
    16ec:	0000c394 	.word	0x0000c394
    16f0:	0000c320 	.word	0x0000c320
    16f4:	0000c334 	.word	0x0000c334
    16f8:	0000c348 	.word	0x0000c348
    16fc:	0000c35c 	.word	0x0000c35c
    1700:	400a4000 	.word	0x400a4000
    1704:	0000c374 	.word	0x0000c374
    1708:	0400a408 	.word	0x0400a408
    170c:	400a408c 	.word	0x400a408c
    1710:	bff5bf80 	.word	0xbff5bf80
    1714:	2111      	movs	r1, #17
    1716:	48c0      	ldr	r0, [pc, #768]	; (1a18 <setup+0xc48>)
    1718:	f003 fc06 	bl	4f28 <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    171c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171e:	069c      	lsls	r4, r3, #26
    1720:	bf4b      	itete	mi
    1722:	2111      	movmi	r1, #17
    1724:	2112      	movpl	r1, #18
    1726:	48bd      	ldrmi	r0, [pc, #756]	; (1a1c <setup+0xc4c>)
    1728:	48bd      	ldrpl	r0, [pc, #756]	; (1a20 <setup+0xc50>)
    172a:	f003 fbfd 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    172e:	48bd      	ldr	r0, [pc, #756]	; (1a24 <setup+0xc54>)
    1730:	f002 fba6 	bl	3e80 <Print::println()>
    1734:	2116      	movs	r1, #22
    1736:	48bc      	ldr	r0, [pc, #752]	; (1a28 <setup+0xc58>)
    1738:	f003 fbf6 	bl	4f28 <usb_serial_write>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    173c:	4abb      	ldr	r2, [pc, #748]	; (1a2c <setup+0xc5c>)
    173e:	6814      	ldr	r4, [r2, #0]
    1740:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1742:	6813      	ldr	r3, [r2, #0]
    1744:	6b52      	ldr	r2, [r2, #52]	; 0x34
    1746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    174a:	f3c2 6203 	ubfx	r2, r2, #24, #4
    174e:	3301      	adds	r3, #1
    1750:	3204      	adds	r2, #4
    1752:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    1756:	f0c0 81f9 	bcc.w	1b4c <setup+0xd7c>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    175a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    175e:	f3c1 6103 	ubfx	r1, r1, #24, #4
    1762:	3c05      	subs	r4, #5
    1764:	3101      	adds	r1, #1
    1766:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    176a:	b2e5      	uxtb	r5, r4
    176c:	4faf      	ldr	r7, [pc, #700]	; (1a2c <setup+0xc5c>)
	size_t print(int n)				{ return print((long)n); }
    176e:	48ad      	ldr	r0, [pc, #692]	; (1a24 <setup+0xc54>)
    1770:	6839      	ldr	r1, [r7, #0]
    1772:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    1776:	3101      	adds	r1, #1
    1778:	1b49      	subs	r1, r1, r5
    177a:	b2c9      	uxtb	r1, r1
    177c:	2920      	cmp	r1, #32
    177e:	bfa8      	it	ge
    1780:	2120      	movge	r1, #32
    1782:	f002 fb75 	bl	3e70 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1786:	48a7      	ldr	r0, [pc, #668]	; (1a24 <setup+0xc54>)
    1788:	f002 fb7a 	bl	3e80 <Print::println()>
    178c:	2116      	movs	r1, #22
    178e:	48a8      	ldr	r0, [pc, #672]	; (1a30 <setup+0xc60>)
    1790:	f003 fbca 	bl	4f28 <usb_serial_write>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1798:	48a2      	ldr	r0, [pc, #648]	; (1a24 <setup+0xc54>)
    179a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    179e:	f3c2 6203 	ubfx	r2, r2, #24, #4
    17a2:	3301      	adds	r3, #1
    17a4:	3204      	adds	r2, #4
    17a6:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    17aa:	bf38      	it	cc
    17ac:	2400      	movcc	r4, #0
    17ae:	f04f 0300 	mov.w	r3, #0
    17b2:	4621      	mov	r1, r4
    17b4:	f04f 020a 	mov.w	r2, #10
    17b8:	bf38      	it	cc
    17ba:	4625      	movcc	r5, r4
    17bc:	f002 fb86 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    17c0:	4898      	ldr	r0, [pc, #608]	; (1a24 <setup+0xc54>)
    17c2:	f002 fb5d 	bl	3e80 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    17c6:	4b99      	ldr	r3, [pc, #612]	; (1a2c <setup+0xc5c>)
    17c8:	681c      	ldr	r4, [r3, #0]
    17ca:	681b      	ldr	r3, [r3, #0]
    17cc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    17d0:	3401      	adds	r4, #1
    17d2:	1b64      	subs	r4, r4, r5
    17d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    17d8:	b2e4      	uxtb	r4, r4
    17da:	3301      	adds	r3, #1
    17dc:	42a3      	cmp	r3, r4
    17de:	f67f ac40 	bls.w	1062 <setup+0x292>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    17e2:	4d94      	ldr	r5, [pc, #592]	; (1a34 <setup+0xc64>)
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    17e4:	4f94      	ldr	r7, [pc, #592]	; (1a38 <setup+0xc68>)
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    17e6:	f8df 8288 	ldr.w	r8, [pc, #648]	; 1a70 <setup+0xca0>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    17ea:	eb04 0905 	add.w	r9, r4, r5
    17ee:	ea4f 1909 	mov.w	r9, r9, lsl #4
    17f2:	f8d9 3000 	ldr.w	r3, [r9]
    17f6:	f3c3 6303 	ubfx	r3, r3, #24, #4
    17fa:	2b0e      	cmp	r3, #14
    17fc:	f200 80c1 	bhi.w	1982 <setup+0xbb2>
    1800:	e8df f013 	tbh	[pc, r3, lsl #1]
    1804:	014a015c 	.word	0x014a015c
    1808:	00bf0138 	.word	0x00bf0138
    180c:	00bf00ef 	.word	0x00bf00ef
    1810:	00bf0180 	.word	0x00bf0180
    1814:	0192016e 	.word	0x0192016e
    1818:	00bf00dd 	.word	0x00bf00dd
    181c:	00bf0032 	.word	0x00bf0032
    1820:	00cb      	.short	0x00cb
  if ( fifo_was_cleared ) enableFIFO();
    1822:	2001      	movs	r0, #1
    1824:	f7ff f898 	bl	958 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
    1828:	e43c      	b.n	10a4 <setup+0x2d4>
    182a:	2001      	movs	r0, #1
    182c:	f7fe ffc8 	bl	7c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
    1830:	f7ff bb1f 	b.w	e72 <setup+0xa2>
    1834:	4881      	ldr	r0, [pc, #516]	; (1a3c <setup+0xc6c>)
    1836:	2110      	movs	r1, #16
    1838:	f003 fb76 	bl	4f28 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    183c:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1840:	f8d8 3004 	ldr.w	r3, [r8, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1844:	44b8      	add	r8, r7
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    1846:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    184a:	e4b3      	b.n	11b4 <setup+0x3e4>
    184c:	487b      	ldr	r0, [pc, #492]	; (1a3c <setup+0xc6c>)
    184e:	2110      	movs	r1, #16
    1850:	f003 fb6a 	bl	4f28 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1854:	f8d9 a008 	ldr.w	sl, [r9, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1858:	f8d9 3004 	ldr.w	r3, [r9, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    185c:	eb09 0b08 	add.w	fp, r9, r8
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    1860:	f3c3 498a 	ubfx	r9, r3, #18, #11
    1864:	f7ff bb83 	b.w	f6e <setup+0x19e>
    1868:	2104      	movs	r1, #4
    186a:	4875      	ldr	r0, [pc, #468]	; (1a40 <setup+0xc70>)
    186c:	f003 fb5c 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1870:	2300      	movs	r3, #0
    1872:	220a      	movs	r2, #10
    1874:	4621      	mov	r1, r4
    1876:	486b      	ldr	r0, [pc, #428]	; (1a24 <setup+0xc54>)
    1878:	f002 fb28 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    187c:	4871      	ldr	r0, [pc, #452]	; (1a44 <setup+0xc74>)
    187e:	211d      	movs	r1, #29
    1880:	f003 fb52 	bl	4f28 <usb_serial_write>
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    1884:	f8d9 3000 	ldr.w	r3, [r9]
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    1888:	029a      	lsls	r2, r3, #10
    188a:	f140 82df 	bpl.w	1e4c <setup+0x107c>
    188e:	486e      	ldr	r0, [pc, #440]	; (1a48 <setup+0xc78>)
    1890:	2110      	movs	r1, #16
    1892:	f003 fb49 	bl	4f28 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1896:	f8d9 a008 	ldr.w	sl, [r9, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    189a:	f8d9 3004 	ldr.w	r3, [r9, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    189e:	44c1      	add	r9, r8
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    18a0:	f023 4b60 	bic.w	fp, r3, #3758096384	; 0xe0000000
    18a4:	2107      	movs	r1, #7
    18a6:	4869      	ldr	r0, [pc, #420]	; (1a4c <setup+0xc7c>)
    18a8:	f003 fb3e 	bl	4f28 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    18ac:	2300      	movs	r3, #0
    18ae:	2210      	movs	r2, #16
    18b0:	4659      	mov	r1, fp
    18b2:	485c      	ldr	r0, [pc, #368]	; (1a24 <setup+0xc54>)
    18b4:	f002 fb0a 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18b8:	2101      	movs	r1, #1
    18ba:	4865      	ldr	r0, [pc, #404]	; (1a50 <setup+0xc80>)
    18bc:	f003 fb34 	bl	4f28 <usb_serial_write>
    18c0:	210a      	movs	r1, #10
    18c2:	4864      	ldr	r0, [pc, #400]	; (1a54 <setup+0xc84>)
    18c4:	f003 fb30 	bl	4f28 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    18c8:	2300      	movs	r3, #0
    18ca:	2210      	movs	r2, #16
    18cc:	ea4f 611a 	mov.w	r1, sl, lsr #24
    18d0:	4854      	ldr	r0, [pc, #336]	; (1a24 <setup+0xc54>)
    18d2:	f002 fafb 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18d6:	2101      	movs	r1, #1
    18d8:	485f      	ldr	r0, [pc, #380]	; (1a58 <setup+0xc88>)
    18da:	f003 fb25 	bl	4f28 <usb_serial_write>
    18de:	2300      	movs	r3, #0
    18e0:	2210      	movs	r2, #16
    18e2:	f3ca 4107 	ubfx	r1, sl, #16, #8
    18e6:	484f      	ldr	r0, [pc, #316]	; (1a24 <setup+0xc54>)
    18e8:	f002 faf0 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18ec:	2101      	movs	r1, #1
    18ee:	485a      	ldr	r0, [pc, #360]	; (1a58 <setup+0xc88>)
    18f0:	f003 fb1a 	bl	4f28 <usb_serial_write>
    18f4:	2300      	movs	r3, #0
    18f6:	2210      	movs	r2, #16
    18f8:	f3ca 2107 	ubfx	r1, sl, #8, #8
    18fc:	4849      	ldr	r0, [pc, #292]	; (1a24 <setup+0xc54>)
    18fe:	f002 fae5 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1902:	2101      	movs	r1, #1
    1904:	4854      	ldr	r0, [pc, #336]	; (1a58 <setup+0xc88>)
    1906:	f003 fb0f 	bl	4f28 <usb_serial_write>
    190a:	2300      	movs	r3, #0
    190c:	2210      	movs	r2, #16
    190e:	fa5f f18a 	uxtb.w	r1, sl
    1912:	4844      	ldr	r0, [pc, #272]	; (1a24 <setup+0xc54>)
    1914:	f002 fada 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    1918:	f859 9007 	ldr.w	r9, [r9, r7]
    191c:	484e      	ldr	r0, [pc, #312]	; (1a58 <setup+0xc88>)
    191e:	2101      	movs	r1, #1
    1920:	f003 fb02 	bl	4f28 <usb_serial_write>
    1924:	2300      	movs	r3, #0
    1926:	2210      	movs	r2, #16
    1928:	ea4f 6119 	mov.w	r1, r9, lsr #24
    192c:	483d      	ldr	r0, [pc, #244]	; (1a24 <setup+0xc54>)
    192e:	f002 facd 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1932:	2101      	movs	r1, #1
    1934:	4848      	ldr	r0, [pc, #288]	; (1a58 <setup+0xc88>)
    1936:	f003 faf7 	bl	4f28 <usb_serial_write>
    193a:	2300      	movs	r3, #0
    193c:	2210      	movs	r2, #16
    193e:	f3c9 4107 	ubfx	r1, r9, #16, #8
    1942:	4838      	ldr	r0, [pc, #224]	; (1a24 <setup+0xc54>)
    1944:	f002 fac2 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1948:	2101      	movs	r1, #1
    194a:	4843      	ldr	r0, [pc, #268]	; (1a58 <setup+0xc88>)
    194c:	f003 faec 	bl	4f28 <usb_serial_write>
    1950:	2300      	movs	r3, #0
    1952:	2210      	movs	r2, #16
    1954:	f3c9 2107 	ubfx	r1, r9, #8, #8
    1958:	4832      	ldr	r0, [pc, #200]	; (1a24 <setup+0xc54>)
    195a:	f002 fab7 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    195e:	2101      	movs	r1, #1
    1960:	483d      	ldr	r0, [pc, #244]	; (1a58 <setup+0xc88>)
    1962:	f003 fae1 	bl	4f28 <usb_serial_write>
    1966:	fa5f f189 	uxtb.w	r1, r9
    196a:	2300      	movs	r3, #0
    196c:	2210      	movs	r2, #16
    196e:	482d      	ldr	r0, [pc, #180]	; (1a24 <setup+0xc54>)
    1970:	f002 faac 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1974:	4836      	ldr	r0, [pc, #216]	; (1a50 <setup+0xc80>)
    1976:	2101      	movs	r1, #1
    1978:	f003 fad6 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    197c:	4829      	ldr	r0, [pc, #164]	; (1a24 <setup+0xc54>)
    197e:	f002 fa7f 	bl	3e80 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    1982:	4b2a      	ldr	r3, [pc, #168]	; (1a2c <setup+0xc5c>)
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	3401      	adds	r4, #1
    1988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    198c:	b2e4      	uxtb	r4, r4
    198e:	3301      	adds	r3, #1
    1990:	429c      	cmp	r4, r3
    1992:	f4ff af2a 	bcc.w	17ea <setup+0xa1a>
    1996:	f7ff bb64 	b.w	1062 <setup+0x292>
    199a:	2104      	movs	r1, #4
    199c:	4828      	ldr	r0, [pc, #160]	; (1a40 <setup+0xc70>)
    199e:	f003 fac3 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    19a2:	2300      	movs	r3, #0
    19a4:	220a      	movs	r2, #10
    19a6:	4621      	mov	r1, r4
    19a8:	481e      	ldr	r0, [pc, #120]	; (1a24 <setup+0xc54>)
    19aa:	f002 fa8f 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19ae:	2111      	movs	r1, #17
    19b0:	482a      	ldr	r0, [pc, #168]	; (1a5c <setup+0xc8c>)
    19b2:	f003 fab9 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    19b6:	481b      	ldr	r0, [pc, #108]	; (1a24 <setup+0xc54>)
    19b8:	f002 fa62 	bl	3e80 <Print::println()>
    19bc:	e7e1      	b.n	1982 <setup+0xbb2>
    19be:	2104      	movs	r1, #4
    19c0:	481f      	ldr	r0, [pc, #124]	; (1a40 <setup+0xc70>)
    19c2:	f003 fab1 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    19c6:	2300      	movs	r3, #0
    19c8:	220a      	movs	r2, #10
    19ca:	4621      	mov	r1, r4
    19cc:	4815      	ldr	r0, [pc, #84]	; (1a24 <setup+0xc54>)
    19ce:	f002 fa7d 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19d2:	2111      	movs	r1, #17
    19d4:	4822      	ldr	r0, [pc, #136]	; (1a60 <setup+0xc90>)
    19d6:	f003 faa7 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    19da:	4812      	ldr	r0, [pc, #72]	; (1a24 <setup+0xc54>)
    19dc:	f002 fa50 	bl	3e80 <Print::println()>
    19e0:	e7cf      	b.n	1982 <setup+0xbb2>
    19e2:	2104      	movs	r1, #4
    19e4:	4816      	ldr	r0, [pc, #88]	; (1a40 <setup+0xc70>)
    19e6:	f003 fa9f 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    19ea:	220a      	movs	r2, #10
    19ec:	2300      	movs	r3, #0
    19ee:	4621      	mov	r1, r4
    19f0:	480c      	ldr	r0, [pc, #48]	; (1a24 <setup+0xc54>)
    19f2:	f002 fa6b 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19f6:	210f      	movs	r1, #15
    19f8:	481a      	ldr	r0, [pc, #104]	; (1a64 <setup+0xc94>)
    19fa:	f003 fa95 	bl	4f28 <usb_serial_write>
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    19fe:	f8d9 3000 	ldr.w	r3, [r9]
    1a02:	0298      	lsls	r0, r3, #10
    1a04:	bf4c      	ite	mi
    1a06:	4818      	ldrmi	r0, [pc, #96]	; (1a68 <setup+0xc98>)
    1a08:	4818      	ldrpl	r0, [pc, #96]	; (1a6c <setup+0xc9c>)
    1a0a:	2111      	movs	r1, #17
    1a0c:	f003 fa8c 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a10:	4804      	ldr	r0, [pc, #16]	; (1a24 <setup+0xc54>)
    1a12:	f002 fa35 	bl	3e80 <Print::println()>
    1a16:	e7b4      	b.n	1982 <setup+0xbb2>
    1a18:	0000c320 	.word	0x0000c320
    1a1c:	0000c334 	.word	0x0000c334
    1a20:	0000c348 	.word	0x0000c348
    1a24:	1fff0758 	.word	0x1fff0758
    1a28:	0000c35c 	.word	0x0000c35c
    1a2c:	40024000 	.word	0x40024000
    1a30:	0000c374 	.word	0x0000c374
    1a34:	04002408 	.word	0x04002408
    1a38:	4002408c 	.word	0x4002408c
    1a3c:	0000c480 	.word	0x0000c480
    1a40:	0000c38c 	.word	0x0000c38c
    1a44:	0000c44c 	.word	0x0000c44c
    1a48:	0000c46c 	.word	0x0000c46c
    1a4c:	0000c494 	.word	0x0000c494
    1a50:	0000c3c8 	.word	0x0000c3c8
    1a54:	0000c49c 	.word	0x0000c49c
    1a58:	0000c330 	.word	0x0000c330
    1a5c:	0000c4a8 	.word	0x0000c4a8
    1a60:	0000c404 	.word	0x0000c404
    1a64:	0000c3a8 	.word	0x0000c3a8
    1a68:	0000c3b8 	.word	0x0000c3b8
    1a6c:	0000c3cc 	.word	0x0000c3cc
    1a70:	bffdbf80 	.word	0xbffdbf80
    1a74:	2104      	movs	r1, #4
    1a76:	48c7      	ldr	r0, [pc, #796]	; (1d94 <setup+0xfc4>)
    1a78:	f003 fa56 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a7c:	2300      	movs	r3, #0
    1a7e:	220a      	movs	r2, #10
    1a80:	4621      	mov	r1, r4
    1a82:	48c5      	ldr	r0, [pc, #788]	; (1d98 <setup+0xfc8>)
    1a84:	f002 fa22 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a88:	210e      	movs	r1, #14
    1a8a:	48c4      	ldr	r0, [pc, #784]	; (1d9c <setup+0xfcc>)
    1a8c:	f003 fa4c 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a90:	48c1      	ldr	r0, [pc, #772]	; (1d98 <setup+0xfc8>)
    1a92:	f002 f9f5 	bl	3e80 <Print::println()>
    1a96:	e774      	b.n	1982 <setup+0xbb2>
    1a98:	2104      	movs	r1, #4
    1a9a:	48be      	ldr	r0, [pc, #760]	; (1d94 <setup+0xfc4>)
    1a9c:	f003 fa44 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1aa0:	2300      	movs	r3, #0
    1aa2:	220a      	movs	r2, #10
    1aa4:	4621      	mov	r1, r4
    1aa6:	48bc      	ldr	r0, [pc, #752]	; (1d98 <setup+0xfc8>)
    1aa8:	f002 fa10 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1aac:	210e      	movs	r1, #14
    1aae:	48bc      	ldr	r0, [pc, #752]	; (1da0 <setup+0xfd0>)
    1ab0:	f003 fa3a 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ab4:	48b8      	ldr	r0, [pc, #736]	; (1d98 <setup+0xfc8>)
    1ab6:	f002 f9e3 	bl	3e80 <Print::println()>
    1aba:	e762      	b.n	1982 <setup+0xbb2>
    1abc:	2104      	movs	r1, #4
    1abe:	48b5      	ldr	r0, [pc, #724]	; (1d94 <setup+0xfc4>)
    1ac0:	f003 fa32 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1ac4:	2300      	movs	r3, #0
    1ac6:	220a      	movs	r2, #10
    1ac8:	4621      	mov	r1, r4
    1aca:	48b3      	ldr	r0, [pc, #716]	; (1d98 <setup+0xfc8>)
    1acc:	f002 f9fe 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ad0:	2112      	movs	r1, #18
    1ad2:	48b4      	ldr	r0, [pc, #720]	; (1da4 <setup+0xfd4>)
    1ad4:	f003 fa28 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ad8:	48af      	ldr	r0, [pc, #700]	; (1d98 <setup+0xfc8>)
    1ada:	f002 f9d1 	bl	3e80 <Print::println()>
    1ade:	e750      	b.n	1982 <setup+0xbb2>
    1ae0:	2104      	movs	r1, #4
    1ae2:	48ac      	ldr	r0, [pc, #688]	; (1d94 <setup+0xfc4>)
    1ae4:	f003 fa20 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1ae8:	2300      	movs	r3, #0
    1aea:	220a      	movs	r2, #10
    1aec:	4621      	mov	r1, r4
    1aee:	48aa      	ldr	r0, [pc, #680]	; (1d98 <setup+0xfc8>)
    1af0:	f002 f9ec 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1af4:	2112      	movs	r1, #18
    1af6:	48ac      	ldr	r0, [pc, #688]	; (1da8 <setup+0xfd8>)
    1af8:	f003 fa16 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1afc:	48a6      	ldr	r0, [pc, #664]	; (1d98 <setup+0xfc8>)
    1afe:	f002 f9bf 	bl	3e80 <Print::println()>
    1b02:	e73e      	b.n	1982 <setup+0xbb2>
    1b04:	2104      	movs	r1, #4
    1b06:	48a3      	ldr	r0, [pc, #652]	; (1d94 <setup+0xfc4>)
    1b08:	f003 fa0e 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b0c:	2300      	movs	r3, #0
    1b0e:	220a      	movs	r2, #10
    1b10:	4621      	mov	r1, r4
    1b12:	48a1      	ldr	r0, [pc, #644]	; (1d98 <setup+0xfc8>)
    1b14:	f002 f9da 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b18:	2111      	movs	r1, #17
    1b1a:	48a4      	ldr	r0, [pc, #656]	; (1dac <setup+0xfdc>)
    1b1c:	f003 fa04 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b20:	489d      	ldr	r0, [pc, #628]	; (1d98 <setup+0xfc8>)
    1b22:	f002 f9ad 	bl	3e80 <Print::println()>
    1b26:	e72c      	b.n	1982 <setup+0xbb2>
    1b28:	2104      	movs	r1, #4
    1b2a:	489a      	ldr	r0, [pc, #616]	; (1d94 <setup+0xfc4>)
    1b2c:	f003 f9fc 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b30:	2300      	movs	r3, #0
    1b32:	220a      	movs	r2, #10
    1b34:	4621      	mov	r1, r4
    1b36:	4898      	ldr	r0, [pc, #608]	; (1d98 <setup+0xfc8>)
    1b38:	f002 f9c8 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b3c:	210f      	movs	r1, #15
    1b3e:	489c      	ldr	r0, [pc, #624]	; (1db0 <setup+0xfe0>)
    1b40:	f003 f9f2 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b44:	4894      	ldr	r0, [pc, #592]	; (1d98 <setup+0xfc8>)
    1b46:	f002 f99b 	bl	3e80 <Print::println()>
    1b4a:	e71a      	b.n	1982 <setup+0xbb2>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1b4c:	2400      	movs	r4, #0
    1b4e:	4625      	mov	r5, r4
    1b50:	e60c      	b.n	176c <setup+0x99c>
    1b52:	2104      	movs	r1, #4
    1b54:	488f      	ldr	r0, [pc, #572]	; (1d94 <setup+0xfc4>)
    1b56:	f003 f9e7 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b5a:	2300      	movs	r3, #0
    1b5c:	220a      	movs	r2, #10
    1b5e:	4621      	mov	r1, r4
    1b60:	488d      	ldr	r0, [pc, #564]	; (1d98 <setup+0xfc8>)
    1b62:	f002 f9b3 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b66:	211d      	movs	r1, #29
    1b68:	4892      	ldr	r0, [pc, #584]	; (1db4 <setup+0xfe4>)
    1b6a:	f003 f9dd 	bl	4f28 <usb_serial_write>
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    1b6e:	f8d8 3000 	ldr.w	r3, [r8]
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    1b72:	0299      	lsls	r1, r3, #10
    1b74:	f140 815e 	bpl.w	1e34 <setup+0x1064>
    1b78:	488f      	ldr	r0, [pc, #572]	; (1db8 <setup+0xfe8>)
    1b7a:	2110      	movs	r1, #16
    1b7c:	f003 f9d4 	bl	4f28 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1b80:	f8d8 9008 	ldr.w	r9, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1b84:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1b88:	44b8      	add	r8, r7
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1b8a:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
    1b8e:	2107      	movs	r1, #7
    1b90:	488a      	ldr	r0, [pc, #552]	; (1dbc <setup+0xfec>)
    1b92:	f003 f9c9 	bl	4f28 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1b96:	2300      	movs	r3, #0
    1b98:	2210      	movs	r2, #16
    1b9a:	4651      	mov	r1, sl
    1b9c:	487e      	ldr	r0, [pc, #504]	; (1d98 <setup+0xfc8>)
    1b9e:	f002 f995 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ba2:	2101      	movs	r1, #1
    1ba4:	4886      	ldr	r0, [pc, #536]	; (1dc0 <setup+0xff0>)
    1ba6:	f003 f9bf 	bl	4f28 <usb_serial_write>
    1baa:	210a      	movs	r1, #10
    1bac:	4885      	ldr	r0, [pc, #532]	; (1dc4 <setup+0xff4>)
    1bae:	f003 f9bb 	bl	4f28 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1bb2:	2300      	movs	r3, #0
    1bb4:	2210      	movs	r2, #16
    1bb6:	ea4f 6119 	mov.w	r1, r9, lsr #24
    1bba:	4877      	ldr	r0, [pc, #476]	; (1d98 <setup+0xfc8>)
    1bbc:	f002 f986 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bc0:	2101      	movs	r1, #1
    1bc2:	4881      	ldr	r0, [pc, #516]	; (1dc8 <setup+0xff8>)
    1bc4:	f003 f9b0 	bl	4f28 <usb_serial_write>
    1bc8:	2300      	movs	r3, #0
    1bca:	2210      	movs	r2, #16
    1bcc:	f3c9 4107 	ubfx	r1, r9, #16, #8
    1bd0:	4871      	ldr	r0, [pc, #452]	; (1d98 <setup+0xfc8>)
    1bd2:	f002 f97b 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bd6:	2101      	movs	r1, #1
    1bd8:	487b      	ldr	r0, [pc, #492]	; (1dc8 <setup+0xff8>)
    1bda:	f003 f9a5 	bl	4f28 <usb_serial_write>
    1bde:	2300      	movs	r3, #0
    1be0:	2210      	movs	r2, #16
    1be2:	f3c9 2107 	ubfx	r1, r9, #8, #8
    1be6:	486c      	ldr	r0, [pc, #432]	; (1d98 <setup+0xfc8>)
    1be8:	f002 f970 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bec:	2101      	movs	r1, #1
    1bee:	4876      	ldr	r0, [pc, #472]	; (1dc8 <setup+0xff8>)
    1bf0:	f003 f99a 	bl	4f28 <usb_serial_write>
    1bf4:	2300      	movs	r3, #0
    1bf6:	2210      	movs	r2, #16
    1bf8:	fa5f f189 	uxtb.w	r1, r9
    1bfc:	4866      	ldr	r0, [pc, #408]	; (1d98 <setup+0xfc8>)
    1bfe:	f002 f965 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    1c02:	f858 8006 	ldr.w	r8, [r8, r6]
    1c06:	4870      	ldr	r0, [pc, #448]	; (1dc8 <setup+0xff8>)
    1c08:	2101      	movs	r1, #1
    1c0a:	f003 f98d 	bl	4f28 <usb_serial_write>
    1c0e:	2300      	movs	r3, #0
    1c10:	2210      	movs	r2, #16
    1c12:	ea4f 6118 	mov.w	r1, r8, lsr #24
    1c16:	4860      	ldr	r0, [pc, #384]	; (1d98 <setup+0xfc8>)
    1c18:	f002 f958 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c1c:	2101      	movs	r1, #1
    1c1e:	486a      	ldr	r0, [pc, #424]	; (1dc8 <setup+0xff8>)
    1c20:	f003 f982 	bl	4f28 <usb_serial_write>
    1c24:	2300      	movs	r3, #0
    1c26:	2210      	movs	r2, #16
    1c28:	f3c8 4107 	ubfx	r1, r8, #16, #8
    1c2c:	485a      	ldr	r0, [pc, #360]	; (1d98 <setup+0xfc8>)
    1c2e:	f002 f94d 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c32:	2101      	movs	r1, #1
    1c34:	4864      	ldr	r0, [pc, #400]	; (1dc8 <setup+0xff8>)
    1c36:	f003 f977 	bl	4f28 <usb_serial_write>
    1c3a:	2300      	movs	r3, #0
    1c3c:	2210      	movs	r2, #16
    1c3e:	f3c8 2107 	ubfx	r1, r8, #8, #8
    1c42:	4855      	ldr	r0, [pc, #340]	; (1d98 <setup+0xfc8>)
    1c44:	f002 f942 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c48:	2101      	movs	r1, #1
    1c4a:	485f      	ldr	r0, [pc, #380]	; (1dc8 <setup+0xff8>)
    1c4c:	f003 f96c 	bl	4f28 <usb_serial_write>
    1c50:	fa5f f188 	uxtb.w	r1, r8
    1c54:	2300      	movs	r3, #0
    1c56:	2210      	movs	r2, #16
    1c58:	484f      	ldr	r0, [pc, #316]	; (1d98 <setup+0xfc8>)
    1c5a:	f002 f937 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c5e:	4858      	ldr	r0, [pc, #352]	; (1dc0 <setup+0xff0>)
    1c60:	2101      	movs	r1, #1
    1c62:	f003 f961 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1c66:	484c      	ldr	r0, [pc, #304]	; (1d98 <setup+0xfc8>)
    1c68:	f002 f90a 	bl	3e80 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    1c6c:	4b57      	ldr	r3, [pc, #348]	; (1dcc <setup+0xffc>)
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	3401      	adds	r4, #1
    1c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1c76:	b2e4      	uxtb	r4, r4
    1c78:	3301      	adds	r3, #1
    1c7a:	429c      	cmp	r4, r3
    1c7c:	f4ff ad09 	bcc.w	1692 <setup+0x8c2>
    1c80:	f7ff bb12 	b.w	12a8 <setup+0x4d8>
    1c84:	2104      	movs	r1, #4
    1c86:	4843      	ldr	r0, [pc, #268]	; (1d94 <setup+0xfc4>)
    1c88:	f003 f94e 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1c8c:	2300      	movs	r3, #0
    1c8e:	220a      	movs	r2, #10
    1c90:	4621      	mov	r1, r4
    1c92:	4841      	ldr	r0, [pc, #260]	; (1d98 <setup+0xfc8>)
    1c94:	f002 f91a 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c98:	2111      	movs	r1, #17
    1c9a:	484d      	ldr	r0, [pc, #308]	; (1dd0 <setup+0x1000>)
    1c9c:	f003 f944 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ca0:	483d      	ldr	r0, [pc, #244]	; (1d98 <setup+0xfc8>)
    1ca2:	f002 f8ed 	bl	3e80 <Print::println()>
    1ca6:	e7e1      	b.n	1c6c <setup+0xe9c>
    1ca8:	2104      	movs	r1, #4
    1caa:	483a      	ldr	r0, [pc, #232]	; (1d94 <setup+0xfc4>)
    1cac:	f003 f93c 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1cb0:	2300      	movs	r3, #0
    1cb2:	220a      	movs	r2, #10
    1cb4:	4621      	mov	r1, r4
    1cb6:	4838      	ldr	r0, [pc, #224]	; (1d98 <setup+0xfc8>)
    1cb8:	f002 f908 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1cbc:	2111      	movs	r1, #17
    1cbe:	4845      	ldr	r0, [pc, #276]	; (1dd4 <setup+0x1004>)
    1cc0:	f003 f932 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1cc4:	4834      	ldr	r0, [pc, #208]	; (1d98 <setup+0xfc8>)
    1cc6:	f002 f8db 	bl	3e80 <Print::println()>
    1cca:	e7cf      	b.n	1c6c <setup+0xe9c>
    1ccc:	2104      	movs	r1, #4
    1cce:	4831      	ldr	r0, [pc, #196]	; (1d94 <setup+0xfc4>)
    1cd0:	f003 f92a 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1cd4:	220a      	movs	r2, #10
    1cd6:	2300      	movs	r3, #0
    1cd8:	4621      	mov	r1, r4
    1cda:	482f      	ldr	r0, [pc, #188]	; (1d98 <setup+0xfc8>)
    1cdc:	f002 f8f6 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ce0:	210f      	movs	r1, #15
    1ce2:	483d      	ldr	r0, [pc, #244]	; (1dd8 <setup+0x1008>)
    1ce4:	f003 f920 	bl	4f28 <usb_serial_write>
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    1ce8:	f8d8 3000 	ldr.w	r3, [r8]
    1cec:	0298      	lsls	r0, r3, #10
    1cee:	bf4c      	ite	mi
    1cf0:	483a      	ldrmi	r0, [pc, #232]	; (1ddc <setup+0x100c>)
    1cf2:	483b      	ldrpl	r0, [pc, #236]	; (1de0 <setup+0x1010>)
    1cf4:	2111      	movs	r1, #17
    1cf6:	f003 f917 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1cfa:	4827      	ldr	r0, [pc, #156]	; (1d98 <setup+0xfc8>)
    1cfc:	f002 f8c0 	bl	3e80 <Print::println()>
    1d00:	e7b4      	b.n	1c6c <setup+0xe9c>
    1d02:	2104      	movs	r1, #4
    1d04:	4823      	ldr	r0, [pc, #140]	; (1d94 <setup+0xfc4>)
    1d06:	f003 f90f 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1d0a:	2300      	movs	r3, #0
    1d0c:	220a      	movs	r2, #10
    1d0e:	4621      	mov	r1, r4
    1d10:	4821      	ldr	r0, [pc, #132]	; (1d98 <setup+0xfc8>)
    1d12:	f002 f8db 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d16:	210e      	movs	r1, #14
    1d18:	4820      	ldr	r0, [pc, #128]	; (1d9c <setup+0xfcc>)
    1d1a:	f003 f905 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d1e:	481e      	ldr	r0, [pc, #120]	; (1d98 <setup+0xfc8>)
    1d20:	f002 f8ae 	bl	3e80 <Print::println()>
    1d24:	e7a2      	b.n	1c6c <setup+0xe9c>
    1d26:	2104      	movs	r1, #4
    1d28:	481a      	ldr	r0, [pc, #104]	; (1d94 <setup+0xfc4>)
    1d2a:	f003 f8fd 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1d2e:	2300      	movs	r3, #0
    1d30:	220a      	movs	r2, #10
    1d32:	4621      	mov	r1, r4
    1d34:	4818      	ldr	r0, [pc, #96]	; (1d98 <setup+0xfc8>)
    1d36:	f002 f8c9 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d3a:	210e      	movs	r1, #14
    1d3c:	4818      	ldr	r0, [pc, #96]	; (1da0 <setup+0xfd0>)
    1d3e:	f003 f8f3 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d42:	4815      	ldr	r0, [pc, #84]	; (1d98 <setup+0xfc8>)
    1d44:	f002 f89c 	bl	3e80 <Print::println()>
    1d48:	e790      	b.n	1c6c <setup+0xe9c>
    1d4a:	2104      	movs	r1, #4
    1d4c:	4811      	ldr	r0, [pc, #68]	; (1d94 <setup+0xfc4>)
    1d4e:	f003 f8eb 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1d52:	2300      	movs	r3, #0
    1d54:	220a      	movs	r2, #10
    1d56:	4621      	mov	r1, r4
    1d58:	480f      	ldr	r0, [pc, #60]	; (1d98 <setup+0xfc8>)
    1d5a:	f002 f8b7 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d5e:	2112      	movs	r1, #18
    1d60:	4810      	ldr	r0, [pc, #64]	; (1da4 <setup+0xfd4>)
    1d62:	f003 f8e1 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d66:	480c      	ldr	r0, [pc, #48]	; (1d98 <setup+0xfc8>)
    1d68:	f002 f88a 	bl	3e80 <Print::println()>
    1d6c:	e77e      	b.n	1c6c <setup+0xe9c>
    1d6e:	2104      	movs	r1, #4
    1d70:	4808      	ldr	r0, [pc, #32]	; (1d94 <setup+0xfc4>)
    1d72:	f003 f8d9 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1d76:	2300      	movs	r3, #0
    1d78:	220a      	movs	r2, #10
    1d7a:	4621      	mov	r1, r4
    1d7c:	4806      	ldr	r0, [pc, #24]	; (1d98 <setup+0xfc8>)
    1d7e:	f002 f8a5 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1d82:	2112      	movs	r1, #18
    1d84:	4808      	ldr	r0, [pc, #32]	; (1da8 <setup+0xfd8>)
    1d86:	f003 f8cf 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d8a:	4803      	ldr	r0, [pc, #12]	; (1d98 <setup+0xfc8>)
    1d8c:	f002 f878 	bl	3e80 <Print::println()>
    1d90:	e76c      	b.n	1c6c <setup+0xe9c>
    1d92:	bf00      	nop
    1d94:	0000c38c 	.word	0x0000c38c
    1d98:	1fff0758 	.word	0x1fff0758
    1d9c:	0000c3e0 	.word	0x0000c3e0
    1da0:	0000c418 	.word	0x0000c418
    1da4:	0000c394 	.word	0x0000c394
    1da8:	0000c428 	.word	0x0000c428
    1dac:	0000c3f0 	.word	0x0000c3f0
    1db0:	0000c43c 	.word	0x0000c43c
    1db4:	0000c44c 	.word	0x0000c44c
    1db8:	0000c46c 	.word	0x0000c46c
    1dbc:	0000c494 	.word	0x0000c494
    1dc0:	0000c3c8 	.word	0x0000c3c8
    1dc4:	0000c49c 	.word	0x0000c49c
    1dc8:	0000c330 	.word	0x0000c330
    1dcc:	400a4000 	.word	0x400a4000
    1dd0:	0000c4a8 	.word	0x0000c4a8
    1dd4:	0000c404 	.word	0x0000c404
    1dd8:	0000c3a8 	.word	0x0000c3a8
    1ddc:	0000c3b8 	.word	0x0000c3b8
    1de0:	0000c3cc 	.word	0x0000c3cc
    1de4:	2104      	movs	r1, #4
    1de6:	481f      	ldr	r0, [pc, #124]	; (1e64 <setup+0x1094>)
    1de8:	f003 f89e 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1dec:	2300      	movs	r3, #0
    1dee:	220a      	movs	r2, #10
    1df0:	4621      	mov	r1, r4
    1df2:	481d      	ldr	r0, [pc, #116]	; (1e68 <setup+0x1098>)
    1df4:	f002 f86a 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1df8:	2111      	movs	r1, #17
    1dfa:	481c      	ldr	r0, [pc, #112]	; (1e6c <setup+0x109c>)
    1dfc:	f003 f894 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1e00:	4819      	ldr	r0, [pc, #100]	; (1e68 <setup+0x1098>)
    1e02:	f002 f83d 	bl	3e80 <Print::println()>
    1e06:	e731      	b.n	1c6c <setup+0xe9c>
    1e08:	2104      	movs	r1, #4
    1e0a:	4816      	ldr	r0, [pc, #88]	; (1e64 <setup+0x1094>)
    1e0c:	f003 f88c 	bl	4f28 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1e10:	2300      	movs	r3, #0
    1e12:	220a      	movs	r2, #10
    1e14:	4621      	mov	r1, r4
    1e16:	4814      	ldr	r0, [pc, #80]	; (1e68 <setup+0x1098>)
    1e18:	f002 f858 	bl	3ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e1c:	210f      	movs	r1, #15
    1e1e:	4814      	ldr	r0, [pc, #80]	; (1e70 <setup+0x10a0>)
    1e20:	f003 f882 	bl	4f28 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1e24:	4810      	ldr	r0, [pc, #64]	; (1e68 <setup+0x1098>)
    1e26:	f002 f82b 	bl	3e80 <Print::println()>
    1e2a:	e71f      	b.n	1c6c <setup+0xe9c>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1e2c:	2400      	movs	r4, #0
    1e2e:	4625      	mov	r5, r4
    1e30:	f7ff bbf1 	b.w	1616 <setup+0x846>
    1e34:	480f      	ldr	r0, [pc, #60]	; (1e74 <setup+0x10a4>)
    1e36:	2110      	movs	r1, #16
    1e38:	f003 f876 	bl	4f28 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1e3c:	f8d8 9008 	ldr.w	r9, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1e40:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1e44:	44b8      	add	r8, r7
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    1e46:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    1e4a:	e6a0      	b.n	1b8e <setup+0xdbe>
    1e4c:	4809      	ldr	r0, [pc, #36]	; (1e74 <setup+0x10a4>)
    1e4e:	2110      	movs	r1, #16
    1e50:	f003 f86a 	bl	4f28 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1e54:	f8d9 a008 	ldr.w	sl, [r9, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1e58:	f8d9 3004 	ldr.w	r3, [r9, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1e5c:	44c1      	add	r9, r8
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    1e5e:	f3c3 4b8a 	ubfx	fp, r3, #18, #11
    1e62:	e51f      	b.n	18a4 <setup+0xad4>
    1e64:	0000c38c 	.word	0x0000c38c
    1e68:	1fff0758 	.word	0x1fff0758
    1e6c:	0000c3f0 	.word	0x0000c3f0
    1e70:	0000c43c 	.word	0x0000c43c
    1e74:	0000c480 	.word	0x0000c480

00001e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
#endif


FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    1e78:	b510      	push	{r4, lr}
  if ( mb_num == FIFO ) {
    1e7a:	780b      	ldrb	r3, [r1, #0]
    1e7c:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    1e7e:	4604      	mov	r4, r0
    1e80:	b082      	sub	sp, #8
    1e82:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    1e84:	d013      	beq.n	1eae <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    if ( _mainHandler ) _mainHandler(msg);
    return;
  }
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    1e86:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
    1e8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1e8e:	685b      	ldr	r3, [r3, #4]
    1e90:	b113      	cbz	r3, 1e98 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    1e92:	9201      	str	r2, [sp, #4]
    1e94:	4798      	blx	r3
    1e96:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    1e98:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1e9c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
    1ea0:	b11b      	cbz	r3, 1eaa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    1ea2:	b002      	add	sp, #8
    1ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    1ea8:	4718      	bx	r3
}
    1eaa:	b002      	add	sp, #8
    1eac:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    1eae:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1eb2:	f8d4 3704 	ldr.w	r3, [r4, #1796]	; 0x704
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d0f0      	beq.n	1e9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1eba:	9201      	str	r2, [sp, #4]
    1ebc:	4798      	blx	r3
    1ebe:	9801      	ldr	r0, [sp, #4]
    1ec0:	e7ec      	b.n	1e9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1ec2:	bf00      	nop

00001ec4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1ec4:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    1ec6:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1ec8:	481b      	ldr	r0, [pc, #108]	; (1f38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
    1eca:	d823      	bhi.n	1f14 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    1ecc:	6b04      	ldr	r4, [r0, #48]	; 0x30
    1ece:	2301      	movs	r3, #1
    1ed0:	408b      	lsls	r3, r1
    1ed2:	4323      	orrs	r3, r4
    1ed4:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1ed6:	4b19      	ldr	r3, [pc, #100]	; (1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1ed8:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1eda:	440b      	add	r3, r1
    1edc:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1ede:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1ee2:	6019      	str	r1, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1ee4:	b1f8      	cbz	r0, 1f26 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
    1ee6:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1ee8:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1eea:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    1eee:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1ef0:	6058      	str	r0, [r3, #4]
  if ( msg.flags.extended ) code |= (3UL << 21);
    1ef2:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1ef6:	68d0      	ldr	r0, [r2, #12]
}
    1ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
    1efc:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1efe:	6098      	str	r0, [r3, #8]
    1f00:	6910      	ldr	r0, [r2, #16]
    1f02:	ba00      	rev	r0, r0
    1f04:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    1f06:	7ad2      	ldrb	r2, [r2, #11]
    1f08:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    1f0c:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    1f10:	601a      	str	r2, [r3, #0]
}
    1f12:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    1f14:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    1f16:	f1a1 0c20 	sub.w	ip, r1, #32
    1f1a:	2301      	movs	r3, #1
    1f1c:	fa03 f30c 	lsl.w	r3, r3, ip
    1f20:	4323      	orrs	r3, r4
    1f22:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    1f24:	e7d7      	b.n	1ed6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1f26:	6814      	ldr	r4, [r2, #0]
    1f28:	4805      	ldr	r0, [pc, #20]	; (1f40 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    1f2a:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1f2c:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    1f30:	6058      	str	r0, [r3, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1f32:	0509      	lsls	r1, r1, #20
    1f34:	e7df      	b.n	1ef6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    1f36:	bf00      	nop
    1f38:	400a4000 	.word	0x400a4000
    1f3c:	0400a408 	.word	0x0400a408
    1f40:	1ffc0000 	.word	0x1ffc0000

00001f44 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    1f48:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1f4c:	b08f      	sub	sp, #60	; 0x3c
  if ( !isEventsUsed ) isEventsUsed = 1;
    1f4e:	f897 3700 	ldrb.w	r3, [r7, #1792]	; 0x700
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1f52:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    1f54:	b913      	cbnz	r3, 1f5c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    1f56:	2301      	movs	r3, #1
    1f58:	f887 3700 	strb.w	r3, [r7, #1792]	; 0x700
        T readBytes(T *buffer, uint16_t length);
        void flush() { clear(); }
        void clear() { head = tail = _available = 0; }
        void print(const char *p);
        void println(const char *p);
        uint16_t size() { return _available; }
    1f5c:	8b23      	ldrh	r3, [r4, #24]
    1f5e:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    1f60:	2b00      	cmp	r3, #0
    1f62:	d14f      	bne.n	2004 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xc0>
  NVIC_DISABLE_IRQ(nvicIrq);
    1f64:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    1f68:	0953      	lsrs	r3, r2, #5
    1f6a:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    1f6e:	3360      	adds	r3, #96	; 0x60
    1f70:	009b      	lsls	r3, r3, #2
    1f72:	f002 021f 	and.w	r2, r2, #31
    1f76:	2101      	movs	r1, #1
    1f78:	fa01 f202 	lsl.w	r2, r1, r2
    1f7c:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    1f80:	601a      	str	r2, [r3, #0]
    1f82:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1f86:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    1f88:	b323      	cbz	r3, 1fd4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>


template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::peek_front(T *buffer, uint16_t length, uint32_t entry) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1f8a:	f8b6 1b1a 	ldrh.w	r1, [r6, #2842]	; 0xb1a
    1f8e:	231a      	movs	r3, #26
    1f90:	f001 010f 	and.w	r1, r1, #15
    1f94:	fb03 4101 	mla	r1, r3, r1, r4
    1f98:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    1f9c:	3112      	adds	r1, #18
    1f9e:	2218      	movs	r2, #24
    1fa0:	a808      	add	r0, sp, #32
    memmove(&frame, buf, sizeof(frame));
    1fa2:	ad08      	add	r5, sp, #32
    1fa4:	f001 ffa4 	bl	3ef0 <memcpy>
    1fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1faa:	f10d 0c08 	add.w	ip, sp, #8
    1fae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1fb2:	e895 0003 	ldmia.w	r5, {r0, r1}
    1fb6:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    1fba:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    1fbe:	1c4b      	adds	r3, r1, #1
    1fc0:	d04a      	beq.n	2058 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x114>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1fc2:	4b53      	ldr	r3, [pc, #332]	; (2110 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>)
    1fc4:	440b      	add	r3, r1
    1fc6:	011b      	lsls	r3, r3, #4
    1fc8:	681b      	ldr	r3, [r3, #0]
    1fca:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1fce:	2b08      	cmp	r3, #8
    1fd0:	f000 8081 	beq.w	20d6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x192>
  NVIC_ENABLE_IRQ(nvicIrq);
    1fd4:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    1fd8:	0953      	lsrs	r3, r2, #5
    1fda:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    1fde:	3340      	adds	r3, #64	; 0x40
    1fe0:	009b      	lsls	r3, r3, #2
    1fe2:	2101      	movs	r1, #1
    1fe4:	f002 021f 	and.w	r2, r2, #31
    1fe8:	fa01 f202 	lsl.w	r2, r1, r2
    1fec:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    1fee:	8b23      	ldrh	r3, [r4, #24]
    1ff0:	f8b6 0b1e 	ldrh.w	r0, [r6, #2846]	; 0xb1e
    1ff4:	b29b      	uxth	r3, r3
    1ff6:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    1ff8:	2100      	movs	r1, #0
    1ffa:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    1ffe:	b00f      	add	sp, #60	; 0x3c
    2000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2004:	8aa1      	ldrh	r1, [r4, #20]
    2006:	231a      	movs	r3, #26
    2008:	b2c9      	uxtb	r1, r1
    200a:	fb03 4101 	mla	r1, r3, r1, r4
    200e:	2218      	movs	r2, #24
    2010:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    2014:	a808      	add	r0, sp, #32
    2016:	f001 ff6b 	bl	3ef0 <memcpy>
    head = ((head + 1)&(2*_size-1));
    201a:	8aa3      	ldrh	r3, [r4, #20]
    201c:	3301      	adds	r3, #1
    201e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2022:	82a3      	strh	r3, [r4, #20]
    if ( _available ) _available--;
    2024:	8b23      	ldrh	r3, [r4, #24]
    2026:	b29b      	uxth	r3, r3
    2028:	b11b      	cbz	r3, 2032 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xee>
    202a:	8b23      	ldrh	r3, [r4, #24]
    202c:	3b01      	subs	r3, #1
    202e:	b29b      	uxth	r3, r3
    2030:	8323      	strh	r3, [r4, #24]
    memmove(&frame, buf, sizeof(frame));
    2032:	ad08      	add	r5, sp, #32
    2034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2036:	ae02      	add	r6, sp, #8
    2038:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    203a:	e895 0003 	ldmia.w	r5, {r0, r1}
    203e:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    2042:	aa02      	add	r2, sp, #8
    2044:	f89d 301c 	ldrb.w	r3, [sp, #28]
    2048:	f88d 3007 	strb.w	r3, [sp, #7]
    204c:	f10d 0107 	add.w	r1, sp, #7
    2050:	4620      	mov	r0, r4
    2052:	f7ff ff11 	bl	1e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2056:	e785      	b.n	1f64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2058:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 2114 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    205c:	f8d8 5000 	ldr.w	r5, [r8]
    2060:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    2064:	d050      	beq.n	2108 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1c4>
    2066:	f7fe fb87 	bl	778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    206a:	f8d8 3000 	ldr.w	r3, [r8]
    206e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2072:	3301      	adds	r3, #1
    2074:	4283      	cmp	r3, r0
    2076:	4605      	mov	r5, r0
    2078:	d9ac      	bls.n	1fd4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    207a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2110 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    207e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2114 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    2082:	e008      	b.n	2096 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x152>
    2084:	f8d8 3000 	ldr.w	r3, [r8]
    2088:	3501      	adds	r5, #1
    208a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    208e:	b2ed      	uxtb	r5, r5
    2090:	3301      	adds	r3, #1
    2092:	429d      	cmp	r5, r3
    2094:	d29e      	bcs.n	1fd4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2096:	eb05 0309 	add.w	r3, r5, r9
    209a:	011b      	lsls	r3, r3, #4
    209c:	681b      	ldr	r3, [r3, #0]
    209e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    20a2:	2b08      	cmp	r3, #8
    20a4:	d1ee      	bne.n	2084 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
          writeTxMailbox(i, frame);
    20a6:	aa02      	add	r2, sp, #8
    20a8:	4629      	mov	r1, r5
    20aa:	4620      	mov	r0, r4
    20ac:	f7ff ff0a 	bl	1ec4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    20b0:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    20b4:	3301      	adds	r3, #1
    20b6:	f003 031f 	and.w	r3, r3, #31
    20ba:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    20be:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    20c2:	b29b      	uxth	r3, r3
    20c4:	2b00      	cmp	r3, #0
    20c6:	d0dd      	beq.n	2084 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
    20c8:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    20cc:	3b01      	subs	r3, #1
    20ce:	b29b      	uxth	r3, r3
    20d0:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    20d4:	e7d6      	b.n	2084 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
      writeTxMailbox(frame.mb, frame);
    20d6:	aa02      	add	r2, sp, #8
    20d8:	b2c9      	uxtb	r1, r1
    20da:	4620      	mov	r0, r4
    20dc:	f7ff fef2 	bl	1ec4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    20e0:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    20e4:	3301      	adds	r3, #1
    20e6:	f003 031f 	and.w	r3, r3, #31
    20ea:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    20ee:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    20f2:	b29b      	uxth	r3, r3
    20f4:	2b00      	cmp	r3, #0
    20f6:	f43f af6d 	beq.w	1fd4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    20fa:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    20fe:	3b01      	subs	r3, #1
    2100:	b29b      	uxth	r3, r3
    2102:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    2106:	e765      	b.n	1fd4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2108:	f8d8 3000 	ldr.w	r3, [r8]
    210c:	e7b5      	b.n	207a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x136>
    210e:	bf00      	nop
    2110:	0400a408 	.word	0x0400a408
    2114:	400a4000 	.word	0x400a4000

00002118 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2118:	8843      	ldrh	r3, [r0, #2]
    211a:	f04f 0c1a 	mov.w	ip, #26
    211e:	f003 030f 	and.w	r3, r3, #15
    2122:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    2126:	b510      	push	{r4, lr}
    2128:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    212a:	2000      	movs	r0, #0
    212c:	7598      	strb	r0, [r3, #22]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    212e:	8863      	ldrh	r3, [r4, #2]
    2130:	f003 030f 	and.w	r3, r3, #15
    2134:	fb0c 4303 	mla	r3, ip, r3, r4
    2138:	75da      	strb	r2, [r3, #23]
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    213a:	8860      	ldrh	r0, [r4, #2]
    213c:	f000 000f 	and.w	r0, r0, #15
    2140:	fb0c 4000 	mla	r0, ip, r0, r4
    2144:	3018      	adds	r0, #24
    2146:	f004 f9cf 	bl	64e8 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    214a:	8862      	ldrh	r2, [r4, #2]
    214c:	8823      	ldrh	r3, [r4, #0]
    214e:	b29b      	uxth	r3, r3
    2150:	b292      	uxth	r2, r2
    2152:	f083 0310 	eor.w	r3, r3, #16
    2156:	429a      	cmp	r2, r3
    2158:	d104      	bne.n	2164 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    215a:	8823      	ldrh	r3, [r4, #0]
    215c:	3301      	adds	r3, #1
    215e:	f003 031f 	and.w	r3, r3, #31
    2162:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    2164:	8863      	ldrh	r3, [r4, #2]
    2166:	3301      	adds	r3, #1
    2168:	f003 031f 	and.w	r3, r3, #31
    216c:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    216e:	88a3      	ldrh	r3, [r4, #4]
    2170:	b29b      	uxth	r3, r3
    2172:	2b0f      	cmp	r3, #15
    2174:	d803      	bhi.n	217e <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    2176:	88a3      	ldrh	r3, [r4, #4]
    2178:	3301      	adds	r3, #1
    217a:	b29b      	uxth	r3, r3
    217c:	80a3      	strh	r3, [r4, #4]
}
    217e:	bd10      	pop	{r4, pc}

00002180 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    2180:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( msg.seq ) {
    2182:	7d8b      	ldrb	r3, [r1, #22]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2184:	4e4d      	ldr	r6, [pc, #308]	; (22bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    2186:	b08d      	sub	sp, #52	; 0x34
    2188:	460d      	mov	r5, r1
    218a:	4604      	mov	r4, r0
  if ( msg.seq ) {
    218c:	2b00      	cmp	r3, #0
    218e:	d14b      	bne.n	2228 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2190:	6833      	ldr	r3, [r6, #0]
    2192:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    2196:	d025      	beq.n	21e4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    2198:	f7fe faee 	bl	778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    219c:	6833      	ldr	r3, [r6, #0]
    219e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    21a2:	3301      	adds	r3, #1
    21a4:	4298      	cmp	r0, r3
    21a6:	4684      	mov	ip, r0
    21a8:	d21e      	bcs.n	21e8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    21aa:	4945      	ldr	r1, [pc, #276]	; (22c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    21ac:	4843      	ldr	r0, [pc, #268]	; (22bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    21ae:	e007      	b.n	21c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    21b0:	6803      	ldr	r3, [r0, #0]
    21b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    21b6:	fa5f fc82 	uxtb.w	ip, r2
    21ba:	3301      	adds	r3, #1
    21bc:	459c      	cmp	ip, r3
    21be:	d213      	bcs.n	21e8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    21c0:	eb0c 0301 	add.w	r3, ip, r1
    21c4:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    21c6:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    21ca:	681b      	ldr	r3, [r3, #0]
    21cc:	f3c3 6303 	ubfx	r3, r3, #24, #4
    21d0:	2b08      	cmp	r3, #8
    21d2:	d1ed      	bne.n	21b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    21d4:	4620      	mov	r0, r4
    21d6:	462a      	mov	r2, r5
    21d8:	4661      	mov	r1, ip
    21da:	f7ff fe73 	bl	1ec4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    21de:	2001      	movs	r0, #1
}
    21e0:	b00d      	add	sp, #52	; 0x34
    21e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    21e4:	6833      	ldr	r3, [r6, #0]
    21e6:	e7e0      	b.n	21aa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    21e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    21ea:	46ec      	mov	ip, sp
    21ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    21f0:	e895 0003 	ldmia.w	r5, {r0, r1}
    21f4:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    21f8:	f04f 0eff 	mov.w	lr, #255	; 0xff
    21fc:	f88d e014 	strb.w	lr, [sp, #20]
    2200:	466f      	mov	r7, sp
    2202:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2204:	ae06      	add	r6, sp, #24
    2206:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2208:	e89c 0003 	ldmia.w	ip, {r0, r1}
    220c:	e886 0003 	stmia.w	r6, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    2210:	2218      	movs	r2, #24
    2212:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
    2216:	eb0d 0102 	add.w	r1, sp, r2
    221a:	301a      	adds	r0, #26
    221c:	f7ff ff7c 	bl	2118 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    2220:	f04f 30ff 	mov.w	r0, #4294967295
}
    2224:	b00d      	add	sp, #52	; 0x34
    2226:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2228:	6830      	ldr	r0, [r6, #0]
    222a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    222e:	d042      	beq.n	22b6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x136>
    2230:	f7fe faa2 	bl	778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2234:	6833      	ldr	r3, [r6, #0]
    2236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    223a:	3301      	adds	r3, #1
    223c:	4283      	cmp	r3, r0
    223e:	d929      	bls.n	2294 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2240:	4e1f      	ldr	r6, [pc, #124]	; (22c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2242:	4f1e      	ldr	r7, [pc, #120]	; (22bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    2244:	e005      	b.n	2252 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd2>
    2246:	683b      	ldr	r3, [r7, #0]
    2248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    224c:	3301      	adds	r3, #1
    224e:	4298      	cmp	r0, r3
    2250:	d220      	bcs.n	2294 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2252:	1983      	adds	r3, r0, r6
    2254:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2256:	1c41      	adds	r1, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2258:	681a      	ldr	r2, [r3, #0]
    225a:	0112      	lsls	r2, r2, #4
    225c:	4684      	mov	ip, r0
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    225e:	b2c8      	uxtb	r0, r1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2260:	d5f1      	bpl.n	2246 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc6>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2262:	681b      	ldr	r3, [r3, #0]
    2264:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2268:	2b08      	cmp	r3, #8
    226a:	d01b      	beq.n	22a4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x124>
      CAN_message_t msg_copy = msg;
    226c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    226e:	466e      	mov	r6, sp
    2270:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2272:	e895 0003 	ldmia.w	r5, {r0, r1}
    2276:	e886 0003 	stmia.w	r6, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    227a:	46ee      	mov	lr, sp
      msg_copy.mb = first_tx_mb;
    227c:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    2280:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2284:	af06      	add	r7, sp, #24
    2286:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    2288:	e896 0003 	ldmia.w	r6, {r0, r1}
    228c:	2218      	movs	r2, #24
    228e:	e887 0003 	stmia.w	r7, {r0, r1}
    2292:	e7be      	b.n	2212 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x92>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2294:	4b0b      	ldr	r3, [pc, #44]	; (22c4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x144>)
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2296:	681b      	ldr	r3, [r3, #0]
    2298:	f3c3 6303 	ubfx	r3, r3, #24, #4
    229c:	2b08      	cmp	r3, #8
  return -1;
    229e:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    22a2:	d1e3      	bne.n	226c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xec>
      writeTxMailbox(first_tx_mb, msg);
    22a4:	4620      	mov	r0, r4
    22a6:	462a      	mov	r2, r5
    22a8:	fa5f f18c 	uxtb.w	r1, ip
    22ac:	f7ff fe0a 	bl	1ec4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    22b0:	2001      	movs	r0, #1
}
    22b2:	b00d      	add	sp, #52	; 0x34
    22b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    22b6:	6833      	ldr	r3, [r6, #0]
    22b8:	e7c2      	b.n	2240 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc0>
    22ba:	bf00      	nop
    22bc:	400a4000 	.word	0x400a4000
    22c0:	0400a408 	.word	0x0400a408
    22c4:	400a4070 	.word	0x400a4070

000022c8 <loop>:
}

void loop() {
    22c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // read the values for the water sensors.
  // The value of zero meand no water is detected.
  // The value of 1 means water is present.
  center_value = !digitalRead(center_pin); //0 = Open, 1 = Closed
    22cc:	2008      	movs	r0, #8
void loop() {
    22ce:	b086      	sub	sp, #24
  center_value = !digitalRead(center_pin); //0 = Open, 1 = Closed
    22d0:	f002 f84a 	bl	4368 <digitalRead>
    22d4:	4e35      	ldr	r6, [pc, #212]	; (23ac <loop+0xe4>)
  port_value = !digitalRead(port_pin); 
    22d6:	4d36      	ldr	r5, [pc, #216]	; (23b0 <loop+0xe8>)
  starboard_value = !digitalRead(starboard_pin);
    22d8:	4c36      	ldr	r4, [pc, #216]	; (23b4 <loop+0xec>)
  
  digitalWrite(RED, port_value); 
  digitalWrite(GREEN, starboard_value); 
  digitalWrite(LED_BUILTIN, LED_state);
    22da:	4f37      	ldr	r7, [pc, #220]	; (23b8 <loop+0xf0>)
  center_value = !digitalRead(center_pin); //0 = Open, 1 = Closed
    22dc:	fab0 f380 	clz	r3, r0
    22e0:	095b      	lsrs	r3, r3, #5
  port_value = !digitalRead(port_pin); 
    22e2:	2006      	movs	r0, #6
  center_value = !digitalRead(center_pin); //0 = Open, 1 = Closed
    22e4:	7033      	strb	r3, [r6, #0]
  port_value = !digitalRead(port_pin); 
    22e6:	f002 f83f 	bl	4368 <digitalRead>
    22ea:	fab0 f380 	clz	r3, r0
    22ee:	095b      	lsrs	r3, r3, #5
  starboard_value = !digitalRead(starboard_pin);
    22f0:	2007      	movs	r0, #7
  port_value = !digitalRead(port_pin); 
    22f2:	702b      	strb	r3, [r5, #0]
  starboard_value = !digitalRead(starboard_pin);
    22f4:	f002 f838 	bl	4368 <digitalRead>
    22f8:	fab0 f080 	clz	r0, r0
    22fc:	0940      	lsrs	r0, r0, #5
  digitalWrite(RED, port_value); 
    22fe:	7829      	ldrb	r1, [r5, #0]
  starboard_value = !digitalRead(starboard_pin);
    2300:	7020      	strb	r0, [r4, #0]
  digitalWrite(RED, port_value); 
    2302:	2015      	movs	r0, #21
    2304:	f002 f806 	bl	4314 <digitalWrite>
  digitalWrite(GREEN, starboard_value); 
    2308:	7821      	ldrb	r1, [r4, #0]
    230a:	2014      	movs	r0, #20
    230c:	f002 f802 	bl	4314 <digitalWrite>
  digitalWrite(LED_BUILTIN, LED_state);
    2310:	7839      	ldrb	r1, [r7, #0]
    2312:	200d      	movs	r0, #13
    2314:	f001 fffe 	bl	4314 <digitalWrite>
  
  
  Can1.events();
    2318:	4828      	ldr	r0, [pc, #160]	; (23bc <loop+0xf4>)
    231a:	f7ff fe13 	bl	1f44 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    231e:	4928      	ldr	r1, [pc, #160]	; (23c0 <loop+0xf8>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    2320:	4828      	ldr	r0, [pc, #160]	; (23c4 <loop+0xfc>)
    2322:	680b      	ldr	r3, [r1, #0]
    2324:	9304      	str	r3, [sp, #16]
	return ret;
    2326:	9b04      	ldr	r3, [sp, #16]
    2328:	6802      	ldr	r2, [r0, #0]
    232a:	1a9b      	subs	r3, r3, r2

  if ( output_timer >= output_period  ) {
    232c:	2b63      	cmp	r3, #99	; 0x63
    232e:	d802      	bhi.n	2336 <loop+0x6e>
      Serial.printf("%02X ",msg.buf[i]);
    } 
    Serial.println();
    
  }
}
    2330:	b006      	add	sp, #24
    2332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2336:	680b      	ldr	r3, [r1, #0]
    2338:	9305      	str	r3, [sp, #20]
	return ret;
    233a:	9b05      	ldr	r3, [sp, #20]
    msg.buf[0] = center_value;
    233c:	f896 8000 	ldrb.w	r8, [r6]
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    2340:	6003      	str	r3, [r0, #0]
    msg.buf[1] = port_value;
    2342:	782e      	ldrb	r6, [r5, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2344:	680b      	ldr	r3, [r1, #0]
    msg.buf[0] = center_value;
    2346:	4d20      	ldr	r5, [pc, #128]	; (23c8 <loop+0x100>)
    LED_state = !LED_state; //Toggle led each message.
    2348:	7839      	ldrb	r1, [r7, #0]
    234a:	9303      	str	r3, [sp, #12]
    msg.buf[3] = 0xFF;
    234c:	23ff      	movs	r3, #255	; 0xff
    msg.buf[2] = starboard_value;
    234e:	7824      	ldrb	r4, [r4, #0]
    msg.buf[3] = 0xFF;
    2350:	73eb      	strb	r3, [r5, #15]
    LED_state = !LED_state; //Toggle led each message.
    2352:	f081 0101 	eor.w	r1, r1, #1
	return ret;
    2356:	9b03      	ldr	r3, [sp, #12]
    2358:	7039      	strb	r1, [r7, #0]
    memcpy(&msg.buf[4],&count,4); // little endian, 2's Compliment
    235a:	612b      	str	r3, [r5, #16]
    Can1.write(msg);
    235c:	4629      	mov	r1, r5
    235e:	4817      	ldr	r0, [pc, #92]	; (23bc <loop+0xf4>)
    msg.buf[0] = center_value;
    2360:	f885 800c 	strb.w	r8, [r5, #12]
    msg.buf[1] = port_value;
    2364:	736e      	strb	r6, [r5, #13]
    msg.buf[2] = starboard_value;
    2366:	73ac      	strb	r4, [r5, #14]
    Can1.write(msg);
    2368:	f7ff ff0a 	bl	2180 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>
    Serial.printf("Port:  %d, Center: %d, Starboard: %d  - CAN1:  %08X ", port_value, center_value, starboard_value, msg.id);
    236c:	682b      	ldr	r3, [r5, #0]
    236e:	9301      	str	r3, [sp, #4]
    2370:	4916      	ldr	r1, [pc, #88]	; (23cc <loop+0x104>)
    2372:	4817      	ldr	r0, [pc, #92]	; (23d0 <loop+0x108>)
    2374:	9400      	str	r4, [sp, #0]
    2376:	4643      	mov	r3, r8
    2378:	4632      	mov	r2, r6
    237a:	f001 fd99 	bl	3eb0 <Print::printf(char const*, ...)>
    for ( uint8_t i = 0; i < msg.len; i++ ) {
    237e:	7aeb      	ldrb	r3, [r5, #11]
    2380:	b173      	cbz	r3, 23a0 <loop+0xd8>
    2382:	2400      	movs	r4, #0
      Serial.printf("%02X ",msg.buf[i]);
    2384:	4f13      	ldr	r7, [pc, #76]	; (23d4 <loop+0x10c>)
    2386:	4e12      	ldr	r6, [pc, #72]	; (23d0 <loop+0x108>)
    2388:	4623      	mov	r3, r4
    238a:	442b      	add	r3, r5
    238c:	4639      	mov	r1, r7
    238e:	7b1a      	ldrb	r2, [r3, #12]
    2390:	4630      	mov	r0, r6
    2392:	f001 fd8d 	bl	3eb0 <Print::printf(char const*, ...)>
    for ( uint8_t i = 0; i < msg.len; i++ ) {
    2396:	3401      	adds	r4, #1
    2398:	7aea      	ldrb	r2, [r5, #11]
    239a:	b2e3      	uxtb	r3, r4
    239c:	429a      	cmp	r2, r3
    239e:	d8f4      	bhi.n	238a <loop+0xc2>
    Serial.println();
    23a0:	480b      	ldr	r0, [pc, #44]	; (23d0 <loop+0x108>)
}
    23a2:	b006      	add	sp, #24
    23a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println();
    23a8:	f001 bd6a 	b.w	3e80 <Print::println()>
    23ac:	1fff0735 	.word	0x1fff0735
    23b0:	1fff0750 	.word	0x1fff0750
    23b4:	1fff0751 	.word	0x1fff0751
    23b8:	1fff0733 	.word	0x1fff0733
    23bc:	1fff3800 	.word	0x1fff3800
    23c0:	1fff6124 	.word	0x1fff6124
    23c4:	1fff6120 	.word	0x1fff6120
    23c8:	1fff0738 	.word	0x1fff0738
    23cc:	0000c4d8 	.word	0x0000c4d8
    23d0:	1fff0758 	.word	0x1fff0758
    23d4:	0000c510 	.word	0x0000c510

000023d8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( mb_num == FIFO ) fifo_filter_table[0][0] |= (1UL << 28); /* enable fifo enhancement */
  else mb_filter_table[mb_num][0] |= (1UL << 28); /* enable mb enhancement */
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    23d8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    23dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    23e0:	00db      	lsls	r3, r3, #3
    23e2:	d56b      	bpl.n	24bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    23e4:	4b38      	ldr	r3, [pc, #224]	; (24c8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xf0>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    23e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    23ea:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    23ec:	f3c7 6703 	ubfx	r7, r7, #24, #4
    23f0:	00ff      	lsls	r7, r7, #3
    23f2:	2200      	movs	r2, #0
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    }
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    23f4:	f641 6b14 	movw	fp, #7700	; 0x1e14
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    23f8:	3708      	adds	r7, #8
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    23fa:	f641 6904 	movw	r9, #7684	; 0x1e04
    23fe:	f641 6a08 	movw	sl, #7688	; 0x1e08
    2402:	e007      	b.n	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x3c>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    2404:	681d      	ldr	r5, [r3, #0]
    2406:	0f6d      	lsrs	r5, r5, #29
    2408:	2d05      	cmp	r5, #5
    240a:	d034      	beq.n	2476 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x9e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    240c:	3201      	adds	r2, #1
    240e:	b2d3      	uxtb	r3, r2
    2410:	429f      	cmp	r7, r3
    2412:	d955      	bls.n	24c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe8>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    2414:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    2418:	eb00 04ce 	add.w	r4, r0, lr, lsl #3
    241c:	f504 53f0 	add.w	r3, r4, #7680	; 0x1e00
    2420:	681d      	ldr	r5, [r3, #0]
    2422:	0f6d      	lsrs	r5, r5, #29
    2424:	2d01      	cmp	r5, #1
    2426:	d00e      	beq.n	2446 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    2428:	681d      	ldr	r5, [r3, #0]
    242a:	0f6d      	lsrs	r5, r5, #29
    242c:	2d02      	cmp	r5, #2
    242e:	d1e9      	bne.n	2404 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2c>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    2430:	f854 3009 	ldr.w	r3, [r4, r9]
    2434:	428b      	cmp	r3, r1
    2436:	d8e9      	bhi.n	240c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    2438:	f854 300a 	ldr.w	r3, [r4, sl]
    243c:	428b      	cmp	r3, r1
    243e:	d3e5      	bcc.n	240c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    2440:	2001      	movs	r0, #1
      }
    }
  }
  return 0;
}
    2442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    2446:	681c      	ldr	r4, [r3, #0]
    2448:	f414 7f60 	tst.w	r4, #896	; 0x380
    244c:	d0de      	beq.n	240c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    244e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    2452:	2400      	movs	r4, #0
    2454:	e004      	b.n	2460 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x88>
    2456:	681d      	ldr	r5, [r3, #0]
    2458:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    245c:	42ac      	cmp	r4, r5
    245e:	d2d5      	bcs.n	240c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    2460:	3401      	adds	r4, #1
    2462:	eb0e 0504 	add.w	r5, lr, r4
    2466:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    246a:	b2e4      	uxtb	r4, r4
    246c:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    2470:	428d      	cmp	r5, r1
    2472:	d1f0      	bne.n	2456 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x7e>
    2474:	e7e4      	b.n	2440 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2476:	681d      	ldr	r5, [r3, #0]
    2478:	f415 7f60 	tst.w	r5, #896	; 0x380
    247c:	d0c6      	beq.n	240c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    247e:	445c      	add	r4, fp
    2480:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2484:	f04f 0c01 	mov.w	ip, #1
    2488:	e005      	b.n	2496 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbe>
    248a:	681d      	ldr	r5, [r3, #0]
    248c:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    2490:	3501      	adds	r5, #1
    2492:	45ac      	cmp	ip, r5
    2494:	d2ba      	bcs.n	240c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2496:	eb0e 050c 	add.w	r5, lr, ip
    249a:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    249e:	6826      	ldr	r6, [r4, #0]
    24a0:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    24a4:	f8d4 8000 	ldr.w	r8, [r4]
    24a8:	400e      	ands	r6, r1
    24aa:	ea05 0508 	and.w	r5, r5, r8
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    24ae:	f10c 0c01 	add.w	ip, ip, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    24b2:	42ae      	cmp	r6, r5
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    24b4:	fa5f fc8c 	uxtb.w	ip, ip
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    24b8:	d1e7      	bne.n	248a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb2>
    24ba:	e7c1      	b.n	2440 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    24bc:	2001      	movs	r0, #1
}
    24be:	4770      	bx	lr
  return 0;
    24c0:	2000      	movs	r0, #0
}
    24c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24c6:	bf00      	nop
    24c8:	400a4000 	.word	0x400a4000

000024cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:

FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    24cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    24d0:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    24d2:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    24d6:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    24da:	f8de 3000 	ldr.w	r3, [lr]
    24de:	00db      	lsls	r3, r3, #3
    24e0:	d528      	bpl.n	2534 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    24e2:	f8de 3000 	ldr.w	r3, [lr]
    24e6:	0f5b      	lsrs	r3, r3, #29
    24e8:	2b01      	cmp	r3, #1
    24ea:	d00b      	beq.n	2504 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    24ec:	f8de 3000 	ldr.w	r3, [lr]
    24f0:	0f5b      	lsrs	r3, r3, #29
    24f2:	2b02      	cmp	r3, #2
    24f4:	d042      	beq.n	257c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    24f6:	f8de 3000 	ldr.w	r3, [lr]
    24fa:	0f5b      	lsrs	r3, r3, #29
    24fc:	2b05      	cmp	r3, #5
    24fe:	d01b      	beq.n	2538 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    }
  }
  return 0;
    2500:	2000      	movs	r0, #0
}
    2502:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    2504:	f8de 4000 	ldr.w	r4, [lr]
    2508:	f414 7f60 	tst.w	r4, #896	; 0x380
    250c:	d0f8      	beq.n	2500 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    250e:	2300      	movs	r3, #0
    2510:	004d      	lsls	r5, r1, #1
    2512:	e005      	b.n	2520 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    2514:	f8de 1000 	ldr.w	r1, [lr]
    2518:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    251c:	4563      	cmp	r3, ip
    251e:	d2ef      	bcs.n	2500 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    2520:	3301      	adds	r3, #1
    2522:	eb05 0c03 	add.w	ip, r5, r3
    2526:	f50c 6c04 	add.w	ip, ip, #2112	; 0x840
    252a:	b2db      	uxtb	r3, r3
    252c:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    2530:	4294      	cmp	r4, r2
    2532:	d1ef      	bne.n	2514 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    2534:	2001      	movs	r0, #1
}
    2536:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2538:	f8de 4000 	ldr.w	r4, [lr]
    253c:	f414 7f60 	tst.w	r4, #896	; 0x380
    2540:	d0de      	beq.n	2500 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    2542:	f505 5504 	add.w	r5, r5, #8448	; 0x2100
    2546:	3514      	adds	r5, #20
    2548:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    254a:	2301      	movs	r3, #1
    254c:	e007      	b.n	255e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    254e:	f8de 4000 	ldr.w	r4, [lr]
    2552:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    2556:	f10c 0c01 	add.w	ip, ip, #1
    255a:	4563      	cmp	r3, ip
    255c:	d2d0      	bcs.n	2500 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    255e:	682c      	ldr	r4, [r5, #0]
    2560:	ea04 0c02 	and.w	ip, r4, r2
    2564:	18cc      	adds	r4, r1, r3
    2566:	f504 6404 	add.w	r4, r4, #2112	; 0x840
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    256a:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    256c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    2570:	682e      	ldr	r6, [r5, #0]
    2572:	4034      	ands	r4, r6
    2574:	45a4      	cmp	ip, r4
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2576:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    2578:	d1e9      	bne.n	254e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    257a:	e7db      	b.n	2534 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    257c:	f242 1304 	movw	r3, #8452	; 0x2104
    2580:	58eb      	ldr	r3, [r5, r3]
    2582:	4293      	cmp	r3, r2
    2584:	d8bc      	bhi.n	2500 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    2586:	f242 1308 	movw	r3, #8456	; 0x2108
    258a:	58e8      	ldr	r0, [r5, r3]
    258c:	4290      	cmp	r0, r2
    258e:	bf34      	ite	cc
    2590:	2000      	movcc	r0, #0
    2592:	2001      	movcs	r0, #1
}
    2594:	bd70      	pop	{r4, r5, r6, pc}
    2596:	bf00      	nop

00002598 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>:
  if ( _available < _size ) _available++;
    2598:	8883      	ldrh	r3, [r0, #4]
    259a:	b29b      	uxth	r3, r3
    259c:	2b0f      	cmp	r3, #15
    259e:	d803      	bhi.n	25a8 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)+0x10>
    25a0:	8883      	ldrh	r3, [r0, #4]
    25a2:	3301      	adds	r3, #1
    25a4:	b29b      	uxth	r3, r3
    25a6:	8083      	strh	r3, [r0, #4]
  _cbuf[((tail)&(_size-1))] = value;
    25a8:	8842      	ldrh	r2, [r0, #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    25aa:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    25ae:	8803      	ldrh	r3, [r0, #0]
  _cbuf[((tail)&(_size-1))] = value;
    25b0:	f002 020f 	and.w	r2, r2, #15
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    25b4:	b29b      	uxth	r3, r3
  _cbuf[((tail)&(_size-1))] = value;
    25b6:	3202      	adds	r2, #2
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    25b8:	fa1f fc8c 	uxth.w	ip, ip
    25bc:	f083 0310 	eor.w	r3, r3, #16
    25c0:	459c      	cmp	ip, r3
  _cbuf[((tail)&(_size-1))] = value;
    25c2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    25c6:	d104      	bne.n	25d2 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)+0x3a>
    25c8:	8803      	ldrh	r3, [r0, #0]
    25ca:	3301      	adds	r3, #1
    25cc:	f003 031f 	and.w	r3, r3, #31
    25d0:	8003      	strh	r3, [r0, #0]
  tail = ((tail + 1)&(2*_size-1));
    25d2:	8843      	ldrh	r3, [r0, #2]
    25d4:	3301      	adds	r3, #1
    25d6:	f003 031f 	and.w	r3, r3, #31
    25da:	8043      	strh	r3, [r0, #2]
}
    25dc:	4770      	bx	lr
    25de:	bf00      	nop

000025e0 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>:
  if ( _available < _size ) _available++;
    25e0:	8883      	ldrh	r3, [r0, #4]
    25e2:	b29b      	uxth	r3, r3
    25e4:	2b0f      	cmp	r3, #15
    25e6:	d803      	bhi.n	25f0 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)+0x10>
    25e8:	8883      	ldrh	r3, [r0, #4]
    25ea:	3301      	adds	r3, #1
    25ec:	b29b      	uxth	r3, r3
    25ee:	8083      	strh	r3, [r0, #4]
  _cbuf[((tail)&(_size-1))] = value;
    25f0:	8842      	ldrh	r2, [r0, #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    25f2:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    25f6:	8803      	ldrh	r3, [r0, #0]
  _cbuf[((tail)&(_size-1))] = value;
    25f8:	f002 020f 	and.w	r2, r2, #15
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    25fc:	b29b      	uxth	r3, r3
  _cbuf[((tail)&(_size-1))] = value;
    25fe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    2602:	fa1f fc8c 	uxth.w	ip, ip
    2606:	f083 0310 	eor.w	r3, r3, #16
    260a:	459c      	cmp	ip, r3
  _cbuf[((tail)&(_size-1))] = value;
    260c:	80d1      	strh	r1, [r2, #6]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    260e:	d104      	bne.n	261a <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)+0x3a>
    2610:	8803      	ldrh	r3, [r0, #0]
    2612:	3301      	adds	r3, #1
    2614:	f003 031f 	and.w	r3, r3, #31
    2618:	8003      	strh	r3, [r0, #0]
  tail = ((tail + 1)&(2*_size-1));
    261a:	8843      	ldrh	r3, [r0, #2]
    261c:	3301      	adds	r3, #1
    261e:	f003 031f 	and.w	r3, r3, #31
    2622:	8043      	strh	r3, [r0, #2]
}
    2624:	4770      	bx	lr
    2626:	bf00      	nop

00002628 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    2628:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    262c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    2630:	00db      	lsls	r3, r3, #3
    2632:	d56b      	bpl.n	270c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    2634:	4b38      	ldr	r3, [pc, #224]	; (2718 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xf0>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    2636:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    263a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    263c:	f3c7 6703 	ubfx	r7, r7, #24, #4
    2640:	00ff      	lsls	r7, r7, #3
    2642:	2200      	movs	r2, #0
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2644:	f641 6b14 	movw	fp, #7700	; 0x1e14
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    2648:	3708      	adds	r7, #8
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    264a:	f641 6904 	movw	r9, #7684	; 0x1e04
    264e:	f641 6a08 	movw	sl, #7688	; 0x1e08
    2652:	e007      	b.n	2664 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x3c>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    2654:	681d      	ldr	r5, [r3, #0]
    2656:	0f6d      	lsrs	r5, r5, #29
    2658:	2d05      	cmp	r5, #5
    265a:	d034      	beq.n	26c6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x9e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    265c:	3201      	adds	r2, #1
    265e:	b2d3      	uxtb	r3, r2
    2660:	429f      	cmp	r7, r3
    2662:	d955      	bls.n	2710 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe8>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    2664:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    2668:	eb00 04ce 	add.w	r4, r0, lr, lsl #3
    266c:	f504 53f0 	add.w	r3, r4, #7680	; 0x1e00
    2670:	681d      	ldr	r5, [r3, #0]
    2672:	0f6d      	lsrs	r5, r5, #29
    2674:	2d01      	cmp	r5, #1
    2676:	d00e      	beq.n	2696 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    2678:	681d      	ldr	r5, [r3, #0]
    267a:	0f6d      	lsrs	r5, r5, #29
    267c:	2d02      	cmp	r5, #2
    267e:	d1e9      	bne.n	2654 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2c>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    2680:	f854 3009 	ldr.w	r3, [r4, r9]
    2684:	428b      	cmp	r3, r1
    2686:	d8e9      	bhi.n	265c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    2688:	f854 300a 	ldr.w	r3, [r4, sl]
    268c:	428b      	cmp	r3, r1
    268e:	d3e5      	bcc.n	265c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    2690:	2001      	movs	r0, #1
}
    2692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    2696:	681c      	ldr	r4, [r3, #0]
    2698:	f414 7f60 	tst.w	r4, #896	; 0x380
    269c:	d0de      	beq.n	265c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    269e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    26a2:	2400      	movs	r4, #0
    26a4:	e004      	b.n	26b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x88>
    26a6:	681d      	ldr	r5, [r3, #0]
    26a8:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    26ac:	42ac      	cmp	r4, r5
    26ae:	d2d5      	bcs.n	265c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    26b0:	3401      	adds	r4, #1
    26b2:	eb0e 0504 	add.w	r5, lr, r4
    26b6:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    26ba:	b2e4      	uxtb	r4, r4
    26bc:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    26c0:	428d      	cmp	r5, r1
    26c2:	d1f0      	bne.n	26a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x7e>
    26c4:	e7e4      	b.n	2690 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    26c6:	681d      	ldr	r5, [r3, #0]
    26c8:	f415 7f60 	tst.w	r5, #896	; 0x380
    26cc:	d0c6      	beq.n	265c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    26ce:	445c      	add	r4, fp
    26d0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    26d4:	f04f 0c01 	mov.w	ip, #1
    26d8:	e005      	b.n	26e6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbe>
    26da:	681d      	ldr	r5, [r3, #0]
    26dc:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    26e0:	3501      	adds	r5, #1
    26e2:	45ac      	cmp	ip, r5
    26e4:	d2ba      	bcs.n	265c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    26e6:	eb0e 050c 	add.w	r5, lr, ip
    26ea:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    26ee:	6826      	ldr	r6, [r4, #0]
    26f0:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    26f4:	f8d4 8000 	ldr.w	r8, [r4]
    26f8:	400e      	ands	r6, r1
    26fa:	ea05 0508 	and.w	r5, r5, r8
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    26fe:	f10c 0c01 	add.w	ip, ip, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2702:	42ae      	cmp	r6, r5
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2704:	fa5f fc8c 	uxtb.w	ip, ip
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2708:	d1e7      	bne.n	26da <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb2>
    270a:	e7c1      	b.n	2690 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    270c:	2001      	movs	r0, #1
}
    270e:	4770      	bx	lr
  return 0;
    2710:	2000      	movs	r0, #0
}
    2712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2716:	bf00      	nop
    2718:	40024000 	.word	0x40024000

0000271c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    271c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    2720:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    2722:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    2726:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    272a:	f8de 3000 	ldr.w	r3, [lr]
    272e:	00db      	lsls	r3, r3, #3
    2730:	d528      	bpl.n	2784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    2732:	f8de 3000 	ldr.w	r3, [lr]
    2736:	0f5b      	lsrs	r3, r3, #29
    2738:	2b01      	cmp	r3, #1
    273a:	d00b      	beq.n	2754 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    273c:	f8de 3000 	ldr.w	r3, [lr]
    2740:	0f5b      	lsrs	r3, r3, #29
    2742:	2b02      	cmp	r3, #2
    2744:	d042      	beq.n	27cc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    2746:	f8de 3000 	ldr.w	r3, [lr]
    274a:	0f5b      	lsrs	r3, r3, #29
    274c:	2b05      	cmp	r3, #5
    274e:	d01b      	beq.n	2788 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
  return 0;
    2750:	2000      	movs	r0, #0
}
    2752:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    2754:	f8de 4000 	ldr.w	r4, [lr]
    2758:	f414 7f60 	tst.w	r4, #896	; 0x380
    275c:	d0f8      	beq.n	2750 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    275e:	2300      	movs	r3, #0
    2760:	004d      	lsls	r5, r1, #1
    2762:	e005      	b.n	2770 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    2764:	f8de 1000 	ldr.w	r1, [lr]
    2768:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    276c:	4563      	cmp	r3, ip
    276e:	d2ef      	bcs.n	2750 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    2770:	3301      	adds	r3, #1
    2772:	eb05 0c03 	add.w	ip, r5, r3
    2776:	f50c 6c04 	add.w	ip, ip, #2112	; 0x840
    277a:	b2db      	uxtb	r3, r3
    277c:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    2780:	4294      	cmp	r4, r2
    2782:	d1ef      	bne.n	2764 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    2784:	2001      	movs	r0, #1
}
    2786:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2788:	f8de 4000 	ldr.w	r4, [lr]
    278c:	f414 7f60 	tst.w	r4, #896	; 0x380
    2790:	d0de      	beq.n	2750 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    2792:	f505 5504 	add.w	r5, r5, #8448	; 0x2100
    2796:	3514      	adds	r5, #20
    2798:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    279a:	2301      	movs	r3, #1
    279c:	e007      	b.n	27ae <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    279e:	f8de 4000 	ldr.w	r4, [lr]
    27a2:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    27a6:	f10c 0c01 	add.w	ip, ip, #1
    27aa:	4563      	cmp	r3, ip
    27ac:	d2d0      	bcs.n	2750 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    27ae:	682c      	ldr	r4, [r5, #0]
    27b0:	ea04 0c02 	and.w	ip, r4, r2
    27b4:	18cc      	adds	r4, r1, r3
    27b6:	f504 6404 	add.w	r4, r4, #2112	; 0x840
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    27ba:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    27bc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    27c0:	682e      	ldr	r6, [r5, #0]
    27c2:	4034      	ands	r4, r6
    27c4:	45a4      	cmp	ip, r4
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    27c6:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    27c8:	d1e9      	bne.n	279e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    27ca:	e7db      	b.n	2784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    27cc:	f242 1304 	movw	r3, #8452	; 0x2104
    27d0:	58eb      	ldr	r3, [r5, r3]
    27d2:	4293      	cmp	r3, r2
    27d4:	d8bc      	bhi.n	2750 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    27d6:	f242 1308 	movw	r3, #8456	; 0x2108
    27da:	58e8      	ldr	r0, [r5, r3]
    27dc:	4290      	cmp	r0, r2
    27de:	bf34      	ite	cc
    27e0:	2000      	movcc	r0, #0
    27e2:	2001      	movcs	r0, #1
}
    27e4:	bd70      	pop	{r4, r5, r6, pc}
    27e6:	bf00      	nop

000027e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    27e8:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    27ea:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    27ec:	481b      	ldr	r0, [pc, #108]	; (285c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
    27ee:	d823      	bhi.n	2838 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    27f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
    27f2:	2301      	movs	r3, #1
    27f4:	408b      	lsls	r3, r1
    27f6:	4323      	orrs	r3, r4
    27f8:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    27fa:	4b19      	ldr	r3, [pc, #100]	; (2860 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    27fc:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    27fe:	440b      	add	r3, r1
    2800:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    2802:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    2806:	6019      	str	r1, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    2808:	b1f8      	cbz	r0, 284a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
    280a:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    280c:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    280e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    2812:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    2814:	6058      	str	r0, [r3, #4]
  if ( msg.flags.extended ) code |= (3UL << 21);
    2816:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    281a:	68d0      	ldr	r0, [r2, #12]
}
    281c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2820:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    2822:	6098      	str	r0, [r3, #8]
    2824:	6910      	ldr	r0, [r2, #16]
    2826:	ba00      	rev	r0, r0
    2828:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    282a:	7ad2      	ldrb	r2, [r2, #11]
    282c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    2830:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    2834:	601a      	str	r2, [r3, #0]
}
    2836:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    2838:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    283a:	f1a1 0c20 	sub.w	ip, r1, #32
    283e:	2301      	movs	r3, #1
    2840:	fa03 f30c 	lsl.w	r3, r3, ip
    2844:	4323      	orrs	r3, r4
    2846:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    2848:	e7d7      	b.n	27fa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    284a:	6814      	ldr	r4, [r2, #0]
    284c:	4805      	ldr	r0, [pc, #20]	; (2864 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    284e:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    2850:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    2854:	6058      	str	r0, [r3, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    2856:	0509      	lsls	r1, r1, #20
    2858:	e7df      	b.n	281a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    285a:	bf00      	nop
    285c:	40024000 	.word	0x40024000
    2860:	04002408 	.word	0x04002408
    2864:	1ffc0000 	.word	0x1ffc0000

00002868 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    2868:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( msg.seq ) {
    286a:	7d8b      	ldrb	r3, [r1, #22]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    286c:	4e4d      	ldr	r6, [pc, #308]	; (29a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    286e:	b08d      	sub	sp, #52	; 0x34
    2870:	460d      	mov	r5, r1
    2872:	4604      	mov	r4, r0
  if ( msg.seq ) {
    2874:	2b00      	cmp	r3, #0
    2876:	d14b      	bne.n	2910 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2878:	6833      	ldr	r3, [r6, #0]
    287a:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    287e:	d025      	beq.n	28cc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    2880:	f7fd ff56 	bl	730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2884:	6833      	ldr	r3, [r6, #0]
    2886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    288a:	3301      	adds	r3, #1
    288c:	4298      	cmp	r0, r3
    288e:	4684      	mov	ip, r0
    2890:	d21e      	bcs.n	28d0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2892:	4945      	ldr	r1, [pc, #276]	; (29a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2894:	4843      	ldr	r0, [pc, #268]	; (29a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    2896:	e007      	b.n	28a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    2898:	6803      	ldr	r3, [r0, #0]
    289a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    289e:	fa5f fc82 	uxtb.w	ip, r2
    28a2:	3301      	adds	r3, #1
    28a4:	459c      	cmp	ip, r3
    28a6:	d213      	bcs.n	28d0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    28a8:	eb0c 0301 	add.w	r3, ip, r1
    28ac:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    28ae:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    28b2:	681b      	ldr	r3, [r3, #0]
    28b4:	f3c3 6303 	ubfx	r3, r3, #24, #4
    28b8:	2b08      	cmp	r3, #8
    28ba:	d1ed      	bne.n	2898 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    28bc:	4620      	mov	r0, r4
    28be:	462a      	mov	r2, r5
    28c0:	4661      	mov	r1, ip
    28c2:	f7ff ff91 	bl	27e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    28c6:	2001      	movs	r0, #1
}
    28c8:	b00d      	add	sp, #52	; 0x34
    28ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    28cc:	6833      	ldr	r3, [r6, #0]
    28ce:	e7e0      	b.n	2892 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    28d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    28d2:	46ec      	mov	ip, sp
    28d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    28d8:	e895 0003 	ldmia.w	r5, {r0, r1}
    28dc:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    28e0:	f04f 0eff 	mov.w	lr, #255	; 0xff
    28e4:	f88d e014 	strb.w	lr, [sp, #20]
    28e8:	466f      	mov	r7, sp
    28ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    28ec:	ae06      	add	r6, sp, #24
    28ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    28f0:	e89c 0003 	ldmia.w	ip, {r0, r1}
    28f4:	e886 0003 	stmia.w	r6, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    28f8:	2218      	movs	r2, #24
    28fa:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
    28fe:	eb0d 0102 	add.w	r1, sp, r2
    2902:	301a      	adds	r0, #26
    2904:	f7ff fc08 	bl	2118 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    2908:	f04f 30ff 	mov.w	r0, #4294967295
}
    290c:	b00d      	add	sp, #52	; 0x34
    290e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2910:	6830      	ldr	r0, [r6, #0]
    2912:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    2916:	d042      	beq.n	299e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x136>
    2918:	f7fd ff0a 	bl	730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    291c:	6833      	ldr	r3, [r6, #0]
    291e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2922:	3301      	adds	r3, #1
    2924:	4283      	cmp	r3, r0
    2926:	d929      	bls.n	297c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2928:	4e1f      	ldr	r6, [pc, #124]	; (29a8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    292a:	4f1e      	ldr	r7, [pc, #120]	; (29a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    292c:	e005      	b.n	293a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd2>
    292e:	683b      	ldr	r3, [r7, #0]
    2930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2934:	3301      	adds	r3, #1
    2936:	4298      	cmp	r0, r3
    2938:	d220      	bcs.n	297c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    293a:	1983      	adds	r3, r0, r6
    293c:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    293e:	1c41      	adds	r1, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2940:	681a      	ldr	r2, [r3, #0]
    2942:	0112      	lsls	r2, r2, #4
    2944:	4684      	mov	ip, r0
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2946:	b2c8      	uxtb	r0, r1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2948:	d5f1      	bpl.n	292e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc6>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2950:	2b08      	cmp	r3, #8
    2952:	d01b      	beq.n	298c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x124>
      CAN_message_t msg_copy = msg;
    2954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2956:	466e      	mov	r6, sp
    2958:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    295a:	e895 0003 	ldmia.w	r5, {r0, r1}
    295e:	e886 0003 	stmia.w	r6, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    2962:	46ee      	mov	lr, sp
      msg_copy.mb = first_tx_mb;
    2964:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    2968:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    296c:	af06      	add	r7, sp, #24
    296e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    2970:	e896 0003 	ldmia.w	r6, {r0, r1}
    2974:	2218      	movs	r2, #24
    2976:	e887 0003 	stmia.w	r7, {r0, r1}
    297a:	e7be      	b.n	28fa <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x92>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    297c:	4b0b      	ldr	r3, [pc, #44]	; (29ac <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x144>)
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2984:	2b08      	cmp	r3, #8
  return -1;
    2986:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    298a:	d1e3      	bne.n	2954 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xec>
      writeTxMailbox(first_tx_mb, msg);
    298c:	4620      	mov	r0, r4
    298e:	462a      	mov	r2, r5
    2990:	fa5f f18c 	uxtb.w	r1, ip
    2994:	f7ff ff28 	bl	27e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    2998:	2001      	movs	r0, #1
}
    299a:	b00d      	add	sp, #52	; 0x34
    299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    299e:	6833      	ldr	r3, [r6, #0]
    29a0:	e7c2      	b.n	2928 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc0>
    29a2:	bf00      	nop
    29a4:	40024000 	.word	0x40024000
    29a8:	04002408 	.word	0x04002408
    29ac:	40024070 	.word	0x40024070

000029b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    29b0:	b510      	push	{r4, lr}
  if ( mb_num == FIFO ) {
    29b2:	780b      	ldrb	r3, [r1, #0]
    29b4:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    29b6:	4604      	mov	r4, r0
    29b8:	b082      	sub	sp, #8
    29ba:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    29bc:	d013      	beq.n	29e6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    29be:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
    29c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    29c6:	685b      	ldr	r3, [r3, #4]
    29c8:	b113      	cbz	r3, 29d0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    29ca:	9201      	str	r2, [sp, #4]
    29cc:	4798      	blx	r3
    29ce:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    29d0:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    29d4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
    29d8:	b11b      	cbz	r3, 29e2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    29da:	b002      	add	sp, #8
    29dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    29e0:	4718      	bx	r3
}
    29e2:	b002      	add	sp, #8
    29e4:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    29e6:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    29ea:	f8d4 3704 	ldr.w	r3, [r4, #1796]	; 0x704
    29ee:	2b00      	cmp	r3, #0
    29f0:	d0f0      	beq.n	29d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    29f2:	9201      	str	r2, [sp, #4]
    29f4:	4798      	blx	r3
    29f6:	9801      	ldr	r0, [sp, #4]
    29f8:	e7ec      	b.n	29d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    29fa:	bf00      	nop

000029fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    29fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    2a00:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    2a04:	b08f      	sub	sp, #60	; 0x3c
  if ( !isEventsUsed ) isEventsUsed = 1;
    2a06:	f897 3700 	ldrb.w	r3, [r7, #1792]	; 0x700
FCTP_FUNC uint64_t FCTP_OPT::events() {
    2a0a:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    2a0c:	b913      	cbnz	r3, 2a14 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    2a0e:	2301      	movs	r3, #1
    2a10:	f887 3700 	strb.w	r3, [r7, #1792]	; 0x700
        uint16_t size() { return _available; }
    2a14:	8b23      	ldrh	r3, [r4, #24]
    2a16:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d14f      	bne.n	2abc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xc0>
  NVIC_DISABLE_IRQ(nvicIrq);
    2a1c:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    2a20:	0953      	lsrs	r3, r2, #5
    2a22:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    2a26:	3360      	adds	r3, #96	; 0x60
    2a28:	009b      	lsls	r3, r3, #2
    2a2a:	f002 021f 	and.w	r2, r2, #31
    2a2e:	2101      	movs	r1, #1
    2a30:	fa01 f202 	lsl.w	r2, r1, r2
    2a34:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    2a38:	601a      	str	r2, [r3, #0]
    2a3a:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2a3e:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    2a40:	b323      	cbz	r3, 2a8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2a42:	f8b6 1b1a 	ldrh.w	r1, [r6, #2842]	; 0xb1a
    2a46:	231a      	movs	r3, #26
    2a48:	f001 010f 	and.w	r1, r1, #15
    2a4c:	fb03 4101 	mla	r1, r3, r1, r4
    2a50:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    2a54:	3112      	adds	r1, #18
    2a56:	2218      	movs	r2, #24
    2a58:	a808      	add	r0, sp, #32
    memmove(&frame, buf, sizeof(frame));
    2a5a:	ad08      	add	r5, sp, #32
    2a5c:	f001 fa48 	bl	3ef0 <memcpy>
    2a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a62:	f10d 0c08 	add.w	ip, sp, #8
    2a66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2a6a:	e895 0003 	ldmia.w	r5, {r0, r1}
    2a6e:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    2a72:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    2a76:	1c4b      	adds	r3, r1, #1
    2a78:	d04a      	beq.n	2b10 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x114>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2a7a:	4b53      	ldr	r3, [pc, #332]	; (2bc8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>)
    2a7c:	440b      	add	r3, r1
    2a7e:	011b      	lsls	r3, r3, #4
    2a80:	681b      	ldr	r3, [r3, #0]
    2a82:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2a86:	2b08      	cmp	r3, #8
    2a88:	f000 8081 	beq.w	2b8e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x192>
  NVIC_ENABLE_IRQ(nvicIrq);
    2a8c:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    2a90:	0953      	lsrs	r3, r2, #5
    2a92:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    2a96:	3340      	adds	r3, #64	; 0x40
    2a98:	009b      	lsls	r3, r3, #2
    2a9a:	2101      	movs	r1, #1
    2a9c:	f002 021f 	and.w	r2, r2, #31
    2aa0:	fa01 f202 	lsl.w	r2, r1, r2
    2aa4:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    2aa6:	8b23      	ldrh	r3, [r4, #24]
    2aa8:	f8b6 0b1e 	ldrh.w	r0, [r6, #2846]	; 0xb1e
    2aac:	b29b      	uxth	r3, r3
    2aae:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    2ab0:	2100      	movs	r1, #0
    2ab2:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    2ab6:	b00f      	add	sp, #60	; 0x3c
    2ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2abc:	8aa1      	ldrh	r1, [r4, #20]
    2abe:	231a      	movs	r3, #26
    2ac0:	b2c9      	uxtb	r1, r1
    2ac2:	fb03 4101 	mla	r1, r3, r1, r4
    2ac6:	2218      	movs	r2, #24
    2ac8:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    2acc:	a808      	add	r0, sp, #32
    2ace:	f001 fa0f 	bl	3ef0 <memcpy>
    head = ((head + 1)&(2*_size-1));
    2ad2:	8aa3      	ldrh	r3, [r4, #20]
    2ad4:	3301      	adds	r3, #1
    2ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2ada:	82a3      	strh	r3, [r4, #20]
    if ( _available ) _available--;
    2adc:	8b23      	ldrh	r3, [r4, #24]
    2ade:	b29b      	uxth	r3, r3
    2ae0:	b11b      	cbz	r3, 2aea <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xee>
    2ae2:	8b23      	ldrh	r3, [r4, #24]
    2ae4:	3b01      	subs	r3, #1
    2ae6:	b29b      	uxth	r3, r3
    2ae8:	8323      	strh	r3, [r4, #24]
    memmove(&frame, buf, sizeof(frame));
    2aea:	ad08      	add	r5, sp, #32
    2aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2aee:	ae02      	add	r6, sp, #8
    2af0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2af2:	e895 0003 	ldmia.w	r5, {r0, r1}
    2af6:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    2afa:	aa02      	add	r2, sp, #8
    2afc:	f89d 301c 	ldrb.w	r3, [sp, #28]
    2b00:	f88d 3007 	strb.w	r3, [sp, #7]
    2b04:	f10d 0107 	add.w	r1, sp, #7
    2b08:	4620      	mov	r0, r4
    2b0a:	f7ff ff51 	bl	29b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2b0e:	e785      	b.n	2a1c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2b10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 2bcc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    2b14:	f8d8 5000 	ldr.w	r5, [r8]
    2b18:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    2b1c:	d050      	beq.n	2bc0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1c4>
    2b1e:	f7fd fe07 	bl	730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2b22:	f8d8 3000 	ldr.w	r3, [r8]
    2b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b2a:	3301      	adds	r3, #1
    2b2c:	4283      	cmp	r3, r0
    2b2e:	4605      	mov	r5, r0
    2b30:	d9ac      	bls.n	2a8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2b32:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2bc8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2b36:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2bcc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    2b3a:	e008      	b.n	2b4e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x152>
    2b3c:	f8d8 3000 	ldr.w	r3, [r8]
    2b40:	3501      	adds	r5, #1
    2b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b46:	b2ed      	uxtb	r5, r5
    2b48:	3301      	adds	r3, #1
    2b4a:	429d      	cmp	r5, r3
    2b4c:	d29e      	bcs.n	2a8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2b4e:	eb05 0309 	add.w	r3, r5, r9
    2b52:	011b      	lsls	r3, r3, #4
    2b54:	681b      	ldr	r3, [r3, #0]
    2b56:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2b5a:	2b08      	cmp	r3, #8
    2b5c:	d1ee      	bne.n	2b3c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
          writeTxMailbox(i, frame);
    2b5e:	aa02      	add	r2, sp, #8
    2b60:	4629      	mov	r1, r5
    2b62:	4620      	mov	r0, r4
    2b64:	f7ff fe40 	bl	27e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2b68:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    2b6c:	3301      	adds	r3, #1
    2b6e:	f003 031f 	and.w	r3, r3, #31
    2b72:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    2b76:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2b7a:	b29b      	uxth	r3, r3
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	d0dd      	beq.n	2b3c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
    2b80:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2b84:	3b01      	subs	r3, #1
    2b86:	b29b      	uxth	r3, r3
    2b88:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    2b8c:	e7d6      	b.n	2b3c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
      writeTxMailbox(frame.mb, frame);
    2b8e:	aa02      	add	r2, sp, #8
    2b90:	b2c9      	uxtb	r1, r1
    2b92:	4620      	mov	r0, r4
    2b94:	f7ff fe28 	bl	27e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2b98:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    2b9c:	3301      	adds	r3, #1
    2b9e:	f003 031f 	and.w	r3, r3, #31
    2ba2:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    2ba6:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2baa:	b29b      	uxth	r3, r3
    2bac:	2b00      	cmp	r3, #0
    2bae:	f43f af6d 	beq.w	2a8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    2bb2:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    2bb6:	3b01      	subs	r3, #1
    2bb8:	b29b      	uxth	r3, r3
    2bba:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    2bbe:	e765      	b.n	2a8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2bc0:	f8d8 3000 	ldr.w	r3, [r8]
    2bc4:	e7b5      	b.n	2b32 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x136>
    2bc6:	bf00      	nop
    2bc8:	04002408 	.word	0x04002408
    2bcc:	40024000 	.word	0x40024000

00002bd0 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2bd0:	8843      	ldrh	r3, [r0, #2]
    2bd2:	f04f 0c1a 	mov.w	ip, #26
    2bd6:	b2db      	uxtb	r3, r3
    2bd8:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    2bdc:	b510      	push	{r4, lr}
    2bde:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2be0:	2000      	movs	r0, #0
    2be2:	f883 0106 	strb.w	r0, [r3, #262]	; 0x106
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    2be6:	8863      	ldrh	r3, [r4, #2]
    2be8:	b2db      	uxtb	r3, r3
    2bea:	fb0c 4303 	mla	r3, ip, r3, r4
    2bee:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    2bf2:	8860      	ldrh	r0, [r4, #2]
    2bf4:	b2c0      	uxtb	r0, r0
    2bf6:	fb0c 4000 	mla	r0, ip, r0, r4
    2bfa:	f500 7084 	add.w	r0, r0, #264	; 0x108
    2bfe:	f003 fc73 	bl	64e8 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    2c02:	8862      	ldrh	r2, [r4, #2]
    2c04:	8823      	ldrh	r3, [r4, #0]
    2c06:	b29b      	uxth	r3, r3
    2c08:	b292      	uxth	r2, r2
    2c0a:	f483 7380 	eor.w	r3, r3, #256	; 0x100
    2c0e:	429a      	cmp	r2, r3
    2c10:	d104      	bne.n	2c1c <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    2c12:	8823      	ldrh	r3, [r4, #0]
    2c14:	3301      	adds	r3, #1
    2c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2c1a:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    2c1c:	8863      	ldrh	r3, [r4, #2]
    2c1e:	3301      	adds	r3, #1
    2c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2c24:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    2c26:	88a3      	ldrh	r3, [r4, #4]
    2c28:	b29b      	uxth	r3, r3
    2c2a:	2bff      	cmp	r3, #255	; 0xff
    2c2c:	d803      	bhi.n	2c36 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    2c2e:	88a3      	ldrh	r3, [r4, #4]
    2c30:	3301      	adds	r3, #1
    2c32:	b29b      	uxth	r3, r3
    2c34:	80a3      	strh	r3, [r4, #4]
}
    2c36:	bd10      	pop	{r4, pc}

00002c38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t cl = msg;
    2c3c:	468c      	mov	ip, r1
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2c3e:	460f      	mov	r7, r1
    2c40:	4606      	mov	r6, r0
    2c42:	4605      	mov	r5, r0
    2c44:	f100 0810 	add.w	r8, r0, #16
  CAN_message_t cl = msg;
    2c48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2c4c:	b08d      	sub	sp, #52	; 0x34
  CAN_message_t cl = msg;
    2c4e:	466c      	mov	r4, sp
    2c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c52:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2c56:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    2c5a:	f8df a094 	ldr.w	sl, [pc, #148]	; 2cf0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xb8>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2c5e:	f04f 0901 	mov.w	r9, #1
    thisListener = listener[listenerPos];
    2c62:	f855 4f04 	ldr.w	r4, [r5, #4]!
    if (thisListener != nullptr) {
    2c66:	b15c      	cbz	r4, 2c80 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2c68:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    2c6c:	68a3      	ldr	r3, [r4, #8]
    2c6e:	fa09 f102 	lsl.w	r1, r9, r2
    2c72:	4219      	tst	r1, r3
    2c74:	d020      	beq.n	2cb8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x80>
    2c76:	6823      	ldr	r3, [r4, #0]
    2c78:	f8d3 b000 	ldr.w	fp, [r3]
    2c7c:	45d3      	cmp	fp, sl
    2c7e:	d116      	bne.n	2cae <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x76>
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    2c80:	4545      	cmp	r5, r8
    2c82:	d1ee      	bne.n	2c62 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x2a>
  if ( !isEventsUsed ) {
    2c84:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    2c88:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
    2c8c:	b323      	cbz	r3, 2cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xa0>
  memmove(buf, &msg, sizeof(msg));
    2c8e:	2218      	movs	r2, #24
    2c90:	4639      	mov	r1, r7
    2c92:	eb0d 0002 	add.w	r0, sp, r2
    2c96:	f001 f92b 	bl	3ef0 <memcpy>
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    2c9a:	2218      	movs	r2, #24
    2c9c:	eb0d 0102 	add.w	r1, sp, r2
    2ca0:	f106 0014 	add.w	r0, r6, #20
    2ca4:	f7ff ff94 	bl	2bd0 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
}
    2ca8:	b00d      	add	sp, #52	; 0x34
    2caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2cae:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2cb2:	4669      	mov	r1, sp
    2cb4:	4620      	mov	r0, r4
    2cb6:	47d8      	blx	fp
      if (thisListener->generalCallbackActive) thisListener->frameHandler (cl, -1, cl.bus);
    2cb8:	7c23      	ldrb	r3, [r4, #16]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d0e0      	beq.n	2c80 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    2cbe:	6823      	ldr	r3, [r4, #0]
    2cc0:	f8d3 b000 	ldr.w	fp, [r3]
    2cc4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2cc8:	45d3      	cmp	fp, sl
    2cca:	d0d9      	beq.n	2c80 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    2ccc:	4620      	mov	r0, r4
    2cce:	f04f 32ff 	mov.w	r2, #4294967295
    2cd2:	4669      	mov	r1, sp
    2cd4:	47d8      	blx	fp
    2cd6:	e7d3      	b.n	2c80 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    2cd8:	7d3b      	ldrb	r3, [r7, #20]
    2cda:	f88d 3018 	strb.w	r3, [sp, #24]
    2cde:	463a      	mov	r2, r7
    2ce0:	a906      	add	r1, sp, #24
    2ce2:	4630      	mov	r0, r6
    2ce4:	f7ff f8c8 	bl	1e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
}
    2ce8:	b00d      	add	sp, #52	; 0x34
    2cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cee:	bf00      	nop
    2cf0:	00000459 	.word	0x00000459

00002cf4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  mb_filter_table[mb_num][4] = id4; // id4
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
  if ( !distribution ) return; /* distribution not enabled */
    2cf4:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    2cf8:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	f000 80db 	beq.w	2eb8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c4>
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    2d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t frame = msg;
    2d06:	460f      	mov	r7, r1
    2d08:	4605      	mov	r5, r0
    2d0a:	460e      	mov	r6, r1
    2d0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    2d0e:	b089      	sub	sp, #36	; 0x24
  CAN_message_t frame = msg;
    2d10:	ac02      	add	r4, sp, #8
    2d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d14:	e897 0003 	ldmia.w	r7, {r0, r1}
    2d18:	e884 0003 	stmia.w	r4, {r0, r1}

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    2d1c:	f8df c250 	ldr.w	ip, [pc, #592]	; 2f70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
    2d20:	f8dc 3000 	ldr.w	r3, [ip]
    2d24:	009b      	lsls	r3, r3, #2
    2d26:	d552      	bpl.n	2dce <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    2d28:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    2d2c:	f3c3 6a03 	ubfx	sl, r3, #24, #4
    2d30:	2400      	movs	r4, #0
    2d32:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    2d36:	f10a 0a08 	add.w	sl, sl, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    2d3a:	4622      	mov	r2, r4
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
            frame.mb = FIFO;
    2d3c:	f04f 0963 	mov.w	r9, #99	; 0x63
    2d40:	e00c      	b.n	2d5c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    2d42:	0f5b      	lsrs	r3, r3, #29
    2d44:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2d46:	683b      	ldr	r3, [r7, #0]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    2d48:	f000 809a 	beq.w	2e80 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    2d4c:	0f5b      	lsrs	r3, r3, #29
    2d4e:	2b05      	cmp	r3, #5
    2d50:	f000 80dd 	beq.w	2f0e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x21a>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    2d54:	3401      	adds	r4, #1
    2d56:	b2e2      	uxtb	r2, r4
    2d58:	4592      	cmp	sl, r2
    2d5a:	d938      	bls.n	2dce <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    2d5c:	f996 3014 	ldrsb.w	r3, [r6, #20]
    2d60:	2b63      	cmp	r3, #99	; 0x63
    2d62:	d034      	beq.n	2dce <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    2d64:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    2d68:	eb05 0bc8 	add.w	fp, r5, r8, lsl #3
    2d6c:	f50b 57f0 	add.w	r7, fp, #7680	; 0x1e00
    2d70:	683b      	ldr	r3, [r7, #0]
    2d72:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    2d76:	d0ed      	beq.n	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2d78:	683b      	ldr	r3, [r7, #0]
    2d7a:	0f5b      	lsrs	r3, r3, #29
    2d7c:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2d7e:	683b      	ldr	r3, [r7, #0]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2d80:	d1df      	bne.n	2d42 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4e>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2d82:	79f2      	ldrb	r2, [r6, #7]
    2d84:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2d88:	429a      	cmp	r2, r3
    2d8a:	d1e3      	bne.n	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2d8c:	683b      	ldr	r3, [r7, #0]
    2d8e:	f413 7f60 	tst.w	r3, #896	; 0x380
    2d92:	d0df      	beq.n	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2d94:	ea4f 0b48 	mov.w	fp, r8, lsl #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2d98:	2300      	movs	r3, #0
    2d9a:	e006      	b.n	2daa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb6>
    2d9c:	683a      	ldr	r2, [r7, #0]
    2d9e:	fa5f f388 	uxtb.w	r3, r8
    2da2:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    2da6:	4293      	cmp	r3, r2
    2da8:	d2d4      	bcs.n	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2daa:	f103 0801 	add.w	r8, r3, #1
    2dae:	eb0b 0308 	add.w	r3, fp, r8
    2db2:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    2db6:	9a02      	ldr	r2, [sp, #8]
    2db8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    2dbc:	429a      	cmp	r2, r3
    2dbe:	d1ed      	bne.n	2d9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
            struct2queueRx(frame);
    2dc0:	a902      	add	r1, sp, #8
    2dc2:	4628      	mov	r0, r5
            frame.mb = FIFO;
    2dc4:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    2dc8:	f7ff ff36 	bl	2c38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2dcc:	e7e6      	b.n	2d9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2dce:	4f68      	ldr	r7, [pc, #416]	; (2f70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>)
        }
      }
    } /* end of fifo scan */
  } /* end of fifo checking */

  frame.idhit = 0;
    2dd0:	2300      	movs	r3, #0
    2dd2:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2dd6:	683c      	ldr	r4, [r7, #0]
    2dd8:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    2ddc:	d03f      	beq.n	2e5e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16a>
    2dde:	f7fd fccb 	bl	778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>

  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2de2:	683b      	ldr	r3, [r7, #0]
    2de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2de8:	3301      	adds	r3, #1
    2dea:	4283      	cmp	r3, r0
    2dec:	4604      	mov	r4, r0
    2dee:	d933      	bls.n	2e58 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x164>
    2df0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2f70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
          struct2queueRx(frame);
        }
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    2df4:	f242 1704 	movw	r7, #8452	; 0x2104
    2df8:	f242 1808 	movw	r8, #8456	; 0x2108
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    2dfc:	f996 3014 	ldrsb.w	r3, [r6, #20]
    2e00:	42a3      	cmp	r3, r4
    2e02:	d020      	beq.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    2e04:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2e08:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
    2e0c:	f502 5a04 	add.w	sl, r2, #8448	; 0x2100
    2e10:	f8da 3000 	ldr.w	r3, [sl]
    2e14:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    2e18:	d015      	beq.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    2e1a:	f8da 3000 	ldr.w	r3, [sl]
    2e1e:	79f0      	ldrb	r0, [r6, #7]
    2e20:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    2e24:	4298      	cmp	r0, r3
    2e26:	d10e      	bne.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2e28:	f8da 3000 	ldr.w	r3, [sl]
    2e2c:	0f5b      	lsrs	r3, r3, #29
    2e2e:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2e30:	f8da 3000 	ldr.w	r3, [sl]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2e34:	d041      	beq.n	2eba <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c6>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    2e36:	0f5b      	lsrs	r3, r3, #29
    2e38:	2b02      	cmp	r3, #2
    2e3a:	d012      	beq.n	2e62 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16e>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    2e3c:	f8da 3000 	ldr.w	r3, [sl]
    2e40:	0f5b      	lsrs	r3, r3, #29
    2e42:	2b05      	cmp	r3, #5
    2e44:	d05b      	beq.n	2efe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x20a>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2e46:	f8d9 3000 	ldr.w	r3, [r9]
    2e4a:	3401      	adds	r4, #1
    2e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2e50:	b2e4      	uxtb	r4, r4
    2e52:	3301      	adds	r3, #1
    2e54:	429c      	cmp	r4, r3
    2e56:	d3d1      	bcc.n	2dfc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x108>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
  } /* end of mb scan */
}
    2e58:	b009      	add	sp, #36	; 0x24
    2e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2e5e:	683b      	ldr	r3, [r7, #0]
    2e60:	e7c6      	b.n	2df0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xfc>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    2e62:	59d1      	ldr	r1, [r2, r7]
    2e64:	9b02      	ldr	r3, [sp, #8]
    2e66:	428b      	cmp	r3, r1
    2e68:	d3ed      	bcc.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    2e6a:	f852 2008 	ldr.w	r2, [r2, r8]
    2e6e:	4293      	cmp	r3, r2
    2e70:	d8e9      	bhi.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        struct2queueRx(frame);
    2e72:	a902      	add	r1, sp, #8
    2e74:	4628      	mov	r0, r5
        frame.mb = i;
    2e76:	f88d 401c 	strb.w	r4, [sp, #28]
        struct2queueRx(frame);
    2e7a:	f7ff fedd 	bl	2c38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2e7e:	e7e2      	b.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2e80:	79f2      	ldrb	r2, [r6, #7]
    2e82:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2e86:	429a      	cmp	r2, r3
    2e88:	f47f af64 	bne.w	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    2e8c:	f641 6304 	movw	r3, #7684	; 0x1e04
    2e90:	f85b 2003 	ldr.w	r2, [fp, r3]
    2e94:	9b02      	ldr	r3, [sp, #8]
    2e96:	4293      	cmp	r3, r2
    2e98:	f4ff af5c 	bcc.w	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2e9c:	f641 6208 	movw	r2, #7688	; 0x1e08
    2ea0:	f85b 2002 	ldr.w	r2, [fp, r2]
    2ea4:	4293      	cmp	r3, r2
    2ea6:	f63f af55 	bhi.w	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          struct2queueRx(frame);
    2eaa:	a902      	add	r1, sp, #8
    2eac:	4628      	mov	r0, r5
          frame.mb = FIFO;
    2eae:	f88d 901c 	strb.w	r9, [sp, #28]
          struct2queueRx(frame);
    2eb2:	f7ff fec1 	bl	2c38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2eb6:	e74d      	b.n	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2eb8:	4770      	bx	lr
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2eba:	f413 7f60 	tst.w	r3, #896	; 0x380
    2ebe:	d0c2      	beq.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2ec0:	004a      	lsls	r2, r1, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2ec2:	2300      	movs	r3, #0
    2ec4:	e007      	b.n	2ed6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e2>
    2ec6:	f8da 1000 	ldr.w	r1, [sl]
    2eca:	fa5f f38b 	uxtb.w	r3, fp
    2ece:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    2ed2:	428b      	cmp	r3, r1
    2ed4:	d2b7      	bcs.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2ed6:	f103 0b01 	add.w	fp, r3, #1
    2eda:	eb02 030b 	add.w	r3, r2, fp
    2ede:	f503 6304 	add.w	r3, r3, #2112	; 0x840
    2ee2:	9902      	ldr	r1, [sp, #8]
    2ee4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    2ee8:	4299      	cmp	r1, r3
    2eea:	d1ec      	bne.n	2ec6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
          struct2queueRx(frame);
    2eec:	a902      	add	r1, sp, #8
    2eee:	4628      	mov	r0, r5
    2ef0:	9200      	str	r2, [sp, #0]
          frame.mb = i;
    2ef2:	f88d 401c 	strb.w	r4, [sp, #28]
          struct2queueRx(frame);
    2ef6:	f7ff fe9f 	bl	2c38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2efa:	9a00      	ldr	r2, [sp, #0]
    2efc:	e7e3      	b.n	2ec6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    2efe:	9a02      	ldr	r2, [sp, #8]
    2f00:	4621      	mov	r1, r4
    2f02:	4628      	mov	r0, r5
    2f04:	f7ff fae2 	bl	24cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2f08:	2800      	cmp	r0, #0
    2f0a:	d09c      	beq.n	2e46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    2f0c:	e7b1      	b.n	2e72 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17e>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    2f0e:	683b      	ldr	r3, [r7, #0]
    2f10:	f413 7f60 	tst.w	r3, #896	; 0x380
    2f14:	f43f af1e 	beq.w	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2f18:	f50b 53f0 	add.w	r3, fp, #7680	; 0x1e00
    2f1c:	3314      	adds	r3, #20
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    2f1e:	2701      	movs	r7, #1
    2f20:	e00a      	b.n	2f38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x244>
    2f22:	f50b 51f0 	add.w	r1, fp, #7680	; 0x1e00
    2f26:	3701      	adds	r7, #1
    2f28:	6809      	ldr	r1, [r1, #0]
    2f2a:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    2f2e:	b2ff      	uxtb	r7, r7
    2f30:	3101      	adds	r1, #1
    2f32:	428f      	cmp	r7, r1
    2f34:	f4bf af0e 	bcs.w	2d54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2f38:	eb07 0148 	add.w	r1, r7, r8, lsl #1
    2f3c:	f501 61f0 	add.w	r1, r1, #1920	; 0x780
    2f40:	6818      	ldr	r0, [r3, #0]
    2f42:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
    2f46:	9902      	ldr	r1, [sp, #8]
    2f48:	f8d3 c000 	ldr.w	ip, [r3]
    2f4c:	4008      	ands	r0, r1
    2f4e:	ea0e 010c 	and.w	r1, lr, ip
    2f52:	4288      	cmp	r0, r1
    2f54:	d1e5      	bne.n	2f22 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
            struct2queueRx(frame);
    2f56:	a902      	add	r1, sp, #8
    2f58:	4628      	mov	r0, r5
    2f5a:	9301      	str	r3, [sp, #4]
            frame.idhit = i;
    2f5c:	f88d 200e 	strb.w	r2, [sp, #14]
    2f60:	9200      	str	r2, [sp, #0]
            frame.mb = FIFO;
    2f62:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    2f66:	f7ff fe67 	bl	2c38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2f6a:	e9dd 2300 	ldrd	r2, r3, [sp]
    2f6e:	e7d8      	b.n	2f22 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
    2f70:	400a4000 	.word	0x400a4000

00002f74 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    2f78:	4db9      	ldr	r5, [pc, #740]	; (3260 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
  return FLEXCANb_IMASK1(_bus);
    2f7a:	4fba      	ldr	r7, [pc, #744]	; (3264 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2f7c:	4681      	mov	r9, r0
  CAN_message_t msg; // setup a temporary storage buffer
    2f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2f80:	b097      	sub	sp, #92	; 0x5c
  CAN_message_t msg; // setup a temporary storage buffer
    2f82:	ac04      	add	r4, sp, #16
    2f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f86:	e895 0003 	ldmia.w	r5, {r0, r1}
    2f8a:	e884 0003 	stmia.w	r4, {r0, r1}
  return FLEXCANb_IMASK1(_bus);
    2f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return FLEXCANb_IFLAG1(_bus);
    2f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2f92:	683b      	ldr	r3, [r7, #0]
  return FLEXCANb_IFLAG1(_bus);
    2f94:	9001      	str	r0, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2f96:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  return FLEXCANb_IMASK1(_bus);
    2f9a:	f04f 0600 	mov.w	r6, #0
    2f9e:	468b      	mov	fp, r1
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2fa0:	d103      	bne.n	2faa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    2fa2:	683a      	ldr	r2, [r7, #0]
    2fa4:	0094      	lsls	r4, r2, #2
    2fa6:	f100 80eb 	bmi.w	3180 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2faa:	4dae      	ldr	r5, [pc, #696]	; (3264 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2fac:	9b01      	ldr	r3, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2fae:	682c      	ldr	r4, [r5, #0]
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2fb0:	f043 0301 	orr.w	r3, r3, #1
    2fb4:	fab3 f383 	clz	r3, r3
    2fb8:	f1c3 0320 	rsb	r3, r3, #32
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2fbc:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2fc0:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2fc4:	f000 824f 	beq.w	3466 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f2>
    2fc8:	f7fd fbd6 	bl	778 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2fcc:	682b      	ldr	r3, [r5, #0]
    2fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2fd2:	3301      	adds	r3, #1
    2fd4:	4283      	cmp	r3, r0
    2fd6:	4604      	mov	r4, r0
    2fd8:	f240 809e 	bls.w	3118 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2fdc:	4582      	cmp	sl, r0
    2fde:	f240 809b 	bls.w	3118 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    2fe2:	1c67      	adds	r7, r4, #1
      (void)FLEXCANb_TIMER(_bus);
    2fe4:	f8df 827c 	ldr.w	r8, [pc, #636]	; 3264 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
    2fe8:	b2fd      	uxtb	r5, r7
    2fea:	e016      	b.n	301a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    2fec:	2906      	cmp	r1, #6
    2fee:	f000 80ad 	beq.w	314c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1d8>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    2ff2:	2904      	cmp	r1, #4
    2ff4:	f000 813e 	beq.w	3274 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x300>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2ff8:	2908      	cmp	r1, #8
    2ffa:	f000 81d7 	beq.w	33ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x438>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2ffe:	f8d8 3000 	ldr.w	r3, [r8]
    3002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3006:	3301      	adds	r3, #1
    3008:	42ab      	cmp	r3, r5
    300a:	b2fc      	uxtb	r4, r7
    300c:	f240 8084 	bls.w	3118 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    3010:	45a2      	cmp	sl, r4
    3012:	f105 0501 	add.w	r5, r5, #1
    3016:	d97f      	bls.n	3118 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    3018:	1c67      	adds	r7, r4, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    301a:	f1c4 0220 	rsb	r2, r4, #32
    301e:	f1a4 0320 	sub.w	r3, r4, #32
    3022:	fa06 f202 	lsl.w	r2, r6, r2
    3026:	fa2b f104 	lsr.w	r1, fp, r4
    302a:	fa26 f303 	lsr.w	r3, r6, r3
    302e:	4311      	orrs	r1, r2
    3030:	4319      	orrs	r1, r3
    3032:	07c9      	lsls	r1, r1, #31
    3034:	d5e3      	bpl.n	2ffe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    3036:	9901      	ldr	r1, [sp, #4]
    3038:	40e1      	lsrs	r1, r4
    303a:	4311      	orrs	r1, r2
    303c:	4319      	orrs	r1, r3
    303e:	07c9      	lsls	r1, r1, #31
    3040:	d5dd      	bpl.n	2ffe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    3042:	4b89      	ldr	r3, [pc, #548]	; (3268 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f4>)
    3044:	18e3      	adds	r3, r4, r3
    3046:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    3048:	681a      	ldr	r2, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    304a:	f3c2 6103 	ubfx	r1, r2, #24, #4
    304e:	2902      	cmp	r1, #2
    3050:	d1cc      	bne.n	2fec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x78>
      msg.flags.extended = (bool)(code & (1UL << 21));
    3052:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3056:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3058:	2900      	cmp	r1, #0
    305a:	bf14      	ite	ne
    305c:	f04f 0c01 	movne.w	ip, #1
    3060:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3064:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    3068:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    306c:	d17f      	bne.n	316e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    306e:	0c80      	lsrs	r0, r0, #18
    3070:	9004      	str	r0, [sp, #16]
      msg.timestamp = code & 0xFFFF;
    3072:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3076:	f3c2 4203 	ubfx	r2, r2, #16, #4
    307a:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    307e:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.mb = mb_num;
    3082:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    3086:	f892 2915 	ldrb.w	r2, [r2, #2325]	; 0x915
    308a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    308e:	689a      	ldr	r2, [r3, #8]
    3090:	f88d 201f 	strb.w	r2, [sp, #31]
    3094:	689a      	ldr	r2, [r3, #8]
    3096:	0a12      	lsrs	r2, r2, #8
    3098:	f88d 201e 	strb.w	r2, [sp, #30]
    309c:	689a      	ldr	r2, [r3, #8]
    309e:	0c12      	lsrs	r2, r2, #16
    30a0:	f88d 201d 	strb.w	r2, [sp, #29]
    30a4:	689a      	ldr	r2, [r3, #8]
    30a6:	0e12      	lsrs	r2, r2, #24
    30a8:	f88d 201c 	strb.w	r2, [sp, #28]
    30ac:	68da      	ldr	r2, [r3, #12]
    30ae:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    30b2:	68da      	ldr	r2, [r3, #12]
    30b4:	0a12      	lsrs	r2, r2, #8
    30b6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    30ba:	68da      	ldr	r2, [r3, #12]
    30bc:	0c12      	lsrs	r2, r2, #16
    30be:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    30c2:	68da      	ldr	r2, [r3, #12]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    30c4:	2900      	cmp	r1, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    30c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    30ca:	f88d 2020 	strb.w	r2, [sp, #32]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    30ce:	bf14      	ite	ne
    30d0:	f04f 628c 	movne.w	r2, #73400320	; 0x4600000
    30d4:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
    30d8:	601a      	str	r2, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    30da:	f8d8 3008 	ldr.w	r3, [r8, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    30de:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    30e2:	2301      	movs	r3, #1
    30e4:	40a3      	lsls	r3, r4
    30e6:	4313      	orrs	r3, r2
    30e8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    30ec:	9a04      	ldr	r2, [sp, #16]
    30ee:	4621      	mov	r1, r4
    30f0:	4648      	mov	r0, r9
    30f2:	f7ff f9eb 	bl	24cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    30f6:	2800      	cmp	r0, #0
    30f8:	f040 8153 	bne.w	33a2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42e>
      frame_distribution(msg);
    30fc:	a904      	add	r1, sp, #16
    30fe:	4648      	mov	r0, r9
    3100:	f7ff fdf8 	bl	2cf4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    3104:	a804      	add	r0, sp, #16
    3106:	f3af 8000 	nop.w
      ext_output2(msg);
    310a:	a804      	add	r0, sp, #16
    310c:	f3af 8000 	nop.w
      ext_output3(msg);
    3110:	a804      	add	r0, sp, #16
    3112:	f3af 8000 	nop.w
    }
    3116:	e772      	b.n	2ffe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    3118:	4e52      	ldr	r6, [pc, #328]	; (3264 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    311a:	4d54      	ldr	r5, [pc, #336]	; (326c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f8>)
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    311c:	6a34      	ldr	r4, [r6, #32]
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    311e:	682b      	ldr	r3, [r5, #0]
    3120:	ea84 0203 	eor.w	r2, r4, r3
    3124:	4b52      	ldr	r3, [pc, #328]	; (3270 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2fc>)
    3126:	4013      	ands	r3, r2
    3128:	b13b      	cbz	r3, 313a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
        uint16_t size() { return _available; }
    312a:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    312e:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
    3132:	b29b      	uxth	r3, r3
    if ( busESR1.size() < busESR1.capacity() ) {
    3134:	2b0f      	cmp	r3, #15
    3136:	f240 8198 	bls.w	346a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f6>
  FLEXCANb_ESR1(_bus) |= esr1;
    313a:	4a4a      	ldr	r2, [pc, #296]	; (3264 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    313c:	6a13      	ldr	r3, [r2, #32]
    313e:	4323      	orrs	r3, r4
    3140:	6213      	str	r3, [r2, #32]
  asm volatile ("dsb");	
    3142:	f3bf 8f4f 	dsb	sy
}
    3146:	b017      	add	sp, #92	; 0x5c
    3148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg.flags.extended = (bool)(code & (1UL << 21));
    314c:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3150:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3152:	2900      	cmp	r1, #0
    3154:	bf14      	ite	ne
    3156:	f04f 0c01 	movne.w	ip, #1
    315a:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    315e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    3162:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3166:	d105      	bne.n	3174 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x200>
    3168:	0c80      	lsrs	r0, r0, #18
    316a:	9004      	str	r0, [sp, #16]
    316c:	e004      	b.n	3178 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x204>
    316e:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3170:	2101      	movs	r1, #1
    3172:	e77e      	b.n	3072 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3174:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3176:	2101      	movs	r1, #1
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    3178:	2001      	movs	r0, #1
    317a:	f88d 0019 	strb.w	r0, [sp, #25]
    317e:	e778      	b.n	3072 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    3180:	068a      	lsls	r2, r1, #26
    3182:	f57f af12 	bpl.w	2faa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3186:	0685      	lsls	r5, r0, #26
    3188:	f57f af0f 	bpl.w	2faa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    318c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
      msg.timestamp = code & 0xFFFF;
    3190:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3194:	f3c2 4103 	ubfx	r1, r2, #16, #4
    3198:	f88d 101b 	strb.w	r1, [sp, #27]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    319c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    31a0:	4c30      	ldr	r4, [pc, #192]	; (3264 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    31a2:	f402 1000 	and.w	r0, r2, #2097152	; 0x200000
    31a6:	42b0      	cmp	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    31a8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.remote = (bool)(code & (1UL << 20));
    31ac:	f3c2 5000 	ubfx	r0, r2, #20, #1
    31b0:	f88d 0018 	strb.w	r0, [sp, #24]
      msg.idhit = code >> 23;
    31b4:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.flags.extended = (bool)(code & (1UL << 21));
    31b8:	bf12      	itee	ne
    31ba:	2001      	movne	r0, #1
    31bc:	4630      	moveq	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    31be:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    31c0:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.idhit = code >> 23;
    31c4:	f88d 2016 	strb.w	r2, [sp, #22]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    31c8:	9104      	str	r1, [sp, #16]
    31ca:	a808      	add	r0, sp, #32
      msg.idhit = code >> 23;
    31cc:	2200      	movs	r2, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    31ce:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    31d2:	40d1      	lsrs	r1, r2
    31d4:	3208      	adds	r2, #8
    31d6:	2a20      	cmp	r2, #32
    31d8:	f800 1d01 	strb.w	r1, [r0, #-1]!
    31dc:	d1f7      	bne.n	31ce <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x25a>
    31de:	4821      	ldr	r0, [pc, #132]	; (3264 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    31e0:	a909      	add	r1, sp, #36	; 0x24
    31e2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    31e6:	40da      	lsrs	r2, r3
    31e8:	3308      	adds	r3, #8
    31ea:	2b20      	cmp	r3, #32
    31ec:	f801 2d01 	strb.w	r2, [r1, #-1]!
    31f0:	d1f7      	bne.n	31e2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26e>
      msg.bus = busNumber;
    31f2:	f509 5300 	add.w	r3, r9, #8192	; 0x2000
    31f6:	f893 3915 	ldrb.w	r3, [r3, #2325]	; 0x915
    31fa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    31fe:	2363      	movs	r3, #99	; 0x63
    3200:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      (void)FLEXCANb_TIMER(_bus);
    3204:	6883      	ldr	r3, [r0, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3206:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3208:	f043 0320 	orr.w	r3, r3, #32
    320c:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    320e:	9b01      	ldr	r3, [sp, #4]
    3210:	065c      	lsls	r4, r3, #25
    3212:	d503      	bpl.n	321c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2a8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3214:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    321a:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    321c:	9b01      	ldr	r3, [sp, #4]
    321e:	0618      	lsls	r0, r3, #24
    3220:	d504      	bpl.n	322c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2b8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3222:	4a10      	ldr	r2, [pc, #64]	; (3264 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    3224:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    322a:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    322c:	a904      	add	r1, sp, #16
    322e:	4648      	mov	r0, r9
    3230:	f7ff fd60 	bl	2cf4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    3234:	a804      	add	r0, sp, #16
    3236:	f3af 8000 	nop.w
      ext_output2(msg);
    323a:	a804      	add	r0, sp, #16
    323c:	f3af 8000 	nop.w
      ext_output3(msg);
    3240:	a804      	add	r0, sp, #16
    3242:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    3246:	9904      	ldr	r1, [sp, #16]
    3248:	4648      	mov	r0, r9
    324a:	f7ff f8c5 	bl	23d8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    324e:	2800      	cmp	r0, #0
    3250:	f43f aeab 	beq.w	2faa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3254:	a904      	add	r1, sp, #16
    3256:	4648      	mov	r0, r9
    3258:	f7ff fcee 	bl	2c38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    325c:	e6a5      	b.n	2faa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    325e:	bf00      	nop
    3260:	0000c5a0 	.word	0x0000c5a0
    3264:	400a4000 	.word	0x400a4000
    3268:	0400a408 	.word	0x0400a408
    326c:	1fff0ee4 	.word	0x1fff0ee4
    3270:	0007ffbf 	.word	0x0007ffbf
      msg.flags.extended = (bool)(code & (1UL << 21));
    3274:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    3278:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    327a:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    327c:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3280:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3284:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    3288:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    328c:	bf14      	ite	ne
    328e:	2001      	movne	r0, #1
    3290:	2000      	moveq	r0, #0
    3292:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    3296:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    329a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    329e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    32a2:	6898      	ldr	r0, [r3, #8]
    32a4:	f88d 001f 	strb.w	r0, [sp, #31]
    32a8:	6898      	ldr	r0, [r3, #8]
    32aa:	ea4f 2010 	mov.w	r0, r0, lsr #8
    32ae:	f88d 001e 	strb.w	r0, [sp, #30]
    32b2:	6898      	ldr	r0, [r3, #8]
    32b4:	ea4f 4010 	mov.w	r0, r0, lsr #16
    32b8:	f88d 001d 	strb.w	r0, [sp, #29]
    32bc:	6898      	ldr	r0, [r3, #8]
    32be:	ea4f 6010 	mov.w	r0, r0, lsr #24
    32c2:	f88d 001c 	strb.w	r0, [sp, #28]
    32c6:	68d8      	ldr	r0, [r3, #12]
    32c8:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    32cc:	68d8      	ldr	r0, [r3, #12]
    32ce:	ea4f 2010 	mov.w	r0, r0, lsr #8
    32d2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    32d6:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    32d8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    32dc:	bf08      	it	eq
    32de:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    32e0:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    32e2:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    32e4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    32e8:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    32ec:	68d8      	ldr	r0, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    32ee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    32f2:	0e00      	lsrs	r0, r0, #24
    32f4:	f88d 0020 	strb.w	r0, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    32f8:	b129      	cbz	r1, 3306 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x392>
    32fa:	a804      	add	r0, sp, #16
    32fc:	9203      	str	r2, [sp, #12]
    32fe:	9302      	str	r3, [sp, #8]
    3300:	4788      	blx	r1
    3302:	9a03      	ldr	r2, [sp, #12]
    3304:	9b02      	ldr	r3, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    3306:	f8d2 2908 	ldr.w	r2, [r2, #2312]	; 0x908
    330a:	b11a      	cbz	r2, 3314 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a0>
    330c:	a804      	add	r0, sp, #16
    330e:	9302      	str	r3, [sp, #8]
    3310:	4790      	blx	r2
    3312:	9b02      	ldr	r3, [sp, #8]
    3314:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    3318:	9202      	str	r2, [sp, #8]
    331a:	f8b2 2b1e 	ldrh.w	r2, [r2, #2846]	; 0xb1e
    331e:	b292      	uxth	r2, r2
      if ( txBuffer.size() ) {
    3320:	2a00      	cmp	r2, #0
    3322:	f000 80b1 	beq.w	3488 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x514>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    3326:	9b02      	ldr	r3, [sp, #8]
    3328:	f8b3 1b1a 	ldrh.w	r1, [r3, #2842]	; 0xb1a
    332c:	231a      	movs	r3, #26
    332e:	f001 010f 	and.w	r1, r1, #15
    3332:	fb03 9101 	mla	r1, r3, r1, r9
    3336:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    333a:	3112      	adds	r1, #18
    333c:	2218      	movs	r2, #24
    333e:	a810      	add	r0, sp, #64	; 0x40
    3340:	f000 fdd6 	bl	3ef0 <memcpy>
        memmove(&frame, buf, sizeof(frame));
    3344:	ab0a      	add	r3, sp, #40	; 0x28
    3346:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    334a:	469e      	mov	lr, r3
    334c:	9303      	str	r3, [sp, #12]
    334e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3352:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3356:	e89c 0003 	ldmia.w	ip, {r0, r1}
    335a:	e88e 0003 	stmia.w	lr, {r0, r1}
        if ( frame.mb == -1 ) {
    335e:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
    3362:	1c5a      	adds	r2, r3, #1
    3364:	f000 809b 	beq.w	349e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x52a>
        else if ( frame.mb == mb_num ) {
    3368:	429c      	cmp	r4, r3
    336a:	f47f ae48 	bne.w	2ffe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(frame.mb, frame);
    336e:	9a03      	ldr	r2, [sp, #12]
    3370:	b2e1      	uxtb	r1, r4
    3372:	4648      	mov	r0, r9
    3374:	f7fe fda6 	bl	1ec4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    3378:	9a02      	ldr	r2, [sp, #8]
    337a:	f8b2 3b1a 	ldrh.w	r3, [r2, #2842]	; 0xb1a
    337e:	3301      	adds	r3, #1
    3380:	f003 031f 	and.w	r3, r3, #31
    3384:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    if ( _available ) _available--;
    3388:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    338c:	b29b      	uxth	r3, r3
    338e:	2b00      	cmp	r3, #0
    3390:	f43f ae35 	beq.w	2ffe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    3394:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    3398:	3b01      	subs	r3, #1
    339a:	b29b      	uxth	r3, r3
    339c:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    33a0:	e62d      	b.n	2ffe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    33a2:	a904      	add	r1, sp, #16
    33a4:	4648      	mov	r0, r9
    33a6:	f7ff fc47 	bl	2c38 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    33aa:	e6a7      	b.n	30fc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x188>
      msg.flags.extended = (bool)(code & (1UL << 21));
    33ac:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    33b0:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    33b2:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    33b4:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    33b8:	f3c2 4203 	ubfx	r2, r2, #16, #4
    33bc:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    33c0:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    33c4:	bf14      	ite	ne
    33c6:	2001      	movne	r0, #1
    33c8:	2000      	moveq	r0, #0
    33ca:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    33ce:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    33d2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    33d6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    33da:	6898      	ldr	r0, [r3, #8]
    33dc:	f88d 001f 	strb.w	r0, [sp, #31]
    33e0:	6898      	ldr	r0, [r3, #8]
    33e2:	ea4f 2010 	mov.w	r0, r0, lsr #8
    33e6:	f88d 001e 	strb.w	r0, [sp, #30]
    33ea:	6898      	ldr	r0, [r3, #8]
    33ec:	ea4f 4010 	mov.w	r0, r0, lsr #16
    33f0:	f88d 001d 	strb.w	r0, [sp, #29]
    33f4:	6898      	ldr	r0, [r3, #8]
    33f6:	ea4f 6010 	mov.w	r0, r0, lsr #24
    33fa:	f88d 001c 	strb.w	r0, [sp, #28]
    33fe:	68d8      	ldr	r0, [r3, #12]
    3400:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    3404:	68d8      	ldr	r0, [r3, #12]
    3406:	ea4f 2010 	mov.w	r0, r0, lsr #8
    340a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    340e:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3410:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    3414:	bf08      	it	eq
    3416:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3418:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    341a:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    341c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3420:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3424:	68db      	ldr	r3, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3426:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    342a:	0e1b      	lsrs	r3, r3, #24
    342c:	f88d 3020 	strb.w	r3, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3430:	b119      	cbz	r1, 343a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4c6>
    3432:	a804      	add	r0, sp, #16
    3434:	9202      	str	r2, [sp, #8]
    3436:	4788      	blx	r1
    3438:	9a02      	ldr	r2, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    343a:	f8d2 3908 	ldr.w	r3, [r2, #2312]	; 0x908
    343e:	b10b      	cbz	r3, 3444 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4d0>
    3440:	a804      	add	r0, sp, #16
    3442:	4798      	blx	r3
        uint16_t size() { return _available; }
    3444:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    3448:	9302      	str	r3, [sp, #8]
    344a:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
    344e:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    3450:	2b00      	cmp	r3, #0
    3452:	f47f af68 	bne.w	3326 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b2>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3456:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    345a:	2301      	movs	r3, #1
    345c:	40a3      	lsls	r3, r4
    345e:	4313      	orrs	r3, r2
    3460:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    3464:	e5cb      	b.n	2ffe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    3466:	682b      	ldr	r3, [r5, #0]
    3468:	e5bb      	b.n	2fe2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6e>
      busESR1.write(esr1);
    346a:	f509 50e6 	add.w	r0, r9, #7360	; 0x1cc0
    346e:	4621      	mov	r1, r4
    3470:	3010      	adds	r0, #16
    3472:	f7ff f891 	bl	2598 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>
      busECR.write(FLEXCANb_ECR(_bus));
    3476:	69f1      	ldr	r1, [r6, #28]
    3478:	f509 50ec 	add.w	r0, r9, #7552	; 0x1d80
    347c:	b289      	uxth	r1, r1
    347e:	3018      	adds	r0, #24
    3480:	f7ff f8ae 	bl	25e0 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>
      last_esr1 = esr1;
    3484:	602c      	str	r4, [r5, #0]
    3486:	e658      	b.n	313a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3488:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    348c:	2201      	movs	r2, #1
    348e:	40a2      	lsls	r2, r4
    3490:	430a      	orrs	r2, r1
    3492:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    3496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    349a:	601a      	str	r2, [r3, #0]
    349c:	e5af      	b.n	2ffe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(mb_num, frame);
    349e:	9a03      	ldr	r2, [sp, #12]
    34a0:	4621      	mov	r1, r4
    34a2:	e766      	b.n	3372 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>

000034a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    34a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t cl = msg;
    34a8:	468c      	mov	ip, r1
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    34aa:	460f      	mov	r7, r1
    34ac:	4606      	mov	r6, r0
    34ae:	4605      	mov	r5, r0
    34b0:	f100 0810 	add.w	r8, r0, #16
  CAN_message_t cl = msg;
    34b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    34b8:	b08d      	sub	sp, #52	; 0x34
  CAN_message_t cl = msg;
    34ba:	466c      	mov	r4, sp
    34bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    34be:	e89c 0003 	ldmia.w	ip, {r0, r1}
    34c2:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    34c6:	f8df a094 	ldr.w	sl, [pc, #148]	; 355c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xb8>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    34ca:	f04f 0901 	mov.w	r9, #1
    thisListener = listener[listenerPos];
    34ce:	f855 4f04 	ldr.w	r4, [r5, #4]!
    if (thisListener != nullptr) {
    34d2:	b15c      	cbz	r4, 34ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    34d4:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    34d8:	68a3      	ldr	r3, [r4, #8]
    34da:	fa09 f102 	lsl.w	r1, r9, r2
    34de:	4219      	tst	r1, r3
    34e0:	d020      	beq.n	3524 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x80>
    34e2:	6823      	ldr	r3, [r4, #0]
    34e4:	f8d3 b000 	ldr.w	fp, [r3]
    34e8:	45d3      	cmp	fp, sl
    34ea:	d116      	bne.n	351a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x76>
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    34ec:	4545      	cmp	r5, r8
    34ee:	d1ee      	bne.n	34ce <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x2a>
  if ( !isEventsUsed ) {
    34f0:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    34f4:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
    34f8:	b323      	cbz	r3, 3544 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xa0>
  memmove(buf, &msg, sizeof(msg));
    34fa:	2218      	movs	r2, #24
    34fc:	4639      	mov	r1, r7
    34fe:	eb0d 0002 	add.w	r0, sp, r2
    3502:	f000 fcf5 	bl	3ef0 <memcpy>
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    3506:	2218      	movs	r2, #24
    3508:	eb0d 0102 	add.w	r1, sp, r2
    350c:	f106 0014 	add.w	r0, r6, #20
    3510:	f7ff fb5e 	bl	2bd0 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
}
    3514:	b00d      	add	sp, #52	; 0x34
    3516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    351a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    351e:	4669      	mov	r1, sp
    3520:	4620      	mov	r0, r4
    3522:	47d8      	blx	fp
      if (thisListener->generalCallbackActive) thisListener->frameHandler (cl, -1, cl.bus);
    3524:	7c23      	ldrb	r3, [r4, #16]
    3526:	2b00      	cmp	r3, #0
    3528:	d0e0      	beq.n	34ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    352a:	6823      	ldr	r3, [r4, #0]
    352c:	f8d3 b000 	ldr.w	fp, [r3]
    3530:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3534:	45d3      	cmp	fp, sl
    3536:	d0d9      	beq.n	34ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    3538:	4620      	mov	r0, r4
    353a:	f04f 32ff 	mov.w	r2, #4294967295
    353e:	4669      	mov	r1, sp
    3540:	47d8      	blx	fp
    3542:	e7d3      	b.n	34ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    3544:	7d3b      	ldrb	r3, [r7, #20]
    3546:	f88d 3018 	strb.w	r3, [sp, #24]
    354a:	463a      	mov	r2, r7
    354c:	a906      	add	r1, sp, #24
    354e:	4630      	mov	r0, r6
    3550:	f7ff fa2e 	bl	29b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
}
    3554:	b00d      	add	sp, #52	; 0x34
    3556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    355a:	bf00      	nop
    355c:	00000459 	.word	0x00000459

00003560 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  if ( !distribution ) return; /* distribution not enabled */
    3560:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    3564:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
    3568:	2b00      	cmp	r3, #0
    356a:	f000 80db 	beq.w	3724 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c4>
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    356e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t frame = msg;
    3572:	460f      	mov	r7, r1
    3574:	4605      	mov	r5, r0
    3576:	460e      	mov	r6, r1
    3578:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    357a:	b089      	sub	sp, #36	; 0x24
  CAN_message_t frame = msg;
    357c:	ac02      	add	r4, sp, #8
    357e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3580:	e897 0003 	ldmia.w	r7, {r0, r1}
    3584:	e884 0003 	stmia.w	r4, {r0, r1}
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    3588:	f8df c250 	ldr.w	ip, [pc, #592]	; 37dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
    358c:	f8dc 3000 	ldr.w	r3, [ip]
    3590:	009b      	lsls	r3, r3, #2
    3592:	d552      	bpl.n	363a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    3594:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    3598:	f3c3 6a03 	ubfx	sl, r3, #24, #4
    359c:	2400      	movs	r4, #0
    359e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    35a2:	f10a 0a08 	add.w	sl, sl, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    35a6:	4622      	mov	r2, r4
            frame.mb = FIFO;
    35a8:	f04f 0963 	mov.w	r9, #99	; 0x63
    35ac:	e00c      	b.n	35c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    35ae:	0f5b      	lsrs	r3, r3, #29
    35b0:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    35b2:	683b      	ldr	r3, [r7, #0]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    35b4:	f000 809a 	beq.w	36ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    35b8:	0f5b      	lsrs	r3, r3, #29
    35ba:	2b05      	cmp	r3, #5
    35bc:	f000 80dd 	beq.w	377a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x21a>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    35c0:	3401      	adds	r4, #1
    35c2:	b2e2      	uxtb	r2, r4
    35c4:	4592      	cmp	sl, r2
    35c6:	d938      	bls.n	363a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    35c8:	f996 3014 	ldrsb.w	r3, [r6, #20]
    35cc:	2b63      	cmp	r3, #99	; 0x63
    35ce:	d034      	beq.n	363a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    35d0:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    35d4:	eb05 0bc8 	add.w	fp, r5, r8, lsl #3
    35d8:	f50b 57f0 	add.w	r7, fp, #7680	; 0x1e00
    35dc:	683b      	ldr	r3, [r7, #0]
    35de:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    35e2:	d0ed      	beq.n	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    35e4:	683b      	ldr	r3, [r7, #0]
    35e6:	0f5b      	lsrs	r3, r3, #29
    35e8:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    35ea:	683b      	ldr	r3, [r7, #0]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    35ec:	d1df      	bne.n	35ae <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4e>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    35ee:	79f2      	ldrb	r2, [r6, #7]
    35f0:	f3c3 4300 	ubfx	r3, r3, #16, #1
    35f4:	429a      	cmp	r2, r3
    35f6:	d1e3      	bne.n	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    35f8:	683b      	ldr	r3, [r7, #0]
    35fa:	f413 7f60 	tst.w	r3, #896	; 0x380
    35fe:	d0df      	beq.n	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    3600:	ea4f 0b48 	mov.w	fp, r8, lsl #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    3604:	2300      	movs	r3, #0
    3606:	e006      	b.n	3616 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb6>
    3608:	683a      	ldr	r2, [r7, #0]
    360a:	fa5f f388 	uxtb.w	r3, r8
    360e:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    3612:	4293      	cmp	r3, r2
    3614:	d2d4      	bcs.n	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    3616:	f103 0801 	add.w	r8, r3, #1
    361a:	eb0b 0308 	add.w	r3, fp, r8
    361e:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    3622:	9a02      	ldr	r2, [sp, #8]
    3624:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3628:	429a      	cmp	r2, r3
    362a:	d1ed      	bne.n	3608 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
            struct2queueRx(frame);
    362c:	a902      	add	r1, sp, #8
    362e:	4628      	mov	r0, r5
            frame.mb = FIFO;
    3630:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    3634:	f7ff ff36 	bl	34a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3638:	e7e6      	b.n	3608 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    363a:	4f68      	ldr	r7, [pc, #416]	; (37dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>)
  frame.idhit = 0;
    363c:	2300      	movs	r3, #0
    363e:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3642:	683c      	ldr	r4, [r7, #0]
    3644:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    3648:	d03f      	beq.n	36ca <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16a>
    364a:	f7fd f871 	bl	730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    364e:	683b      	ldr	r3, [r7, #0]
    3650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3654:	3301      	adds	r3, #1
    3656:	4283      	cmp	r3, r0
    3658:	4604      	mov	r4, r0
    365a:	d933      	bls.n	36c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x164>
    365c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 37dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    3660:	f242 1704 	movw	r7, #8452	; 0x2104
    3664:	f242 1808 	movw	r8, #8456	; 0x2108
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    3668:	f996 3014 	ldrsb.w	r3, [r6, #20]
    366c:	42a3      	cmp	r3, r4
    366e:	d020      	beq.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    3670:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3674:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
    3678:	f502 5a04 	add.w	sl, r2, #8448	; 0x2100
    367c:	f8da 3000 	ldr.w	r3, [sl]
    3680:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    3684:	d015      	beq.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    3686:	f8da 3000 	ldr.w	r3, [sl]
    368a:	79f0      	ldrb	r0, [r6, #7]
    368c:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    3690:	4298      	cmp	r0, r3
    3692:	d10e      	bne.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    3694:	f8da 3000 	ldr.w	r3, [sl]
    3698:	0f5b      	lsrs	r3, r3, #29
    369a:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    369c:	f8da 3000 	ldr.w	r3, [sl]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    36a0:	d041      	beq.n	3726 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c6>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    36a2:	0f5b      	lsrs	r3, r3, #29
    36a4:	2b02      	cmp	r3, #2
    36a6:	d012      	beq.n	36ce <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16e>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    36a8:	f8da 3000 	ldr.w	r3, [sl]
    36ac:	0f5b      	lsrs	r3, r3, #29
    36ae:	2b05      	cmp	r3, #5
    36b0:	d05b      	beq.n	376a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x20a>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    36b2:	f8d9 3000 	ldr.w	r3, [r9]
    36b6:	3401      	adds	r4, #1
    36b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    36bc:	b2e4      	uxtb	r4, r4
    36be:	3301      	adds	r3, #1
    36c0:	429c      	cmp	r4, r3
    36c2:	d3d1      	bcc.n	3668 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x108>
}
    36c4:	b009      	add	sp, #36	; 0x24
    36c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    36ca:	683b      	ldr	r3, [r7, #0]
    36cc:	e7c6      	b.n	365c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xfc>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    36ce:	59d1      	ldr	r1, [r2, r7]
    36d0:	9b02      	ldr	r3, [sp, #8]
    36d2:	428b      	cmp	r3, r1
    36d4:	d3ed      	bcc.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    36d6:	f852 2008 	ldr.w	r2, [r2, r8]
    36da:	4293      	cmp	r3, r2
    36dc:	d8e9      	bhi.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        struct2queueRx(frame);
    36de:	a902      	add	r1, sp, #8
    36e0:	4628      	mov	r0, r5
        frame.mb = i;
    36e2:	f88d 401c 	strb.w	r4, [sp, #28]
        struct2queueRx(frame);
    36e6:	f7ff fedd 	bl	34a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    36ea:	e7e2      	b.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    36ec:	79f2      	ldrb	r2, [r6, #7]
    36ee:	f3c3 4300 	ubfx	r3, r3, #16, #1
    36f2:	429a      	cmp	r2, r3
    36f4:	f47f af64 	bne.w	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    36f8:	f641 6304 	movw	r3, #7684	; 0x1e04
    36fc:	f85b 2003 	ldr.w	r2, [fp, r3]
    3700:	9b02      	ldr	r3, [sp, #8]
    3702:	4293      	cmp	r3, r2
    3704:	f4ff af5c 	bcc.w	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    3708:	f641 6208 	movw	r2, #7688	; 0x1e08
    370c:	f85b 2002 	ldr.w	r2, [fp, r2]
    3710:	4293      	cmp	r3, r2
    3712:	f63f af55 	bhi.w	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          struct2queueRx(frame);
    3716:	a902      	add	r1, sp, #8
    3718:	4628      	mov	r0, r5
          frame.mb = FIFO;
    371a:	f88d 901c 	strb.w	r9, [sp, #28]
          struct2queueRx(frame);
    371e:	f7ff fec1 	bl	34a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3722:	e74d      	b.n	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    3724:	4770      	bx	lr
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    3726:	f413 7f60 	tst.w	r3, #896	; 0x380
    372a:	d0c2      	beq.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    372c:	004a      	lsls	r2, r1, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    372e:	2300      	movs	r3, #0
    3730:	e007      	b.n	3742 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e2>
    3732:	f8da 1000 	ldr.w	r1, [sl]
    3736:	fa5f f38b 	uxtb.w	r3, fp
    373a:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    373e:	428b      	cmp	r3, r1
    3740:	d2b7      	bcs.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    3742:	f103 0b01 	add.w	fp, r3, #1
    3746:	eb02 030b 	add.w	r3, r2, fp
    374a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
    374e:	9902      	ldr	r1, [sp, #8]
    3750:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3754:	4299      	cmp	r1, r3
    3756:	d1ec      	bne.n	3732 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
          struct2queueRx(frame);
    3758:	a902      	add	r1, sp, #8
    375a:	4628      	mov	r0, r5
    375c:	9200      	str	r2, [sp, #0]
          frame.mb = i;
    375e:	f88d 401c 	strb.w	r4, [sp, #28]
          struct2queueRx(frame);
    3762:	f7ff fe9f 	bl	34a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3766:	9a00      	ldr	r2, [sp, #0]
    3768:	e7e3      	b.n	3732 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    376a:	9a02      	ldr	r2, [sp, #8]
    376c:	4621      	mov	r1, r4
    376e:	4628      	mov	r0, r5
    3770:	f7fe ffd4 	bl	271c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    3774:	2800      	cmp	r0, #0
    3776:	d09c      	beq.n	36b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    3778:	e7b1      	b.n	36de <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17e>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    377a:	683b      	ldr	r3, [r7, #0]
    377c:	f413 7f60 	tst.w	r3, #896	; 0x380
    3780:	f43f af1e 	beq.w	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    3784:	f50b 53f0 	add.w	r3, fp, #7680	; 0x1e00
    3788:	3314      	adds	r3, #20
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    378a:	2701      	movs	r7, #1
    378c:	e00a      	b.n	37a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x244>
    378e:	f50b 51f0 	add.w	r1, fp, #7680	; 0x1e00
    3792:	3701      	adds	r7, #1
    3794:	6809      	ldr	r1, [r1, #0]
    3796:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    379a:	b2ff      	uxtb	r7, r7
    379c:	3101      	adds	r1, #1
    379e:	428f      	cmp	r7, r1
    37a0:	f4bf af0e 	bcs.w	35c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    37a4:	eb07 0148 	add.w	r1, r7, r8, lsl #1
    37a8:	f501 61f0 	add.w	r1, r1, #1920	; 0x780
    37ac:	6818      	ldr	r0, [r3, #0]
    37ae:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
    37b2:	9902      	ldr	r1, [sp, #8]
    37b4:	f8d3 c000 	ldr.w	ip, [r3]
    37b8:	4008      	ands	r0, r1
    37ba:	ea0e 010c 	and.w	r1, lr, ip
    37be:	4288      	cmp	r0, r1
    37c0:	d1e5      	bne.n	378e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
            struct2queueRx(frame);
    37c2:	a902      	add	r1, sp, #8
    37c4:	4628      	mov	r0, r5
    37c6:	9301      	str	r3, [sp, #4]
            frame.idhit = i;
    37c8:	f88d 200e 	strb.w	r2, [sp, #14]
    37cc:	9200      	str	r2, [sp, #0]
            frame.mb = FIFO;
    37ce:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    37d2:	f7ff fe67 	bl	34a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    37d6:	e9dd 2300 	ldrd	r2, r3, [sp]
    37da:	e7d8      	b.n	378e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
    37dc:	40024000 	.word	0x40024000

000037e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    37e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    37e4:	4db9      	ldr	r5, [pc, #740]	; (3acc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
  return FLEXCANb_IMASK1(_bus);
    37e6:	4fba      	ldr	r7, [pc, #744]	; (3ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    37e8:	4681      	mov	r9, r0
  CAN_message_t msg; // setup a temporary storage buffer
    37ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    37ec:	b097      	sub	sp, #92	; 0x5c
  CAN_message_t msg; // setup a temporary storage buffer
    37ee:	ac04      	add	r4, sp, #16
    37f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    37f2:	e895 0003 	ldmia.w	r5, {r0, r1}
    37f6:	e884 0003 	stmia.w	r4, {r0, r1}
  return FLEXCANb_IMASK1(_bus);
    37fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return FLEXCANb_IFLAG1(_bus);
    37fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    37fe:	683b      	ldr	r3, [r7, #0]
  return FLEXCANb_IFLAG1(_bus);
    3800:	9001      	str	r0, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    3802:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  return FLEXCANb_IMASK1(_bus);
    3806:	f04f 0600 	mov.w	r6, #0
    380a:	468b      	mov	fp, r1
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    380c:	d103      	bne.n	3816 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    380e:	683a      	ldr	r2, [r7, #0]
    3810:	0094      	lsls	r4, r2, #2
    3812:	f100 80eb 	bmi.w	39ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3816:	4dae      	ldr	r5, [pc, #696]	; (3ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    3818:	9b01      	ldr	r3, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    381a:	682c      	ldr	r4, [r5, #0]
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    381c:	f043 0301 	orr.w	r3, r3, #1
    3820:	fab3 f383 	clz	r3, r3
    3824:	f1c3 0320 	rsb	r3, r3, #32
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3828:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    382c:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3830:	f000 824f 	beq.w	3cd2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f2>
    3834:	f7fc ff7c 	bl	730 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    3838:	682b      	ldr	r3, [r5, #0]
    383a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    383e:	3301      	adds	r3, #1
    3840:	4283      	cmp	r3, r0
    3842:	4604      	mov	r4, r0
    3844:	f240 809e 	bls.w	3984 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    3848:	4582      	cmp	sl, r0
    384a:	f240 809b 	bls.w	3984 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    384e:	1c67      	adds	r7, r4, #1
      (void)FLEXCANb_TIMER(_bus);
    3850:	f8df 827c 	ldr.w	r8, [pc, #636]	; 3ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
    3854:	b2fd      	uxtb	r5, r7
    3856:	e016      	b.n	3886 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    3858:	2906      	cmp	r1, #6
    385a:	f000 80ad 	beq.w	39b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1d8>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    385e:	2904      	cmp	r1, #4
    3860:	f000 813e 	beq.w	3ae0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x300>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    3864:	2908      	cmp	r1, #8
    3866:	f000 81d7 	beq.w	3c18 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x438>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    386a:	f8d8 3000 	ldr.w	r3, [r8]
    386e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3872:	3301      	adds	r3, #1
    3874:	42ab      	cmp	r3, r5
    3876:	b2fc      	uxtb	r4, r7
    3878:	f240 8084 	bls.w	3984 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    387c:	45a2      	cmp	sl, r4
    387e:	f105 0501 	add.w	r5, r5, #1
    3882:	d97f      	bls.n	3984 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    3884:	1c67      	adds	r7, r4, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    3886:	f1c4 0220 	rsb	r2, r4, #32
    388a:	f1a4 0320 	sub.w	r3, r4, #32
    388e:	fa06 f202 	lsl.w	r2, r6, r2
    3892:	fa2b f104 	lsr.w	r1, fp, r4
    3896:	fa26 f303 	lsr.w	r3, r6, r3
    389a:	4311      	orrs	r1, r2
    389c:	4319      	orrs	r1, r3
    389e:	07c9      	lsls	r1, r1, #31
    38a0:	d5e3      	bpl.n	386a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    38a2:	9901      	ldr	r1, [sp, #4]
    38a4:	40e1      	lsrs	r1, r4
    38a6:	4311      	orrs	r1, r2
    38a8:	4319      	orrs	r1, r3
    38aa:	07c9      	lsls	r1, r1, #31
    38ac:	d5dd      	bpl.n	386a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    38ae:	4b89      	ldr	r3, [pc, #548]	; (3ad4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f4>)
    38b0:	18e3      	adds	r3, r4, r3
    38b2:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    38b4:	681a      	ldr	r2, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    38b6:	f3c2 6103 	ubfx	r1, r2, #24, #4
    38ba:	2902      	cmp	r1, #2
    38bc:	d1cc      	bne.n	3858 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x78>
      msg.flags.extended = (bool)(code & (1UL << 21));
    38be:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    38c2:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    38c4:	2900      	cmp	r1, #0
    38c6:	bf14      	ite	ne
    38c8:	f04f 0c01 	movne.w	ip, #1
    38cc:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    38d0:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    38d4:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    38d8:	d17f      	bne.n	39da <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    38da:	0c80      	lsrs	r0, r0, #18
    38dc:	9004      	str	r0, [sp, #16]
      msg.timestamp = code & 0xFFFF;
    38de:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    38e2:	f3c2 4203 	ubfx	r2, r2, #16, #4
    38e6:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    38ea:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.mb = mb_num;
    38ee:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    38f2:	f892 2915 	ldrb.w	r2, [r2, #2325]	; 0x915
    38f6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    38fa:	689a      	ldr	r2, [r3, #8]
    38fc:	f88d 201f 	strb.w	r2, [sp, #31]
    3900:	689a      	ldr	r2, [r3, #8]
    3902:	0a12      	lsrs	r2, r2, #8
    3904:	f88d 201e 	strb.w	r2, [sp, #30]
    3908:	689a      	ldr	r2, [r3, #8]
    390a:	0c12      	lsrs	r2, r2, #16
    390c:	f88d 201d 	strb.w	r2, [sp, #29]
    3910:	689a      	ldr	r2, [r3, #8]
    3912:	0e12      	lsrs	r2, r2, #24
    3914:	f88d 201c 	strb.w	r2, [sp, #28]
    3918:	68da      	ldr	r2, [r3, #12]
    391a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    391e:	68da      	ldr	r2, [r3, #12]
    3920:	0a12      	lsrs	r2, r2, #8
    3922:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    3926:	68da      	ldr	r2, [r3, #12]
    3928:	0c12      	lsrs	r2, r2, #16
    392a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    392e:	68da      	ldr	r2, [r3, #12]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    3930:	2900      	cmp	r1, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3932:	ea4f 6212 	mov.w	r2, r2, lsr #24
    3936:	f88d 2020 	strb.w	r2, [sp, #32]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    393a:	bf14      	ite	ne
    393c:	f04f 628c 	movne.w	r2, #73400320	; 0x4600000
    3940:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
    3944:	601a      	str	r2, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    3946:	f8d8 3008 	ldr.w	r3, [r8, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    394a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    394e:	2301      	movs	r3, #1
    3950:	40a3      	lsls	r3, r4
    3952:	4313      	orrs	r3, r2
    3954:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    3958:	9a04      	ldr	r2, [sp, #16]
    395a:	4621      	mov	r1, r4
    395c:	4648      	mov	r0, r9
    395e:	f7fe fedd 	bl	271c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    3962:	2800      	cmp	r0, #0
    3964:	f040 8153 	bne.w	3c0e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42e>
      frame_distribution(msg);
    3968:	a904      	add	r1, sp, #16
    396a:	4648      	mov	r0, r9
    396c:	f7ff fdf8 	bl	3560 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    3970:	a804      	add	r0, sp, #16
    3972:	f3af 8000 	nop.w
      ext_output2(msg);
    3976:	a804      	add	r0, sp, #16
    3978:	f3af 8000 	nop.w
      ext_output3(msg);
    397c:	a804      	add	r0, sp, #16
    397e:	f3af 8000 	nop.w
    }
    3982:	e772      	b.n	386a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    3984:	4e52      	ldr	r6, [pc, #328]	; (3ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    3986:	4d54      	ldr	r5, [pc, #336]	; (3ad8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f8>)
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    3988:	6a34      	ldr	r4, [r6, #32]
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    398a:	682b      	ldr	r3, [r5, #0]
    398c:	ea84 0203 	eor.w	r2, r4, r3
    3990:	4b52      	ldr	r3, [pc, #328]	; (3adc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2fc>)
    3992:	4013      	ands	r3, r2
    3994:	b13b      	cbz	r3, 39a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
        uint16_t size() { return _available; }
    3996:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    399a:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
    399e:	b29b      	uxth	r3, r3
    if ( busESR1.size() < busESR1.capacity() ) {
    39a0:	2b0f      	cmp	r3, #15
    39a2:	f240 8198 	bls.w	3cd6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f6>
  FLEXCANb_ESR1(_bus) |= esr1;
    39a6:	4a4a      	ldr	r2, [pc, #296]	; (3ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    39a8:	6a13      	ldr	r3, [r2, #32]
    39aa:	4323      	orrs	r3, r4
    39ac:	6213      	str	r3, [r2, #32]
  asm volatile ("dsb");	
    39ae:	f3bf 8f4f 	dsb	sy
}
    39b2:	b017      	add	sp, #92	; 0x5c
    39b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg.flags.extended = (bool)(code & (1UL << 21));
    39b8:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    39bc:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    39be:	2900      	cmp	r1, #0
    39c0:	bf14      	ite	ne
    39c2:	f04f 0c01 	movne.w	ip, #1
    39c6:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    39ca:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    39ce:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    39d2:	d105      	bne.n	39e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x200>
    39d4:	0c80      	lsrs	r0, r0, #18
    39d6:	9004      	str	r0, [sp, #16]
    39d8:	e004      	b.n	39e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x204>
    39da:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    39dc:	2101      	movs	r1, #1
    39de:	e77e      	b.n	38de <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    39e0:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    39e2:	2101      	movs	r1, #1
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    39e4:	2001      	movs	r0, #1
    39e6:	f88d 0019 	strb.w	r0, [sp, #25]
    39ea:	e778      	b.n	38de <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    39ec:	068a      	lsls	r2, r1, #26
    39ee:	f57f af12 	bpl.w	3816 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    39f2:	0685      	lsls	r5, r0, #26
    39f4:	f57f af0f 	bpl.w	3816 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    39f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
      msg.timestamp = code & 0xFFFF;
    39fc:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3a00:	f3c2 4103 	ubfx	r1, r2, #16, #4
    3a04:	f88d 101b 	strb.w	r1, [sp, #27]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3a08:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3a0c:	4c30      	ldr	r4, [pc, #192]	; (3ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    3a0e:	f402 1000 	and.w	r0, r2, #2097152	; 0x200000
    3a12:	42b0      	cmp	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3a14:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.remote = (bool)(code & (1UL << 20));
    3a18:	f3c2 5000 	ubfx	r0, r2, #20, #1
    3a1c:	f88d 0018 	strb.w	r0, [sp, #24]
      msg.idhit = code >> 23;
    3a20:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.flags.extended = (bool)(code & (1UL << 21));
    3a24:	bf12      	itee	ne
    3a26:	2001      	movne	r0, #1
    3a28:	4630      	moveq	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3a2a:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    3a2c:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.idhit = code >> 23;
    3a30:	f88d 2016 	strb.w	r2, [sp, #22]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3a34:	9104      	str	r1, [sp, #16]
    3a36:	a808      	add	r0, sp, #32
      msg.idhit = code >> 23;
    3a38:	2200      	movs	r2, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3a3a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    3a3e:	40d1      	lsrs	r1, r2
    3a40:	3208      	adds	r2, #8
    3a42:	2a20      	cmp	r2, #32
    3a44:	f800 1d01 	strb.w	r1, [r0, #-1]!
    3a48:	d1f7      	bne.n	3a3a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x25a>
    3a4a:	4821      	ldr	r0, [pc, #132]	; (3ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    3a4c:	a909      	add	r1, sp, #36	; 0x24
    3a4e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    3a52:	40da      	lsrs	r2, r3
    3a54:	3308      	adds	r3, #8
    3a56:	2b20      	cmp	r3, #32
    3a58:	f801 2d01 	strb.w	r2, [r1, #-1]!
    3a5c:	d1f7      	bne.n	3a4e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26e>
      msg.bus = busNumber;
    3a5e:	f509 5300 	add.w	r3, r9, #8192	; 0x2000
    3a62:	f893 3915 	ldrb.w	r3, [r3, #2325]	; 0x915
    3a66:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    3a6a:	2363      	movs	r3, #99	; 0x63
    3a6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      (void)FLEXCANb_TIMER(_bus);
    3a70:	6883      	ldr	r3, [r0, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3a72:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3a74:	f043 0320 	orr.w	r3, r3, #32
    3a78:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    3a7a:	9b01      	ldr	r3, [sp, #4]
    3a7c:	065c      	lsls	r4, r3, #25
    3a7e:	d503      	bpl.n	3a88 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2a8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3a80:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3a86:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    3a88:	9b01      	ldr	r3, [sp, #4]
    3a8a:	0618      	lsls	r0, r3, #24
    3a8c:	d504      	bpl.n	3a98 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2b8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3a8e:	4a10      	ldr	r2, [pc, #64]	; (3ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    3a90:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3a96:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    3a98:	a904      	add	r1, sp, #16
    3a9a:	4648      	mov	r0, r9
    3a9c:	f7ff fd60 	bl	3560 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    3aa0:	a804      	add	r0, sp, #16
    3aa2:	f3af 8000 	nop.w
      ext_output2(msg);
    3aa6:	a804      	add	r0, sp, #16
    3aa8:	f3af 8000 	nop.w
      ext_output3(msg);
    3aac:	a804      	add	r0, sp, #16
    3aae:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    3ab2:	9904      	ldr	r1, [sp, #16]
    3ab4:	4648      	mov	r0, r9
    3ab6:	f7fe fdb7 	bl	2628 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    3aba:	2800      	cmp	r0, #0
    3abc:	f43f aeab 	beq.w	3816 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3ac0:	a904      	add	r1, sp, #16
    3ac2:	4648      	mov	r0, r9
    3ac4:	f7ff fcee 	bl	34a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3ac8:	e6a5      	b.n	3816 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3aca:	bf00      	nop
    3acc:	0000c5a0 	.word	0x0000c5a0
    3ad0:	40024000 	.word	0x40024000
    3ad4:	04002408 	.word	0x04002408
    3ad8:	1fff0ee0 	.word	0x1fff0ee0
    3adc:	0007ffbf 	.word	0x0007ffbf
      msg.flags.extended = (bool)(code & (1UL << 21));
    3ae0:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    3ae4:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3ae6:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    3ae8:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3aec:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3af0:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    3af4:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    3af8:	bf14      	ite	ne
    3afa:	2001      	movne	r0, #1
    3afc:	2000      	moveq	r0, #0
    3afe:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    3b02:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    3b06:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    3b0a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3b0e:	6898      	ldr	r0, [r3, #8]
    3b10:	f88d 001f 	strb.w	r0, [sp, #31]
    3b14:	6898      	ldr	r0, [r3, #8]
    3b16:	ea4f 2010 	mov.w	r0, r0, lsr #8
    3b1a:	f88d 001e 	strb.w	r0, [sp, #30]
    3b1e:	6898      	ldr	r0, [r3, #8]
    3b20:	ea4f 4010 	mov.w	r0, r0, lsr #16
    3b24:	f88d 001d 	strb.w	r0, [sp, #29]
    3b28:	6898      	ldr	r0, [r3, #8]
    3b2a:	ea4f 6010 	mov.w	r0, r0, lsr #24
    3b2e:	f88d 001c 	strb.w	r0, [sp, #28]
    3b32:	68d8      	ldr	r0, [r3, #12]
    3b34:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    3b38:	68d8      	ldr	r0, [r3, #12]
    3b3a:	ea4f 2010 	mov.w	r0, r0, lsr #8
    3b3e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    3b42:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b44:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    3b48:	bf08      	it	eq
    3b4a:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3b4c:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3b4e:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3b50:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3b54:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3b58:	68d8      	ldr	r0, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3b5a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3b5e:	0e00      	lsrs	r0, r0, #24
    3b60:	f88d 0020 	strb.w	r0, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3b64:	b129      	cbz	r1, 3b72 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x392>
    3b66:	a804      	add	r0, sp, #16
    3b68:	9203      	str	r2, [sp, #12]
    3b6a:	9302      	str	r3, [sp, #8]
    3b6c:	4788      	blx	r1
    3b6e:	9a03      	ldr	r2, [sp, #12]
    3b70:	9b02      	ldr	r3, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    3b72:	f8d2 2908 	ldr.w	r2, [r2, #2312]	; 0x908
    3b76:	b11a      	cbz	r2, 3b80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a0>
    3b78:	a804      	add	r0, sp, #16
    3b7a:	9302      	str	r3, [sp, #8]
    3b7c:	4790      	blx	r2
    3b7e:	9b02      	ldr	r3, [sp, #8]
    3b80:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    3b84:	9202      	str	r2, [sp, #8]
    3b86:	f8b2 2b1e 	ldrh.w	r2, [r2, #2846]	; 0xb1e
    3b8a:	b292      	uxth	r2, r2
      if ( txBuffer.size() ) {
    3b8c:	2a00      	cmp	r2, #0
    3b8e:	f000 80b1 	beq.w	3cf4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x514>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    3b92:	9b02      	ldr	r3, [sp, #8]
    3b94:	f8b3 1b1a 	ldrh.w	r1, [r3, #2842]	; 0xb1a
    3b98:	231a      	movs	r3, #26
    3b9a:	f001 010f 	and.w	r1, r1, #15
    3b9e:	fb03 9101 	mla	r1, r3, r1, r9
    3ba2:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    3ba6:	3112      	adds	r1, #18
    3ba8:	2218      	movs	r2, #24
    3baa:	a810      	add	r0, sp, #64	; 0x40
    3bac:	f000 f9a0 	bl	3ef0 <memcpy>
        memmove(&frame, buf, sizeof(frame));
    3bb0:	ab0a      	add	r3, sp, #40	; 0x28
    3bb2:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    3bb6:	469e      	mov	lr, r3
    3bb8:	9303      	str	r3, [sp, #12]
    3bba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3bbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3bc2:	e89c 0003 	ldmia.w	ip, {r0, r1}
    3bc6:	e88e 0003 	stmia.w	lr, {r0, r1}
        if ( frame.mb == -1 ) {
    3bca:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
    3bce:	1c5a      	adds	r2, r3, #1
    3bd0:	f000 809b 	beq.w	3d0a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x52a>
        else if ( frame.mb == mb_num ) {
    3bd4:	429c      	cmp	r4, r3
    3bd6:	f47f ae48 	bne.w	386a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(frame.mb, frame);
    3bda:	9a03      	ldr	r2, [sp, #12]
    3bdc:	b2e1      	uxtb	r1, r4
    3bde:	4648      	mov	r0, r9
    3be0:	f7fe fe02 	bl	27e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    3be4:	9a02      	ldr	r2, [sp, #8]
    3be6:	f8b2 3b1a 	ldrh.w	r3, [r2, #2842]	; 0xb1a
    3bea:	3301      	adds	r3, #1
    3bec:	f003 031f 	and.w	r3, r3, #31
    3bf0:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    if ( _available ) _available--;
    3bf4:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    3bf8:	b29b      	uxth	r3, r3
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	f43f ae35 	beq.w	386a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    3c00:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    3c04:	3b01      	subs	r3, #1
    3c06:	b29b      	uxth	r3, r3
    3c08:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    3c0c:	e62d      	b.n	386a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    3c0e:	a904      	add	r1, sp, #16
    3c10:	4648      	mov	r0, r9
    3c12:	f7ff fc47 	bl	34a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    3c16:	e6a7      	b.n	3968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x188>
      msg.flags.extended = (bool)(code & (1UL << 21));
    3c18:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    3c1c:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3c1e:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    3c20:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    3c24:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3c28:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    3c2c:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    3c30:	bf14      	ite	ne
    3c32:	2001      	movne	r0, #1
    3c34:	2000      	moveq	r0, #0
    3c36:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    3c3a:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    3c3e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    3c42:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c46:	6898      	ldr	r0, [r3, #8]
    3c48:	f88d 001f 	strb.w	r0, [sp, #31]
    3c4c:	6898      	ldr	r0, [r3, #8]
    3c4e:	ea4f 2010 	mov.w	r0, r0, lsr #8
    3c52:	f88d 001e 	strb.w	r0, [sp, #30]
    3c56:	6898      	ldr	r0, [r3, #8]
    3c58:	ea4f 4010 	mov.w	r0, r0, lsr #16
    3c5c:	f88d 001d 	strb.w	r0, [sp, #29]
    3c60:	6898      	ldr	r0, [r3, #8]
    3c62:	ea4f 6010 	mov.w	r0, r0, lsr #24
    3c66:	f88d 001c 	strb.w	r0, [sp, #28]
    3c6a:	68d8      	ldr	r0, [r3, #12]
    3c6c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    3c70:	68d8      	ldr	r0, [r3, #12]
    3c72:	ea4f 2010 	mov.w	r0, r0, lsr #8
    3c76:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    3c7a:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3c7c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    3c80:	bf08      	it	eq
    3c82:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c84:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3c86:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c88:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3c8c:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c90:	68db      	ldr	r3, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3c92:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3c96:	0e1b      	lsrs	r3, r3, #24
    3c98:	f88d 3020 	strb.w	r3, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3c9c:	b119      	cbz	r1, 3ca6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4c6>
    3c9e:	a804      	add	r0, sp, #16
    3ca0:	9202      	str	r2, [sp, #8]
    3ca2:	4788      	blx	r1
    3ca4:	9a02      	ldr	r2, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    3ca6:	f8d2 3908 	ldr.w	r3, [r2, #2312]	; 0x908
    3caa:	b10b      	cbz	r3, 3cb0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4d0>
    3cac:	a804      	add	r0, sp, #16
    3cae:	4798      	blx	r3
        uint16_t size() { return _available; }
    3cb0:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    3cb4:	9302      	str	r3, [sp, #8]
    3cb6:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
    3cba:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	f47f af68 	bne.w	3b92 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b2>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3cc2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    3cc6:	2301      	movs	r3, #1
    3cc8:	40a3      	lsls	r3, r4
    3cca:	4313      	orrs	r3, r2
    3ccc:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    3cd0:	e5cb      	b.n	386a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    3cd2:	682b      	ldr	r3, [r5, #0]
    3cd4:	e5bb      	b.n	384e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6e>
      busESR1.write(esr1);
    3cd6:	f509 50e6 	add.w	r0, r9, #7360	; 0x1cc0
    3cda:	4621      	mov	r1, r4
    3cdc:	3010      	adds	r0, #16
    3cde:	f7fe fc5b 	bl	2598 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>
      busECR.write(FLEXCANb_ECR(_bus));
    3ce2:	69f1      	ldr	r1, [r6, #28]
    3ce4:	f509 50ec 	add.w	r0, r9, #7552	; 0x1d80
    3ce8:	b289      	uxth	r1, r1
    3cea:	3018      	adds	r0, #24
    3cec:	f7fe fc78 	bl	25e0 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>
      last_esr1 = esr1;
    3cf0:	602c      	str	r4, [r5, #0]
    3cf2:	e658      	b.n	39a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3cf4:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    3cf8:	2201      	movs	r2, #1
    3cfa:	40a2      	lsls	r2, r4
    3cfc:	430a      	orrs	r2, r1
    3cfe:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    3d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    3d06:	601a      	str	r2, [r3, #0]
    3d08:	e5af      	b.n	386a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(mb_num, frame);
    3d0a:	9a03      	ldr	r2, [sp, #12]
    3d0c:	4621      	mov	r1, r4
    3d0e:	e766      	b.n	3bde <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>

00003d10 <_GLOBAL__sub_I_Can0>:
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    3d10:	482e      	ldr	r0, [pc, #184]	; (3dcc <_GLOBAL__sub_I_Can0+0xbc>)
    3d12:	492f      	ldr	r1, [pc, #188]	; (3dd0 <_GLOBAL__sub_I_Can0+0xc0>)
}
    3d14:	b410      	push	{r4}
class Circular_Buffer {
    3d16:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
  if ( _bus == CAN0 ) _CAN0 = this;
    3d1a:	4c2e      	ldr	r4, [pc, #184]	; (3dd4 <_GLOBAL__sub_I_Can0+0xc4>)
    3d1c:	2300      	movs	r3, #0
    3d1e:	8283      	strh	r3, [r0, #20]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    3d20:	f500 5c00 	add.w	ip, r0, #8192	; 0x2000
    3d24:	82c3      	strh	r3, [r0, #22]
  if ( _bus == CAN0 ) _CAN0 = this;
    3d26:	6020      	str	r0, [r4, #0]
    3d28:	8303      	strh	r3, [r0, #24]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    3d2a:	4c2b      	ldr	r4, [pc, #172]	; (3dd8 <_GLOBAL__sub_I_Can0+0xc8>)
    3d2c:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    3d30:	f8a2 3b1c 	strh.w	r3, [r2, #2844]	; 0xb1c
    3d34:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    3d38:	f8a2 3cd0 	strh.w	r3, [r2, #3280]	; 0xcd0
    3d3c:	f8a2 3cd2 	strh.w	r3, [r2, #3282]	; 0xcd2
    3d40:	f8a2 3cd4 	strh.w	r3, [r2, #3284]	; 0xcd4
    3d44:	f8a2 3d98 	strh.w	r3, [r2, #3480]	; 0xd98
    3d48:	f8a2 3d9a 	strh.w	r3, [r2, #3482]	; 0xd9a
    3d4c:	f8a2 3d9c 	strh.w	r3, [r2, #3484]	; 0xd9c
    3d50:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    3d54:	6004      	str	r4, [r0, #0]
    3d56:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
    3d5a:	4c20      	ldr	r4, [pc, #128]	; (3ddc <_GLOBAL__sub_I_Can0+0xcc>)
    3d5c:	f88c 3700 	strb.w	r3, [ip, #1792]	; 0x700
    3d60:	f8cc 390c 	str.w	r3, [ip, #2316]	; 0x90c
    3d64:	f88c 3701 	strb.w	r3, [ip, #1793]	; 0x701
    3d68:	f8cc 3910 	str.w	r3, [ip, #2320]	; 0x910
    3d6c:	828b      	strh	r3, [r1, #20]
    3d6e:	f88c 3914 	strb.w	r3, [ip, #2324]	; 0x914
    3d72:	82cb      	strh	r3, [r1, #22]
    3d74:	600c      	str	r4, [r1, #0]
    3d76:	830b      	strh	r3, [r1, #24]
    3d78:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    3d7c:	f8a2 3b1c 	strh.w	r3, [r2, #2844]	; 0xb1c
    3d80:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    3d84:	f8a2 3cd0 	strh.w	r3, [r2, #3280]	; 0xcd0
    3d88:	f8a2 3cd2 	strh.w	r3, [r2, #3282]	; 0xcd2
    3d8c:	f8a2 3cd4 	strh.w	r3, [r2, #3284]	; 0xcd4
    3d90:	f8a2 3d98 	strh.w	r3, [r2, #3480]	; 0xd98
    3d94:	f8a2 3d9a 	strh.w	r3, [r2, #3482]	; 0xd9a
    3d98:	f8a2 3d9c 	strh.w	r3, [r2, #3484]	; 0xd9c
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d9c:	4a10      	ldr	r2, [pc, #64]	; (3de0 <_GLOBAL__sub_I_Can0+0xd0>)
    3d9e:	f880 3700 	strb.w	r3, [r0, #1792]	; 0x700
    3da2:	b083      	sub	sp, #12
    3da4:	f880 3701 	strb.w	r3, [r0, #1793]	; 0x701
    3da8:	6812      	ldr	r2, [r2, #0]
    3daa:	9201      	str	r2, [sp, #4]
  if ( _bus == CAN1 ) _CAN1 = this;
    3dac:	4c0d      	ldr	r4, [pc, #52]	; (3de4 <_GLOBAL__sub_I_Can0+0xd4>)
	return ret;
    3dae:	9a01      	ldr	r2, [sp, #4]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    3db0:	f8c0 390c 	str.w	r3, [r0, #2316]	; 0x90c
    3db4:	f8c0 3910 	str.w	r3, [r0, #2320]	; 0x910
    3db8:	f880 3914 	strb.w	r3, [r0, #2324]	; 0x914
	elapsedMillis(void) { ms = millis(); }
    3dbc:	4b0a      	ldr	r3, [pc, #40]	; (3de8 <_GLOBAL__sub_I_Can0+0xd8>)
  if ( _bus == CAN1 ) _CAN1 = this;
    3dbe:	6021      	str	r1, [r4, #0]
    3dc0:	601a      	str	r2, [r3, #0]
    3dc2:	b003      	add	sp, #12
    3dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop
    3dcc:	1fff0ee8 	.word	0x1fff0ee8
    3dd0:	1fff3800 	.word	0x1fff3800
    3dd4:	1fff6118 	.word	0x1fff6118
    3dd8:	0000c520 	.word	0x0000c520
    3ddc:	0000c544 	.word	0x0000c544
    3de0:	1fff6124 	.word	0x1fff6124
    3de4:	1fff611c 	.word	0x1fff611c
    3de8:	1fff6120 	.word	0x1fff6120

00003dec <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    3dec:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    3dee:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    3df0:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    3df2:	bf08      	it	eq
    3df4:	220a      	moveq	r2, #10
	if (n == 0) {
    3df6:	b3a1      	cbz	r1, 3e62 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		i = sizeof(buf) - 1;
    3df8:	f04f 0e21 	mov.w	lr, #33	; 0x21
    3dfc:	e002      	b.n	3e04 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
			i--;
    3dfe:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    3e02:	4629      	mov	r1, r5
			digit = n % base;
    3e04:	fbb1 f5f2 	udiv	r5, r1, r2
    3e08:	fb02 1415 	mls	r4, r2, r5, r1
    3e0c:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3e10:	2c09      	cmp	r4, #9
    3e12:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    3e16:	bf98      	it	ls
    3e18:	fa5f fc84 	uxtbls.w	ip, r4
    3e1c:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    3e20:	bf88      	it	hi
    3e22:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    3e26:	446c      	add	r4, sp
    3e28:	bf88      	it	hi
    3e2a:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    3e2e:	4291      	cmp	r1, r2
			i--;
    3e30:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3e34:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    3e38:	d2e1      	bcs.n	3dfe <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    3e3a:	b14b      	cbz	r3, 3e50 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    3e3c:	f10e 3eff 	add.w	lr, lr, #4294967295
    3e40:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    3e44:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    3e48:	446b      	add	r3, sp
    3e4a:	222d      	movs	r2, #45	; 0x2d
    3e4c:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    3e50:	6803      	ldr	r3, [r0, #0]
    3e52:	a901      	add	r1, sp, #4
    3e54:	685b      	ldr	r3, [r3, #4]
    3e56:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    3e5a:	4471      	add	r1, lr
    3e5c:	4798      	blx	r3
}
    3e5e:	b00a      	add	sp, #40	; 0x28
    3e60:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    3e62:	2230      	movs	r2, #48	; 0x30
    3e64:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3e68:	f04f 0e21 	mov.w	lr, #33	; 0x21
    3e6c:	e7e5      	b.n	3e3a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    3e6e:	bf00      	nop

00003e70 <Print::print(long)>:
	if (n < 0) {
    3e70:	2900      	cmp	r1, #0
		n = -n;
    3e72:	bfba      	itte	lt
    3e74:	4249      	neglt	r1, r1
		sign = '-';
    3e76:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    3e78:	2300      	movge	r3, #0
	if (base == 0) {
    3e7a:	220a      	movs	r2, #10
    3e7c:	f7ff bfb6 	b.w	3dec <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00003e80 <Print::println()>:
{
    3e80:	b500      	push	{lr}
	return write(buf, 2);
    3e82:	6803      	ldr	r3, [r0, #0]
{
    3e84:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    3e86:	f640 220d 	movw	r2, #2573	; 0xa0d
    3e8a:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3e8e:	685b      	ldr	r3, [r3, #4]
    3e90:	2202      	movs	r2, #2
    3e92:	a901      	add	r1, sp, #4
    3e94:	4798      	blx	r3
}
    3e96:	b003      	add	sp, #12
    3e98:	f85d fb04 	ldr.w	pc, [sp], #4

00003e9c <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3e9c:	4b03      	ldr	r3, [pc, #12]	; (3eac <_write+0x10>)
    3e9e:	2802      	cmp	r0, #2
    3ea0:	bf88      	it	hi
    3ea2:	4603      	movhi	r3, r0
    3ea4:	4618      	mov	r0, r3
    3ea6:	681b      	ldr	r3, [r3, #0]
    3ea8:	685b      	ldr	r3, [r3, #4]
    3eaa:	4718      	bx	r3
    3eac:	1fff0758 	.word	0x1fff0758

00003eb0 <Print::printf(char const*, ...)>:
{
    3eb0:	b40e      	push	{r1, r2, r3}
    3eb2:	b500      	push	{lr}
    3eb4:	b082      	sub	sp, #8
    3eb6:	aa03      	add	r2, sp, #12
    3eb8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    3ebc:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    3ebe:	f002 fad3 	bl	6468 <vdprintf>
}
    3ec2:	b002      	add	sp, #8
    3ec4:	f85d eb04 	ldr.w	lr, [sp], #4
    3ec8:	b003      	add	sp, #12
    3eca:	4770      	bx	lr

00003ecc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    3ecc:	b932      	cbnz	r2, 3edc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    3ece:	6803      	ldr	r3, [r0, #0]
{
    3ed0:	b500      	push	{lr}
		return write((uint8_t)n);
    3ed2:	681b      	ldr	r3, [r3, #0]
}
    3ed4:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    3ed8:	b2c9      	uxtb	r1, r1
    3eda:	4718      	bx	r3
    3edc:	f7ff bf86 	b.w	3dec <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00003ee0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3ee0:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3ee2:	f7fc ff75 	bl	dd0 <setup>
	while (1) {
		loop();
    3ee6:	f7fe f9ef 	bl	22c8 <loop>
		yield();
    3eea:	f001 f925 	bl	5138 <yield>
	while (1) {
    3eee:	e7fa      	b.n	3ee6 <main+0x6>

00003ef0 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    3ef0:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    3ef2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    3ef6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3efa:	d16f      	bne.n	3fdc <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3efc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    3efe:	d341      	bcc.n	3f84 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3f00:	f851 3b04 	ldr.w	r3, [r1], #4
    3f04:	f840 3b04 	str.w	r3, [r0], #4
    3f08:	f851 3b04 	ldr.w	r3, [r1], #4
    3f0c:	f840 3b04 	str.w	r3, [r0], #4
    3f10:	f851 3b04 	ldr.w	r3, [r1], #4
    3f14:	f840 3b04 	str.w	r3, [r0], #4
    3f18:	f851 3b04 	ldr.w	r3, [r1], #4
    3f1c:	f840 3b04 	str.w	r3, [r0], #4
    3f20:	f851 3b04 	ldr.w	r3, [r1], #4
    3f24:	f840 3b04 	str.w	r3, [r0], #4
    3f28:	f851 3b04 	ldr.w	r3, [r1], #4
    3f2c:	f840 3b04 	str.w	r3, [r0], #4
    3f30:	f851 3b04 	ldr.w	r3, [r1], #4
    3f34:	f840 3b04 	str.w	r3, [r0], #4
    3f38:	f851 3b04 	ldr.w	r3, [r1], #4
    3f3c:	f840 3b04 	str.w	r3, [r0], #4
    3f40:	f851 3b04 	ldr.w	r3, [r1], #4
    3f44:	f840 3b04 	str.w	r3, [r0], #4
    3f48:	f851 3b04 	ldr.w	r3, [r1], #4
    3f4c:	f840 3b04 	str.w	r3, [r0], #4
    3f50:	f851 3b04 	ldr.w	r3, [r1], #4
    3f54:	f840 3b04 	str.w	r3, [r0], #4
    3f58:	f851 3b04 	ldr.w	r3, [r1], #4
    3f5c:	f840 3b04 	str.w	r3, [r0], #4
    3f60:	f851 3b04 	ldr.w	r3, [r1], #4
    3f64:	f840 3b04 	str.w	r3, [r0], #4
    3f68:	f851 3b04 	ldr.w	r3, [r1], #4
    3f6c:	f840 3b04 	str.w	r3, [r0], #4
    3f70:	f851 3b04 	ldr.w	r3, [r1], #4
    3f74:	f840 3b04 	str.w	r3, [r0], #4
    3f78:	f851 3b04 	ldr.w	r3, [r1], #4
    3f7c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3f80:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    3f82:	d2bd      	bcs.n	3f00 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3f84:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3f86:	d311      	bcc.n	3fac <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3f88:	f851 3b04 	ldr.w	r3, [r1], #4
    3f8c:	f840 3b04 	str.w	r3, [r0], #4
    3f90:	f851 3b04 	ldr.w	r3, [r1], #4
    3f94:	f840 3b04 	str.w	r3, [r0], #4
    3f98:	f851 3b04 	ldr.w	r3, [r1], #4
    3f9c:	f840 3b04 	str.w	r3, [r0], #4
    3fa0:	f851 3b04 	ldr.w	r3, [r1], #4
    3fa4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3fa8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3faa:	d2ed      	bcs.n	3f88 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3fac:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3fae:	d305      	bcc.n	3fbc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3fb0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3fb4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3fb8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3fba:	d2f9      	bcs.n	3fb0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3fbc:	3204      	adds	r2, #4
	beq	.Ldone
    3fbe:	d00a      	beq.n	3fd6 <memcpy+0xe6>

	lsls	r2, r2, #31
    3fc0:	07d2      	lsls	r2, r2, #31
	itt ne
    3fc2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3fc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3fc8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3fcc:	d303      	bcc.n	3fd6 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    3fce:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3fd0:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3fd2:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3fd4:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    3fd6:	bc01      	pop	{r0}
#endif
	bx	lr
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    3fdc:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    3fde:	d34a      	bcc.n	4076 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3fe0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3fe4:	d011      	beq.n	400a <memcpy+0x11a>

	rsb	r3, #4
    3fe6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3fea:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3fec:	07db      	lsls	r3, r3, #31
	itt ne
    3fee:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3ff0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3ff4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3ff8:	d307      	bcc.n	400a <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    3ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3ffe:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    4002:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4006:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    400a:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    400e:	f43f af75 	beq.w	3efc <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    4012:	b430      	push	{r4, r5}
	subs	r2, #4
    4014:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    4016:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    4018:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    401c:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    4020:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    4022:	d019      	beq.n	4058 <memcpy+0x168>
	cmp	r3, #3
    4024:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    4026:	d00b      	beq.n	4040 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    4028:	0a24      	lsrs	r4, r4, #8
    402a:	f851 3b04 	ldr.w	r3, [r1], #4
    402e:	061d      	lsls	r5, r3, #24
    4030:	ea44 0405 	orr.w	r4, r4, r5
    4034:	f840 4b04 	str.w	r4, [r0], #4
    4038:	461c      	mov	r4, r3
    403a:	3a04      	subs	r2, #4
    403c:	d2f4      	bcs.n	4028 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    403e:	e016      	b.n	406e <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    4040:	0e24      	lsrs	r4, r4, #24
    4042:	f851 3b04 	ldr.w	r3, [r1], #4
    4046:	021d      	lsls	r5, r3, #8
    4048:	ea44 0405 	orr.w	r4, r4, r5
    404c:	f840 4b04 	str.w	r4, [r0], #4
    4050:	461c      	mov	r4, r3
    4052:	3a04      	subs	r2, #4
    4054:	d2f4      	bcs.n	4040 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    4056:	e00a      	b.n	406e <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    4058:	0c24      	lsrs	r4, r4, #16
    405a:	f851 3b04 	ldr.w	r3, [r1], #4
    405e:	041d      	lsls	r5, r3, #16
    4060:	ea44 0405 	orr.w	r4, r4, r5
    4064:	f840 4b04 	str.w	r4, [r0], #4
    4068:	461c      	mov	r4, r3
    406a:	3a04      	subs	r2, #4
    406c:	d2f4      	bcs.n	4058 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    406e:	3204      	adds	r2, #4
	subs	r1, ip
    4070:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    4074:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4076:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    4078:	d3a0      	bcc.n	3fbc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    407a:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    407c:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4080:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4084:	d2f9      	bcs.n	407a <memcpy+0x18a>

	ldrb	r3, [r1]
    4086:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    4088:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    408a:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    408c:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    408e:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    4090:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    4092:	bc01      	pop	{r0}
#endif
	bx	lr
    4094:	4770      	bx	lr
    4096:	bf00      	nop

00004098 <fault_isr>:
{
    4098:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    409a:	4c0f      	ldr	r4, [pc, #60]	; (40d8 <fault_isr+0x40>)
    409c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    409e:	0358      	lsls	r0, r3, #13
    40a0:	d40d      	bmi.n	40be <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    40a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    40a4:	0559      	lsls	r1, r3, #21
    40a6:	d40f      	bmi.n	40c8 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    40a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    40aa:	051a      	lsls	r2, r3, #20
    40ac:	d411      	bmi.n	40d2 <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    40ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    40b0:	04db      	lsls	r3, r3, #19
    40b2:	d5f3      	bpl.n	409c <fault_isr+0x4>
    40b4:	f000 f812 	bl	40dc <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    40b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    40ba:	0358      	lsls	r0, r3, #13
    40bc:	d5f1      	bpl.n	40a2 <fault_isr+0xa>
    40be:	f000 fa59 	bl	4574 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    40c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    40c4:	0559      	lsls	r1, r3, #21
    40c6:	d5ef      	bpl.n	40a8 <fault_isr+0x10>
    40c8:	f000 f808 	bl	40dc <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    40cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    40ce:	051a      	lsls	r2, r3, #20
    40d0:	d5ed      	bpl.n	40ae <fault_isr+0x16>
    40d2:	f000 f803 	bl	40dc <unused_isr>
    40d6:	e7ea      	b.n	40ae <fault_isr+0x16>
    40d8:	40048000 	.word	0x40048000

000040dc <unused_isr>:
{
    40dc:	b508      	push	{r3, lr}
	fault_isr();
    40de:	f7ff ffdb 	bl	4098 <fault_isr>
    40e2:	bf00      	nop

000040e4 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    40e4:	4b01      	ldr	r3, [pc, #4]	; (40ec <startup_early_hook+0x8>)
    40e6:	2210      	movs	r2, #16
    40e8:	801a      	strh	r2, [r3, #0]
}
    40ea:	4770      	bx	lr
    40ec:	40052000 	.word	0x40052000

000040f0 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    40f0:	4770      	bx	lr
    40f2:	bf00      	nop

000040f4 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    40f4:	490b      	ldr	r1, [pc, #44]	; (4124 <_sbrk+0x30>)
    40f6:	680a      	ldr	r2, [r1, #0]
	if (incr != 0) {
    40f8:	b148      	cbz	r0, 410e <_sbrk+0x1a>
{
    40fa:	b508      	push	{r3, lr}
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    40fc:	46ec      	mov	ip, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    40fe:	1813      	adds	r3, r2, r0
    4100:	f5ac 5000 	sub.w	r0, ip, #8192	; 0x2000
    4104:	4283      	cmp	r3, r0
    4106:	d204      	bcs.n	4112 <_sbrk+0x1e>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    4108:	600b      	str	r3, [r1, #0]
	}
	return prev;
}
    410a:	4610      	mov	r0, r2
    410c:	bd08      	pop	{r3, pc}
    410e:	4610      	mov	r0, r2
    4110:	4770      	bx	lr
			errno = ENOMEM;
    4112:	f002 fb55 	bl	67c0 <__errno>
    4116:	230c      	movs	r3, #12
			return (void *)-1;
    4118:	f04f 32ff 	mov.w	r2, #4294967295
			errno = ENOMEM;
    411c:	6003      	str	r3, [r0, #0]
}
    411e:	4610      	mov	r0, r2
    4120:	bd08      	pop	{r3, pc}
    4122:	bf00      	nop
    4124:	1fff0754 	.word	0x1fff0754

00004128 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    4128:	2000      	movs	r0, #0
    412a:	4770      	bx	lr

0000412c <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    412c:	f04f 30ff 	mov.w	r0, #4294967295
    4130:	4770      	bx	lr
    4132:	bf00      	nop

00004134 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    4138:	604b      	str	r3, [r1, #4]
	return 0;
}
    413a:	2000      	movs	r0, #0
    413c:	4770      	bx	lr
    413e:	bf00      	nop

00004140 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    4140:	2001      	movs	r0, #1
    4142:	4770      	bx	lr

00004144 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    4144:	f04f 30ff 	mov.w	r0, #4294967295
    4148:	4770      	bx	lr
    414a:	bf00      	nop

0000414c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    414c:	e7fe      	b.n	414c <abort>
    414e:	Address 0x0000414e is out of bounds.


00004150 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    4150:	4b07      	ldr	r3, [pc, #28]	; (4170 <kinetis_hsrun_disable+0x20>)
    4152:	78da      	ldrb	r2, [r3, #3]
    4154:	2a80      	cmp	r2, #128	; 0x80
    4156:	d001      	beq.n	415c <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    4158:	2000      	movs	r0, #0
}
    415a:	4770      	bx	lr
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    415c:	4905      	ldr	r1, [pc, #20]	; (4174 <kinetis_hsrun_disable+0x24>)
    415e:	4806      	ldr	r0, [pc, #24]	; (4178 <kinetis_hsrun_disable+0x28>)
    4160:	6448      	str	r0, [r1, #68]	; 0x44
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4162:	2200      	movs	r2, #0
    4164:	705a      	strb	r2, [r3, #1]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    4166:	78da      	ldrb	r2, [r3, #3]
    4168:	2a80      	cmp	r2, #128	; 0x80
    416a:	d0fc      	beq.n	4166 <kinetis_hsrun_disable+0x16>
		return 1;
    416c:	2001      	movs	r0, #1
    416e:	4770      	bx	lr
    4170:	4007e000 	.word	0x4007e000
    4174:	40048000 	.word	0x40048000
    4178:	22280000 	.word	0x22280000

0000417c <kinetis_hsrun_enable>:

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    417c:	4b07      	ldr	r3, [pc, #28]	; (419c <kinetis_hsrun_enable+0x20>)
    417e:	78da      	ldrb	r2, [r3, #3]
    4180:	2a01      	cmp	r2, #1
    4182:	d001      	beq.n	4188 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    4184:	2000      	movs	r0, #0
}
    4186:	4770      	bx	lr
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    4188:	2260      	movs	r2, #96	; 0x60
    418a:	705a      	strb	r2, [r3, #1]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    418c:	78da      	ldrb	r2, [r3, #3]
    418e:	2a80      	cmp	r2, #128	; 0x80
    4190:	d1fc      	bne.n	418c <kinetis_hsrun_enable+0x10>
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    4192:	4b03      	ldr	r3, [pc, #12]	; (41a0 <kinetis_hsrun_enable+0x24>)
    4194:	4a03      	ldr	r2, [pc, #12]	; (41a4 <kinetis_hsrun_enable+0x28>)
    4196:	645a      	str	r2, [r3, #68]	; 0x44
		return 1;
    4198:	2001      	movs	r0, #1
    419a:	4770      	bx	lr
    419c:	4007e000 	.word	0x4007e000
    41a0:	40048000 	.word	0x40048000
    41a4:	02060000 	.word	0x02060000

000041a8 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    41a8:	f101 3cff 	add.w	ip, r1, #4294967295
{
    41ac:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    41ae:	4665      	mov	r5, ip
	int i=0, j;
    41b0:	2400      	movs	r4, #0
    41b2:	e001      	b.n	41b8 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    41b4:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    41b6:	3401      	adds	r4, #1
		digit = val % radix;
    41b8:	fbb0 fef2 	udiv	lr, r0, r2
    41bc:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    41c0:	2b09      	cmp	r3, #9
    41c2:	f103 0630 	add.w	r6, r3, #48	; 0x30
    41c6:	bf8a      	itet	hi
    41c8:	3337      	addhi	r3, #55	; 0x37
    41ca:	b2f3      	uxtbls	r3, r6
    41cc:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    41ce:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    41d0:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    41d4:	d2ee      	bcs.n	41b4 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    41d6:	1c63      	adds	r3, r4, #1
    41d8:	2200      	movs	r2, #0
    41da:	54ca      	strb	r2, [r1, r3]
    41dc:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    41de:	b17c      	cbz	r4, 4200 <ultoa+0x58>
		t = buf[j];
    41e0:	4662      	mov	r2, ip
    41e2:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    41e6:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    41ea:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    41ee:	eba1 030c 	sub.w	r3, r1, ip
    41f2:	3202      	adds	r2, #2
    41f4:	3b01      	subs	r3, #1
    41f6:	1a52      	subs	r2, r2, r1
    41f8:	4423      	add	r3, r4
    41fa:	429a      	cmp	r2, r3
		buf[i] = t;
    41fc:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    41fe:	dbef      	blt.n	41e0 <ultoa+0x38>
	}
	return buf;
}
    4200:	4608      	mov	r0, r1
    4202:	bd70      	pop	{r4, r5, r6, pc}

00004204 <rtc_set>:
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4204:	4b03      	ldr	r3, [pc, #12]	; (4214 <rtc_set+0x10>)
    4206:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    4208:	2110      	movs	r1, #16
	RTC_SR = 0;
    420a:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    420c:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    420e:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    4210:	6159      	str	r1, [r3, #20]
}
    4212:	4770      	bx	lr
    4214:	4003d000 	.word	0x4003d000

00004218 <startup_middle_hook>:
}
#endif

extern void usb_init(void);

static void startup_default_middle_hook(void) {}
    4218:	4770      	bx	lr
    421a:	bf00      	nop

0000421c <_init_Teensyduino_internal_>:
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    421c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
{
    4220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4224:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    4228:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    422c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
    4230:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    4234:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
    4238:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    423c:	4a2f      	ldr	r2, [pc, #188]	; (42fc <_init_Teensyduino_internal_+0xe0>)
	FTM0_CNT = 0;
    423e:	4930      	ldr	r1, [pc, #192]	; (4300 <_init_Teensyduino_internal_+0xe4>)
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4240:	4c30      	ldr	r4, [pc, #192]	; (4304 <_init_Teensyduino_internal_+0xe8>)
	FTM1_CNT = 0;
    4242:	4d31      	ldr	r5, [pc, #196]	; (4308 <_init_Teensyduino_internal_+0xec>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    4244:	4e31      	ldr	r6, [pc, #196]	; (430c <_init_Teensyduino_internal_+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    4246:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    424a:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    424e:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    4250:	2000      	movs	r0, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    4252:	f64e 7eff 	movw	lr, #61439	; 0xefff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4256:	2709      	movs	r7, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    4258:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    425c:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM0_CNT = 0;
    4260:	6048      	str	r0, [r1, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    4262:	f8c1 e008 	str.w	lr, [r1, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4266:	60cb      	str	r3, [r1, #12]
	FTM0_C1SC = 0x28;
    4268:	614b      	str	r3, [r1, #20]
	FTM0_C2SC = 0x28;
    426a:	61cb      	str	r3, [r1, #28]
	FTM0_C3SC = 0x28;
    426c:	624b      	str	r3, [r1, #36]	; 0x24
	FTM0_C4SC = 0x28;
    426e:	62cb      	str	r3, [r1, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    4270:	634b      	str	r3, [r1, #52]	; 0x34
	FTM0_C6SC = 0x28;
    4272:	63cb      	str	r3, [r1, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    4274:	644b      	str	r3, [r1, #68]	; 0x44
	FTM3_C0SC = 0x28;
    4276:	60d3      	str	r3, [r2, #12]
	FTM3_C1SC = 0x28;
    4278:	6153      	str	r3, [r2, #20]
	FTM3_C2SC = 0x28;
    427a:	61d3      	str	r3, [r2, #28]
	FTM3_C3SC = 0x28;
    427c:	6253      	str	r3, [r2, #36]	; 0x24
	FTM3_C4SC = 0x28;
    427e:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM3_C5SC = 0x28;
    4280:	6353      	str	r3, [r2, #52]	; 0x34
	FTM3_C6SC = 0x28;
    4282:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM3_C7SC = 0x28;
    4284:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4286:	600f      	str	r7, [r1, #0]
	FTM1_CNT = 0;
    4288:	6068      	str	r0, [r5, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    428a:	f8c5 e008 	str.w	lr, [r5, #8]
	FTM1_C0SC = 0x28;
    428e:	60eb      	str	r3, [r5, #12]
	FTM1_C1SC = 0x28;
    4290:	616b      	str	r3, [r5, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4292:	602f      	str	r7, [r5, #0]
	FTM2_CNT = 0;
    4294:	6060      	str	r0, [r4, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    4296:	f8c4 e008 	str.w	lr, [r4, #8]
	FTM2_C0SC = 0x28;
    429a:	60e3      	str	r3, [r4, #12]
	FTM2_C1SC = 0x28;
    429c:	6163      	str	r3, [r4, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    429e:	6027      	str	r7, [r4, #0]
	FTM3_CNT = 0;
    42a0:	6050      	str	r0, [r2, #4]
	FTM3_MOD = DEFAULT_FTM_MOD;
    42a2:	f8c2 e008 	str.w	lr, [r2, #8]
	FTM3_C0SC = 0x28;
    42a6:	60d3      	str	r3, [r2, #12]
	FTM3_C1SC = 0x28;
    42a8:	6153      	str	r3, [r2, #20]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    42aa:	6017      	str	r7, [r2, #0]
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    42ac:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    42ae:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    42b2:	62f1      	str	r1, [r6, #44]	; 0x2c
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    42b4:	6871      	ldr	r1, [r6, #4]
	TPM1_CNT = 0;
    42b6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    42ba:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    42be:	6071      	str	r1, [r6, #4]
	TPM1_MOD = 32767;
    42c0:	f647 74ff 	movw	r4, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    42c4:	2108      	movs	r1, #8
	TPM1_CNT = 0;
    42c6:	6050      	str	r0, [r2, #4]
{
    42c8:	b082      	sub	sp, #8
	TPM1_MOD = 32767;
    42ca:	6094      	str	r4, [r2, #8]
	TPM1_C0SC = 0x28;
    42cc:	60d3      	str	r3, [r2, #12]
	TPM1_C1SC = 0x28;
    42ce:	6153      	str	r3, [r2, #20]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    42d0:	6011      	str	r1, [r2, #0]
#endif
	analog_init();
    42d2:	f000 ffd5 	bl	5280 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	startup_middle_hook();
    42d6:	f7ff ff9f 	bl	4218 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    42da:	4c0d      	ldr	r4, [pc, #52]	; (4310 <_init_Teensyduino_internal_+0xf4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42dc:	6823      	ldr	r3, [r4, #0]
    42de:	9300      	str	r3, [sp, #0]
	return ret;
    42e0:	9b00      	ldr	r3, [sp, #0]
    42e2:	2b13      	cmp	r3, #19
    42e4:	d9fa      	bls.n	42dc <_init_Teensyduino_internal_+0xc0>
	usb_init();
    42e6:	f000 fcff 	bl	4ce8 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42ea:	6823      	ldr	r3, [r4, #0]
    42ec:	9301      	str	r3, [sp, #4]
	return ret;
    42ee:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    42f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    42f4:	d3f9      	bcc.n	42ea <_init_Teensyduino_internal_+0xce>
}
    42f6:	b002      	add	sp, #8
    42f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42fc:	400b9000 	.word	0x400b9000
    4300:	40038000 	.word	0x40038000
    4304:	400b8000 	.word	0x400b8000
    4308:	40039000 	.word	0x40039000
    430c:	40048000 	.word	0x40048000
    4310:	1fff6124 	.word	0x1fff6124

00004314 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    4314:	283f      	cmp	r0, #63	; 0x3f
    4316:	d818      	bhi.n	434a <digitalWrite+0x36>
{
    4318:	b410      	push	{r4}
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    431a:	4b12      	ldr	r3, [pc, #72]	; (4364 <digitalWrite+0x50>)
    431c:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    4320:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    4324:	b134      	cbz	r4, 4334 <digitalWrite+0x20>
		if (val) {
			*portSetRegister(pin) = 1;
    4326:	2301      	movs	r3, #1
		if (val) {
    4328:	b981      	cbnz	r1, 434c <digitalWrite+0x38>
		} else {
			*portClearRegister(pin) = 1;
    432a:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    432e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4332:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    4334:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    4338:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    433a:	681a      	ldr	r2, [r3, #0]
		if (val) {
    433c:	b159      	cbz	r1, 4356 <digitalWrite+0x42>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    433e:	f042 0203 	orr.w	r2, r2, #3
}
    4342:	f85d 4b04 	ldr.w	r4, [sp], #4
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    4346:	601a      	str	r2, [r3, #0]
}
    4348:	4770      	bx	lr
    434a:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    434c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    4350:	f85d 4b04 	ldr.w	r4, [sp], #4
    4354:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    4356:	f022 0202 	bic.w	r2, r2, #2
}
    435a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*config &= ~(PORT_PCR_PE);
    435e:	601a      	str	r2, [r3, #0]
}
    4360:	4770      	bx	lr
    4362:	bf00      	nop
    4364:	0000c5b8 	.word	0x0000c5b8

00004368 <digitalRead>:
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    4368:	283f      	cmp	r0, #63	; 0x3f
    436a:	d806      	bhi.n	437a <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    436c:	4b04      	ldr	r3, [pc, #16]	; (4380 <digitalRead+0x18>)
    436e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    4372:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    4376:	b2c0      	uxtb	r0, r0
    4378:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    437a:	2000      	movs	r0, #0
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    437c:	4770      	bx	lr
    437e:	bf00      	nop
    4380:	0000c5b8 	.word	0x0000c5b8

00004384 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    4384:	283f      	cmp	r0, #63	; 0x3f
    4386:	d820      	bhi.n	43ca <pinMode+0x46>
	config = portConfigRegister(pin);
    4388:	4a1b      	ldr	r2, [pc, #108]	; (43f8 <pinMode+0x74>)
    438a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    438e:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    4390:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4392:	d00f      	beq.n	43b4 <pinMode+0x30>
    4394:	2904      	cmp	r1, #4
    4396:	d01d      	beq.n	43d4 <pinMode+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    4398:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    439c:	2200      	movs	r2, #0
    439e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    43a2:	b199      	cbz	r1, 43cc <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    43a4:	2902      	cmp	r1, #2
    43a6:	d022      	beq.n	43ee <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    43a8:	2903      	cmp	r1, #3
    43aa:	d10d      	bne.n	43c8 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    43ac:	f44f 7281 	mov.w	r2, #258	; 0x102
    43b0:	601a      	str	r2, [r3, #0]
    43b2:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    43b4:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    43b8:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    43bc:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    43c0:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    43c2:	681a      	ldr	r2, [r3, #0]
    43c4:	f022 0220 	bic.w	r2, r2, #32
    43c8:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    43ca:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    43cc:	f44f 7280 	mov.w	r2, #256	; 0x100
    43d0:	601a      	str	r2, [r3, #0]
    43d2:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    43d4:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    43d8:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    43dc:	2001      	movs	r0, #1
    43de:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    43e2:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    43e4:	681a      	ldr	r2, [r3, #0]
    43e6:	f042 0220 	orr.w	r2, r2, #32
    43ea:	601a      	str	r2, [r3, #0]
    43ec:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    43ee:	f240 1203 	movw	r2, #259	; 0x103
    43f2:	601a      	str	r2, [r3, #0]
    43f4:	4770      	bx	lr
    43f6:	bf00      	nop
    43f8:	0000c5b8 	.word	0x0000c5b8

000043fc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    43fc:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    43fe:	2b03      	cmp	r3, #3
    4400:	d816      	bhi.n	4430 <usb_rx+0x34>
	__disable_irq();
    4402:	b672      	cpsid	i
	ret = rx_first[endpoint];
    4404:	490b      	ldr	r1, [pc, #44]	; (4434 <usb_rx+0x38>)
    4406:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    440a:	b178      	cbz	r0, 442c <usb_rx+0x30>
{
    440c:	b430      	push	{r4, r5}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    440e:	4c0a      	ldr	r4, [pc, #40]	; (4438 <usb_rx+0x3c>)
    4410:	f8b0 c000 	ldrh.w	ip, [r0]
    4414:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
		rx_first[endpoint] = ret->next;
    4418:	6845      	ldr	r5, [r0, #4]
    441a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    441e:	eba2 020c 	sub.w	r2, r2, ip
    4422:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    4426:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4428:	bc30      	pop	{r4, r5}
    442a:	4770      	bx	lr
	__enable_irq();
    442c:	b662      	cpsie	i
}
    442e:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4430:	2000      	movs	r0, #0
    4432:	4770      	bx	lr
    4434:	1fff61b8 	.word	0x1fff61b8
    4438:	1fff6208 	.word	0x1fff6208

0000443c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    443c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    443e:	2803      	cmp	r0, #3
    4440:	d80b      	bhi.n	445a <usb_tx_packet_count+0x1e>
	__disable_irq();
    4442:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    4444:	4b07      	ldr	r3, [pc, #28]	; (4464 <usb_tx_packet_count+0x28>)
    4446:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    444a:	b143      	cbz	r3, 445e <usb_tx_packet_count+0x22>
	uint32_t count=0;
    444c:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    444e:	685b      	ldr	r3, [r3, #4]
    4450:	3001      	adds	r0, #1
    4452:	2b00      	cmp	r3, #0
    4454:	d1fb      	bne.n	444e <usb_tx_packet_count+0x12>
	__enable_irq();
    4456:	b662      	cpsie	i
	return count;
    4458:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    445a:	2000      	movs	r0, #0
}
    445c:	4770      	bx	lr
	uint32_t count=0;
    445e:	4618      	mov	r0, r3
    4460:	e7f9      	b.n	4456 <usb_tx_packet_count+0x1a>
    4462:	bf00      	nop
    4464:	1fff61e0 	.word	0x1fff61e0

00004468 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    4468:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    446a:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    446c:	4a1a      	ldr	r2, [pc, #104]	; (44d8 <usb_rx_memory+0x70>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    446e:	4c1b      	ldr	r4, [pc, #108]	; (44dc <usb_rx_memory+0x74>)
	__disable_irq();
    4470:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4472:	f812 1b01 	ldrb.w	r1, [r2], #1
    4476:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4478:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    447c:	d505      	bpl.n	448a <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    447e:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    4482:	b169      	cbz	r1, 44a0 <usb_rx_memory+0x38>
			if (table[index(i, RX, ODD)].desc == 0) {
    4484:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    4488:	b1c9      	cbz	r1, 44be <usb_rx_memory+0x56>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    448a:	3304      	adds	r3, #4
    448c:	2b14      	cmp	r3, #20
    448e:	d1f0      	bne.n	4472 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    4490:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    4492:	4b13      	ldr	r3, [pc, #76]	; (44e0 <usb_rx_memory+0x78>)
    4494:	2200      	movs	r2, #0
    4496:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    4498:	f85d 4b04 	ldr.w	r4, [sp], #4
	usb_free(packet);
    449c:	f000 bcae 	b.w	4dfc <usb_free>
				usb_rx_memory_needed--;
    44a0:	490f      	ldr	r1, [pc, #60]	; (44e0 <usb_rx_memory+0x78>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    44a2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    44a6:	3008      	adds	r0, #8
    44a8:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    44aa:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    44ac:	480d      	ldr	r0, [pc, #52]	; (44e4 <usb_rx_memory+0x7c>)
    44ae:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    44b2:	3a01      	subs	r2, #1
    44b4:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    44b6:	b662      	cpsie	i
}
    44b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    44bc:	4770      	bx	lr
				usb_rx_memory_needed--;
    44be:	4a08      	ldr	r2, [pc, #32]	; (44e0 <usb_rx_memory+0x78>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    44c0:	4909      	ldr	r1, [pc, #36]	; (44e8 <usb_rx_memory+0x80>)
				table[index(i, RX, ODD)].addr = packet->buf;
    44c2:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    44c6:	3008      	adds	r0, #8
    44c8:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    44ca:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    44cc:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    44d0:	3b01      	subs	r3, #1
    44d2:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    44d4:	b662      	cpsie	i
				return;
    44d6:	e7ef      	b.n	44b8 <usb_rx_memory+0x50>
    44d8:	0000c838 	.word	0x0000c838
    44dc:	1fff0000 	.word	0x1fff0000
    44e0:	1fff6210 	.word	0x1fff6210
    44e4:	00400088 	.word	0x00400088
    44e8:	004000c8 	.word	0x004000c8

000044ec <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    44ec:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    44ee:	2a03      	cmp	r2, #3
    44f0:	d80e      	bhi.n	4510 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    44f2:	4b1c      	ldr	r3, [pc, #112]	; (4564 <usb_tx+0x78>)
    44f4:	0140      	lsls	r0, r0, #5
    44f6:	f040 0010 	orr.w	r0, r0, #16
{
    44fa:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    44fc:	4403      	add	r3, r0
	__disable_irq();
    44fe:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    4500:	4c19      	ldr	r4, [pc, #100]	; (4568 <usb_tx+0x7c>)
    4502:	5ca0      	ldrb	r0, [r4, r2]
    4504:	2803      	cmp	r0, #3
    4506:	d81d      	bhi.n	4544 <usb_tx+0x58>
    4508:	e8df f000 	tbb	[pc, r0]
    450c:	19031614 	.word	0x19031614
    4510:	4770      	bx	lr
    4512:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    4514:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4516:	f013 0f08 	tst.w	r3, #8
    451a:	8808      	ldrh	r0, [r1, #0]
    451c:	bf14      	ite	ne
    451e:	22c8      	movne	r2, #200	; 0xc8
    4520:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    4522:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4524:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    4528:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    452a:	601a      	str	r2, [r3, #0]
	__enable_irq();
    452c:	b662      	cpsie	i
}
    452e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4532:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    4534:	2003      	movs	r0, #3
    4536:	e7ed      	b.n	4514 <usb_tx+0x28>
		b++;
    4538:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    453a:	2002      	movs	r0, #2
		break;
    453c:	e7ea      	b.n	4514 <usb_tx+0x28>
		b++;
    453e:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    4540:	2004      	movs	r0, #4
		break;
    4542:	e7e7      	b.n	4514 <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    4544:	4b09      	ldr	r3, [pc, #36]	; (456c <usb_tx+0x80>)
    4546:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    454a:	b138      	cbz	r0, 455c <usb_tx+0x70>
			tx_last[endpoint]->next = packet;
    454c:	4b08      	ldr	r3, [pc, #32]	; (4570 <usb_tx+0x84>)
    454e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4552:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    4554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    4558:	b662      	cpsie	i
		return;
    455a:	e7e8      	b.n	452e <usb_tx+0x42>
			tx_first[endpoint] = packet;
    455c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    4560:	4b03      	ldr	r3, [pc, #12]	; (4570 <usb_tx+0x84>)
    4562:	e7f7      	b.n	4554 <usb_tx+0x68>
    4564:	1fff0000 	.word	0x1fff0000
    4568:	1fff6200 	.word	0x1fff6200
    456c:	1fff61e0 	.word	0x1fff61e0
    4570:	1fff61f0 	.word	0x1fff61f0

00004574 <usb_isr>:
}



void usb_isr(void)
{
    4574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4578:	f8df a30c 	ldr.w	sl, [pc, #780]	; 4888 <usb_isr+0x314>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    457c:	f8df b30c 	ldr.w	fp, [pc, #780]	; 488c <usb_isr+0x318>
{
    4580:	b085      	sub	sp, #20
    4582:	e03d      	b.n	4600 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    4584:	4db0      	ldr	r5, [pc, #704]	; (4848 <usb_isr+0x2d4>)
    4586:	089e      	lsrs	r6, r3, #2
    4588:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    458c:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    458e:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    4590:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    4594:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4596:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    459a:	f040 80b8 	bne.w	470e <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    459e:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    45a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    45a6:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    45a8:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    45ac:	f000 80a7 	beq.w	46fe <usb_isr+0x18a>
					packet->index = 0;
    45b0:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    45b4:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    45b8:	4ba4      	ldr	r3, [pc, #656]	; (484c <usb_isr+0x2d8>)
    45ba:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    45be:	2a00      	cmp	r2, #0
    45c0:	f000 8201 	beq.w	49c6 <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    45c4:	4ba2      	ldr	r3, [pc, #648]	; (4850 <usb_isr+0x2dc>)
    45c6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    45ca:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    45cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    45d0:	4ba0      	ldr	r3, [pc, #640]	; (4854 <usb_isr+0x2e0>)
    45d2:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    45d6:	4494      	add	ip, r2
    45d8:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    45dc:	f000 fbee 	bl	4dbc <usb_malloc>
					if (packet) {
    45e0:	2800      	cmp	r0, #0
    45e2:	f000 81e9 	beq.w	49b8 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    45e6:	f017 0f08 	tst.w	r7, #8
    45ea:	4b9b      	ldr	r3, [pc, #620]	; (4858 <usb_isr+0x2e4>)
						b->addr = packet->buf;
    45ec:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    45f0:	bf18      	it	ne
    45f2:	465b      	movne	r3, fp
						b->addr = packet->buf;
    45f4:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    45f6:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    45fa:	2308      	movs	r3, #8
    45fc:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    4600:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    4604:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    4606:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    4608:	d51b      	bpl.n	4642 <usb_isr+0xce>
		if (usb_configuration) {
    460a:	4b94      	ldr	r3, [pc, #592]	; (485c <usb_isr+0x2e8>)
    460c:	781b      	ldrb	r3, [r3, #0]
    460e:	b1ab      	cbz	r3, 463c <usb_isr+0xc8>
			t = usb_reboot_timer;
    4610:	4993      	ldr	r1, [pc, #588]	; (4860 <usb_isr+0x2ec>)
    4612:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4614:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4618:	b12a      	cbz	r2, 4626 <usb_isr+0xb2>
				usb_reboot_timer = --t;
    461a:	3b01      	subs	r3, #1
    461c:	b2db      	uxtb	r3, r3
    461e:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    4620:	2b00      	cmp	r3, #0
    4622:	f000 8346 	beq.w	4cb2 <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    4626:	498f      	ldr	r1, [pc, #572]	; (4864 <usb_isr+0x2f0>)
    4628:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    462a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    462e:	b12a      	cbz	r2, 463c <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    4630:	3b01      	subs	r3, #1
    4632:	b2db      	uxtb	r3, r3
    4634:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    4636:	2b00      	cmp	r3, #0
    4638:	f000 81eb 	beq.w	4a12 <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    463c:	2304      	movs	r3, #4
    463e:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    4642:	f014 0208 	ands.w	r2, r4, #8
    4646:	f000 81cc 	beq.w	49e2 <usb_isr+0x46e>
		stat = USB0_STAT;
    464a:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    464e:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    4650:	0912      	lsrs	r2, r2, #4
    4652:	d197      	bne.n	4584 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    4654:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 4848 <usb_isr+0x2d4>
    4658:	089b      	lsrs	r3, r3, #2
    465a:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    465e:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    4662:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    4664:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    4668:	2809      	cmp	r0, #9
    466a:	d07c      	beq.n	4766 <usb_isr+0x1f2>
    466c:	d80f      	bhi.n	468e <usb_isr+0x11a>
    466e:	3801      	subs	r0, #1
    4670:	2801      	cmp	r0, #1
    4672:	d808      	bhi.n	4686 <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    4674:	4a7c      	ldr	r2, [pc, #496]	; (4868 <usb_isr+0x2f4>)
    4676:	8815      	ldrh	r5, [r2, #0]
    4678:	f242 0021 	movw	r0, #8225	; 0x2021
    467c:	4285      	cmp	r5, r0
    467e:	f000 81fb 	beq.w	4a78 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4682:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4686:	2301      	movs	r3, #1
    4688:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    468c:	e7b5      	b.n	45fa <usb_isr+0x86>
	switch (pid) {
    468e:	280d      	cmp	r0, #13
    4690:	d1f9      	bne.n	4686 <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    4692:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    4696:	4d75      	ldr	r5, [pc, #468]	; (486c <usb_isr+0x2f8>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4698:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    469c:	4e72      	ldr	r6, [pc, #456]	; (4868 <usb_isr+0x2f4>)
		ep0_tx_data_toggle = 1;
    469e:	4c74      	ldr	r4, [pc, #464]	; (4870 <usb_isr+0x2fc>)
		table[index(0, TX, EVEN)].desc = 0;
    46a0:	f8c9 2010 	str.w	r2, [r9, #16]
    46a4:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    46a6:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    46aa:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    46ae:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    46b0:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    46b2:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    46b6:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    46ba:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    46bc:	f200 80ff 	bhi.w	48be <usb_isr+0x34a>
    46c0:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    46c4:	f080 82cb 	bcs.w	4c5e <usb_isr+0x6ea>
    46c8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    46cc:	f000 8226 	beq.w	4b1c <usb_isr+0x5a8>
    46d0:	f240 80de 	bls.w	4890 <usb_isr+0x31c>
    46d4:	f240 3202 	movw	r2, #770	; 0x302
    46d8:	4293      	cmp	r3, r2
    46da:	d17b      	bne.n	47d4 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    46dc:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    46e0:	2f04      	cmp	r7, #4
    46e2:	f200 8108 	bhi.w	48f6 <usb_isr+0x382>
    46e6:	0c02      	lsrs	r2, r0, #16
    46e8:	f040 8105 	bne.w	48f6 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    46ec:	4961      	ldr	r1, [pc, #388]	; (4874 <usb_isr+0x300>)
    46ee:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    46f2:	f043 0302 	orr.w	r3, r3, #2
    46f6:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    46fa:	4613      	mov	r3, r2
		break;
    46fc:	e070      	b.n	47e0 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    46fe:	f017 0f08 	tst.w	r7, #8
    4702:	4b55      	ldr	r3, [pc, #340]	; (4858 <usb_isr+0x2e4>)
    4704:	bf18      	it	ne
    4706:	465b      	movne	r3, fp
    4708:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    470c:	e775      	b.n	45fa <usb_isr+0x86>
				usb_free(packet);
    470e:	f000 fb75 	bl	4dfc <usb_free>
				packet = tx_first[endpoint];
    4712:	4959      	ldr	r1, [pc, #356]	; (4878 <usb_isr+0x304>)
					switch (tx_state[endpoint]) {
    4714:	4a59      	ldr	r2, [pc, #356]	; (487c <usb_isr+0x308>)
				packet = tx_first[endpoint];
    4716:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    471a:	2b00      	cmp	r3, #0
    471c:	f000 8157 	beq.w	49ce <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    4720:	6858      	ldr	r0, [r3, #4]
    4722:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    4726:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    4728:	f103 0008 	add.w	r0, r3, #8
    472c:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    472e:	2903      	cmp	r1, #3
    4730:	d805      	bhi.n	473e <usb_isr+0x1ca>
    4732:	e8df f001 	tbb	[pc, r1]
    4736:	0f12      	.short	0x0f12
    4738:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    473a:	2104      	movs	r1, #4
    473c:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    473e:	881a      	ldrh	r2, [r3, #0]
    4740:	f017 0f08 	tst.w	r7, #8
    4744:	bf14      	ite	ne
    4746:	23c8      	movne	r3, #200	; 0xc8
    4748:	2388      	moveq	r3, #136	; 0x88
    474a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    474e:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    4752:	e752      	b.n	45fa <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    4754:	2102      	movs	r1, #2
    4756:	5511      	strb	r1, [r2, r4]
						break;
    4758:	e7f1      	b.n	473e <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    475a:	2103      	movs	r1, #3
    475c:	5511      	strb	r1, [r2, r4]
						break;
    475e:	e7ee      	b.n	473e <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    4760:	2105      	movs	r1, #5
    4762:	5511      	strb	r1, [r2, r4]
						break;
    4764:	e7eb      	b.n	473e <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    4766:	4d41      	ldr	r5, [pc, #260]	; (486c <usb_isr+0x2f8>)
    4768:	682a      	ldr	r2, [r5, #0]
		if (data) {
    476a:	b33a      	cbz	r2, 47bc <usb_isr+0x248>
			size = ep0_tx_len;
    476c:	4944      	ldr	r1, [pc, #272]	; (4880 <usb_isr+0x30c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    476e:	4c40      	ldr	r4, [pc, #256]	; (4870 <usb_isr+0x2fc>)
			size = ep0_tx_len;
    4770:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4772:	4844      	ldr	r0, [pc, #272]	; (4884 <usb_isr+0x310>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4774:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4778:	7806      	ldrb	r6, [r0, #0]
    477a:	2f40      	cmp	r7, #64	; 0x40
    477c:	463b      	mov	r3, r7
    477e:	bf28      	it	cs
    4780:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4782:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    4786:	f08e 0e01 	eor.w	lr, lr, #1
    478a:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    478e:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    4792:	f086 0601 	eor.w	r6, r6, #1
    4796:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4798:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    479c:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    479e:	bf14      	ite	ne
    47a0:	20c8      	movne	r0, #200	; 0xc8
    47a2:	2088      	moveq	r0, #136	; 0x88
    47a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    47a8:	441a      	add	r2, r3
			ep0_tx_len -= size;
    47aa:	1afb      	subs	r3, r7, r3
    47ac:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    47ae:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    47b2:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    47b4:	2b00      	cmp	r3, #0
    47b6:	f000 8136 	beq.w	4a26 <usb_isr+0x4b2>
    47ba:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    47bc:	4b2a      	ldr	r3, [pc, #168]	; (4868 <usb_isr+0x2f4>)
    47be:	881a      	ldrh	r2, [r3, #0]
    47c0:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    47c4:	f47f af5f 	bne.w	4686 <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    47c8:	789a      	ldrb	r2, [r3, #2]
    47ca:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    47ce:	2200      	movs	r2, #0
    47d0:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    47d2:	e758      	b.n	4686 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    47d4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    47d8:	f040 808d 	bne.w	48f6 <usb_isr+0x382>
	uint32_t datalen = 0;
    47dc:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    47de:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    47e0:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    47e4:	4827      	ldr	r0, [pc, #156]	; (4884 <usb_isr+0x310>)
    47e6:	4594      	cmp	ip, r2
    47e8:	bf28      	it	cs
    47ea:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    47ec:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    47ee:	7802      	ldrb	r2, [r0, #0]
    47f0:	2f40      	cmp	r7, #64	; 0x40
    47f2:	bf28      	it	cs
    47f4:	2740      	movcs	r7, #64	; 0x40
    47f6:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    47fa:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    47fc:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4800:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4804:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4808:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    480c:	2600      	movs	r6, #0
	data += size;
    480e:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    4810:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    4812:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    4816:	f082 0601 	eor.w	r6, r2, #1
    481a:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    481c:	f040 8111 	bne.w	4a42 <usb_isr+0x4ce>
    4820:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    4824:	f04f 0501 	mov.w	r5, #1
    4828:	d909      	bls.n	483e <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    482a:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    482e:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4830:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    4834:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4836:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4838:	2388      	movs	r3, #136	; 0x88
    483a:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    483e:	2301      	movs	r3, #1
    4840:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    4844:	e71f      	b.n	4686 <usb_isr+0x112>
    4846:	bf00      	nop
    4848:	1fff0000 	.word	0x1fff0000
    484c:	1fff61b8 	.word	0x1fff61b8
    4850:	1fff61c8 	.word	0x1fff61c8
    4854:	1fff6208 	.word	0x1fff6208
    4858:	00400088 	.word	0x00400088
    485c:	1fff6204 	.word	0x1fff6204
    4860:	1fff6205 	.word	0x1fff6205
    4864:	1fff6230 	.word	0x1fff6230
    4868:	1fff61d8 	.word	0x1fff61d8
    486c:	1fff61ac 	.word	0x1fff61ac
    4870:	1fff61a9 	.word	0x1fff61a9
    4874:	400720c0 	.word	0x400720c0
    4878:	1fff61e0 	.word	0x1fff61e0
    487c:	1fff6200 	.word	0x1fff6200
    4880:	1fff61aa 	.word	0x1fff61aa
    4884:	1fff61a8 	.word	0x1fff61a8
    4888:	40072000 	.word	0x40072000
    488c:	004000c8 	.word	0x004000c8
	switch (setup.wRequestAndType) {
    4890:	2b80      	cmp	r3, #128	; 0x80
    4892:	f000 818b 	beq.w	4bac <usb_isr+0x638>
    4896:	2b82      	cmp	r3, #130	; 0x82
    4898:	d12d      	bne.n	48f6 <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    489a:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    489e:	2f04      	cmp	r7, #4
    48a0:	d829      	bhi.n	48f6 <usb_isr+0x382>
		reply_buffer[0] = 0;
    48a2:	4aa7      	ldr	r2, [pc, #668]	; (4b40 <usb_isr+0x5cc>)
    48a4:	2300      	movs	r3, #0
    48a6:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    48a8:	4ba6      	ldr	r3, [pc, #664]	; (4b44 <usb_isr+0x5d0>)
    48aa:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    48ae:	079f      	lsls	r7, r3, #30
    48b0:	f140 81fc 	bpl.w	4cac <usb_isr+0x738>
    48b4:	2301      	movs	r3, #1
    48b6:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    48b8:	4ba1      	ldr	r3, [pc, #644]	; (4b40 <usb_isr+0x5cc>)
		datalen = 2;
    48ba:	2202      	movs	r2, #2
    48bc:	e790      	b.n	47e0 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    48be:	f242 0c21 	movw	ip, #8225	; 0x2021
    48c2:	4563      	cmp	r3, ip
    48c4:	d0bb      	beq.n	483e <usb_isr+0x2ca>
    48c6:	d91d      	bls.n	4904 <usb_isr+0x390>
    48c8:	f242 2221 	movw	r2, #8737	; 0x2221
    48cc:	4293      	cmp	r3, r2
    48ce:	d10d      	bne.n	48ec <usb_isr+0x378>
		switch (setup.wIndex) {
    48d0:	b2bf      	uxth	r7, r7
    48d2:	2f00      	cmp	r7, #0
    48d4:	d182      	bne.n	47dc <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    48d6:	4b9c      	ldr	r3, [pc, #624]	; (4b48 <usb_isr+0x5d4>)
    48d8:	681a      	ldr	r2, [r3, #0]
    48da:	4b9c      	ldr	r3, [pc, #624]	; (4b4c <usb_isr+0x5d8>)
    48dc:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    48de:	4b9c      	ldr	r3, [pc, #624]	; (4b50 <usb_isr+0x5dc>)
    48e0:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    48e4:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    48e6:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    48e8:	4613      	mov	r3, r2
			break;
    48ea:	e779      	b.n	47e0 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    48ec:	f242 3221 	movw	r2, #8993	; 0x2321
    48f0:	4293      	cmp	r3, r2
    48f2:	f43f af73 	beq.w	47dc <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    48f6:	230f      	movs	r3, #15
    48f8:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    48fc:	2301      	movs	r3, #1
    48fe:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    4902:	e6c0      	b.n	4686 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    4904:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    4908:	f000 814a 	beq.w	4ba0 <usb_isr+0x62c>
    490c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4910:	d1f1      	bne.n	48f6 <usb_isr+0x382>
		usb_configuration = setup.wValue;
    4912:	4b90      	ldr	r3, [pc, #576]	; (4b54 <usb_isr+0x5e0>)
    4914:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    4918:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    491a:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    491c:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    4920:	061a      	lsls	r2, r3, #24
    4922:	d406      	bmi.n	4932 <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    4924:	3501      	adds	r5, #1
    4926:	2d14      	cmp	r5, #20
    4928:	d00c      	beq.n	4944 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    492a:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    492e:	061a      	lsls	r2, r3, #24
    4930:	d5f8      	bpl.n	4924 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    4932:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    4936:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    4938:	6858      	ldr	r0, [r3, #4]
    493a:	3808      	subs	r0, #8
    493c:	f000 fa5e 	bl	4dfc <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    4940:	2d14      	cmp	r5, #20
    4942:	d1f2      	bne.n	492a <usb_isr+0x3b6>
    4944:	4a84      	ldr	r2, [pc, #528]	; (4b58 <usb_isr+0x5e4>)
    4946:	4b85      	ldr	r3, [pc, #532]	; (4b5c <usb_isr+0x5e8>)
    4948:	9202      	str	r2, [sp, #8]
    494a:	4a85      	ldr	r2, [pc, #532]	; (4b60 <usb_isr+0x5ec>)
    494c:	9201      	str	r2, [sp, #4]
    494e:	4e85      	ldr	r6, [pc, #532]	; (4b64 <usb_isr+0x5f0>)
    4950:	4a85      	ldr	r2, [pc, #532]	; (4b68 <usb_isr+0x5f4>)
    4952:	f8df 8248 	ldr.w	r8, [pc, #584]	; 4b9c <usb_isr+0x628>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4956:	9403      	str	r4, [sp, #12]
    4958:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    495a:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    495c:	461c      	mov	r4, r3
			p = rx_first[i];
    495e:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    4962:	b12f      	cbz	r7, 4970 <usb_isr+0x3fc>
				n = p->next;
    4964:	4638      	mov	r0, r7
    4966:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    4968:	f000 fa48 	bl	4dfc <usb_free>
			while (p) {
    496c:	2f00      	cmp	r7, #0
    496e:	d1f9      	bne.n	4964 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    4970:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    4972:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    4976:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    497a:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    497e:	9300      	str	r3, [sp, #0]
			while (p) {
    4980:	b12f      	cbz	r7, 498e <usb_isr+0x41a>
				n = p->next;
    4982:	4638      	mov	r0, r7
    4984:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    4986:	f000 fa39 	bl	4dfc <usb_free>
			while (p) {
    498a:	2f00      	cmp	r7, #0
    498c:	d1f9      	bne.n	4982 <usb_isr+0x40e>
			tx_last[i] = NULL;
    498e:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    4990:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    4994:	f843 5b04 	str.w	r5, [r3], #4
    4998:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    499a:	9b01      	ldr	r3, [sp, #4]
    499c:	f823 5b02 	strh.w	r5, [r3], #2
    49a0:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    49a2:	7823      	ldrb	r3, [r4, #0]
    49a4:	3b02      	subs	r3, #2
    49a6:	2b03      	cmp	r3, #3
    49a8:	f200 8109 	bhi.w	4bbe <usb_isr+0x64a>
    49ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    49b0:	0104013f 	.word	0x0104013f
    49b4:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    49b8:	4a6c      	ldr	r2, [pc, #432]	; (4b6c <usb_isr+0x5f8>)
						b->desc = 0;
    49ba:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    49be:	7813      	ldrb	r3, [r2, #0]
    49c0:	3301      	adds	r3, #1
    49c2:	7013      	strb	r3, [r2, #0]
    49c4:	e619      	b.n	45fa <usb_isr+0x86>
						rx_first[endpoint] = packet;
    49c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    49ca:	4b67      	ldr	r3, [pc, #412]	; (4b68 <usb_isr+0x5f4>)
    49cc:	e5fe      	b.n	45cc <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    49ce:	5d11      	ldrb	r1, [r2, r4]
    49d0:	2902      	cmp	r1, #2
    49d2:	d026      	beq.n	4a22 <usb_isr+0x4ae>
    49d4:	f67f ae11 	bls.w	45fa <usb_isr+0x86>
    49d8:	2903      	cmp	r1, #3
    49da:	d11d      	bne.n	4a18 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    49dc:	2301      	movs	r3, #1
    49de:	5513      	strb	r3, [r2, r4]
						break;
    49e0:	e60b      	b.n	45fa <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    49e2:	07e0      	lsls	r0, r4, #31
    49e4:	d46e      	bmi.n	4ac4 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    49e6:	0621      	lsls	r1, r4, #24
    49e8:	d421      	bmi.n	4a2e <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    49ea:	07a2      	lsls	r2, r4, #30
    49ec:	d508      	bpl.n	4a00 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    49ee:	4b60      	ldr	r3, [pc, #384]	; (4b70 <usb_isr+0x5fc>)
    49f0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    49f4:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    49f6:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    49f8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    49fc:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    4a00:	06e3      	lsls	r3, r4, #27
    4a02:	d503      	bpl.n	4a0c <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    4a04:	4b5a      	ldr	r3, [pc, #360]	; (4b70 <usb_isr+0x5fc>)
    4a06:	2210      	movs	r2, #16
    4a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    4a0c:	b005      	add	sp, #20
    4a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    4a12:	f000 fb6d 	bl	50f0 <usb_serial_flush_callback>
    4a16:	e611      	b.n	463c <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    4a18:	f017 0f08 	tst.w	r7, #8
    4a1c:	bf14      	ite	ne
    4a1e:	2303      	movne	r3, #3
    4a20:	2302      	moveq	r3, #2
    4a22:	5513      	strb	r3, [r2, r4]
						break;
    4a24:	e5e9      	b.n	45fa <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4a26:	2f3f      	cmp	r7, #63	; 0x3f
    4a28:	bf98      	it	ls
    4a2a:	2200      	movls	r2, #0
    4a2c:	e6c5      	b.n	47ba <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4a2e:	4b50      	ldr	r3, [pc, #320]	; (4b70 <usb_isr+0x5fc>)
		USB0_ISTAT = USB_ISTAT_STALL;
    4a30:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4a32:	210d      	movs	r1, #13
    4a34:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    4a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4a3c:	07a2      	lsls	r2, r4, #30
    4a3e:	d5df      	bpl.n	4a00 <usb_isr+0x48c>
    4a40:	e7d5      	b.n	49ee <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a42:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    4a46:	7002      	strb	r2, [r0, #0]
    4a48:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a4a:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    4a4e:	463a      	mov	r2, r7
    4a50:	bf28      	it	cs
    4a52:	2240      	movcs	r2, #64	; 0x40
    4a54:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a56:	0410      	lsls	r0, r2, #16
	data += size;
    4a58:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a5a:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    4a5e:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    4a60:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a62:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    4a66:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    4a68:	d055      	beq.n	4b16 <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    4a6a:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    4a6c:	4b41      	ldr	r3, [pc, #260]	; (4b74 <usb_isr+0x600>)
    4a6e:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4a70:	2301      	movs	r3, #1
    4a72:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    4a76:	e606      	b.n	4686 <usb_isr+0x112>
			switch (setup.wIndex) {
    4a78:	8892      	ldrh	r2, [r2, #4]
    4a7a:	b95a      	cbnz	r2, 4a94 <usb_isr+0x520>
    4a7c:	4a3e      	ldr	r2, [pc, #248]	; (4b78 <usb_isr+0x604>)
    4a7e:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    4a80:	f814 1b01 	ldrb.w	r1, [r4], #1
    4a84:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    4a88:	42ac      	cmp	r4, r5
    4a8a:	d1f9      	bne.n	4a80 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    4a8c:	4a3b      	ldr	r2, [pc, #236]	; (4b7c <usb_isr+0x608>)
    4a8e:	6812      	ldr	r2, [r2, #0]
    4a90:	2a86      	cmp	r2, #134	; 0x86
    4a92:	d03c      	beq.n	4b0e <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a94:	4c3a      	ldr	r4, [pc, #232]	; (4b80 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a96:	483b      	ldr	r0, [pc, #236]	; (4b84 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a98:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a9a:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a9c:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    4a9e:	f085 0501 	eor.w	r5, r5, #1
    4aa2:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4aa4:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    4aa8:	f082 0201 	eor.w	r2, r2, #1
    4aac:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4aae:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    4ab2:	f04f 0000 	mov.w	r0, #0
    4ab6:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4ab8:	bf14      	ite	ne
    4aba:	22c8      	movne	r2, #200	; 0xc8
    4abc:	2288      	moveq	r2, #136	; 0x88
    4abe:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    4ac2:	e5de      	b.n	4682 <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    4ac4:	4b2a      	ldr	r3, [pc, #168]	; (4b70 <usb_isr+0x5fc>)
		ep0_tx_bdt_bank = 0;
    4ac6:	482f      	ldr	r0, [pc, #188]	; (4b84 <usb_isr+0x610>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4ac8:	492f      	ldr	r1, [pc, #188]	; (4b88 <usb_isr+0x614>)
    4aca:	4c30      	ldr	r4, [pc, #192]	; (4b8c <usb_isr+0x618>)
		USB0_CTL = USB_CTL_ODDRST;
    4acc:	2502      	movs	r5, #2
    4ace:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    4ad2:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4ad4:	482e      	ldr	r0, [pc, #184]	; (4b90 <usb_isr+0x61c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4ad6:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    4ad8:	4d2e      	ldr	r5, [pc, #184]	; (4b94 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4ada:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    4adc:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4ade:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    4ae0:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    4ae2:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    4ae4:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    4ae6:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4ae8:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    4aec:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    4aee:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    4af0:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    4af4:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    4af8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    4afc:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    4b00:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    4b04:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    4b08:	b005      	add	sp, #20
    4b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    4b0e:	4a22      	ldr	r2, [pc, #136]	; (4b98 <usb_isr+0x624>)
    4b10:	200f      	movs	r0, #15
    4b12:	7010      	strb	r0, [r2, #0]
    4b14:	e7be      	b.n	4a94 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    4b16:	2f3f      	cmp	r7, #63	; 0x3f
    4b18:	d8a7      	bhi.n	4a6a <usb_isr+0x4f6>
    4b1a:	e690      	b.n	483e <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    4b1c:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4b20:	2f04      	cmp	r7, #4
    4b22:	f63f aee8 	bhi.w	48f6 <usb_isr+0x382>
    4b26:	0c00      	lsrs	r0, r0, #16
    4b28:	f47f aee5 	bne.w	48f6 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    4b2c:	4a05      	ldr	r2, [pc, #20]	; (4b44 <usb_isr+0x5d0>)
    4b2e:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    4b32:	f023 0302 	bic.w	r3, r3, #2
    4b36:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    4b3a:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    4b3c:	4613      	mov	r3, r2
		break;
    4b3e:	e64f      	b.n	47e0 <usb_isr+0x26c>
    4b40:	1fff61b0 	.word	0x1fff61b0
    4b44:	400720c0 	.word	0x400720c0
    4b48:	1fff6124 	.word	0x1fff6124
    4b4c:	1fff622c 	.word	0x1fff622c
    4b50:	1fff6228 	.word	0x1fff6228
    4b54:	1fff6204 	.word	0x1fff6204
    4b58:	1fff61f0 	.word	0x1fff61f0
    4b5c:	1fff6200 	.word	0x1fff6200
    4b60:	1fff6208 	.word	0x1fff6208
    4b64:	1fff61b8 	.word	0x1fff61b8
    4b68:	1fff61c8 	.word	0x1fff61c8
    4b6c:	1fff6210 	.word	0x1fff6210
    4b70:	40072000 	.word	0x40072000
    4b74:	1fff61aa 	.word	0x1fff61aa
    4b78:	1fff621f 	.word	0x1fff621f
    4b7c:	1fff6220 	.word	0x1fff6220
    4b80:	1fff61a9 	.word	0x1fff61a9
    4b84:	1fff61a8 	.word	0x1fff61a8
    4b88:	1fff0000 	.word	0x1fff0000
    4b8c:	00400088 	.word	0x00400088
    4b90:	1fff6128 	.word	0x1fff6128
    4b94:	1fff6168 	.word	0x1fff6168
    4b98:	1fff6205 	.word	0x1fff6205
    4b9c:	1fff61e0 	.word	0x1fff61e0
		reply_buffer[0] = usb_configuration;
    4ba0:	4b48      	ldr	r3, [pc, #288]	; (4cc4 <usb_isr+0x750>)
    4ba2:	4949      	ldr	r1, [pc, #292]	; (4cc8 <usb_isr+0x754>)
    4ba4:	781b      	ldrb	r3, [r3, #0]
    4ba6:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    4ba8:	460b      	mov	r3, r1
		break;
    4baa:	e619      	b.n	47e0 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    4bac:	4a46      	ldr	r2, [pc, #280]	; (4cc8 <usb_isr+0x754>)
    4bae:	2300      	movs	r3, #0
    4bb0:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    4bb2:	4b45      	ldr	r3, [pc, #276]	; (4cc8 <usb_isr+0x754>)
		datalen = 2;
    4bb4:	2202      	movs	r2, #2
		break;
    4bb6:	e613      	b.n	47e0 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4bb8:	f04f 0301 	mov.w	r3, #1
    4bbc:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    4bbe:	4b43      	ldr	r3, [pc, #268]	; (4ccc <usb_isr+0x758>)
    4bc0:	42b3      	cmp	r3, r6
    4bc2:	f104 0401 	add.w	r4, r4, #1
    4bc6:	f47f aeca 	bne.w	495e <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    4bca:	4e41      	ldr	r6, [pc, #260]	; (4cd0 <usb_isr+0x75c>)
    4bcc:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    4bce:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4ce4 <usb_isr+0x770>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4bd2:	4f40      	ldr	r7, [pc, #256]	; (4cd4 <usb_isr+0x760>)
		usb_rx_memory_needed = 0;
    4bd4:	2300      	movs	r3, #0
    4bd6:	7033      	strb	r3, [r6, #0]
    4bd8:	2504      	movs	r5, #4
			epconf = *cfg++;
    4bda:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    4bde:	4a3e      	ldr	r2, [pc, #248]	; (4cd8 <usb_isr+0x764>)
    4be0:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    4be2:	071b      	lsls	r3, r3, #28
    4be4:	d425      	bmi.n	4c32 <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    4be6:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    4bea:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    4bee:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    4bf0:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    4bf2:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    4bf4:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    4bf8:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    4bfc:	d1ed      	bne.n	4bda <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4bfe:	4f37      	ldr	r7, [pc, #220]	; (4cdc <usb_isr+0x768>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c00:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c02:	783a      	ldrb	r2, [r7, #0]
    4c04:	f042 0002 	orr.w	r0, r2, #2
    4c08:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    4c0c:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c10:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c14:	2d00      	cmp	r5, #0
    4c16:	d14d      	bne.n	4cb4 <usb_isr+0x740>
    4c18:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    4c1a:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    4c1e:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    4c20:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c22:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4c26:	2301      	movs	r3, #1
    4c28:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    4c2c:	e52b      	b.n	4686 <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4c2e:	7025      	strb	r5, [r4, #0]
				break;
    4c30:	e7c5      	b.n	4bbe <usb_isr+0x64a>
				p = usb_malloc();
    4c32:	f000 f8c3 	bl	4dbc <usb_malloc>
				if (p) {
    4c36:	2800      	cmp	r0, #0
    4c38:	d032      	beq.n	4ca0 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    4c3a:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    4c3e:	3008      	adds	r0, #8
    4c40:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4c42:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    4c46:	f000 f8b9 	bl	4dbc <usb_malloc>
				if (p) {
    4c4a:	b308      	cbz	r0, 4c90 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    4c4c:	f045 0301 	orr.w	r3, r5, #1
    4c50:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    4c54:	3008      	adds	r0, #8
    4c56:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4c58:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    4c5c:	e7c3      	b.n	4be6 <usb_isr+0x672>
			if (list->addr == NULL) break;
    4c5e:	4a20      	ldr	r2, [pc, #128]	; (4ce0 <usb_isr+0x76c>)
    4c60:	6853      	ldr	r3, [r2, #4]
    4c62:	2b00      	cmp	r3, #0
    4c64:	f43f ae47 	beq.w	48f6 <usb_isr+0x382>
    4c68:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4c6a:	b2bf      	uxth	r7, r7
    4c6c:	e004      	b.n	4c78 <usb_isr+0x704>
			if (list->addr == NULL) break;
    4c6e:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    4c70:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    4c72:	2b00      	cmp	r3, #0
    4c74:	f43f ae3f 	beq.w	48f6 <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4c78:	8811      	ldrh	r1, [r2, #0]
    4c7a:	4281      	cmp	r1, r0
    4c7c:	d1f7      	bne.n	4c6e <usb_isr+0x6fa>
    4c7e:	8851      	ldrh	r1, [r2, #2]
    4c80:	42b9      	cmp	r1, r7
    4c82:	d1f4      	bne.n	4c6e <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    4c84:	0a00      	lsrs	r0, r0, #8
    4c86:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    4c88:	bf0c      	ite	eq
    4c8a:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    4c8c:	8912      	ldrhne	r2, [r2, #8]
    4c8e:	e5a7      	b.n	47e0 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    4c90:	7833      	ldrb	r3, [r6, #0]
    4c92:	3301      	adds	r3, #1
    4c94:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    4c96:	f045 0301 	orr.w	r3, r5, #1
    4c9a:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    4c9e:	e7a2      	b.n	4be6 <usb_isr+0x672>
					usb_rx_memory_needed++;
    4ca0:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    4ca2:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    4ca6:	3301      	adds	r3, #1
    4ca8:	7033      	strb	r3, [r6, #0]
    4caa:	e7cc      	b.n	4c46 <usb_isr+0x6d2>
		data = reply_buffer;
    4cac:	4b06      	ldr	r3, [pc, #24]	; (4cc8 <usb_isr+0x754>)
		datalen = 2;
    4cae:	2202      	movs	r2, #2
    4cb0:	e596      	b.n	47e0 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    4cb2:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    4cb4:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cb6:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    4cb8:	f082 0601 	eor.w	r6, r2, #1
    4cbc:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cbe:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    4cc2:	e5bc      	b.n	483e <usb_isr+0x2ca>
    4cc4:	1fff6204 	.word	0x1fff6204
    4cc8:	1fff61b0 	.word	0x1fff61b0
    4ccc:	1fff61c8 	.word	0x1fff61c8
    4cd0:	1fff6210 	.word	0x1fff6210
    4cd4:	00400088 	.word	0x00400088
    4cd8:	400720c0 	.word	0x400720c0
    4cdc:	1fff61a8 	.word	0x1fff61a8
    4ce0:	0000c7e4 	.word	0x0000c7e4
    4ce4:	0000c838 	.word	0x0000c838

00004ce8 <usb_init>:



void usb_init(void)
{
    4ce8:	b510      	push	{r4, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4cea:	f000 fb2f 	bl	534c <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    4cee:	2300      	movs	r3, #0
    4cf0:	4a23      	ldr	r2, [pc, #140]	; (4d80 <usb_init+0x98>)
		table[i].desc = 0;
    4cf2:	4619      	mov	r1, r3
    4cf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    4cf8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    4cfc:	3301      	adds	r3, #1
    4cfe:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    4d00:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    4d02:	d1f7      	bne.n	4cf4 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4d04:	481f      	ldr	r0, [pc, #124]	; (4d84 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    4d06:	4c20      	ldr	r4, [pc, #128]	; (4d88 <usb_init+0xa0>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4d08:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    4d0e:	6343      	str	r3, [r0, #52]	; 0x34
	MPU_RGDAAC0 |= 0x03000000;
    4d10:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    4d14:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
    4d18:	f500 7080 	add.w	r0, r0, #256	; 0x100
	MPU_RGDAAC0 |= 0x03000000;
    4d1c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    4d20:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    4d24:	2403      	movs	r4, #3
    4d26:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4d2a:	4b18      	ldr	r3, [pc, #96]	; (4d8c <usb_init+0xa4>)
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    4d2c:	24a0      	movs	r4, #160	; 0xa0
    4d2e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4d32:	f3c2 2407 	ubfx	r4, r2, #8, #8
    4d36:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4d3a:	f3c2 4407 	ubfx	r4, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4d3e:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4d40:	f883 40b0 	strb.w	r4, [r3, #176]	; 0xb0

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4d48:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    4d4c:	2201      	movs	r2, #1
	USB0_ISTAT = 0xFF;
    4d4e:	f883 c080 	strb.w	ip, [r3, #128]	; 0x80

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4d52:	4c0f      	ldr	r4, [pc, #60]	; (4d90 <usb_init+0xa8>)
	USB0_ERRSTAT = 0xFF;
    4d54:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    4d58:	f883 c010 	strb.w	ip, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    4d5c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    4d60:	7001      	strb	r1, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4d62:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	USB0_INTEN = USB_INTEN_USBRSTEN;
    4d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4d6a:	f04f 0c70 	mov.w	ip, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4d6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4d72:	2310      	movs	r3, #16
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4d74:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4d78:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4d7c:	7203      	strb	r3, [r0, #8]
}
    4d7e:	bd10      	pop	{r4, pc}
    4d80:	1fff0000 	.word	0x1fff0000
    4d84:	40048000 	.word	0x40048000
    4d88:	4000d000 	.word	0x4000d000
    4d8c:	40072000 	.word	0x40072000
    4d90:	e000e400 	.word	0xe000e400

00004d94 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    4d94:	f000 b8ac 	b.w	4ef0 <usb_serial_flush_input>

00004d98 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    4d98:	f000 b87c 	b.w	4e94 <usb_serial_peekchar>

00004d9c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    4d9c:	f000 b856 	b.w	4e4c <usb_serial_getchar>

00004da0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    4da0:	f000 b890 	b.w	4ec4 <usb_serial_available>

00004da4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4da4:	f000 b978 	b.w	5098 <usb_serial_flush_output>

00004da8 <usb_serial_class::availableForWrite()>:
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4da8:	f000 b952 	b.w	5050 <usb_serial_write_buffer_free>

00004dac <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4dac:	4608      	mov	r0, r1
    4dae:	4611      	mov	r1, r2
    4db0:	f000 b8ba 	b.w	4f28 <usb_serial_write>

00004db4 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4db4:	4608      	mov	r0, r1
    4db6:	f000 b93d 	b.w	5034 <usb_serial_putchar>
    4dba:	bf00      	nop

00004dbc <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    4dbc:	b672      	cpsid	i
	avail = usb_buffer_available;
    4dbe:	490d      	ldr	r1, [pc, #52]	; (4df4 <usb_malloc+0x38>)
    4dc0:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    4dc2:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    4dc6:	280b      	cmp	r0, #11
    4dc8:	dc10      	bgt.n	4dec <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    4dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4dce:	40c2      	lsrs	r2, r0
    4dd0:	ea23 0302 	bic.w	r3, r3, r2
    4dd4:	600b      	str	r3, [r1, #0]
	__enable_irq();
    4dd6:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    4dd8:	4a07      	ldr	r2, [pc, #28]	; (4df8 <usb_malloc+0x3c>)
    4dda:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    4dde:	00c1      	lsls	r1, r0, #3
    4de0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    4de4:	2300      	movs	r3, #0
    4de6:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    4de8:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    4dea:	4770      	bx	lr
		__enable_irq();
    4dec:	b662      	cpsie	i
		return NULL;
    4dee:	2000      	movs	r0, #0
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop
    4df4:	1fff0768 	.word	0x1fff0768
    4df8:	1fff03d0 	.word	0x1fff03d0

00004dfc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    4dfc:	4b0e      	ldr	r3, [pc, #56]	; (4e38 <usb_free+0x3c>)
    4dfe:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    4e00:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    4e04:	d210      	bcs.n	4e28 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    4e06:	4a0d      	ldr	r2, [pc, #52]	; (4e3c <usb_free+0x40>)
    4e08:	7812      	ldrb	r2, [r2, #0]
    4e0a:	b972      	cbnz	r2, 4e2a <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    4e0c:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    4e0e:	4a0c      	ldr	r2, [pc, #48]	; (4e40 <usb_free+0x44>)
	usb_buffer_available |= mask;
    4e10:	490c      	ldr	r1, [pc, #48]	; (4e44 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    4e12:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    4e16:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    4e18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    4e1c:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    4e1e:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    4e22:	4303      	orrs	r3, r0
    4e24:	600b      	str	r3, [r1, #0]
	__enable_irq();
    4e26:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    4e28:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    4e2a:	4a07      	ldr	r2, [pc, #28]	; (4e48 <usb_free+0x4c>)
    4e2c:	7812      	ldrb	r2, [r2, #0]
    4e2e:	2a00      	cmp	r2, #0
    4e30:	d0ec      	beq.n	4e0c <usb_free+0x10>
		usb_rx_memory(p);
    4e32:	f7ff bb19 	b.w	4468 <usb_rx_memory>
    4e36:	bf00      	nop
    4e38:	1fff03d0 	.word	0x1fff03d0
    4e3c:	1fff6210 	.word	0x1fff6210
    4e40:	38e38e39 	.word	0x38e38e39
    4e44:	1fff0768 	.word	0x1fff0768
    4e48:	1fff6204 	.word	0x1fff6204

00004e4c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    4e4c:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    4e4e:	4c0f      	ldr	r4, [pc, #60]	; (4e8c <usb_serial_getchar+0x40>)
    4e50:	6820      	ldr	r0, [r4, #0]
    4e52:	b178      	cbz	r0, 4e74 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    4e54:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    4e56:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    4e58:	18c1      	adds	r1, r0, r3
    4e5a:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    4e5c:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    4e5e:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    4e60:	d902      	bls.n	4e68 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    4e62:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    4e64:	4628      	mov	r0, r5
    4e66:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    4e68:	f7ff ffc8 	bl	4dfc <usb_free>
		rx_packet = NULL;
    4e6c:	2300      	movs	r3, #0
    4e6e:	6023      	str	r3, [r4, #0]
}
    4e70:	4628      	mov	r0, r5
    4e72:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    4e74:	4b06      	ldr	r3, [pc, #24]	; (4e90 <usb_serial_getchar+0x44>)
    4e76:	781b      	ldrb	r3, [r3, #0]
    4e78:	b12b      	cbz	r3, 4e86 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    4e7a:	2003      	movs	r0, #3
    4e7c:	f7ff fabe 	bl	43fc <usb_rx>
    4e80:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    4e82:	2800      	cmp	r0, #0
    4e84:	d1e6      	bne.n	4e54 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    4e86:	f04f 35ff 	mov.w	r5, #4294967295
    4e8a:	e7eb      	b.n	4e64 <usb_serial_getchar+0x18>
    4e8c:	1fff6214 	.word	0x1fff6214
    4e90:	1fff6204 	.word	0x1fff6204

00004e94 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    4e94:	b510      	push	{r4, lr}
	if (!rx_packet) {
    4e96:	4c09      	ldr	r4, [pc, #36]	; (4ebc <usb_serial_peekchar+0x28>)
    4e98:	6820      	ldr	r0, [r4, #0]
    4e9a:	b118      	cbz	r0, 4ea4 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    4e9c:	8843      	ldrh	r3, [r0, #2]
    4e9e:	4418      	add	r0, r3
    4ea0:	7a00      	ldrb	r0, [r0, #8]
}
    4ea2:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    4ea4:	4b06      	ldr	r3, [pc, #24]	; (4ec0 <usb_serial_peekchar+0x2c>)
    4ea6:	781b      	ldrb	r3, [r3, #0]
    4ea8:	b12b      	cbz	r3, 4eb6 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    4eaa:	2003      	movs	r0, #3
    4eac:	f7ff faa6 	bl	43fc <usb_rx>
    4eb0:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    4eb2:	2800      	cmp	r0, #0
    4eb4:	d1f2      	bne.n	4e9c <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    4eb6:	f04f 30ff 	mov.w	r0, #4294967295
}
    4eba:	bd10      	pop	{r4, pc}
    4ebc:	1fff6214 	.word	0x1fff6214
    4ec0:	1fff6204 	.word	0x1fff6204

00004ec4 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    4ec4:	4b08      	ldr	r3, [pc, #32]	; (4ee8 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    4ec6:	4a09      	ldr	r2, [pc, #36]	; (4eec <usb_serial_available+0x28>)
    4ec8:	681b      	ldr	r3, [r3, #0]
{
    4eca:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    4ecc:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    4ece:	b11b      	cbz	r3, 4ed8 <usb_serial_available+0x14>
    4ed0:	881a      	ldrh	r2, [r3, #0]
    4ed2:	885b      	ldrh	r3, [r3, #2]
    4ed4:	1ad3      	subs	r3, r2, r3
    4ed6:	441c      	add	r4, r3
	if (count == 0) yield();
    4ed8:	b10c      	cbz	r4, 4ede <usb_serial_available+0x1a>
	return count;
}
    4eda:	4620      	mov	r0, r4
    4edc:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    4ede:	f000 f92b 	bl	5138 <yield>
}
    4ee2:	4620      	mov	r0, r4
    4ee4:	bd10      	pop	{r4, pc}
    4ee6:	bf00      	nop
    4ee8:	1fff6214 	.word	0x1fff6214
    4eec:	1fff6208 	.word	0x1fff6208

00004ef0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    4ef0:	4b0b      	ldr	r3, [pc, #44]	; (4f20 <usb_serial_flush_input+0x30>)
    4ef2:	781b      	ldrb	r3, [r3, #0]
    4ef4:	b19b      	cbz	r3, 4f1e <usb_serial_flush_input+0x2e>
{
    4ef6:	b510      	push	{r4, lr}
	if (rx_packet) {
    4ef8:	4c0a      	ldr	r4, [pc, #40]	; (4f24 <usb_serial_flush_input+0x34>)
    4efa:	6820      	ldr	r0, [r4, #0]
    4efc:	b148      	cbz	r0, 4f12 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    4efe:	f7ff ff7d 	bl	4dfc <usb_free>
		rx_packet = NULL;
    4f02:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    4f04:	2003      	movs	r0, #3
		rx_packet = NULL;
    4f06:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    4f08:	f7ff fa78 	bl	43fc <usb_rx>
		if (!rx) break;
    4f0c:	b130      	cbz	r0, 4f1c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    4f0e:	f7ff ff75 	bl	4dfc <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    4f12:	2003      	movs	r0, #3
    4f14:	f7ff fa72 	bl	43fc <usb_rx>
		if (!rx) break;
    4f18:	2800      	cmp	r0, #0
    4f1a:	d1f8      	bne.n	4f0e <usb_serial_flush_input+0x1e>
	}
}
    4f1c:	bd10      	pop	{r4, pc}
    4f1e:	4770      	bx	lr
    4f20:	1fff6204 	.word	0x1fff6204
    4f24:	1fff6214 	.word	0x1fff6214

00004f28 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    4f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    4f2c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 5028 <usb_serial_write+0x100>
{
    4f30:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    4f32:	2201      	movs	r2, #1
    4f34:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    4f38:	9101      	str	r1, [sp, #4]
    4f3a:	b379      	cbz	r1, 4f9c <usb_serial_write+0x74>
    4f3c:	4f37      	ldr	r7, [pc, #220]	; (501c <usb_serial_write+0xf4>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    4f3e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 502c <usb_serial_write+0x104>
	while (size > 0) {
    4f42:	9d01      	ldr	r5, [sp, #4]
    4f44:	4e36      	ldr	r6, [pc, #216]	; (5020 <usb_serial_write+0xf8>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    4f46:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 5030 <usb_serial_write+0x108>
    4f4a:	4683      	mov	fp, r0
		if (!tx_packet) {
    4f4c:	6838      	ldr	r0, [r7, #0]
    4f4e:	b3a8      	cbz	r0, 4fbc <usb_serial_write+0x94>
		len = CDC_TX_SIZE - tx_packet->index;
    4f50:	f8b0 e002 	ldrh.w	lr, [r0, #2]
    4f54:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    4f58:	45ac      	cmp	ip, r5
    4f5a:	bf28      	it	cs
    4f5c:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    4f5e:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    4f62:	2200      	movs	r2, #0
		tx_packet->index += len;
    4f64:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    4f66:	7032      	strb	r2, [r6, #0]
		size -= len;
    4f68:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    4f6c:	8044      	strh	r4, [r0, #2]
		dest = tx_packet->buf + tx_packet->index;
    4f6e:	f100 0208 	add.w	r2, r0, #8
		while (len-- > 0) *dest++ = *src++;
    4f72:	f1bc 0f00 	cmp.w	ip, #0
    4f76:	d00a      	beq.n	4f8e <usb_serial_write+0x66>
    4f78:	f10e 3eff 	add.w	lr, lr, #4294967295
    4f7c:	4472      	add	r2, lr
    4f7e:	44dc      	add	ip, fp
    4f80:	f81b 4b01 	ldrb.w	r4, [fp], #1
    4f84:	f802 4f01 	strb.w	r4, [r2, #1]!
    4f88:	45dc      	cmp	ip, fp
    4f8a:	d1f9      	bne.n	4f80 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    4f8c:	8844      	ldrh	r4, [r0, #2]
    4f8e:	2c3f      	cmp	r4, #63	; 0x3f
    4f90:	d80b      	bhi.n	4faa <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    4f92:	2205      	movs	r2, #5
    4f94:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    4f98:	2d00      	cmp	r5, #0
    4f9a:	d1d7      	bne.n	4f4c <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    4f9c:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    4f9e:	2300      	movs	r3, #0
    4fa0:	f889 3000 	strb.w	r3, [r9]
}
    4fa4:	b003      	add	sp, #12
    4fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    4faa:	2240      	movs	r2, #64	; 0x40
    4fac:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4fae:	4601      	mov	r1, r0
    4fb0:	2004      	movs	r0, #4
    4fb2:	f7ff fa9b 	bl	44ec <usb_tx>
			tx_packet = NULL;
    4fb6:	2200      	movs	r2, #0
    4fb8:	603a      	str	r2, [r7, #0]
    4fba:	e7ea      	b.n	4f92 <usb_serial_write+0x6a>
				if (!usb_configuration) {
    4fbc:	f898 2000 	ldrb.w	r2, [r8]
    4fc0:	b31a      	cbz	r2, 500a <usb_serial_write+0xe2>
    4fc2:	4c18      	ldr	r4, [pc, #96]	; (5024 <usb_serial_write+0xfc>)
    4fc4:	e008      	b.n	4fd8 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    4fc6:	3c01      	subs	r4, #1
    4fc8:	d018      	beq.n	4ffc <usb_serial_write+0xd4>
    4fca:	7832      	ldrb	r2, [r6, #0]
    4fcc:	b9b2      	cbnz	r2, 4ffc <usb_serial_write+0xd4>
				yield();
    4fce:	f000 f8b3 	bl	5138 <yield>
				if (!usb_configuration) {
    4fd2:	f898 2000 	ldrb.w	r2, [r8]
    4fd6:	b1c2      	cbz	r2, 500a <usb_serial_write+0xe2>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    4fd8:	2004      	movs	r0, #4
    4fda:	f7ff fa2f 	bl	443c <usb_tx_packet_count>
    4fde:	2807      	cmp	r0, #7
    4fe0:	d8f1      	bhi.n	4fc6 <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    4fe2:	f04f 0301 	mov.w	r3, #1
    4fe6:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    4fea:	f7ff fee7 	bl	4dbc <usb_malloc>
    4fee:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    4ff0:	2800      	cmp	r0, #0
    4ff2:	d1ad      	bne.n	4f50 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    4ff4:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    4ff6:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    4ffa:	d1e6      	bne.n	4fca <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    4ffc:	2301      	movs	r3, #1
					return -1;
    4ffe:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    5002:	7033      	strb	r3, [r6, #0]
}
    5004:	b003      	add	sp, #12
    5006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    500a:	2300      	movs	r3, #0
					return -1;
    500c:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    5010:	f889 3000 	strb.w	r3, [r9]
}
    5014:	b003      	add	sp, #12
    5016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    501a:	bf00      	nop
    501c:	1fff621c 	.word	0x1fff621c
    5020:	1fff6218 	.word	0x1fff6218
    5024:	00014821 	.word	0x00014821
    5028:	1fff6219 	.word	0x1fff6219
    502c:	1fff6204 	.word	0x1fff6204
    5030:	1fff6230 	.word	0x1fff6230

00005034 <usb_serial_putchar>:
{
    5034:	b500      	push	{lr}
    5036:	b083      	sub	sp, #12
    5038:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    503a:	2101      	movs	r1, #1
    503c:	f10d 0007 	add.w	r0, sp, #7
{
    5040:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    5044:	f7ff ff70 	bl	4f28 <usb_serial_write>
}
    5048:	b003      	add	sp, #12
    504a:	f85d fb04 	ldr.w	pc, [sp], #4
    504e:	bf00      	nop

00005050 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    5050:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    5052:	4d0e      	ldr	r5, [pc, #56]	; (508c <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    5054:	4c0e      	ldr	r4, [pc, #56]	; (5090 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    5056:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    5058:	2301      	movs	r3, #1
    505a:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    505c:	b128      	cbz	r0, 506a <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    505e:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    5060:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    5062:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    5066:	7023      	strb	r3, [r4, #0]
	return len;
}
    5068:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    506a:	4b0a      	ldr	r3, [pc, #40]	; (5094 <usb_serial_write_buffer_free+0x44>)
    506c:	781b      	ldrb	r3, [r3, #0]
    506e:	b913      	cbnz	r3, 5076 <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    5070:	2000      	movs	r0, #0
    5072:	7020      	strb	r0, [r4, #0]
}
    5074:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5076:	2004      	movs	r0, #4
    5078:	f7ff f9e0 	bl	443c <usb_tx_packet_count>
		if (!usb_configuration ||
    507c:	2807      	cmp	r0, #7
    507e:	d8f7      	bhi.n	5070 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    5080:	f7ff fe9c 	bl	4dbc <usb_malloc>
    5084:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5086:	2800      	cmp	r0, #0
    5088:	d1e9      	bne.n	505e <usb_serial_write_buffer_free+0xe>
    508a:	e7f1      	b.n	5070 <usb_serial_write_buffer_free+0x20>
    508c:	1fff621c 	.word	0x1fff621c
    5090:	1fff6219 	.word	0x1fff6219
    5094:	1fff6204 	.word	0x1fff6204

00005098 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    5098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    509a:	4b11      	ldr	r3, [pc, #68]	; (50e0 <usb_serial_flush_output+0x48>)
    509c:	781b      	ldrb	r3, [r3, #0]
    509e:	b18b      	cbz	r3, 50c4 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    50a0:	4e10      	ldr	r6, [pc, #64]	; (50e4 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    50a2:	4d11      	ldr	r5, [pc, #68]	; (50e8 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    50a4:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    50a6:	2701      	movs	r7, #1
    50a8:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    50aa:	b164      	cbz	r4, 50c6 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    50ac:	4b0f      	ldr	r3, [pc, #60]	; (50ec <usb_serial_flush_output+0x54>)
    50ae:	2700      	movs	r7, #0
    50b0:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    50b2:	8863      	ldrh	r3, [r4, #2]
    50b4:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    50b6:	4621      	mov	r1, r4
    50b8:	2004      	movs	r0, #4
    50ba:	f7ff fa17 	bl	44ec <usb_tx>
		tx_packet = NULL;
    50be:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    50c0:	2300      	movs	r3, #0
    50c2:	702b      	strb	r3, [r5, #0]
}
    50c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    50c6:	f7ff fe79 	bl	4dbc <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    50ca:	4b08      	ldr	r3, [pc, #32]	; (50ec <usb_serial_flush_output+0x54>)
		if (tx) {
    50cc:	4601      	mov	r1, r0
    50ce:	b120      	cbz	r0, 50da <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    50d0:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    50d2:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    50d4:	f7ff fa0a 	bl	44ec <usb_tx>
    50d8:	e7f2      	b.n	50c0 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    50da:	701f      	strb	r7, [r3, #0]
    50dc:	e7f0      	b.n	50c0 <usb_serial_flush_output+0x28>
    50de:	bf00      	nop
    50e0:	1fff6204 	.word	0x1fff6204
    50e4:	1fff621c 	.word	0x1fff621c
    50e8:	1fff6219 	.word	0x1fff6219
    50ec:	1fff6230 	.word	0x1fff6230

000050f0 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    50f0:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    50f2:	4b0e      	ldr	r3, [pc, #56]	; (512c <usb_serial_flush_callback+0x3c>)
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	b953      	cbnz	r3, 510e <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    50f8:	4c0d      	ldr	r4, [pc, #52]	; (5130 <usb_serial_flush_callback+0x40>)
    50fa:	6821      	ldr	r1, [r4, #0]
    50fc:	b141      	cbz	r1, 5110 <usb_serial_flush_callback+0x20>
    50fe:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    5102:	884b      	ldrh	r3, [r1, #2]
    5104:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5106:	2004      	movs	r0, #4
    5108:	f7ff f9f0 	bl	44ec <usb_tx>
		tx_packet = NULL;
    510c:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    510e:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    5110:	f7ff fe54 	bl	4dbc <usb_malloc>
		if (tx) {
    5114:	4601      	mov	r1, r0
    5116:	b120      	cbz	r0, 5122 <usb_serial_flush_callback+0x32>
}
    5118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    511c:	2004      	movs	r0, #4
    511e:	f7ff b9e5 	b.w	44ec <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    5122:	4b04      	ldr	r3, [pc, #16]	; (5134 <usb_serial_flush_callback+0x44>)
    5124:	2201      	movs	r2, #1
    5126:	701a      	strb	r2, [r3, #0]
}
    5128:	bd38      	pop	{r3, r4, r5, pc}
    512a:	bf00      	nop
    512c:	1fff6219 	.word	0x1fff6219
    5130:	1fff621c 	.word	0x1fff621c
    5134:	1fff6230 	.word	0x1fff6230

00005138 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    513c:	4e32      	ldr	r6, [pc, #200]	; (5208 <yield+0xd0>)
    513e:	7833      	ldrb	r3, [r6, #0]
    5140:	b163      	cbz	r3, 515c <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    5142:	4f32      	ldr	r7, [pc, #200]	; (520c <yield+0xd4>)
    5144:	783a      	ldrb	r2, [r7, #0]
    5146:	b94a      	cbnz	r2, 515c <yield+0x24>
	running = 1;
    5148:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    514a:	07d9      	lsls	r1, r3, #31
	running = 1;
    514c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    514e:	d443      	bmi.n	51d8 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    5150:	079a      	lsls	r2, r3, #30
    5152:	d426      	bmi.n	51a2 <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    5154:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5156:	075b      	lsls	r3, r3, #29
	running = 0;
    5158:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    515a:	d401      	bmi.n	5160 <yield+0x28>
	
};
    515c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    5160:	4b2b      	ldr	r3, [pc, #172]	; (5210 <yield+0xd8>)
    5162:	681a      	ldr	r2, [r3, #0]
    5164:	2a00      	cmp	r2, #0
    5166:	d0f9      	beq.n	515c <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5168:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    516c:	2a00      	cmp	r2, #0
    516e:	d1f5      	bne.n	515c <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5170:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    5174:	b672      	cpsid	i
		EventResponder *first = firstYield;
    5176:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    5178:	2800      	cmp	r0, #0
    517a:	d03a      	beq.n	51f2 <yield+0xba>
		if (runningFromYield) {
    517c:	4c25      	ldr	r4, [pc, #148]	; (5214 <yield+0xdc>)
    517e:	7821      	ldrb	r1, [r4, #0]
    5180:	2900      	cmp	r1, #0
    5182:	d136      	bne.n	51f2 <yield+0xba>
		firstYield = first->_next;
    5184:	6942      	ldr	r2, [r0, #20]
    5186:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    5188:	2301      	movs	r3, #1
    518a:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    518c:	2a00      	cmp	r2, #0
    518e:	d037      	beq.n	5200 <yield+0xc8>
			firstYield->_prev = nullptr;
    5190:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5192:	b905      	cbnz	r5, 5196 <yield+0x5e>
    5194:	b662      	cpsie	i
		first->_triggered = false;
    5196:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    5198:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    519a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    519c:	4798      	blx	r3
		runningFromYield = false;
    519e:	7025      	strb	r5, [r4, #0]
    51a0:	e7dc      	b.n	515c <yield+0x24>
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    51a2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5220 <yield+0xe8>
    51a6:	f898 2000 	ldrb.w	r2, [r8]
    51aa:	2a00      	cmp	r2, #0
    51ac:	d0d2      	beq.n	5154 <yield+0x1c>
    51ae:	2500      	movs	r5, #0
    51b0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5224 <yield+0xec>
    51b4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    51b6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    51ba:	6823      	ldr	r3, [r4, #0]
    51bc:	4620      	mov	r0, r4
    51be:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    51c0:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    51c2:	4798      	blx	r3
    51c4:	b108      	cbz	r0, 51ca <yield+0x92>
    51c6:	6923      	ldr	r3, [r4, #16]
    51c8:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    51ca:	f898 2000 	ldrb.w	r2, [r8]
    51ce:	b2eb      	uxtb	r3, r5
    51d0:	429a      	cmp	r2, r3
    51d2:	d8f0      	bhi.n	51b6 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    51d4:	7833      	ldrb	r3, [r6, #0]
    51d6:	e7bd      	b.n	5154 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    51d8:	f7ff fe74 	bl	4ec4 <usb_serial_available>
		if (Serial.available()) serialEvent();
    51dc:	b968      	cbnz	r0, 51fa <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    51de:	4b0e      	ldr	r3, [pc, #56]	; (5218 <yield+0xe0>)
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	b90b      	cbnz	r3, 51e8 <yield+0xb0>
    51e4:	7833      	ldrb	r3, [r6, #0]
    51e6:	e7b3      	b.n	5150 <yield+0x18>
    51e8:	7833      	ldrb	r3, [r6, #0]
    51ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    51ee:	7033      	strb	r3, [r6, #0]
    51f0:	e7ae      	b.n	5150 <yield+0x18>
		if (doit) __enable_irq();
    51f2:	2d00      	cmp	r5, #0
    51f4:	d1b2      	bne.n	515c <yield+0x24>
    51f6:	b662      	cpsie	i
    51f8:	e7b0      	b.n	515c <yield+0x24>
		if (Serial.available()) serialEvent();
    51fa:	f000 f8a5 	bl	5348 <serialEvent()>
    51fe:	e7ee      	b.n	51de <yield+0xa6>
			lastYield = nullptr;
    5200:	4b06      	ldr	r3, [pc, #24]	; (521c <yield+0xe4>)
    5202:	601a      	str	r2, [r3, #0]
    5204:	e7c5      	b.n	5192 <yield+0x5a>
    5206:	bf00      	nop
    5208:	1fff076c 	.word	0x1fff076c
    520c:	1fff6231 	.word	0x1fff6231
    5210:	1fff6234 	.word	0x1fff6234
    5214:	1fff6240 	.word	0x1fff6240
    5218:	0000c7e0 	.word	0x0000c7e0
    521c:	1fff6244 	.word	0x1fff6244
    5220:	1fff6260 	.word	0x1fff6260
    5224:	1fff6248 	.word	0x1fff6248

00005228 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    5228:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    522a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    522e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5230:	4c0c      	ldr	r4, [pc, #48]	; (5264 <EventResponder::runFromInterrupt()+0x3c>)
    5232:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5234:	b180      	cbz	r0, 5258 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5236:	4e0c      	ldr	r6, [pc, #48]	; (5268 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    5238:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    523a:	6943      	ldr	r3, [r0, #20]
    523c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    523e:	b173      	cbz	r3, 525e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    5240:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    5242:	b902      	cbnz	r2, 5246 <EventResponder::runFromInterrupt()+0x1e>
    5244:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    5246:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    5248:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    524a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    524c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5250:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    5252:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5254:	2800      	cmp	r0, #0
    5256:	d1f0      	bne.n	523a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    5258:	b902      	cbnz	r2, 525c <EventResponder::runFromInterrupt()+0x34>
    525a:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    525c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    525e:	6033      	str	r3, [r6, #0]
    5260:	e7ef      	b.n	5242 <EventResponder::runFromInterrupt()+0x1a>
    5262:	bf00      	nop
    5264:	1fff623c 	.word	0x1fff623c
    5268:	1fff6238 	.word	0x1fff6238

0000526c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    526c:	f7ff bfdc 	b.w	5228 <EventResponder::runFromInterrupt()>

00005270 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    5270:	4a02      	ldr	r2, [pc, #8]	; (527c <systick_isr+0xc>)
    5272:	6813      	ldr	r3, [r2, #0]
    5274:	3301      	adds	r3, #1
    5276:	6013      	str	r3, [r2, #0]
}
    5278:	4770      	bx	lr
    527a:	bf00      	nop
    527c:	1fff6124 	.word	0x1fff6124

00005280 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5280:	4b2a      	ldr	r3, [pc, #168]	; (532c <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    5282:	4a2b      	ldr	r2, [pc, #172]	; (5330 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    5284:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5286:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    5288:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    528a:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    528c:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    528e:	4829      	ldr	r0, [pc, #164]	; (5334 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    5290:	2b08      	cmp	r3, #8
    5292:	d034      	beq.n	52fe <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    5294:	2b0a      	cmp	r3, #10
    5296:	d020      	beq.n	52da <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    5298:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    529a:	4b27      	ldr	r3, [pc, #156]	; (5338 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    529c:	bf0c      	ite	eq
    529e:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    52a0:	215d      	movne	r1, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    52a2:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    52a4:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    52a6:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    52a8:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    52aa:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    52ac:	4b23      	ldr	r3, [pc, #140]	; (533c <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    52ae:	4921      	ldr	r1, [pc, #132]	; (5334 <analog_init+0xb4>)
	if (analog_reference_internal) {
    52b0:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    52b2:	4a21      	ldr	r2, [pc, #132]	; (5338 <analog_init+0xb8>)
	if (analog_reference_internal) {
    52b4:	b1cb      	cbz	r3, 52ea <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    52b6:	2301      	movs	r3, #1
    52b8:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    52ba:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    52bc:	4b20      	ldr	r3, [pc, #128]	; (5340 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    52be:	491d      	ldr	r1, [pc, #116]	; (5334 <analog_init+0xb4>)
	num = analog_num_average;
    52c0:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    52c2:	4a1d      	ldr	r2, [pc, #116]	; (5338 <analog_init+0xb8>)
	if (num <= 1) {
    52c4:	2b01      	cmp	r3, #1
    52c6:	d913      	bls.n	52f0 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    52c8:	2b04      	cmp	r3, #4
    52ca:	d81b      	bhi.n	5304 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    52cc:	2384      	movs	r3, #132	; 0x84
    52ce:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    52d0:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    52d2:	4b1c      	ldr	r3, [pc, #112]	; (5344 <analog_init+0xc4>)
    52d4:	2201      	movs	r2, #1
    52d6:	701a      	strb	r2, [r3, #0]
}
    52d8:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    52da:	4b17      	ldr	r3, [pc, #92]	; (5338 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    52dc:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    52de:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    52e0:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    52e2:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    52e4:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    52e6:	60da      	str	r2, [r3, #12]
    52e8:	e7e0      	b.n	52ac <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    52ea:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    52ec:	6213      	str	r3, [r2, #32]
    52ee:	e7e5      	b.n	52bc <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    52f0:	2380      	movs	r3, #128	; 0x80
    52f2:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    52f4:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    52f6:	4b13      	ldr	r3, [pc, #76]	; (5344 <analog_init+0xc4>)
    52f8:	2201      	movs	r2, #1
    52fa:	701a      	strb	r2, [r3, #0]
}
    52fc:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    52fe:	4b0e      	ldr	r3, [pc, #56]	; (5338 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5300:	2121      	movs	r1, #33	; 0x21
    5302:	e7ec      	b.n	52de <analog_init+0x5e>
	} else if (num <= 8) {
    5304:	2b08      	cmp	r3, #8
    5306:	d806      	bhi.n	5316 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5308:	2385      	movs	r3, #133	; 0x85
    530a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    530c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    530e:	4b0d      	ldr	r3, [pc, #52]	; (5344 <analog_init+0xc4>)
    5310:	2201      	movs	r2, #1
    5312:	701a      	strb	r2, [r3, #0]
}
    5314:	4770      	bx	lr
	} else if (num <= 16) {
    5316:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    5318:	bf94      	ite	ls
    531a:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    531c:	2387      	movhi	r3, #135	; 0x87
    531e:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    5320:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    5322:	4b08      	ldr	r3, [pc, #32]	; (5344 <analog_init+0xc4>)
    5324:	2201      	movs	r2, #1
    5326:	701a      	strb	r2, [r3, #0]
}
    5328:	4770      	bx	lr
    532a:	bf00      	nop
    532c:	40074000 	.word	0x40074000
    5330:	1fff076d 	.word	0x1fff076d
    5334:	4003b000 	.word	0x4003b000
    5338:	400bb000 	.word	0x400bb000
    533c:	1fff6261 	.word	0x1fff6261
    5340:	1fff076e 	.word	0x1fff076e
    5344:	1fff6262 	.word	0x1fff6262

00005348 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    5348:	4770      	bx	lr
    534a:	bf00      	nop

0000534c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    534c:	b510      	push	{r4, lr}
    534e:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    5350:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    5352:	f7fe fefd 	bl	4150 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    5356:	4a17      	ldr	r2, [pc, #92]	; (53b4 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    5358:	4917      	ldr	r1, [pc, #92]	; (53b8 <usb_init_serialnumber+0x6c>)
    535a:	6051      	str	r1, [r2, #4]
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    535c:	2070      	movs	r0, #112	; 0x70
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    535e:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    5360:	7010      	strb	r0, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    5362:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    5364:	7813      	ldrb	r3, [r2, #0]
    5366:	061b      	lsls	r3, r3, #24
    5368:	d5fc      	bpl.n	5364 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOBB;
    536a:	68d4      	ldr	r4, [r2, #12]
	kinetis_hsrun_enable();
    536c:	f7fe ff06 	bl	417c <kinetis_hsrun_enable>
#endif
	__enable_irq();
    5370:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    5372:	4b12      	ldr	r3, [pc, #72]	; (53bc <usb_init_serialnumber+0x70>)
    5374:	429c      	cmp	r4, r3
    5376:	bf3c      	itt	cc
    5378:	eb04 0484 	addcc.w	r4, r4, r4, lsl #2
    537c:	0064      	lslcc	r4, r4, #1
	ultoa(num, buf, 10);
    537e:	4620      	mov	r0, r4
    5380:	4c0f      	ldr	r4, [pc, #60]	; (53c0 <usb_init_serialnumber+0x74>)
    5382:	a901      	add	r1, sp, #4
    5384:	220a      	movs	r2, #10
    5386:	f7fe ff0f 	bl	41a8 <ultoa>
	for (i=0; i<10; i++) {
    538a:	a901      	add	r1, sp, #4
    538c:	4620      	mov	r0, r4
    538e:	2300      	movs	r3, #0
		char c = buf[i];
    5390:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    5394:	3301      	adds	r3, #1
		if (!c) break;
    5396:	b13a      	cbz	r2, 53a8 <usb_init_serialnumber+0x5c>
	for (i=0; i<10; i++) {
    5398:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    539a:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    539e:	d1f7      	bne.n	5390 <usb_init_serialnumber+0x44>
    53a0:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    53a2:	7023      	strb	r3, [r4, #0]
}
    53a4:	b004      	add	sp, #16
    53a6:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    53a8:	005b      	lsls	r3, r3, #1
    53aa:	b2db      	uxtb	r3, r3
    53ac:	7023      	strb	r3, [r4, #0]
}
    53ae:	b004      	add	sp, #16
    53b0:	bd10      	pop	{r4, pc}
    53b2:	bf00      	nop
    53b4:	40020000 	.word	0x40020000
    53b8:	41070000 	.word	0x41070000
    53bc:	00989680 	.word	0x00989680
    53c0:	1fff07fc 	.word	0x1fff07fc

000053c4 <__aeabi_drsub>:
    53c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    53c8:	e002      	b.n	53d0 <__adddf3>
    53ca:	bf00      	nop

000053cc <__aeabi_dsub>:
    53cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000053d0 <__adddf3>:
    53d0:	b530      	push	{r4, r5, lr}
    53d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    53d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    53da:	ea94 0f05 	teq	r4, r5
    53de:	bf08      	it	eq
    53e0:	ea90 0f02 	teqeq	r0, r2
    53e4:	bf1f      	itttt	ne
    53e6:	ea54 0c00 	orrsne.w	ip, r4, r0
    53ea:	ea55 0c02 	orrsne.w	ip, r5, r2
    53ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    53f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    53f6:	f000 80e2 	beq.w	55be <__adddf3+0x1ee>
    53fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
    53fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    5402:	bfb8      	it	lt
    5404:	426d      	neglt	r5, r5
    5406:	dd0c      	ble.n	5422 <__adddf3+0x52>
    5408:	442c      	add	r4, r5
    540a:	ea80 0202 	eor.w	r2, r0, r2
    540e:	ea81 0303 	eor.w	r3, r1, r3
    5412:	ea82 0000 	eor.w	r0, r2, r0
    5416:	ea83 0101 	eor.w	r1, r3, r1
    541a:	ea80 0202 	eor.w	r2, r0, r2
    541e:	ea81 0303 	eor.w	r3, r1, r3
    5422:	2d36      	cmp	r5, #54	; 0x36
    5424:	bf88      	it	hi
    5426:	bd30      	pophi	{r4, r5, pc}
    5428:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    542c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5430:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    5434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    5438:	d002      	beq.n	5440 <__adddf3+0x70>
    543a:	4240      	negs	r0, r0
    543c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5440:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    5444:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    544c:	d002      	beq.n	5454 <__adddf3+0x84>
    544e:	4252      	negs	r2, r2
    5450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5454:	ea94 0f05 	teq	r4, r5
    5458:	f000 80a7 	beq.w	55aa <__adddf3+0x1da>
    545c:	f1a4 0401 	sub.w	r4, r4, #1
    5460:	f1d5 0e20 	rsbs	lr, r5, #32
    5464:	db0d      	blt.n	5482 <__adddf3+0xb2>
    5466:	fa02 fc0e 	lsl.w	ip, r2, lr
    546a:	fa22 f205 	lsr.w	r2, r2, r5
    546e:	1880      	adds	r0, r0, r2
    5470:	f141 0100 	adc.w	r1, r1, #0
    5474:	fa03 f20e 	lsl.w	r2, r3, lr
    5478:	1880      	adds	r0, r0, r2
    547a:	fa43 f305 	asr.w	r3, r3, r5
    547e:	4159      	adcs	r1, r3
    5480:	e00e      	b.n	54a0 <__adddf3+0xd0>
    5482:	f1a5 0520 	sub.w	r5, r5, #32
    5486:	f10e 0e20 	add.w	lr, lr, #32
    548a:	2a01      	cmp	r2, #1
    548c:	fa03 fc0e 	lsl.w	ip, r3, lr
    5490:	bf28      	it	cs
    5492:	f04c 0c02 	orrcs.w	ip, ip, #2
    5496:	fa43 f305 	asr.w	r3, r3, r5
    549a:	18c0      	adds	r0, r0, r3
    549c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    54a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    54a4:	d507      	bpl.n	54b6 <__adddf3+0xe6>
    54a6:	f04f 0e00 	mov.w	lr, #0
    54aa:	f1dc 0c00 	rsbs	ip, ip, #0
    54ae:	eb7e 0000 	sbcs.w	r0, lr, r0
    54b2:	eb6e 0101 	sbc.w	r1, lr, r1
    54b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    54ba:	d31b      	bcc.n	54f4 <__adddf3+0x124>
    54bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    54c0:	d30c      	bcc.n	54dc <__adddf3+0x10c>
    54c2:	0849      	lsrs	r1, r1, #1
    54c4:	ea5f 0030 	movs.w	r0, r0, rrx
    54c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    54cc:	f104 0401 	add.w	r4, r4, #1
    54d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    54d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    54d8:	f080 809a 	bcs.w	5610 <__adddf3+0x240>
    54dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    54e0:	bf08      	it	eq
    54e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    54e6:	f150 0000 	adcs.w	r0, r0, #0
    54ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    54ee:	ea41 0105 	orr.w	r1, r1, r5
    54f2:	bd30      	pop	{r4, r5, pc}
    54f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    54f8:	4140      	adcs	r0, r0
    54fa:	eb41 0101 	adc.w	r1, r1, r1
    54fe:	3c01      	subs	r4, #1
    5500:	bf28      	it	cs
    5502:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    5506:	d2e9      	bcs.n	54dc <__adddf3+0x10c>
    5508:	f091 0f00 	teq	r1, #0
    550c:	bf04      	itt	eq
    550e:	4601      	moveq	r1, r0
    5510:	2000      	moveq	r0, #0
    5512:	fab1 f381 	clz	r3, r1
    5516:	bf08      	it	eq
    5518:	3320      	addeq	r3, #32
    551a:	f1a3 030b 	sub.w	r3, r3, #11
    551e:	f1b3 0220 	subs.w	r2, r3, #32
    5522:	da0c      	bge.n	553e <__adddf3+0x16e>
    5524:	320c      	adds	r2, #12
    5526:	dd08      	ble.n	553a <__adddf3+0x16a>
    5528:	f102 0c14 	add.w	ip, r2, #20
    552c:	f1c2 020c 	rsb	r2, r2, #12
    5530:	fa01 f00c 	lsl.w	r0, r1, ip
    5534:	fa21 f102 	lsr.w	r1, r1, r2
    5538:	e00c      	b.n	5554 <__adddf3+0x184>
    553a:	f102 0214 	add.w	r2, r2, #20
    553e:	bfd8      	it	le
    5540:	f1c2 0c20 	rsble	ip, r2, #32
    5544:	fa01 f102 	lsl.w	r1, r1, r2
    5548:	fa20 fc0c 	lsr.w	ip, r0, ip
    554c:	bfdc      	itt	le
    554e:	ea41 010c 	orrle.w	r1, r1, ip
    5552:	4090      	lslle	r0, r2
    5554:	1ae4      	subs	r4, r4, r3
    5556:	bfa2      	ittt	ge
    5558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    555c:	4329      	orrge	r1, r5
    555e:	bd30      	popge	{r4, r5, pc}
    5560:	ea6f 0404 	mvn.w	r4, r4
    5564:	3c1f      	subs	r4, #31
    5566:	da1c      	bge.n	55a2 <__adddf3+0x1d2>
    5568:	340c      	adds	r4, #12
    556a:	dc0e      	bgt.n	558a <__adddf3+0x1ba>
    556c:	f104 0414 	add.w	r4, r4, #20
    5570:	f1c4 0220 	rsb	r2, r4, #32
    5574:	fa20 f004 	lsr.w	r0, r0, r4
    5578:	fa01 f302 	lsl.w	r3, r1, r2
    557c:	ea40 0003 	orr.w	r0, r0, r3
    5580:	fa21 f304 	lsr.w	r3, r1, r4
    5584:	ea45 0103 	orr.w	r1, r5, r3
    5588:	bd30      	pop	{r4, r5, pc}
    558a:	f1c4 040c 	rsb	r4, r4, #12
    558e:	f1c4 0220 	rsb	r2, r4, #32
    5592:	fa20 f002 	lsr.w	r0, r0, r2
    5596:	fa01 f304 	lsl.w	r3, r1, r4
    559a:	ea40 0003 	orr.w	r0, r0, r3
    559e:	4629      	mov	r1, r5
    55a0:	bd30      	pop	{r4, r5, pc}
    55a2:	fa21 f004 	lsr.w	r0, r1, r4
    55a6:	4629      	mov	r1, r5
    55a8:	bd30      	pop	{r4, r5, pc}
    55aa:	f094 0f00 	teq	r4, #0
    55ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    55b2:	bf06      	itte	eq
    55b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    55b8:	3401      	addeq	r4, #1
    55ba:	3d01      	subne	r5, #1
    55bc:	e74e      	b.n	545c <__adddf3+0x8c>
    55be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    55c2:	bf18      	it	ne
    55c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    55c8:	d029      	beq.n	561e <__adddf3+0x24e>
    55ca:	ea94 0f05 	teq	r4, r5
    55ce:	bf08      	it	eq
    55d0:	ea90 0f02 	teqeq	r0, r2
    55d4:	d005      	beq.n	55e2 <__adddf3+0x212>
    55d6:	ea54 0c00 	orrs.w	ip, r4, r0
    55da:	bf04      	itt	eq
    55dc:	4619      	moveq	r1, r3
    55de:	4610      	moveq	r0, r2
    55e0:	bd30      	pop	{r4, r5, pc}
    55e2:	ea91 0f03 	teq	r1, r3
    55e6:	bf1e      	ittt	ne
    55e8:	2100      	movne	r1, #0
    55ea:	2000      	movne	r0, #0
    55ec:	bd30      	popne	{r4, r5, pc}
    55ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    55f2:	d105      	bne.n	5600 <__adddf3+0x230>
    55f4:	0040      	lsls	r0, r0, #1
    55f6:	4149      	adcs	r1, r1
    55f8:	bf28      	it	cs
    55fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    55fe:	bd30      	pop	{r4, r5, pc}
    5600:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    5604:	bf3c      	itt	cc
    5606:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    560a:	bd30      	popcc	{r4, r5, pc}
    560c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5610:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    5614:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5618:	f04f 0000 	mov.w	r0, #0
    561c:	bd30      	pop	{r4, r5, pc}
    561e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    5622:	bf1a      	itte	ne
    5624:	4619      	movne	r1, r3
    5626:	4610      	movne	r0, r2
    5628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    562c:	bf1c      	itt	ne
    562e:	460b      	movne	r3, r1
    5630:	4602      	movne	r2, r0
    5632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    5636:	bf06      	itte	eq
    5638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    563c:	ea91 0f03 	teqeq	r1, r3
    5640:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    5644:	bd30      	pop	{r4, r5, pc}
    5646:	bf00      	nop

00005648 <__aeabi_ui2d>:
    5648:	f090 0f00 	teq	r0, #0
    564c:	bf04      	itt	eq
    564e:	2100      	moveq	r1, #0
    5650:	4770      	bxeq	lr
    5652:	b530      	push	{r4, r5, lr}
    5654:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5658:	f104 0432 	add.w	r4, r4, #50	; 0x32
    565c:	f04f 0500 	mov.w	r5, #0
    5660:	f04f 0100 	mov.w	r1, #0
    5664:	e750      	b.n	5508 <__adddf3+0x138>
    5666:	bf00      	nop

00005668 <__aeabi_i2d>:
    5668:	f090 0f00 	teq	r0, #0
    566c:	bf04      	itt	eq
    566e:	2100      	moveq	r1, #0
    5670:	4770      	bxeq	lr
    5672:	b530      	push	{r4, r5, lr}
    5674:	f44f 6480 	mov.w	r4, #1024	; 0x400
    5678:	f104 0432 	add.w	r4, r4, #50	; 0x32
    567c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    5680:	bf48      	it	mi
    5682:	4240      	negmi	r0, r0
    5684:	f04f 0100 	mov.w	r1, #0
    5688:	e73e      	b.n	5508 <__adddf3+0x138>
    568a:	bf00      	nop

0000568c <__aeabi_f2d>:
    568c:	0042      	lsls	r2, r0, #1
    568e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    5692:	ea4f 0131 	mov.w	r1, r1, rrx
    5696:	ea4f 7002 	mov.w	r0, r2, lsl #28
    569a:	bf1f      	itttt	ne
    569c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    56a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    56a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    56a8:	4770      	bxne	lr
    56aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    56ae:	bf08      	it	eq
    56b0:	4770      	bxeq	lr
    56b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    56b6:	bf04      	itt	eq
    56b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    56bc:	4770      	bxeq	lr
    56be:	b530      	push	{r4, r5, lr}
    56c0:	f44f 7460 	mov.w	r4, #896	; 0x380
    56c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    56c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    56cc:	e71c      	b.n	5508 <__adddf3+0x138>
    56ce:	bf00      	nop

000056d0 <__aeabi_ul2d>:
    56d0:	ea50 0201 	orrs.w	r2, r0, r1
    56d4:	bf08      	it	eq
    56d6:	4770      	bxeq	lr
    56d8:	b530      	push	{r4, r5, lr}
    56da:	f04f 0500 	mov.w	r5, #0
    56de:	e00a      	b.n	56f6 <__aeabi_l2d+0x16>

000056e0 <__aeabi_l2d>:
    56e0:	ea50 0201 	orrs.w	r2, r0, r1
    56e4:	bf08      	it	eq
    56e6:	4770      	bxeq	lr
    56e8:	b530      	push	{r4, r5, lr}
    56ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    56ee:	d502      	bpl.n	56f6 <__aeabi_l2d+0x16>
    56f0:	4240      	negs	r0, r0
    56f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    56f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    56fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
    56fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    5702:	f43f aed8 	beq.w	54b6 <__adddf3+0xe6>
    5706:	f04f 0203 	mov.w	r2, #3
    570a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    570e:	bf18      	it	ne
    5710:	3203      	addne	r2, #3
    5712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    5716:	bf18      	it	ne
    5718:	3203      	addne	r2, #3
    571a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    571e:	f1c2 0320 	rsb	r3, r2, #32
    5722:	fa00 fc03 	lsl.w	ip, r0, r3
    5726:	fa20 f002 	lsr.w	r0, r0, r2
    572a:	fa01 fe03 	lsl.w	lr, r1, r3
    572e:	ea40 000e 	orr.w	r0, r0, lr
    5732:	fa21 f102 	lsr.w	r1, r1, r2
    5736:	4414      	add	r4, r2
    5738:	e6bd      	b.n	54b6 <__adddf3+0xe6>
    573a:	bf00      	nop

0000573c <__gedf2>:
    573c:	f04f 3cff 	mov.w	ip, #4294967295
    5740:	e006      	b.n	5750 <__cmpdf2+0x4>
    5742:	bf00      	nop

00005744 <__ledf2>:
    5744:	f04f 0c01 	mov.w	ip, #1
    5748:	e002      	b.n	5750 <__cmpdf2+0x4>
    574a:	bf00      	nop

0000574c <__cmpdf2>:
    574c:	f04f 0c01 	mov.w	ip, #1
    5750:	f84d cd04 	str.w	ip, [sp, #-4]!
    5754:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5758:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    575c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5760:	bf18      	it	ne
    5762:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    5766:	d01b      	beq.n	57a0 <__cmpdf2+0x54>
    5768:	b001      	add	sp, #4
    576a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    576e:	bf0c      	ite	eq
    5770:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    5774:	ea91 0f03 	teqne	r1, r3
    5778:	bf02      	ittt	eq
    577a:	ea90 0f02 	teqeq	r0, r2
    577e:	2000      	moveq	r0, #0
    5780:	4770      	bxeq	lr
    5782:	f110 0f00 	cmn.w	r0, #0
    5786:	ea91 0f03 	teq	r1, r3
    578a:	bf58      	it	pl
    578c:	4299      	cmppl	r1, r3
    578e:	bf08      	it	eq
    5790:	4290      	cmpeq	r0, r2
    5792:	bf2c      	ite	cs
    5794:	17d8      	asrcs	r0, r3, #31
    5796:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    579a:	f040 0001 	orr.w	r0, r0, #1
    579e:	4770      	bx	lr
    57a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    57a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    57a8:	d102      	bne.n	57b0 <__cmpdf2+0x64>
    57aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    57ae:	d107      	bne.n	57c0 <__cmpdf2+0x74>
    57b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    57b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    57b8:	d1d6      	bne.n	5768 <__cmpdf2+0x1c>
    57ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    57be:	d0d3      	beq.n	5768 <__cmpdf2+0x1c>
    57c0:	f85d 0b04 	ldr.w	r0, [sp], #4
    57c4:	4770      	bx	lr
    57c6:	bf00      	nop

000057c8 <__aeabi_cdrcmple>:
    57c8:	4684      	mov	ip, r0
    57ca:	4610      	mov	r0, r2
    57cc:	4662      	mov	r2, ip
    57ce:	468c      	mov	ip, r1
    57d0:	4619      	mov	r1, r3
    57d2:	4663      	mov	r3, ip
    57d4:	e000      	b.n	57d8 <__aeabi_cdcmpeq>
    57d6:	bf00      	nop

000057d8 <__aeabi_cdcmpeq>:
    57d8:	b501      	push	{r0, lr}
    57da:	f7ff ffb7 	bl	574c <__cmpdf2>
    57de:	2800      	cmp	r0, #0
    57e0:	bf48      	it	mi
    57e2:	f110 0f00 	cmnmi.w	r0, #0
    57e6:	bd01      	pop	{r0, pc}

000057e8 <__aeabi_dcmpeq>:
    57e8:	f84d ed08 	str.w	lr, [sp, #-8]!
    57ec:	f7ff fff4 	bl	57d8 <__aeabi_cdcmpeq>
    57f0:	bf0c      	ite	eq
    57f2:	2001      	moveq	r0, #1
    57f4:	2000      	movne	r0, #0
    57f6:	f85d fb08 	ldr.w	pc, [sp], #8
    57fa:	bf00      	nop

000057fc <__aeabi_dcmplt>:
    57fc:	f84d ed08 	str.w	lr, [sp, #-8]!
    5800:	f7ff ffea 	bl	57d8 <__aeabi_cdcmpeq>
    5804:	bf34      	ite	cc
    5806:	2001      	movcc	r0, #1
    5808:	2000      	movcs	r0, #0
    580a:	f85d fb08 	ldr.w	pc, [sp], #8
    580e:	bf00      	nop

00005810 <__aeabi_dcmple>:
    5810:	f84d ed08 	str.w	lr, [sp, #-8]!
    5814:	f7ff ffe0 	bl	57d8 <__aeabi_cdcmpeq>
    5818:	bf94      	ite	ls
    581a:	2001      	movls	r0, #1
    581c:	2000      	movhi	r0, #0
    581e:	f85d fb08 	ldr.w	pc, [sp], #8
    5822:	bf00      	nop

00005824 <__aeabi_dcmpge>:
    5824:	f84d ed08 	str.w	lr, [sp, #-8]!
    5828:	f7ff ffce 	bl	57c8 <__aeabi_cdrcmple>
    582c:	bf94      	ite	ls
    582e:	2001      	movls	r0, #1
    5830:	2000      	movhi	r0, #0
    5832:	f85d fb08 	ldr.w	pc, [sp], #8
    5836:	bf00      	nop

00005838 <__aeabi_dcmpgt>:
    5838:	f84d ed08 	str.w	lr, [sp, #-8]!
    583c:	f7ff ffc4 	bl	57c8 <__aeabi_cdrcmple>
    5840:	bf34      	ite	cc
    5842:	2001      	movcc	r0, #1
    5844:	2000      	movcs	r0, #0
    5846:	f85d fb08 	ldr.w	pc, [sp], #8
    584a:	bf00      	nop

0000584c <__aeabi_dcmpun>:
    584c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5850:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5854:	d102      	bne.n	585c <__aeabi_dcmpun+0x10>
    5856:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    585a:	d10a      	bne.n	5872 <__aeabi_dcmpun+0x26>
    585c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5860:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5864:	d102      	bne.n	586c <__aeabi_dcmpun+0x20>
    5866:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    586a:	d102      	bne.n	5872 <__aeabi_dcmpun+0x26>
    586c:	f04f 0000 	mov.w	r0, #0
    5870:	4770      	bx	lr
    5872:	f04f 0001 	mov.w	r0, #1
    5876:	4770      	bx	lr

00005878 <_malloc_r>:
    5878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    587c:	f101 060b 	add.w	r6, r1, #11
    5880:	2e16      	cmp	r6, #22
    5882:	b083      	sub	sp, #12
    5884:	4604      	mov	r4, r0
    5886:	d824      	bhi.n	58d2 <_malloc_r+0x5a>
    5888:	2910      	cmp	r1, #16
    588a:	f200 80ba 	bhi.w	5a02 <_malloc_r+0x18a>
    588e:	f000 faa3 	bl	5dd8 <__malloc_lock>
    5892:	2610      	movs	r6, #16
    5894:	2218      	movs	r2, #24
    5896:	2002      	movs	r0, #2
    5898:	4fb5      	ldr	r7, [pc, #724]	; (5b70 <_malloc_r+0x2f8>)
    589a:	443a      	add	r2, r7
    589c:	f1a2 0108 	sub.w	r1, r2, #8
    58a0:	6853      	ldr	r3, [r2, #4]
    58a2:	428b      	cmp	r3, r1
    58a4:	f000 80ba 	beq.w	5a1c <_malloc_r+0x1a4>
    58a8:	685a      	ldr	r2, [r3, #4]
    58aa:	68d9      	ldr	r1, [r3, #12]
    58ac:	f022 0203 	bic.w	r2, r2, #3
    58b0:	441a      	add	r2, r3
    58b2:	689d      	ldr	r5, [r3, #8]
    58b4:	60e9      	str	r1, [r5, #12]
    58b6:	608d      	str	r5, [r1, #8]
    58b8:	6851      	ldr	r1, [r2, #4]
    58ba:	f041 0101 	orr.w	r1, r1, #1
    58be:	4620      	mov	r0, r4
    58c0:	6051      	str	r1, [r2, #4]
    58c2:	f103 0508 	add.w	r5, r3, #8
    58c6:	f000 fa8d 	bl	5de4 <__malloc_unlock>
    58ca:	4628      	mov	r0, r5
    58cc:	b003      	add	sp, #12
    58ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58d2:	f036 0607 	bics.w	r6, r6, #7
    58d6:	f100 8094 	bmi.w	5a02 <_malloc_r+0x18a>
    58da:	42b1      	cmp	r1, r6
    58dc:	f200 8091 	bhi.w	5a02 <_malloc_r+0x18a>
    58e0:	f000 fa7a 	bl	5dd8 <__malloc_lock>
    58e4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    58e8:	f0c0 819a 	bcc.w	5c20 <_malloc_r+0x3a8>
    58ec:	0a73      	lsrs	r3, r6, #9
    58ee:	f000 808f 	beq.w	5a10 <_malloc_r+0x198>
    58f2:	2b04      	cmp	r3, #4
    58f4:	f200 816f 	bhi.w	5bd6 <_malloc_r+0x35e>
    58f8:	09b3      	lsrs	r3, r6, #6
    58fa:	f103 0039 	add.w	r0, r3, #57	; 0x39
    58fe:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    5902:	00c3      	lsls	r3, r0, #3
    5904:	4f9a      	ldr	r7, [pc, #616]	; (5b70 <_malloc_r+0x2f8>)
    5906:	443b      	add	r3, r7
    5908:	f1a3 0508 	sub.w	r5, r3, #8
    590c:	685b      	ldr	r3, [r3, #4]
    590e:	429d      	cmp	r5, r3
    5910:	d106      	bne.n	5920 <_malloc_r+0xa8>
    5912:	e00c      	b.n	592e <_malloc_r+0xb6>
    5914:	2900      	cmp	r1, #0
    5916:	f280 8127 	bge.w	5b68 <_malloc_r+0x2f0>
    591a:	68db      	ldr	r3, [r3, #12]
    591c:	429d      	cmp	r5, r3
    591e:	d006      	beq.n	592e <_malloc_r+0xb6>
    5920:	685a      	ldr	r2, [r3, #4]
    5922:	f022 0203 	bic.w	r2, r2, #3
    5926:	1b91      	subs	r1, r2, r6
    5928:	290f      	cmp	r1, #15
    592a:	ddf3      	ble.n	5914 <_malloc_r+0x9c>
    592c:	4660      	mov	r0, ip
    592e:	693d      	ldr	r5, [r7, #16]
    5930:	f8df c250 	ldr.w	ip, [pc, #592]	; 5b84 <_malloc_r+0x30c>
    5934:	4565      	cmp	r5, ip
    5936:	d07c      	beq.n	5a32 <_malloc_r+0x1ba>
    5938:	686a      	ldr	r2, [r5, #4]
    593a:	f022 0203 	bic.w	r2, r2, #3
    593e:	1b93      	subs	r3, r2, r6
    5940:	2b0f      	cmp	r3, #15
    5942:	f300 817b 	bgt.w	5c3c <_malloc_r+0x3c4>
    5946:	2b00      	cmp	r3, #0
    5948:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    594c:	f280 816c 	bge.w	5c28 <_malloc_r+0x3b0>
    5950:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    5954:	f080 811a 	bcs.w	5b8c <_malloc_r+0x314>
    5958:	08d3      	lsrs	r3, r2, #3
    595a:	6879      	ldr	r1, [r7, #4]
    595c:	3301      	adds	r3, #1
    595e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    5962:	2201      	movs	r2, #1
    5964:	fa02 f20e 	lsl.w	r2, r2, lr
    5968:	430a      	orrs	r2, r1
    596a:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    596e:	f8c5 e008 	str.w	lr, [r5, #8]
    5972:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    5976:	3908      	subs	r1, #8
    5978:	60e9      	str	r1, [r5, #12]
    597a:	607a      	str	r2, [r7, #4]
    597c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    5980:	f8ce 500c 	str.w	r5, [lr, #12]
    5984:	1083      	asrs	r3, r0, #2
    5986:	2101      	movs	r1, #1
    5988:	4099      	lsls	r1, r3
    598a:	4291      	cmp	r1, r2
    598c:	d857      	bhi.n	5a3e <_malloc_r+0x1c6>
    598e:	4211      	tst	r1, r2
    5990:	d106      	bne.n	59a0 <_malloc_r+0x128>
    5992:	f020 0003 	bic.w	r0, r0, #3
    5996:	0049      	lsls	r1, r1, #1
    5998:	4211      	tst	r1, r2
    599a:	f100 0004 	add.w	r0, r0, #4
    599e:	d0fa      	beq.n	5996 <_malloc_r+0x11e>
    59a0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    59a4:	464d      	mov	r5, r9
    59a6:	4686      	mov	lr, r0
    59a8:	f8d5 800c 	ldr.w	r8, [r5, #12]
    59ac:	4545      	cmp	r5, r8
    59ae:	d108      	bne.n	59c2 <_malloc_r+0x14a>
    59b0:	e11d      	b.n	5bee <_malloc_r+0x376>
    59b2:	2b00      	cmp	r3, #0
    59b4:	f280 8124 	bge.w	5c00 <_malloc_r+0x388>
    59b8:	f8d8 800c 	ldr.w	r8, [r8, #12]
    59bc:	4545      	cmp	r5, r8
    59be:	f000 8116 	beq.w	5bee <_malloc_r+0x376>
    59c2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    59c6:	f022 0203 	bic.w	r2, r2, #3
    59ca:	1b93      	subs	r3, r2, r6
    59cc:	2b0f      	cmp	r3, #15
    59ce:	ddf0      	ble.n	59b2 <_malloc_r+0x13a>
    59d0:	4620      	mov	r0, r4
    59d2:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    59d6:	eb08 0106 	add.w	r1, r8, r6
    59da:	f046 0601 	orr.w	r6, r6, #1
    59de:	f8c8 6004 	str.w	r6, [r8, #4]
    59e2:	60ec      	str	r4, [r5, #12]
    59e4:	60a5      	str	r5, [r4, #8]
    59e6:	f043 0401 	orr.w	r4, r3, #1
    59ea:	e9c7 1104 	strd	r1, r1, [r7, #16]
    59ee:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    59f2:	604c      	str	r4, [r1, #4]
    59f4:	f848 3002 	str.w	r3, [r8, r2]
    59f8:	f000 f9f4 	bl	5de4 <__malloc_unlock>
    59fc:	f108 0508 	add.w	r5, r8, #8
    5a00:	e002      	b.n	5a08 <_malloc_r+0x190>
    5a02:	230c      	movs	r3, #12
    5a04:	6023      	str	r3, [r4, #0]
    5a06:	2500      	movs	r5, #0
    5a08:	4628      	mov	r0, r5
    5a0a:	b003      	add	sp, #12
    5a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a10:	f44f 7300 	mov.w	r3, #512	; 0x200
    5a14:	2040      	movs	r0, #64	; 0x40
    5a16:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    5a1a:	e773      	b.n	5904 <_malloc_r+0x8c>
    5a1c:	68d3      	ldr	r3, [r2, #12]
    5a1e:	429a      	cmp	r2, r3
    5a20:	bf08      	it	eq
    5a22:	3002      	addeq	r0, #2
    5a24:	f47f af40 	bne.w	58a8 <_malloc_r+0x30>
    5a28:	693d      	ldr	r5, [r7, #16]
    5a2a:	f8df c158 	ldr.w	ip, [pc, #344]	; 5b84 <_malloc_r+0x30c>
    5a2e:	4565      	cmp	r5, ip
    5a30:	d182      	bne.n	5938 <_malloc_r+0xc0>
    5a32:	687a      	ldr	r2, [r7, #4]
    5a34:	1083      	asrs	r3, r0, #2
    5a36:	2101      	movs	r1, #1
    5a38:	4099      	lsls	r1, r3
    5a3a:	4291      	cmp	r1, r2
    5a3c:	d9a7      	bls.n	598e <_malloc_r+0x116>
    5a3e:	68bd      	ldr	r5, [r7, #8]
    5a40:	686b      	ldr	r3, [r5, #4]
    5a42:	f023 0903 	bic.w	r9, r3, #3
    5a46:	454e      	cmp	r6, r9
    5a48:	d803      	bhi.n	5a52 <_malloc_r+0x1da>
    5a4a:	eba9 0306 	sub.w	r3, r9, r6
    5a4e:	2b0f      	cmp	r3, #15
    5a50:	dc7a      	bgt.n	5b48 <_malloc_r+0x2d0>
    5a52:	f8df b134 	ldr.w	fp, [pc, #308]	; 5b88 <_malloc_r+0x310>
    5a56:	4b47      	ldr	r3, [pc, #284]	; (5b74 <_malloc_r+0x2fc>)
    5a58:	f8db 2000 	ldr.w	r2, [fp]
    5a5c:	681b      	ldr	r3, [r3, #0]
    5a5e:	3201      	adds	r2, #1
    5a60:	4433      	add	r3, r6
    5a62:	eb05 0a09 	add.w	sl, r5, r9
    5a66:	f000 8133 	beq.w	5cd0 <_malloc_r+0x458>
    5a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    5a6e:	330f      	adds	r3, #15
    5a70:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    5a74:	f028 080f 	bic.w	r8, r8, #15
    5a78:	4641      	mov	r1, r8
    5a7a:	4620      	mov	r0, r4
    5a7c:	f000 fe78 	bl	6770 <_sbrk_r>
    5a80:	1c41      	adds	r1, r0, #1
    5a82:	4602      	mov	r2, r0
    5a84:	f000 80f3 	beq.w	5c6e <_malloc_r+0x3f6>
    5a88:	4582      	cmp	sl, r0
    5a8a:	f200 80ee 	bhi.w	5c6a <_malloc_r+0x3f2>
    5a8e:	4b3a      	ldr	r3, [pc, #232]	; (5b78 <_malloc_r+0x300>)
    5a90:	6819      	ldr	r1, [r3, #0]
    5a92:	4441      	add	r1, r8
    5a94:	6019      	str	r1, [r3, #0]
    5a96:	4608      	mov	r0, r1
    5a98:	f000 814e 	beq.w	5d38 <_malloc_r+0x4c0>
    5a9c:	f8db 1000 	ldr.w	r1, [fp]
    5aa0:	9301      	str	r3, [sp, #4]
    5aa2:	3101      	adds	r1, #1
    5aa4:	bf1b      	ittet	ne
    5aa6:	eba2 010a 	subne.w	r1, r2, sl
    5aaa:	1809      	addne	r1, r1, r0
    5aac:	f8cb 2000 	streq.w	r2, [fp]
    5ab0:	6019      	strne	r1, [r3, #0]
    5ab2:	f012 0b07 	ands.w	fp, r2, #7
    5ab6:	f000 8117 	beq.w	5ce8 <_malloc_r+0x470>
    5aba:	f1cb 0108 	rsb	r1, fp, #8
    5abe:	440a      	add	r2, r1
    5ac0:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    5ac4:	4490      	add	r8, r2
    5ac6:	3108      	adds	r1, #8
    5ac8:	eba1 0108 	sub.w	r1, r1, r8
    5acc:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5ad0:	4651      	mov	r1, sl
    5ad2:	4620      	mov	r0, r4
    5ad4:	9200      	str	r2, [sp, #0]
    5ad6:	f000 fe4b 	bl	6770 <_sbrk_r>
    5ada:	1c42      	adds	r2, r0, #1
    5adc:	e9dd 2300 	ldrd	r2, r3, [sp]
    5ae0:	f000 814f 	beq.w	5d82 <_malloc_r+0x50a>
    5ae4:	1a80      	subs	r0, r0, r2
    5ae6:	eb00 080a 	add.w	r8, r0, sl
    5aea:	6819      	ldr	r1, [r3, #0]
    5aec:	60ba      	str	r2, [r7, #8]
    5aee:	f048 0001 	orr.w	r0, r8, #1
    5af2:	4451      	add	r1, sl
    5af4:	42bd      	cmp	r5, r7
    5af6:	6050      	str	r0, [r2, #4]
    5af8:	6019      	str	r1, [r3, #0]
    5afa:	f000 8129 	beq.w	5d50 <_malloc_r+0x4d8>
    5afe:	f1b9 0f0f 	cmp.w	r9, #15
    5b02:	f240 8127 	bls.w	5d54 <_malloc_r+0x4dc>
    5b06:	6868      	ldr	r0, [r5, #4]
    5b08:	f1a9 0c0c 	sub.w	ip, r9, #12
    5b0c:	f02c 0c07 	bic.w	ip, ip, #7
    5b10:	f000 0001 	and.w	r0, r0, #1
    5b14:	ea40 000c 	orr.w	r0, r0, ip
    5b18:	6068      	str	r0, [r5, #4]
    5b1a:	f04f 0e05 	mov.w	lr, #5
    5b1e:	eb05 000c 	add.w	r0, r5, ip
    5b22:	f1bc 0f0f 	cmp.w	ip, #15
    5b26:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    5b2a:	f200 8132 	bhi.w	5d92 <_malloc_r+0x51a>
    5b2e:	6850      	ldr	r0, [r2, #4]
    5b30:	4615      	mov	r5, r2
    5b32:	4b12      	ldr	r3, [pc, #72]	; (5b7c <_malloc_r+0x304>)
    5b34:	681a      	ldr	r2, [r3, #0]
    5b36:	428a      	cmp	r2, r1
    5b38:	bf38      	it	cc
    5b3a:	6019      	strcc	r1, [r3, #0]
    5b3c:	4b10      	ldr	r3, [pc, #64]	; (5b80 <_malloc_r+0x308>)
    5b3e:	681a      	ldr	r2, [r3, #0]
    5b40:	428a      	cmp	r2, r1
    5b42:	bf38      	it	cc
    5b44:	6019      	strcc	r1, [r3, #0]
    5b46:	e094      	b.n	5c72 <_malloc_r+0x3fa>
    5b48:	19aa      	adds	r2, r5, r6
    5b4a:	f043 0301 	orr.w	r3, r3, #1
    5b4e:	f046 0601 	orr.w	r6, r6, #1
    5b52:	606e      	str	r6, [r5, #4]
    5b54:	4620      	mov	r0, r4
    5b56:	60ba      	str	r2, [r7, #8]
    5b58:	6053      	str	r3, [r2, #4]
    5b5a:	f000 f943 	bl	5de4 <__malloc_unlock>
    5b5e:	3508      	adds	r5, #8
    5b60:	4628      	mov	r0, r5
    5b62:	b003      	add	sp, #12
    5b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b68:	68d9      	ldr	r1, [r3, #12]
    5b6a:	441a      	add	r2, r3
    5b6c:	e6a1      	b.n	58b2 <_malloc_r+0x3a>
    5b6e:	bf00      	nop
    5b70:	1fff0814 	.word	0x1fff0814
    5b74:	1fff6294 	.word	0x1fff6294
    5b78:	1fff6264 	.word	0x1fff6264
    5b7c:	1fff628c 	.word	0x1fff628c
    5b80:	1fff6290 	.word	0x1fff6290
    5b84:	1fff081c 	.word	0x1fff081c
    5b88:	1fff0c1c 	.word	0x1fff0c1c
    5b8c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    5b90:	ea4f 2352 	mov.w	r3, r2, lsr #9
    5b94:	d363      	bcc.n	5c5e <_malloc_r+0x3e6>
    5b96:	2b14      	cmp	r3, #20
    5b98:	f200 80b7 	bhi.w	5d0a <_malloc_r+0x492>
    5b9c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    5ba0:	00c9      	lsls	r1, r1, #3
    5ba2:	335b      	adds	r3, #91	; 0x5b
    5ba4:	eb07 0e01 	add.w	lr, r7, r1
    5ba8:	5879      	ldr	r1, [r7, r1]
    5baa:	f1ae 0e08 	sub.w	lr, lr, #8
    5bae:	458e      	cmp	lr, r1
    5bb0:	f000 8091 	beq.w	5cd6 <_malloc_r+0x45e>
    5bb4:	684b      	ldr	r3, [r1, #4]
    5bb6:	f023 0303 	bic.w	r3, r3, #3
    5bba:	4293      	cmp	r3, r2
    5bbc:	d902      	bls.n	5bc4 <_malloc_r+0x34c>
    5bbe:	6889      	ldr	r1, [r1, #8]
    5bc0:	458e      	cmp	lr, r1
    5bc2:	d1f7      	bne.n	5bb4 <_malloc_r+0x33c>
    5bc4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    5bc8:	687a      	ldr	r2, [r7, #4]
    5bca:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    5bce:	f8ce 5008 	str.w	r5, [lr, #8]
    5bd2:	60cd      	str	r5, [r1, #12]
    5bd4:	e6d6      	b.n	5984 <_malloc_r+0x10c>
    5bd6:	2b14      	cmp	r3, #20
    5bd8:	d959      	bls.n	5c8e <_malloc_r+0x416>
    5bda:	2b54      	cmp	r3, #84	; 0x54
    5bdc:	f200 809d 	bhi.w	5d1a <_malloc_r+0x4a2>
    5be0:	0b33      	lsrs	r3, r6, #12
    5be2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    5be6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    5bea:	00c3      	lsls	r3, r0, #3
    5bec:	e68a      	b.n	5904 <_malloc_r+0x8c>
    5bee:	f10e 0e01 	add.w	lr, lr, #1
    5bf2:	f01e 0f03 	tst.w	lr, #3
    5bf6:	f105 0508 	add.w	r5, r5, #8
    5bfa:	f47f aed5 	bne.w	59a8 <_malloc_r+0x130>
    5bfe:	e051      	b.n	5ca4 <_malloc_r+0x42c>
    5c00:	4442      	add	r2, r8
    5c02:	4645      	mov	r5, r8
    5c04:	6853      	ldr	r3, [r2, #4]
    5c06:	f8d8 100c 	ldr.w	r1, [r8, #12]
    5c0a:	f043 0301 	orr.w	r3, r3, #1
    5c0e:	6053      	str	r3, [r2, #4]
    5c10:	f855 3f08 	ldr.w	r3, [r5, #8]!
    5c14:	4620      	mov	r0, r4
    5c16:	60d9      	str	r1, [r3, #12]
    5c18:	608b      	str	r3, [r1, #8]
    5c1a:	f000 f8e3 	bl	5de4 <__malloc_unlock>
    5c1e:	e6f3      	b.n	5a08 <_malloc_r+0x190>
    5c20:	08f0      	lsrs	r0, r6, #3
    5c22:	f106 0208 	add.w	r2, r6, #8
    5c26:	e637      	b.n	5898 <_malloc_r+0x20>
    5c28:	442a      	add	r2, r5
    5c2a:	4620      	mov	r0, r4
    5c2c:	6853      	ldr	r3, [r2, #4]
    5c2e:	f043 0301 	orr.w	r3, r3, #1
    5c32:	6053      	str	r3, [r2, #4]
    5c34:	3508      	adds	r5, #8
    5c36:	f000 f8d5 	bl	5de4 <__malloc_unlock>
    5c3a:	e6e5      	b.n	5a08 <_malloc_r+0x190>
    5c3c:	19a9      	adds	r1, r5, r6
    5c3e:	4620      	mov	r0, r4
    5c40:	f046 0601 	orr.w	r6, r6, #1
    5c44:	f043 0401 	orr.w	r4, r3, #1
    5c48:	606e      	str	r6, [r5, #4]
    5c4a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    5c4e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    5c52:	604c      	str	r4, [r1, #4]
    5c54:	50ab      	str	r3, [r5, r2]
    5c56:	f000 f8c5 	bl	5de4 <__malloc_unlock>
    5c5a:	3508      	adds	r5, #8
    5c5c:	e6d4      	b.n	5a08 <_malloc_r+0x190>
    5c5e:	0993      	lsrs	r3, r2, #6
    5c60:	f103 0139 	add.w	r1, r3, #57	; 0x39
    5c64:	00c9      	lsls	r1, r1, #3
    5c66:	3338      	adds	r3, #56	; 0x38
    5c68:	e79c      	b.n	5ba4 <_malloc_r+0x32c>
    5c6a:	42bd      	cmp	r5, r7
    5c6c:	d05f      	beq.n	5d2e <_malloc_r+0x4b6>
    5c6e:	68bd      	ldr	r5, [r7, #8]
    5c70:	6868      	ldr	r0, [r5, #4]
    5c72:	f020 0803 	bic.w	r8, r0, #3
    5c76:	4546      	cmp	r6, r8
    5c78:	eba8 0306 	sub.w	r3, r8, r6
    5c7c:	d802      	bhi.n	5c84 <_malloc_r+0x40c>
    5c7e:	2b0f      	cmp	r3, #15
    5c80:	f73f af62 	bgt.w	5b48 <_malloc_r+0x2d0>
    5c84:	4620      	mov	r0, r4
    5c86:	f000 f8ad 	bl	5de4 <__malloc_unlock>
    5c8a:	2500      	movs	r5, #0
    5c8c:	e6bc      	b.n	5a08 <_malloc_r+0x190>
    5c8e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    5c92:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    5c96:	00c3      	lsls	r3, r0, #3
    5c98:	e634      	b.n	5904 <_malloc_r+0x8c>
    5c9a:	f859 3908 	ldr.w	r3, [r9], #-8
    5c9e:	454b      	cmp	r3, r9
    5ca0:	f040 8096 	bne.w	5dd0 <_malloc_r+0x558>
    5ca4:	f010 0f03 	tst.w	r0, #3
    5ca8:	f100 30ff 	add.w	r0, r0, #4294967295
    5cac:	d1f5      	bne.n	5c9a <_malloc_r+0x422>
    5cae:	687b      	ldr	r3, [r7, #4]
    5cb0:	ea23 0301 	bic.w	r3, r3, r1
    5cb4:	607b      	str	r3, [r7, #4]
    5cb6:	0049      	lsls	r1, r1, #1
    5cb8:	4299      	cmp	r1, r3
    5cba:	f63f aec0 	bhi.w	5a3e <_malloc_r+0x1c6>
    5cbe:	b919      	cbnz	r1, 5cc8 <_malloc_r+0x450>
    5cc0:	e6bd      	b.n	5a3e <_malloc_r+0x1c6>
    5cc2:	0049      	lsls	r1, r1, #1
    5cc4:	f10e 0e04 	add.w	lr, lr, #4
    5cc8:	4219      	tst	r1, r3
    5cca:	d0fa      	beq.n	5cc2 <_malloc_r+0x44a>
    5ccc:	4670      	mov	r0, lr
    5cce:	e667      	b.n	59a0 <_malloc_r+0x128>
    5cd0:	f103 0810 	add.w	r8, r3, #16
    5cd4:	e6d0      	b.n	5a78 <_malloc_r+0x200>
    5cd6:	109a      	asrs	r2, r3, #2
    5cd8:	f04f 0801 	mov.w	r8, #1
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	fa08 f202 	lsl.w	r2, r8, r2
    5ce2:	431a      	orrs	r2, r3
    5ce4:	607a      	str	r2, [r7, #4]
    5ce6:	e770      	b.n	5bca <_malloc_r+0x352>
    5ce8:	eb02 0108 	add.w	r1, r2, r8
    5cec:	4249      	negs	r1, r1
    5cee:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5cf2:	4651      	mov	r1, sl
    5cf4:	4620      	mov	r0, r4
    5cf6:	9200      	str	r2, [sp, #0]
    5cf8:	f000 fd3a 	bl	6770 <_sbrk_r>
    5cfc:	1c43      	adds	r3, r0, #1
    5cfe:	e9dd 2300 	ldrd	r2, r3, [sp]
    5d02:	f47f aeef 	bne.w	5ae4 <_malloc_r+0x26c>
    5d06:	46da      	mov	sl, fp
    5d08:	e6ef      	b.n	5aea <_malloc_r+0x272>
    5d0a:	2b54      	cmp	r3, #84	; 0x54
    5d0c:	d825      	bhi.n	5d5a <_malloc_r+0x4e2>
    5d0e:	0b13      	lsrs	r3, r2, #12
    5d10:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    5d14:	00c9      	lsls	r1, r1, #3
    5d16:	336e      	adds	r3, #110	; 0x6e
    5d18:	e744      	b.n	5ba4 <_malloc_r+0x32c>
    5d1a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5d1e:	d825      	bhi.n	5d6c <_malloc_r+0x4f4>
    5d20:	0bf3      	lsrs	r3, r6, #15
    5d22:	f103 0078 	add.w	r0, r3, #120	; 0x78
    5d26:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    5d2a:	00c3      	lsls	r3, r0, #3
    5d2c:	e5ea      	b.n	5904 <_malloc_r+0x8c>
    5d2e:	4b29      	ldr	r3, [pc, #164]	; (5dd4 <_malloc_r+0x55c>)
    5d30:	6818      	ldr	r0, [r3, #0]
    5d32:	4440      	add	r0, r8
    5d34:	6018      	str	r0, [r3, #0]
    5d36:	e6b1      	b.n	5a9c <_malloc_r+0x224>
    5d38:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    5d3c:	f1bc 0f00 	cmp.w	ip, #0
    5d40:	f47f aeac 	bne.w	5a9c <_malloc_r+0x224>
    5d44:	68bd      	ldr	r5, [r7, #8]
    5d46:	44c8      	add	r8, r9
    5d48:	f048 0001 	orr.w	r0, r8, #1
    5d4c:	6068      	str	r0, [r5, #4]
    5d4e:	e6f0      	b.n	5b32 <_malloc_r+0x2ba>
    5d50:	4615      	mov	r5, r2
    5d52:	e6ee      	b.n	5b32 <_malloc_r+0x2ba>
    5d54:	2301      	movs	r3, #1
    5d56:	6053      	str	r3, [r2, #4]
    5d58:	e794      	b.n	5c84 <_malloc_r+0x40c>
    5d5a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5d5e:	d823      	bhi.n	5da8 <_malloc_r+0x530>
    5d60:	0bd3      	lsrs	r3, r2, #15
    5d62:	f103 0178 	add.w	r1, r3, #120	; 0x78
    5d66:	00c9      	lsls	r1, r1, #3
    5d68:	3377      	adds	r3, #119	; 0x77
    5d6a:	e71b      	b.n	5ba4 <_malloc_r+0x32c>
    5d6c:	f240 5254 	movw	r2, #1364	; 0x554
    5d70:	4293      	cmp	r3, r2
    5d72:	d823      	bhi.n	5dbc <_malloc_r+0x544>
    5d74:	0cb3      	lsrs	r3, r6, #18
    5d76:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5d7a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    5d7e:	00c3      	lsls	r3, r0, #3
    5d80:	e5c0      	b.n	5904 <_malloc_r+0x8c>
    5d82:	f1ab 0b08 	sub.w	fp, fp, #8
    5d86:	44d8      	add	r8, fp
    5d88:	eba8 0802 	sub.w	r8, r8, r2
    5d8c:	f04f 0a00 	mov.w	sl, #0
    5d90:	e6ab      	b.n	5aea <_malloc_r+0x272>
    5d92:	f105 0108 	add.w	r1, r5, #8
    5d96:	4620      	mov	r0, r4
    5d98:	9300      	str	r3, [sp, #0]
    5d9a:	f000 fe1f 	bl	69dc <_free_r>
    5d9e:	68bd      	ldr	r5, [r7, #8]
    5da0:	9b00      	ldr	r3, [sp, #0]
    5da2:	6868      	ldr	r0, [r5, #4]
    5da4:	6819      	ldr	r1, [r3, #0]
    5da6:	e6c4      	b.n	5b32 <_malloc_r+0x2ba>
    5da8:	f240 5154 	movw	r1, #1364	; 0x554
    5dac:	428b      	cmp	r3, r1
    5dae:	d80b      	bhi.n	5dc8 <_malloc_r+0x550>
    5db0:	0c93      	lsrs	r3, r2, #18
    5db2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    5db6:	00c9      	lsls	r1, r1, #3
    5db8:	337c      	adds	r3, #124	; 0x7c
    5dba:	e6f3      	b.n	5ba4 <_malloc_r+0x32c>
    5dbc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5dc0:	207f      	movs	r0, #127	; 0x7f
    5dc2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    5dc6:	e59d      	b.n	5904 <_malloc_r+0x8c>
    5dc8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    5dcc:	237e      	movs	r3, #126	; 0x7e
    5dce:	e6e9      	b.n	5ba4 <_malloc_r+0x32c>
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	e770      	b.n	5cb6 <_malloc_r+0x43e>
    5dd4:	1fff6264 	.word	0x1fff6264

00005dd8 <__malloc_lock>:
    5dd8:	4801      	ldr	r0, [pc, #4]	; (5de0 <__malloc_lock+0x8>)
    5dda:	f000 bd1f 	b.w	681c <__retarget_lock_acquire_recursive>
    5dde:	bf00      	nop
    5de0:	1fff63dc 	.word	0x1fff63dc

00005de4 <__malloc_unlock>:
    5de4:	4801      	ldr	r0, [pc, #4]	; (5dec <__malloc_unlock+0x8>)
    5de6:	f000 bd1b 	b.w	6820 <__retarget_lock_release_recursive>
    5dea:	bf00      	nop
    5dec:	1fff63dc 	.word	0x1fff63dc

00005df0 <_realloc_r>:
    5df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5df4:	4617      	mov	r7, r2
    5df6:	2900      	cmp	r1, #0
    5df8:	f000 8098 	beq.w	5f2c <_realloc_r+0x13c>
    5dfc:	460c      	mov	r4, r1
    5dfe:	f107 050b 	add.w	r5, r7, #11
    5e02:	4680      	mov	r8, r0
    5e04:	f7ff ffe8 	bl	5dd8 <__malloc_lock>
    5e08:	2d16      	cmp	r5, #22
    5e0a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    5e0e:	d85b      	bhi.n	5ec8 <_realloc_r+0xd8>
    5e10:	2510      	movs	r5, #16
    5e12:	462a      	mov	r2, r5
    5e14:	42af      	cmp	r7, r5
    5e16:	d85c      	bhi.n	5ed2 <_realloc_r+0xe2>
    5e18:	f021 0603 	bic.w	r6, r1, #3
    5e1c:	4296      	cmp	r6, r2
    5e1e:	f1a4 0908 	sub.w	r9, r4, #8
    5e22:	da62      	bge.n	5eea <_realloc_r+0xfa>
    5e24:	4bbc      	ldr	r3, [pc, #752]	; (6118 <_realloc_r+0x328>)
    5e26:	f8d3 c008 	ldr.w	ip, [r3, #8]
    5e2a:	eb09 0006 	add.w	r0, r9, r6
    5e2e:	4584      	cmp	ip, r0
    5e30:	f000 8097 	beq.w	5f62 <_realloc_r+0x172>
    5e34:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5e38:	f02c 0301 	bic.w	r3, ip, #1
    5e3c:	4403      	add	r3, r0
    5e3e:	685b      	ldr	r3, [r3, #4]
    5e40:	07db      	lsls	r3, r3, #31
    5e42:	d468      	bmi.n	5f16 <_realloc_r+0x126>
    5e44:	f02c 0c03 	bic.w	ip, ip, #3
    5e48:	eb06 030c 	add.w	r3, r6, ip
    5e4c:	4293      	cmp	r3, r2
    5e4e:	da47      	bge.n	5ee0 <_realloc_r+0xf0>
    5e50:	07cb      	lsls	r3, r1, #31
    5e52:	d410      	bmi.n	5e76 <_realloc_r+0x86>
    5e54:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5e58:	eba9 0a03 	sub.w	sl, r9, r3
    5e5c:	f8da 3004 	ldr.w	r3, [sl, #4]
    5e60:	f023 0103 	bic.w	r1, r3, #3
    5e64:	448c      	add	ip, r1
    5e66:	44b4      	add	ip, r6
    5e68:	4594      	cmp	ip, r2
    5e6a:	f280 8111 	bge.w	6090 <_realloc_r+0x2a0>
    5e6e:	1873      	adds	r3, r6, r1
    5e70:	4293      	cmp	r3, r2
    5e72:	f280 80e8 	bge.w	6046 <_realloc_r+0x256>
    5e76:	4639      	mov	r1, r7
    5e78:	4640      	mov	r0, r8
    5e7a:	f7ff fcfd 	bl	5878 <_malloc_r>
    5e7e:	4607      	mov	r7, r0
    5e80:	b1e0      	cbz	r0, 5ebc <_realloc_r+0xcc>
    5e82:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5e86:	f023 0301 	bic.w	r3, r3, #1
    5e8a:	444b      	add	r3, r9
    5e8c:	f1a0 0208 	sub.w	r2, r0, #8
    5e90:	4293      	cmp	r3, r2
    5e92:	f000 80d2 	beq.w	603a <_realloc_r+0x24a>
    5e96:	1f32      	subs	r2, r6, #4
    5e98:	2a24      	cmp	r2, #36	; 0x24
    5e9a:	f200 80f5 	bhi.w	6088 <_realloc_r+0x298>
    5e9e:	2a13      	cmp	r2, #19
    5ea0:	f200 80ac 	bhi.w	5ffc <_realloc_r+0x20c>
    5ea4:	4603      	mov	r3, r0
    5ea6:	4622      	mov	r2, r4
    5ea8:	6811      	ldr	r1, [r2, #0]
    5eaa:	6019      	str	r1, [r3, #0]
    5eac:	6851      	ldr	r1, [r2, #4]
    5eae:	6059      	str	r1, [r3, #4]
    5eb0:	6892      	ldr	r2, [r2, #8]
    5eb2:	609a      	str	r2, [r3, #8]
    5eb4:	4621      	mov	r1, r4
    5eb6:	4640      	mov	r0, r8
    5eb8:	f000 fd90 	bl	69dc <_free_r>
    5ebc:	4640      	mov	r0, r8
    5ebe:	f7ff ff91 	bl	5de4 <__malloc_unlock>
    5ec2:	4638      	mov	r0, r7
    5ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ec8:	f025 0507 	bic.w	r5, r5, #7
    5ecc:	2d00      	cmp	r5, #0
    5ece:	462a      	mov	r2, r5
    5ed0:	daa0      	bge.n	5e14 <_realloc_r+0x24>
    5ed2:	230c      	movs	r3, #12
    5ed4:	f8c8 3000 	str.w	r3, [r8]
    5ed8:	2700      	movs	r7, #0
    5eda:	4638      	mov	r0, r7
    5edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ee0:	461e      	mov	r6, r3
    5ee2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    5ee6:	60d3      	str	r3, [r2, #12]
    5ee8:	609a      	str	r2, [r3, #8]
    5eea:	1b73      	subs	r3, r6, r5
    5eec:	2b0f      	cmp	r3, #15
    5eee:	d822      	bhi.n	5f36 <_realloc_r+0x146>
    5ef0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5ef4:	f003 0301 	and.w	r3, r3, #1
    5ef8:	4333      	orrs	r3, r6
    5efa:	444e      	add	r6, r9
    5efc:	f8c9 3004 	str.w	r3, [r9, #4]
    5f00:	6873      	ldr	r3, [r6, #4]
    5f02:	f043 0301 	orr.w	r3, r3, #1
    5f06:	6073      	str	r3, [r6, #4]
    5f08:	4640      	mov	r0, r8
    5f0a:	4627      	mov	r7, r4
    5f0c:	f7ff ff6a 	bl	5de4 <__malloc_unlock>
    5f10:	4638      	mov	r0, r7
    5f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f16:	07c9      	lsls	r1, r1, #31
    5f18:	d4ad      	bmi.n	5e76 <_realloc_r+0x86>
    5f1a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5f1e:	eba9 0a03 	sub.w	sl, r9, r3
    5f22:	f8da 1004 	ldr.w	r1, [sl, #4]
    5f26:	f021 0103 	bic.w	r1, r1, #3
    5f2a:	e7a0      	b.n	5e6e <_realloc_r+0x7e>
    5f2c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f30:	4611      	mov	r1, r2
    5f32:	f7ff bca1 	b.w	5878 <_malloc_r>
    5f36:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5f3a:	eb09 0105 	add.w	r1, r9, r5
    5f3e:	f002 0201 	and.w	r2, r2, #1
    5f42:	444e      	add	r6, r9
    5f44:	f043 0301 	orr.w	r3, r3, #1
    5f48:	432a      	orrs	r2, r5
    5f4a:	f8c9 2004 	str.w	r2, [r9, #4]
    5f4e:	604b      	str	r3, [r1, #4]
    5f50:	6873      	ldr	r3, [r6, #4]
    5f52:	f043 0301 	orr.w	r3, r3, #1
    5f56:	3108      	adds	r1, #8
    5f58:	6073      	str	r3, [r6, #4]
    5f5a:	4640      	mov	r0, r8
    5f5c:	f000 fd3e 	bl	69dc <_free_r>
    5f60:	e7d2      	b.n	5f08 <_realloc_r+0x118>
    5f62:	f8dc 0004 	ldr.w	r0, [ip, #4]
    5f66:	f020 0b03 	bic.w	fp, r0, #3
    5f6a:	eb06 0c0b 	add.w	ip, r6, fp
    5f6e:	f105 0010 	add.w	r0, r5, #16
    5f72:	4584      	cmp	ip, r0
    5f74:	da4d      	bge.n	6012 <_realloc_r+0x222>
    5f76:	07c9      	lsls	r1, r1, #31
    5f78:	f53f af7d 	bmi.w	5e76 <_realloc_r+0x86>
    5f7c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    5f80:	eba9 0a01 	sub.w	sl, r9, r1
    5f84:	f8da 1004 	ldr.w	r1, [sl, #4]
    5f88:	f021 0103 	bic.w	r1, r1, #3
    5f8c:	448b      	add	fp, r1
    5f8e:	44b3      	add	fp, r6
    5f90:	4558      	cmp	r0, fp
    5f92:	f73f af6c 	bgt.w	5e6e <_realloc_r+0x7e>
    5f96:	4657      	mov	r7, sl
    5f98:	f8da 100c 	ldr.w	r1, [sl, #12]
    5f9c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5fa0:	1f32      	subs	r2, r6, #4
    5fa2:	2a24      	cmp	r2, #36	; 0x24
    5fa4:	60c1      	str	r1, [r0, #12]
    5fa6:	6088      	str	r0, [r1, #8]
    5fa8:	f200 80db 	bhi.w	6162 <_realloc_r+0x372>
    5fac:	2a13      	cmp	r2, #19
    5fae:	f240 80d6 	bls.w	615e <_realloc_r+0x36e>
    5fb2:	6821      	ldr	r1, [r4, #0]
    5fb4:	f8ca 1008 	str.w	r1, [sl, #8]
    5fb8:	6861      	ldr	r1, [r4, #4]
    5fba:	f8ca 100c 	str.w	r1, [sl, #12]
    5fbe:	2a1b      	cmp	r2, #27
    5fc0:	f200 80df 	bhi.w	6182 <_realloc_r+0x392>
    5fc4:	3408      	adds	r4, #8
    5fc6:	f10a 0210 	add.w	r2, sl, #16
    5fca:	6821      	ldr	r1, [r4, #0]
    5fcc:	6011      	str	r1, [r2, #0]
    5fce:	6861      	ldr	r1, [r4, #4]
    5fd0:	6051      	str	r1, [r2, #4]
    5fd2:	68a1      	ldr	r1, [r4, #8]
    5fd4:	6091      	str	r1, [r2, #8]
    5fd6:	eb0a 0105 	add.w	r1, sl, r5
    5fda:	ebab 0205 	sub.w	r2, fp, r5
    5fde:	f042 0201 	orr.w	r2, r2, #1
    5fe2:	6099      	str	r1, [r3, #8]
    5fe4:	604a      	str	r2, [r1, #4]
    5fe6:	f8da 3004 	ldr.w	r3, [sl, #4]
    5fea:	f003 0301 	and.w	r3, r3, #1
    5fee:	432b      	orrs	r3, r5
    5ff0:	4640      	mov	r0, r8
    5ff2:	f8ca 3004 	str.w	r3, [sl, #4]
    5ff6:	f7ff fef5 	bl	5de4 <__malloc_unlock>
    5ffa:	e76e      	b.n	5eda <_realloc_r+0xea>
    5ffc:	6823      	ldr	r3, [r4, #0]
    5ffe:	6003      	str	r3, [r0, #0]
    6000:	6863      	ldr	r3, [r4, #4]
    6002:	6043      	str	r3, [r0, #4]
    6004:	2a1b      	cmp	r2, #27
    6006:	d868      	bhi.n	60da <_realloc_r+0x2ea>
    6008:	f104 0208 	add.w	r2, r4, #8
    600c:	f100 0308 	add.w	r3, r0, #8
    6010:	e74a      	b.n	5ea8 <_realloc_r+0xb8>
    6012:	eb09 0205 	add.w	r2, r9, r5
    6016:	609a      	str	r2, [r3, #8]
    6018:	ebac 0305 	sub.w	r3, ip, r5
    601c:	f043 0301 	orr.w	r3, r3, #1
    6020:	6053      	str	r3, [r2, #4]
    6022:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6026:	f003 0301 	and.w	r3, r3, #1
    602a:	432b      	orrs	r3, r5
    602c:	4640      	mov	r0, r8
    602e:	f844 3c04 	str.w	r3, [r4, #-4]
    6032:	f7ff fed7 	bl	5de4 <__malloc_unlock>
    6036:	4627      	mov	r7, r4
    6038:	e74f      	b.n	5eda <_realloc_r+0xea>
    603a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    603e:	f023 0303 	bic.w	r3, r3, #3
    6042:	441e      	add	r6, r3
    6044:	e751      	b.n	5eea <_realloc_r+0xfa>
    6046:	4657      	mov	r7, sl
    6048:	f8da 100c 	ldr.w	r1, [sl, #12]
    604c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    6050:	1f32      	subs	r2, r6, #4
    6052:	2a24      	cmp	r2, #36	; 0x24
    6054:	60c1      	str	r1, [r0, #12]
    6056:	6088      	str	r0, [r1, #8]
    6058:	d84c      	bhi.n	60f4 <_realloc_r+0x304>
    605a:	2a13      	cmp	r2, #19
    605c:	d948      	bls.n	60f0 <_realloc_r+0x300>
    605e:	6821      	ldr	r1, [r4, #0]
    6060:	f8ca 1008 	str.w	r1, [sl, #8]
    6064:	6861      	ldr	r1, [r4, #4]
    6066:	f8ca 100c 	str.w	r1, [sl, #12]
    606a:	2a1b      	cmp	r2, #27
    606c:	d856      	bhi.n	611c <_realloc_r+0x32c>
    606e:	3408      	adds	r4, #8
    6070:	f10a 0210 	add.w	r2, sl, #16
    6074:	461e      	mov	r6, r3
    6076:	6823      	ldr	r3, [r4, #0]
    6078:	6013      	str	r3, [r2, #0]
    607a:	6863      	ldr	r3, [r4, #4]
    607c:	6053      	str	r3, [r2, #4]
    607e:	68a3      	ldr	r3, [r4, #8]
    6080:	6093      	str	r3, [r2, #8]
    6082:	46d1      	mov	r9, sl
    6084:	463c      	mov	r4, r7
    6086:	e730      	b.n	5eea <_realloc_r+0xfa>
    6088:	4621      	mov	r1, r4
    608a:	f000 fa2d 	bl	64e8 <memmove>
    608e:	e711      	b.n	5eb4 <_realloc_r+0xc4>
    6090:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    6094:	4657      	mov	r7, sl
    6096:	60cb      	str	r3, [r1, #12]
    6098:	6099      	str	r1, [r3, #8]
    609a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    609e:	f8da 300c 	ldr.w	r3, [sl, #12]
    60a2:	60cb      	str	r3, [r1, #12]
    60a4:	1f32      	subs	r2, r6, #4
    60a6:	2a24      	cmp	r2, #36	; 0x24
    60a8:	6099      	str	r1, [r3, #8]
    60aa:	d82d      	bhi.n	6108 <_realloc_r+0x318>
    60ac:	2a13      	cmp	r2, #19
    60ae:	d929      	bls.n	6104 <_realloc_r+0x314>
    60b0:	6823      	ldr	r3, [r4, #0]
    60b2:	f8ca 3008 	str.w	r3, [sl, #8]
    60b6:	6863      	ldr	r3, [r4, #4]
    60b8:	f8ca 300c 	str.w	r3, [sl, #12]
    60bc:	2a1b      	cmp	r2, #27
    60be:	d842      	bhi.n	6146 <_realloc_r+0x356>
    60c0:	3408      	adds	r4, #8
    60c2:	f10a 0310 	add.w	r3, sl, #16
    60c6:	6822      	ldr	r2, [r4, #0]
    60c8:	601a      	str	r2, [r3, #0]
    60ca:	6862      	ldr	r2, [r4, #4]
    60cc:	605a      	str	r2, [r3, #4]
    60ce:	68a2      	ldr	r2, [r4, #8]
    60d0:	609a      	str	r2, [r3, #8]
    60d2:	4666      	mov	r6, ip
    60d4:	46d1      	mov	r9, sl
    60d6:	463c      	mov	r4, r7
    60d8:	e707      	b.n	5eea <_realloc_r+0xfa>
    60da:	68a3      	ldr	r3, [r4, #8]
    60dc:	6083      	str	r3, [r0, #8]
    60de:	68e3      	ldr	r3, [r4, #12]
    60e0:	60c3      	str	r3, [r0, #12]
    60e2:	2a24      	cmp	r2, #36	; 0x24
    60e4:	d026      	beq.n	6134 <_realloc_r+0x344>
    60e6:	f104 0210 	add.w	r2, r4, #16
    60ea:	f100 0310 	add.w	r3, r0, #16
    60ee:	e6db      	b.n	5ea8 <_realloc_r+0xb8>
    60f0:	463a      	mov	r2, r7
    60f2:	e7bf      	b.n	6074 <_realloc_r+0x284>
    60f4:	4621      	mov	r1, r4
    60f6:	4638      	mov	r0, r7
    60f8:	461e      	mov	r6, r3
    60fa:	46d1      	mov	r9, sl
    60fc:	f000 f9f4 	bl	64e8 <memmove>
    6100:	463c      	mov	r4, r7
    6102:	e6f2      	b.n	5eea <_realloc_r+0xfa>
    6104:	463b      	mov	r3, r7
    6106:	e7de      	b.n	60c6 <_realloc_r+0x2d6>
    6108:	4621      	mov	r1, r4
    610a:	4638      	mov	r0, r7
    610c:	4666      	mov	r6, ip
    610e:	46d1      	mov	r9, sl
    6110:	f000 f9ea 	bl	64e8 <memmove>
    6114:	463c      	mov	r4, r7
    6116:	e6e8      	b.n	5eea <_realloc_r+0xfa>
    6118:	1fff0814 	.word	0x1fff0814
    611c:	68a1      	ldr	r1, [r4, #8]
    611e:	f8ca 1010 	str.w	r1, [sl, #16]
    6122:	68e1      	ldr	r1, [r4, #12]
    6124:	f8ca 1014 	str.w	r1, [sl, #20]
    6128:	2a24      	cmp	r2, #36	; 0x24
    612a:	d020      	beq.n	616e <_realloc_r+0x37e>
    612c:	3410      	adds	r4, #16
    612e:	f10a 0218 	add.w	r2, sl, #24
    6132:	e79f      	b.n	6074 <_realloc_r+0x284>
    6134:	6923      	ldr	r3, [r4, #16]
    6136:	6103      	str	r3, [r0, #16]
    6138:	6961      	ldr	r1, [r4, #20]
    613a:	6141      	str	r1, [r0, #20]
    613c:	f104 0218 	add.w	r2, r4, #24
    6140:	f100 0318 	add.w	r3, r0, #24
    6144:	e6b0      	b.n	5ea8 <_realloc_r+0xb8>
    6146:	68a3      	ldr	r3, [r4, #8]
    6148:	f8ca 3010 	str.w	r3, [sl, #16]
    614c:	68e3      	ldr	r3, [r4, #12]
    614e:	f8ca 3014 	str.w	r3, [sl, #20]
    6152:	2a24      	cmp	r2, #36	; 0x24
    6154:	d021      	beq.n	619a <_realloc_r+0x3aa>
    6156:	3410      	adds	r4, #16
    6158:	f10a 0318 	add.w	r3, sl, #24
    615c:	e7b3      	b.n	60c6 <_realloc_r+0x2d6>
    615e:	463a      	mov	r2, r7
    6160:	e733      	b.n	5fca <_realloc_r+0x1da>
    6162:	4621      	mov	r1, r4
    6164:	4638      	mov	r0, r7
    6166:	f000 f9bf 	bl	64e8 <memmove>
    616a:	4b16      	ldr	r3, [pc, #88]	; (61c4 <_realloc_r+0x3d4>)
    616c:	e733      	b.n	5fd6 <_realloc_r+0x1e6>
    616e:	6922      	ldr	r2, [r4, #16]
    6170:	f8ca 2018 	str.w	r2, [sl, #24]
    6174:	6962      	ldr	r2, [r4, #20]
    6176:	f8ca 201c 	str.w	r2, [sl, #28]
    617a:	3418      	adds	r4, #24
    617c:	f10a 0220 	add.w	r2, sl, #32
    6180:	e778      	b.n	6074 <_realloc_r+0x284>
    6182:	68a1      	ldr	r1, [r4, #8]
    6184:	f8ca 1010 	str.w	r1, [sl, #16]
    6188:	68e1      	ldr	r1, [r4, #12]
    618a:	f8ca 1014 	str.w	r1, [sl, #20]
    618e:	2a24      	cmp	r2, #36	; 0x24
    6190:	d00d      	beq.n	61ae <_realloc_r+0x3be>
    6192:	3410      	adds	r4, #16
    6194:	f10a 0218 	add.w	r2, sl, #24
    6198:	e717      	b.n	5fca <_realloc_r+0x1da>
    619a:	6923      	ldr	r3, [r4, #16]
    619c:	f8ca 3018 	str.w	r3, [sl, #24]
    61a0:	6963      	ldr	r3, [r4, #20]
    61a2:	f8ca 301c 	str.w	r3, [sl, #28]
    61a6:	3418      	adds	r4, #24
    61a8:	f10a 0320 	add.w	r3, sl, #32
    61ac:	e78b      	b.n	60c6 <_realloc_r+0x2d6>
    61ae:	6922      	ldr	r2, [r4, #16]
    61b0:	f8ca 2018 	str.w	r2, [sl, #24]
    61b4:	6962      	ldr	r2, [r4, #20]
    61b6:	f8ca 201c 	str.w	r2, [sl, #28]
    61ba:	3418      	adds	r4, #24
    61bc:	f10a 0220 	add.w	r2, sl, #32
    61c0:	e703      	b.n	5fca <_realloc_r+0x1da>
    61c2:	bf00      	nop
    61c4:	1fff0814 	.word	0x1fff0814

000061c8 <stdio_exit_handler>:
    61c8:	4a02      	ldr	r2, [pc, #8]	; (61d4 <stdio_exit_handler+0xc>)
    61ca:	4903      	ldr	r1, [pc, #12]	; (61d8 <stdio_exit_handler+0x10>)
    61cc:	4803      	ldr	r0, [pc, #12]	; (61dc <stdio_exit_handler+0x14>)
    61ce:	f000 b8bb 	b.w	6348 <_fwalk_sglue>
    61d2:	bf00      	nop
    61d4:	1fff0c24 	.word	0x1fff0c24
    61d8:	00008f89 	.word	0x00008f89
    61dc:	1fff0da0 	.word	0x1fff0da0

000061e0 <cleanup_stdio>:
    61e0:	4b0c      	ldr	r3, [pc, #48]	; (6214 <cleanup_stdio+0x34>)
    61e2:	6841      	ldr	r1, [r0, #4]
    61e4:	4299      	cmp	r1, r3
    61e6:	b510      	push	{r4, lr}
    61e8:	4604      	mov	r4, r0
    61ea:	d001      	beq.n	61f0 <cleanup_stdio+0x10>
    61ec:	f002 fecc 	bl	8f88 <_fclose_r>
    61f0:	68a1      	ldr	r1, [r4, #8]
    61f2:	4b09      	ldr	r3, [pc, #36]	; (6218 <cleanup_stdio+0x38>)
    61f4:	4299      	cmp	r1, r3
    61f6:	d002      	beq.n	61fe <cleanup_stdio+0x1e>
    61f8:	4620      	mov	r0, r4
    61fa:	f002 fec5 	bl	8f88 <_fclose_r>
    61fe:	68e1      	ldr	r1, [r4, #12]
    6200:	4b06      	ldr	r3, [pc, #24]	; (621c <cleanup_stdio+0x3c>)
    6202:	4299      	cmp	r1, r3
    6204:	d004      	beq.n	6210 <cleanup_stdio+0x30>
    6206:	4620      	mov	r0, r4
    6208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    620c:	f002 bebc 	b.w	8f88 <_fclose_r>
    6210:	bd10      	pop	{r4, pc}
    6212:	bf00      	nop
    6214:	1fff6298 	.word	0x1fff6298
    6218:	1fff6300 	.word	0x1fff6300
    621c:	1fff6368 	.word	0x1fff6368

00006220 <global_stdio_init.part.0>:
    6220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6224:	4c2a      	ldr	r4, [pc, #168]	; (62d0 <global_stdio_init.part.0+0xb0>)
    6226:	4b2b      	ldr	r3, [pc, #172]	; (62d4 <global_stdio_init.part.0+0xb4>)
    6228:	482b      	ldr	r0, [pc, #172]	; (62d8 <global_stdio_init.part.0+0xb8>)
    622a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 62ec <global_stdio_init.part.0+0xcc>
    622e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 62f0 <global_stdio_init.part.0+0xd0>
    6232:	4f2a      	ldr	r7, [pc, #168]	; (62dc <global_stdio_init.part.0+0xbc>)
    6234:	6018      	str	r0, [r3, #0]
    6236:	2500      	movs	r5, #0
    6238:	2304      	movs	r3, #4
    623a:	2208      	movs	r2, #8
    623c:	4629      	mov	r1, r5
    623e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6242:	4e27      	ldr	r6, [pc, #156]	; (62e0 <global_stdio_init.part.0+0xc0>)
    6244:	6665      	str	r5, [r4, #100]	; 0x64
    6246:	e9c4 5302 	strd	r5, r3, [r4, #8]
    624a:	e9c4 5500 	strd	r5, r5, [r4]
    624e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    6252:	61a5      	str	r5, [r4, #24]
    6254:	f000 f9c4 	bl	65e0 <memset>
    6258:	4b22      	ldr	r3, [pc, #136]	; (62e4 <global_stdio_init.part.0+0xc4>)
    625a:	6763      	str	r3, [r4, #116]	; 0x74
    625c:	2208      	movs	r2, #8
    625e:	4629      	mov	r1, r5
    6260:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    6264:	e9c4 4907 	strd	r4, r9, [r4, #28]
    6268:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    626c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    6270:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    6274:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    6278:	6725      	str	r5, [r4, #112]	; 0x70
    627a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    627e:	62e6      	str	r6, [r4, #44]	; 0x2c
    6280:	f000 f9ae 	bl	65e0 <memset>
    6284:	4b18      	ldr	r3, [pc, #96]	; (62e8 <global_stdio_init.part.0+0xc8>)
    6286:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    628a:	4629      	mov	r1, r5
    628c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    6290:	2208      	movs	r2, #8
    6292:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    6296:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    629a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    629e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    62a2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    62a6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    62aa:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    62ae:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    62b2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    62b6:	f000 f993 	bl	65e0 <memset>
    62ba:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    62be:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    62c2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    62c6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    62ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    62ce:	bf00      	nop
    62d0:	1fff6298 	.word	0x1fff6298
    62d4:	1fff63d0 	.word	0x1fff63d0
    62d8:	000061c9 	.word	0x000061c9
    62dc:	000063f5 	.word	0x000063f5
    62e0:	00006415 	.word	0x00006415
    62e4:	00010009 	.word	0x00010009
    62e8:	00020012 	.word	0x00020012
    62ec:	00006391 	.word	0x00006391
    62f0:	000063b5 	.word	0x000063b5

000062f4 <__sinit>:
    62f4:	b510      	push	{r4, lr}
    62f6:	4604      	mov	r4, r0
    62f8:	480a      	ldr	r0, [pc, #40]	; (6324 <__sinit+0x30>)
    62fa:	f000 fa8f 	bl	681c <__retarget_lock_acquire_recursive>
    62fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6300:	b923      	cbnz	r3, 630c <__sinit+0x18>
    6302:	4b09      	ldr	r3, [pc, #36]	; (6328 <__sinit+0x34>)
    6304:	4a09      	ldr	r2, [pc, #36]	; (632c <__sinit+0x38>)
    6306:	681b      	ldr	r3, [r3, #0]
    6308:	6362      	str	r2, [r4, #52]	; 0x34
    630a:	b123      	cbz	r3, 6316 <__sinit+0x22>
    630c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6310:	4804      	ldr	r0, [pc, #16]	; (6324 <__sinit+0x30>)
    6312:	f000 ba85 	b.w	6820 <__retarget_lock_release_recursive>
    6316:	f7ff ff83 	bl	6220 <global_stdio_init.part.0>
    631a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    631e:	4801      	ldr	r0, [pc, #4]	; (6324 <__sinit+0x30>)
    6320:	f000 ba7e 	b.w	6820 <__retarget_lock_release_recursive>
    6324:	1fff63e0 	.word	0x1fff63e0
    6328:	1fff63d0 	.word	0x1fff63d0
    632c:	000061e1 	.word	0x000061e1

00006330 <__sfp_lock_acquire>:
    6330:	4801      	ldr	r0, [pc, #4]	; (6338 <__sfp_lock_acquire+0x8>)
    6332:	f000 ba73 	b.w	681c <__retarget_lock_acquire_recursive>
    6336:	bf00      	nop
    6338:	1fff63e0 	.word	0x1fff63e0

0000633c <__sfp_lock_release>:
    633c:	4801      	ldr	r0, [pc, #4]	; (6344 <__sfp_lock_release+0x8>)
    633e:	f000 ba6f 	b.w	6820 <__retarget_lock_release_recursive>
    6342:	bf00      	nop
    6344:	1fff63e0 	.word	0x1fff63e0

00006348 <_fwalk_sglue>:
    6348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    634c:	4680      	mov	r8, r0
    634e:	460f      	mov	r7, r1
    6350:	4616      	mov	r6, r2
    6352:	f04f 0900 	mov.w	r9, #0
    6356:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    635a:	3d01      	subs	r5, #1
    635c:	d411      	bmi.n	6382 <_fwalk_sglue+0x3a>
    635e:	89a3      	ldrh	r3, [r4, #12]
    6360:	2b01      	cmp	r3, #1
    6362:	f105 35ff 	add.w	r5, r5, #4294967295
    6366:	d908      	bls.n	637a <_fwalk_sglue+0x32>
    6368:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    636c:	3301      	adds	r3, #1
    636e:	4621      	mov	r1, r4
    6370:	d003      	beq.n	637a <_fwalk_sglue+0x32>
    6372:	4640      	mov	r0, r8
    6374:	47b8      	blx	r7
    6376:	ea49 0900 	orr.w	r9, r9, r0
    637a:	1c6b      	adds	r3, r5, #1
    637c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    6380:	d1ed      	bne.n	635e <_fwalk_sglue+0x16>
    6382:	6836      	ldr	r6, [r6, #0]
    6384:	2e00      	cmp	r6, #0
    6386:	d1e6      	bne.n	6356 <_fwalk_sglue+0xe>
    6388:	4648      	mov	r0, r9
    638a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    638e:	bf00      	nop

00006390 <__sread>:
    6390:	b510      	push	{r4, lr}
    6392:	460c      	mov	r4, r1
    6394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6398:	f000 f9d4 	bl	6744 <_read_r>
    639c:	2800      	cmp	r0, #0
    639e:	db03      	blt.n	63a8 <__sread+0x18>
    63a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    63a2:	4403      	add	r3, r0
    63a4:	6523      	str	r3, [r4, #80]	; 0x50
    63a6:	bd10      	pop	{r4, pc}
    63a8:	89a3      	ldrh	r3, [r4, #12]
    63aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    63ae:	81a3      	strh	r3, [r4, #12]
    63b0:	bd10      	pop	{r4, pc}
    63b2:	bf00      	nop

000063b4 <__swrite>:
    63b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63b8:	460c      	mov	r4, r1
    63ba:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    63be:	461f      	mov	r7, r3
    63c0:	05cb      	lsls	r3, r1, #23
    63c2:	4605      	mov	r5, r0
    63c4:	4616      	mov	r6, r2
    63c6:	d40b      	bmi.n	63e0 <__swrite+0x2c>
    63c8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    63cc:	81a1      	strh	r1, [r4, #12]
    63ce:	463b      	mov	r3, r7
    63d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    63d4:	4632      	mov	r2, r6
    63d6:	4628      	mov	r0, r5
    63d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    63dc:	f000 b9da 	b.w	6794 <_write_r>
    63e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    63e4:	2302      	movs	r3, #2
    63e6:	2200      	movs	r2, #0
    63e8:	f000 f996 	bl	6718 <_lseek_r>
    63ec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    63f0:	e7ea      	b.n	63c8 <__swrite+0x14>
    63f2:	bf00      	nop

000063f4 <__sseek>:
    63f4:	b510      	push	{r4, lr}
    63f6:	460c      	mov	r4, r1
    63f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    63fc:	f000 f98c 	bl	6718 <_lseek_r>
    6400:	89a3      	ldrh	r3, [r4, #12]
    6402:	1c42      	adds	r2, r0, #1
    6404:	bf0e      	itee	eq
    6406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    640a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    640e:	6520      	strne	r0, [r4, #80]	; 0x50
    6410:	81a3      	strh	r3, [r4, #12]
    6412:	bd10      	pop	{r4, pc}

00006414 <__sclose>:
    6414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6418:	f000 b96c 	b.w	66f4 <_close_r>

0000641c <_vdprintf_r>:
    641c:	b5f0      	push	{r4, r5, r6, r7, lr}
    641e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    6422:	af04      	add	r7, sp, #16
    6424:	9300      	str	r3, [sp, #0]
    6426:	4613      	mov	r3, r2
    6428:	f44f 7200 	mov.w	r2, #512	; 0x200
    642c:	460e      	mov	r6, r1
    642e:	9203      	str	r2, [sp, #12]
    6430:	4639      	mov	r1, r7
    6432:	aa03      	add	r2, sp, #12
    6434:	4605      	mov	r5, r0
    6436:	f000 f825 	bl	6484 <_vasnprintf_r>
    643a:	b188      	cbz	r0, 6460 <_vdprintf_r+0x44>
    643c:	4604      	mov	r4, r0
    643e:	4602      	mov	r2, r0
    6440:	9b03      	ldr	r3, [sp, #12]
    6442:	4631      	mov	r1, r6
    6444:	4628      	mov	r0, r5
    6446:	f000 f9a5 	bl	6794 <_write_r>
    644a:	42bc      	cmp	r4, r7
    644c:	9003      	str	r0, [sp, #12]
    644e:	d004      	beq.n	645a <_vdprintf_r+0x3e>
    6450:	4628      	mov	r0, r5
    6452:	4621      	mov	r1, r4
    6454:	f000 fac2 	bl	69dc <_free_r>
    6458:	9803      	ldr	r0, [sp, #12]
    645a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    645e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6460:	f04f 30ff 	mov.w	r0, #4294967295
    6464:	e7f9      	b.n	645a <_vdprintf_r+0x3e>
    6466:	bf00      	nop

00006468 <vdprintf>:
    6468:	b410      	push	{r4}
    646a:	4c05      	ldr	r4, [pc, #20]	; (6480 <vdprintf+0x18>)
    646c:	4684      	mov	ip, r0
    646e:	4613      	mov	r3, r2
    6470:	6820      	ldr	r0, [r4, #0]
    6472:	f85d 4b04 	ldr.w	r4, [sp], #4
    6476:	460a      	mov	r2, r1
    6478:	4661      	mov	r1, ip
    647a:	f7ff bfcf 	b.w	641c <_vdprintf_r>
    647e:	bf00      	nop
    6480:	1fff0ec0 	.word	0x1fff0ec0

00006484 <_vasnprintf_r>:
    6484:	b530      	push	{r4, r5, lr}
    6486:	6814      	ldr	r4, [r2, #0]
    6488:	4615      	mov	r5, r2
    648a:	b09b      	sub	sp, #108	; 0x6c
    648c:	461a      	mov	r2, r3
    648e:	b109      	cbz	r1, 6494 <_vasnprintf_r+0x10>
    6490:	2c00      	cmp	r4, #0
    6492:	d119      	bne.n	64c8 <_vasnprintf_r+0x44>
    6494:	2100      	movs	r1, #0
    6496:	f44f 7322 	mov.w	r3, #648	; 0x288
    649a:	f8ad 300c 	strh.w	r3, [sp, #12]
    649e:	9100      	str	r1, [sp, #0]
    64a0:	9104      	str	r1, [sp, #16]
    64a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    64a6:	9102      	str	r1, [sp, #8]
    64a8:	9105      	str	r1, [sp, #20]
    64aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    64ae:	4669      	mov	r1, sp
    64b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    64b2:	f000 ff79 	bl	73a8 <_svfprintf_r>
    64b6:	2800      	cmp	r0, #0
    64b8:	db13      	blt.n	64e2 <_vasnprintf_r+0x5e>
    64ba:	9b00      	ldr	r3, [sp, #0]
    64bc:	6028      	str	r0, [r5, #0]
    64be:	2200      	movs	r2, #0
    64c0:	701a      	strb	r2, [r3, #0]
    64c2:	9804      	ldr	r0, [sp, #16]
    64c4:	b01b      	add	sp, #108	; 0x6c
    64c6:	bd30      	pop	{r4, r5, pc}
    64c8:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    64cc:	9100      	str	r1, [sp, #0]
    64ce:	9104      	str	r1, [sp, #16]
    64d0:	f8ad 300c 	strh.w	r3, [sp, #12]
    64d4:	4621      	mov	r1, r4
    64d6:	dae4      	bge.n	64a2 <_vasnprintf_r+0x1e>
    64d8:	238b      	movs	r3, #139	; 0x8b
    64da:	6003      	str	r3, [r0, #0]
    64dc:	2000      	movs	r0, #0
    64de:	b01b      	add	sp, #108	; 0x6c
    64e0:	bd30      	pop	{r4, r5, pc}
    64e2:	2000      	movs	r0, #0
    64e4:	e7ee      	b.n	64c4 <_vasnprintf_r+0x40>
    64e6:	bf00      	nop

000064e8 <memmove>:
    64e8:	4288      	cmp	r0, r1
    64ea:	d90d      	bls.n	6508 <memmove+0x20>
    64ec:	188b      	adds	r3, r1, r2
    64ee:	4283      	cmp	r3, r0
    64f0:	d90a      	bls.n	6508 <memmove+0x20>
    64f2:	eb00 0c02 	add.w	ip, r0, r2
    64f6:	b1ba      	cbz	r2, 6528 <memmove+0x40>
    64f8:	4662      	mov	r2, ip
    64fa:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    64fe:	f802 cd01 	strb.w	ip, [r2, #-1]!
    6502:	4299      	cmp	r1, r3
    6504:	d1f9      	bne.n	64fa <memmove+0x12>
    6506:	4770      	bx	lr
    6508:	2a0f      	cmp	r2, #15
    650a:	d80e      	bhi.n	652a <memmove+0x42>
    650c:	4603      	mov	r3, r0
    650e:	f102 3cff 	add.w	ip, r2, #4294967295
    6512:	b14a      	cbz	r2, 6528 <memmove+0x40>
    6514:	f10c 0c01 	add.w	ip, ip, #1
    6518:	3b01      	subs	r3, #1
    651a:	448c      	add	ip, r1
    651c:	f811 2b01 	ldrb.w	r2, [r1], #1
    6520:	f803 2f01 	strb.w	r2, [r3, #1]!
    6524:	4561      	cmp	r1, ip
    6526:	d1f9      	bne.n	651c <memmove+0x34>
    6528:	4770      	bx	lr
    652a:	ea40 0301 	orr.w	r3, r0, r1
    652e:	079b      	lsls	r3, r3, #30
    6530:	d150      	bne.n	65d4 <memmove+0xec>
    6532:	f1a2 0310 	sub.w	r3, r2, #16
    6536:	b570      	push	{r4, r5, r6, lr}
    6538:	f101 0c20 	add.w	ip, r1, #32
    653c:	f023 050f 	bic.w	r5, r3, #15
    6540:	f101 0e10 	add.w	lr, r1, #16
    6544:	f100 0410 	add.w	r4, r0, #16
    6548:	44ac      	add	ip, r5
    654a:	091b      	lsrs	r3, r3, #4
    654c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    6550:	f844 5c10 	str.w	r5, [r4, #-16]
    6554:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    6558:	f844 5c0c 	str.w	r5, [r4, #-12]
    655c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    6560:	f844 5c08 	str.w	r5, [r4, #-8]
    6564:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    6568:	f844 5c04 	str.w	r5, [r4, #-4]
    656c:	f10e 0e10 	add.w	lr, lr, #16
    6570:	45e6      	cmp	lr, ip
    6572:	f104 0410 	add.w	r4, r4, #16
    6576:	d1e9      	bne.n	654c <memmove+0x64>
    6578:	3301      	adds	r3, #1
    657a:	f012 0f0c 	tst.w	r2, #12
    657e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    6582:	f002 040f 	and.w	r4, r2, #15
    6586:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    658a:	d027      	beq.n	65dc <memmove+0xf4>
    658c:	3c04      	subs	r4, #4
    658e:	f024 0603 	bic.w	r6, r4, #3
    6592:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    6596:	441e      	add	r6, r3
    6598:	1f1c      	subs	r4, r3, #4
    659a:	468e      	mov	lr, r1
    659c:	f85e 5b04 	ldr.w	r5, [lr], #4
    65a0:	f844 5f04 	str.w	r5, [r4, #4]!
    65a4:	42b4      	cmp	r4, r6
    65a6:	d1f9      	bne.n	659c <memmove+0xb4>
    65a8:	f10c 0401 	add.w	r4, ip, #1
    65ac:	f002 0203 	and.w	r2, r2, #3
    65b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    65b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    65b8:	f102 3cff 	add.w	ip, r2, #4294967295
    65bc:	b14a      	cbz	r2, 65d2 <memmove+0xea>
    65be:	f10c 0c01 	add.w	ip, ip, #1
    65c2:	3b01      	subs	r3, #1
    65c4:	448c      	add	ip, r1
    65c6:	f811 2b01 	ldrb.w	r2, [r1], #1
    65ca:	f803 2f01 	strb.w	r2, [r3, #1]!
    65ce:	4561      	cmp	r1, ip
    65d0:	d1f9      	bne.n	65c6 <memmove+0xde>
    65d2:	bd70      	pop	{r4, r5, r6, pc}
    65d4:	f102 3cff 	add.w	ip, r2, #4294967295
    65d8:	4603      	mov	r3, r0
    65da:	e79b      	b.n	6514 <memmove+0x2c>
    65dc:	4622      	mov	r2, r4
    65de:	e7eb      	b.n	65b8 <memmove+0xd0>

000065e0 <memset>:
    65e0:	0783      	lsls	r3, r0, #30
    65e2:	b530      	push	{r4, r5, lr}
    65e4:	d048      	beq.n	6678 <memset+0x98>
    65e6:	1e54      	subs	r4, r2, #1
    65e8:	2a00      	cmp	r2, #0
    65ea:	d03f      	beq.n	666c <memset+0x8c>
    65ec:	b2ca      	uxtb	r2, r1
    65ee:	4603      	mov	r3, r0
    65f0:	e001      	b.n	65f6 <memset+0x16>
    65f2:	3c01      	subs	r4, #1
    65f4:	d33a      	bcc.n	666c <memset+0x8c>
    65f6:	f803 2b01 	strb.w	r2, [r3], #1
    65fa:	079d      	lsls	r5, r3, #30
    65fc:	d1f9      	bne.n	65f2 <memset+0x12>
    65fe:	2c03      	cmp	r4, #3
    6600:	d92d      	bls.n	665e <memset+0x7e>
    6602:	b2cd      	uxtb	r5, r1
    6604:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    6608:	2c0f      	cmp	r4, #15
    660a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    660e:	d936      	bls.n	667e <memset+0x9e>
    6610:	f1a4 0210 	sub.w	r2, r4, #16
    6614:	f022 0c0f 	bic.w	ip, r2, #15
    6618:	f103 0e20 	add.w	lr, r3, #32
    661c:	44e6      	add	lr, ip
    661e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    6622:	f103 0210 	add.w	r2, r3, #16
    6626:	e942 5504 	strd	r5, r5, [r2, #-16]
    662a:	e942 5502 	strd	r5, r5, [r2, #-8]
    662e:	3210      	adds	r2, #16
    6630:	4572      	cmp	r2, lr
    6632:	d1f8      	bne.n	6626 <memset+0x46>
    6634:	f10c 0201 	add.w	r2, ip, #1
    6638:	f014 0f0c 	tst.w	r4, #12
    663c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    6640:	f004 0c0f 	and.w	ip, r4, #15
    6644:	d013      	beq.n	666e <memset+0x8e>
    6646:	f1ac 0304 	sub.w	r3, ip, #4
    664a:	f023 0303 	bic.w	r3, r3, #3
    664e:	3304      	adds	r3, #4
    6650:	4413      	add	r3, r2
    6652:	f842 5b04 	str.w	r5, [r2], #4
    6656:	4293      	cmp	r3, r2
    6658:	d1fb      	bne.n	6652 <memset+0x72>
    665a:	f00c 0403 	and.w	r4, ip, #3
    665e:	b12c      	cbz	r4, 666c <memset+0x8c>
    6660:	b2c9      	uxtb	r1, r1
    6662:	441c      	add	r4, r3
    6664:	f803 1b01 	strb.w	r1, [r3], #1
    6668:	429c      	cmp	r4, r3
    666a:	d1fb      	bne.n	6664 <memset+0x84>
    666c:	bd30      	pop	{r4, r5, pc}
    666e:	4664      	mov	r4, ip
    6670:	4613      	mov	r3, r2
    6672:	2c00      	cmp	r4, #0
    6674:	d1f4      	bne.n	6660 <memset+0x80>
    6676:	e7f9      	b.n	666c <memset+0x8c>
    6678:	4603      	mov	r3, r0
    667a:	4614      	mov	r4, r2
    667c:	e7bf      	b.n	65fe <memset+0x1e>
    667e:	461a      	mov	r2, r3
    6680:	46a4      	mov	ip, r4
    6682:	e7e0      	b.n	6646 <memset+0x66>

00006684 <strncpy>:
    6684:	ea40 0301 	orr.w	r3, r0, r1
    6688:	079b      	lsls	r3, r3, #30
    668a:	b530      	push	{r4, r5, lr}
    668c:	d101      	bne.n	6692 <strncpy+0xe>
    668e:	2a03      	cmp	r2, #3
    6690:	d80f      	bhi.n	66b2 <strncpy+0x2e>
    6692:	4684      	mov	ip, r0
    6694:	f101 3eff 	add.w	lr, r1, #4294967295
    6698:	e007      	b.n	66aa <strncpy+0x26>
    669a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    669e:	f803 1b01 	strb.w	r1, [r3], #1
    66a2:	1e54      	subs	r4, r2, #1
    66a4:	b1c1      	cbz	r1, 66d8 <strncpy+0x54>
    66a6:	469c      	mov	ip, r3
    66a8:	4622      	mov	r2, r4
    66aa:	4663      	mov	r3, ip
    66ac:	2a00      	cmp	r2, #0
    66ae:	d1f4      	bne.n	669a <strncpy+0x16>
    66b0:	bd30      	pop	{r4, r5, pc}
    66b2:	460b      	mov	r3, r1
    66b4:	4684      	mov	ip, r0
    66b6:	4619      	mov	r1, r3
    66b8:	f853 5b04 	ldr.w	r5, [r3], #4
    66bc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    66c0:	ea24 0405 	bic.w	r4, r4, r5
    66c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    66c8:	d1e4      	bne.n	6694 <strncpy+0x10>
    66ca:	3a04      	subs	r2, #4
    66cc:	2a03      	cmp	r2, #3
    66ce:	f84c 5b04 	str.w	r5, [ip], #4
    66d2:	4619      	mov	r1, r3
    66d4:	d8ef      	bhi.n	66b6 <strncpy+0x32>
    66d6:	e7dd      	b.n	6694 <strncpy+0x10>
    66d8:	4494      	add	ip, r2
    66da:	2c00      	cmp	r4, #0
    66dc:	d0e8      	beq.n	66b0 <strncpy+0x2c>
    66de:	f803 1b01 	strb.w	r1, [r3], #1
    66e2:	4563      	cmp	r3, ip
    66e4:	d1fb      	bne.n	66de <strncpy+0x5a>
    66e6:	bd30      	pop	{r4, r5, pc}

000066e8 <__locale_mb_cur_max>:
    66e8:	4b01      	ldr	r3, [pc, #4]	; (66f0 <__locale_mb_cur_max+0x8>)
    66ea:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    66ee:	4770      	bx	lr
    66f0:	1fff0c30 	.word	0x1fff0c30

000066f4 <_close_r>:
    66f4:	b538      	push	{r3, r4, r5, lr}
    66f6:	4d07      	ldr	r5, [pc, #28]	; (6714 <_close_r+0x20>)
    66f8:	2200      	movs	r2, #0
    66fa:	4604      	mov	r4, r0
    66fc:	4608      	mov	r0, r1
    66fe:	602a      	str	r2, [r5, #0]
    6700:	f7fd fd14 	bl	412c <_close>
    6704:	1c43      	adds	r3, r0, #1
    6706:	d000      	beq.n	670a <_close_r+0x16>
    6708:	bd38      	pop	{r3, r4, r5, pc}
    670a:	682b      	ldr	r3, [r5, #0]
    670c:	2b00      	cmp	r3, #0
    670e:	d0fb      	beq.n	6708 <_close_r+0x14>
    6710:	6023      	str	r3, [r4, #0]
    6712:	bd38      	pop	{r3, r4, r5, pc}
    6714:	1fff63d4 	.word	0x1fff63d4

00006718 <_lseek_r>:
    6718:	b538      	push	{r3, r4, r5, lr}
    671a:	460c      	mov	r4, r1
    671c:	4d08      	ldr	r5, [pc, #32]	; (6740 <_lseek_r+0x28>)
    671e:	4684      	mov	ip, r0
    6720:	4611      	mov	r1, r2
    6722:	4620      	mov	r0, r4
    6724:	461a      	mov	r2, r3
    6726:	2300      	movs	r3, #0
    6728:	602b      	str	r3, [r5, #0]
    672a:	4664      	mov	r4, ip
    672c:	f7fd fd0a 	bl	4144 <_lseek>
    6730:	1c43      	adds	r3, r0, #1
    6732:	d000      	beq.n	6736 <_lseek_r+0x1e>
    6734:	bd38      	pop	{r3, r4, r5, pc}
    6736:	682b      	ldr	r3, [r5, #0]
    6738:	2b00      	cmp	r3, #0
    673a:	d0fb      	beq.n	6734 <_lseek_r+0x1c>
    673c:	6023      	str	r3, [r4, #0]
    673e:	bd38      	pop	{r3, r4, r5, pc}
    6740:	1fff63d4 	.word	0x1fff63d4

00006744 <_read_r>:
    6744:	b538      	push	{r3, r4, r5, lr}
    6746:	460c      	mov	r4, r1
    6748:	4d08      	ldr	r5, [pc, #32]	; (676c <_read_r+0x28>)
    674a:	4684      	mov	ip, r0
    674c:	4611      	mov	r1, r2
    674e:	4620      	mov	r0, r4
    6750:	461a      	mov	r2, r3
    6752:	2300      	movs	r3, #0
    6754:	602b      	str	r3, [r5, #0]
    6756:	4664      	mov	r4, ip
    6758:	f7fd fce6 	bl	4128 <_read>
    675c:	1c43      	adds	r3, r0, #1
    675e:	d000      	beq.n	6762 <_read_r+0x1e>
    6760:	bd38      	pop	{r3, r4, r5, pc}
    6762:	682b      	ldr	r3, [r5, #0]
    6764:	2b00      	cmp	r3, #0
    6766:	d0fb      	beq.n	6760 <_read_r+0x1c>
    6768:	6023      	str	r3, [r4, #0]
    676a:	bd38      	pop	{r3, r4, r5, pc}
    676c:	1fff63d4 	.word	0x1fff63d4

00006770 <_sbrk_r>:
    6770:	b538      	push	{r3, r4, r5, lr}
    6772:	4d07      	ldr	r5, [pc, #28]	; (6790 <_sbrk_r+0x20>)
    6774:	2200      	movs	r2, #0
    6776:	4604      	mov	r4, r0
    6778:	4608      	mov	r0, r1
    677a:	602a      	str	r2, [r5, #0]
    677c:	f7fd fcba 	bl	40f4 <_sbrk>
    6780:	1c43      	adds	r3, r0, #1
    6782:	d000      	beq.n	6786 <_sbrk_r+0x16>
    6784:	bd38      	pop	{r3, r4, r5, pc}
    6786:	682b      	ldr	r3, [r5, #0]
    6788:	2b00      	cmp	r3, #0
    678a:	d0fb      	beq.n	6784 <_sbrk_r+0x14>
    678c:	6023      	str	r3, [r4, #0]
    678e:	bd38      	pop	{r3, r4, r5, pc}
    6790:	1fff63d4 	.word	0x1fff63d4

00006794 <_write_r>:
    6794:	b538      	push	{r3, r4, r5, lr}
    6796:	460c      	mov	r4, r1
    6798:	4d08      	ldr	r5, [pc, #32]	; (67bc <_write_r+0x28>)
    679a:	4684      	mov	ip, r0
    679c:	4611      	mov	r1, r2
    679e:	4620      	mov	r0, r4
    67a0:	461a      	mov	r2, r3
    67a2:	2300      	movs	r3, #0
    67a4:	602b      	str	r3, [r5, #0]
    67a6:	4664      	mov	r4, ip
    67a8:	f7fd fb78 	bl	3e9c <_write>
    67ac:	1c43      	adds	r3, r0, #1
    67ae:	d000      	beq.n	67b2 <_write_r+0x1e>
    67b0:	bd38      	pop	{r3, r4, r5, pc}
    67b2:	682b      	ldr	r3, [r5, #0]
    67b4:	2b00      	cmp	r3, #0
    67b6:	d0fb      	beq.n	67b0 <_write_r+0x1c>
    67b8:	6023      	str	r3, [r4, #0]
    67ba:	bd38      	pop	{r3, r4, r5, pc}
    67bc:	1fff63d4 	.word	0x1fff63d4

000067c0 <__errno>:
    67c0:	4b01      	ldr	r3, [pc, #4]	; (67c8 <__errno+0x8>)
    67c2:	6818      	ldr	r0, [r3, #0]
    67c4:	4770      	bx	lr
    67c6:	bf00      	nop
    67c8:	1fff0ec0 	.word	0x1fff0ec0

000067cc <__libc_init_array>:
    67cc:	b570      	push	{r4, r5, r6, lr}
    67ce:	4e0d      	ldr	r6, [pc, #52]	; (6804 <__libc_init_array+0x38>)
    67d0:	4d0d      	ldr	r5, [pc, #52]	; (6808 <__libc_init_array+0x3c>)
    67d2:	1b76      	subs	r6, r6, r5
    67d4:	10b6      	asrs	r6, r6, #2
    67d6:	d006      	beq.n	67e6 <__libc_init_array+0x1a>
    67d8:	2400      	movs	r4, #0
    67da:	f855 3b04 	ldr.w	r3, [r5], #4
    67de:	3401      	adds	r4, #1
    67e0:	4798      	blx	r3
    67e2:	42a6      	cmp	r6, r4
    67e4:	d1f9      	bne.n	67da <__libc_init_array+0xe>
    67e6:	4e09      	ldr	r6, [pc, #36]	; (680c <__libc_init_array+0x40>)
    67e8:	4d09      	ldr	r5, [pc, #36]	; (6810 <__libc_init_array+0x44>)
    67ea:	1b76      	subs	r6, r6, r5
    67ec:	f006 fa1a 	bl	cc24 <_init>
    67f0:	10b6      	asrs	r6, r6, #2
    67f2:	d006      	beq.n	6802 <__libc_init_array+0x36>
    67f4:	2400      	movs	r4, #0
    67f6:	f855 3b04 	ldr.w	r3, [r5], #4
    67fa:	3401      	adds	r4, #1
    67fc:	4798      	blx	r3
    67fe:	42a6      	cmp	r6, r4
    6800:	d1f9      	bne.n	67f6 <__libc_init_array+0x2a>
    6802:	bd70      	pop	{r4, r5, r6, pc}
    6804:	0000cc30 	.word	0x0000cc30
    6808:	0000cc30 	.word	0x0000cc30
    680c:	0000cc3c 	.word	0x0000cc3c
    6810:	0000cc30 	.word	0x0000cc30

00006814 <__retarget_lock_init_recursive>:
    6814:	4770      	bx	lr
    6816:	bf00      	nop

00006818 <__retarget_lock_close_recursive>:
    6818:	4770      	bx	lr
    681a:	bf00      	nop

0000681c <__retarget_lock_acquire_recursive>:
    681c:	4770      	bx	lr
    681e:	bf00      	nop

00006820 <__retarget_lock_release_recursive>:
    6820:	4770      	bx	lr
    6822:	bf00      	nop
    6824:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6828:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    682c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6830:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6834:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6838:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    683c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00006840 <strlen>:
    6840:	f890 f000 	pld	[r0]
    6844:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    6848:	f020 0107 	bic.w	r1, r0, #7
    684c:	f06f 0c00 	mvn.w	ip, #0
    6850:	f010 0407 	ands.w	r4, r0, #7
    6854:	f891 f020 	pld	[r1, #32]
    6858:	f040 8049 	bne.w	68ee <strlen+0xae>
    685c:	f04f 0400 	mov.w	r4, #0
    6860:	f06f 0007 	mvn.w	r0, #7
    6864:	e9d1 2300 	ldrd	r2, r3, [r1]
    6868:	f891 f040 	pld	[r1, #64]	; 0x40
    686c:	f100 0008 	add.w	r0, r0, #8
    6870:	fa82 f24c 	uadd8	r2, r2, ip
    6874:	faa4 f28c 	sel	r2, r4, ip
    6878:	fa83 f34c 	uadd8	r3, r3, ip
    687c:	faa2 f38c 	sel	r3, r2, ip
    6880:	bb4b      	cbnz	r3, 68d6 <strlen+0x96>
    6882:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    6886:	fa82 f24c 	uadd8	r2, r2, ip
    688a:	f100 0008 	add.w	r0, r0, #8
    688e:	faa4 f28c 	sel	r2, r4, ip
    6892:	fa83 f34c 	uadd8	r3, r3, ip
    6896:	faa2 f38c 	sel	r3, r2, ip
    689a:	b9e3      	cbnz	r3, 68d6 <strlen+0x96>
    689c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    68a0:	fa82 f24c 	uadd8	r2, r2, ip
    68a4:	f100 0008 	add.w	r0, r0, #8
    68a8:	faa4 f28c 	sel	r2, r4, ip
    68ac:	fa83 f34c 	uadd8	r3, r3, ip
    68b0:	faa2 f38c 	sel	r3, r2, ip
    68b4:	b97b      	cbnz	r3, 68d6 <strlen+0x96>
    68b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    68ba:	f101 0120 	add.w	r1, r1, #32
    68be:	fa82 f24c 	uadd8	r2, r2, ip
    68c2:	f100 0008 	add.w	r0, r0, #8
    68c6:	faa4 f28c 	sel	r2, r4, ip
    68ca:	fa83 f34c 	uadd8	r3, r3, ip
    68ce:	faa2 f38c 	sel	r3, r2, ip
    68d2:	2b00      	cmp	r3, #0
    68d4:	d0c6      	beq.n	6864 <strlen+0x24>
    68d6:	2a00      	cmp	r2, #0
    68d8:	bf04      	itt	eq
    68da:	3004      	addeq	r0, #4
    68dc:	461a      	moveq	r2, r3
    68de:	ba12      	rev	r2, r2
    68e0:	fab2 f282 	clz	r2, r2
    68e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    68e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    68ec:	4770      	bx	lr
    68ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    68f2:	f004 0503 	and.w	r5, r4, #3
    68f6:	f1c4 0000 	rsb	r0, r4, #0
    68fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    68fe:	f014 0f04 	tst.w	r4, #4
    6902:	f891 f040 	pld	[r1, #64]	; 0x40
    6906:	fa0c f505 	lsl.w	r5, ip, r5
    690a:	ea62 0205 	orn	r2, r2, r5
    690e:	bf1c      	itt	ne
    6910:	ea63 0305 	ornne	r3, r3, r5
    6914:	4662      	movne	r2, ip
    6916:	f04f 0400 	mov.w	r4, #0
    691a:	e7a9      	b.n	6870 <strlen+0x30>

0000691c <register_fini>:
    691c:	4b02      	ldr	r3, [pc, #8]	; (6928 <register_fini+0xc>)
    691e:	b113      	cbz	r3, 6926 <register_fini+0xa>
    6920:	4802      	ldr	r0, [pc, #8]	; (692c <register_fini+0x10>)
    6922:	f000 b805 	b.w	6930 <atexit>
    6926:	4770      	bx	lr
    6928:	00000000 	.word	0x00000000
    692c:	000091dd 	.word	0x000091dd

00006930 <atexit>:
    6930:	2300      	movs	r3, #0
    6932:	4601      	mov	r1, r0
    6934:	461a      	mov	r2, r3
    6936:	4618      	mov	r0, r3
    6938:	f002 bcf0 	b.w	931c <__register_exitproc>

0000693c <_malloc_trim_r>:
    693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    693e:	4f24      	ldr	r7, [pc, #144]	; (69d0 <_malloc_trim_r+0x94>)
    6940:	460c      	mov	r4, r1
    6942:	4606      	mov	r6, r0
    6944:	f7ff fa48 	bl	5dd8 <__malloc_lock>
    6948:	68bb      	ldr	r3, [r7, #8]
    694a:	685d      	ldr	r5, [r3, #4]
    694c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    6950:	310f      	adds	r1, #15
    6952:	f025 0503 	bic.w	r5, r5, #3
    6956:	194b      	adds	r3, r1, r5
    6958:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    695c:	f023 030f 	bic.w	r3, r3, #15
    6960:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    6964:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    6968:	db07      	blt.n	697a <_malloc_trim_r+0x3e>
    696a:	2100      	movs	r1, #0
    696c:	4630      	mov	r0, r6
    696e:	f7ff feff 	bl	6770 <_sbrk_r>
    6972:	68bb      	ldr	r3, [r7, #8]
    6974:	442b      	add	r3, r5
    6976:	4298      	cmp	r0, r3
    6978:	d004      	beq.n	6984 <_malloc_trim_r+0x48>
    697a:	4630      	mov	r0, r6
    697c:	f7ff fa32 	bl	5de4 <__malloc_unlock>
    6980:	2000      	movs	r0, #0
    6982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6984:	4261      	negs	r1, r4
    6986:	4630      	mov	r0, r6
    6988:	f7ff fef2 	bl	6770 <_sbrk_r>
    698c:	3001      	adds	r0, #1
    698e:	d00d      	beq.n	69ac <_malloc_trim_r+0x70>
    6990:	4a10      	ldr	r2, [pc, #64]	; (69d4 <_malloc_trim_r+0x98>)
    6992:	68bb      	ldr	r3, [r7, #8]
    6994:	1b2d      	subs	r5, r5, r4
    6996:	f045 0501 	orr.w	r5, r5, #1
    699a:	605d      	str	r5, [r3, #4]
    699c:	6813      	ldr	r3, [r2, #0]
    699e:	4630      	mov	r0, r6
    69a0:	1b1b      	subs	r3, r3, r4
    69a2:	6013      	str	r3, [r2, #0]
    69a4:	f7ff fa1e 	bl	5de4 <__malloc_unlock>
    69a8:	2001      	movs	r0, #1
    69aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69ac:	2100      	movs	r1, #0
    69ae:	4630      	mov	r0, r6
    69b0:	f7ff fede 	bl	6770 <_sbrk_r>
    69b4:	68ba      	ldr	r2, [r7, #8]
    69b6:	1a83      	subs	r3, r0, r2
    69b8:	2b0f      	cmp	r3, #15
    69ba:	ddde      	ble.n	697a <_malloc_trim_r+0x3e>
    69bc:	f043 0301 	orr.w	r3, r3, #1
    69c0:	6053      	str	r3, [r2, #4]
    69c2:	4b05      	ldr	r3, [pc, #20]	; (69d8 <_malloc_trim_r+0x9c>)
    69c4:	4903      	ldr	r1, [pc, #12]	; (69d4 <_malloc_trim_r+0x98>)
    69c6:	681b      	ldr	r3, [r3, #0]
    69c8:	1ac0      	subs	r0, r0, r3
    69ca:	6008      	str	r0, [r1, #0]
    69cc:	e7d5      	b.n	697a <_malloc_trim_r+0x3e>
    69ce:	bf00      	nop
    69d0:	1fff0814 	.word	0x1fff0814
    69d4:	1fff6264 	.word	0x1fff6264
    69d8:	1fff0c1c 	.word	0x1fff0c1c

000069dc <_free_r>:
    69dc:	2900      	cmp	r1, #0
    69de:	d061      	beq.n	6aa4 <_free_r+0xc8>
    69e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69e2:	460c      	mov	r4, r1
    69e4:	4606      	mov	r6, r0
    69e6:	f7ff f9f7 	bl	5dd8 <__malloc_lock>
    69ea:	f854 2c04 	ldr.w	r2, [r4, #-4]
    69ee:	4f7b      	ldr	r7, [pc, #492]	; (6bdc <_free_r+0x200>)
    69f0:	f1a4 0508 	sub.w	r5, r4, #8
    69f4:	f022 0101 	bic.w	r1, r2, #1
    69f8:	eb05 0c01 	add.w	ip, r5, r1
    69fc:	68b8      	ldr	r0, [r7, #8]
    69fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6a02:	4560      	cmp	r0, ip
    6a04:	f023 0303 	bic.w	r3, r3, #3
    6a08:	f000 808b 	beq.w	6b22 <_free_r+0x146>
    6a0c:	07d2      	lsls	r2, r2, #31
    6a0e:	f8cc 3004 	str.w	r3, [ip, #4]
    6a12:	d432      	bmi.n	6a7a <_free_r+0x9e>
    6a14:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6a18:	1aad      	subs	r5, r5, r2
    6a1a:	4411      	add	r1, r2
    6a1c:	68aa      	ldr	r2, [r5, #8]
    6a1e:	f107 0008 	add.w	r0, r7, #8
    6a22:	4282      	cmp	r2, r0
    6a24:	d06a      	beq.n	6afc <_free_r+0x120>
    6a26:	eb0c 0403 	add.w	r4, ip, r3
    6a2a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    6a2e:	68ec      	ldr	r4, [r5, #12]
    6a30:	60d4      	str	r4, [r2, #12]
    6a32:	f01e 0f01 	tst.w	lr, #1
    6a36:	60a2      	str	r2, [r4, #8]
    6a38:	f000 8097 	beq.w	6b6a <_free_r+0x18e>
    6a3c:	f041 0301 	orr.w	r3, r1, #1
    6a40:	606b      	str	r3, [r5, #4]
    6a42:	f8cc 1000 	str.w	r1, [ip]
    6a46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6a4a:	d235      	bcs.n	6ab8 <_free_r+0xdc>
    6a4c:	6878      	ldr	r0, [r7, #4]
    6a4e:	08cb      	lsrs	r3, r1, #3
    6a50:	2201      	movs	r2, #1
    6a52:	0949      	lsrs	r1, r1, #5
    6a54:	3301      	adds	r3, #1
    6a56:	408a      	lsls	r2, r1
    6a58:	4302      	orrs	r2, r0
    6a5a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    6a5e:	607a      	str	r2, [r7, #4]
    6a60:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    6a64:	3a08      	subs	r2, #8
    6a66:	e9c5 1202 	strd	r1, r2, [r5, #8]
    6a6a:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    6a6e:	60cd      	str	r5, [r1, #12]
    6a70:	4630      	mov	r0, r6
    6a72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6a76:	f7ff b9b5 	b.w	5de4 <__malloc_unlock>
    6a7a:	eb0c 0203 	add.w	r2, ip, r3
    6a7e:	6852      	ldr	r2, [r2, #4]
    6a80:	07d0      	lsls	r0, r2, #31
    6a82:	d410      	bmi.n	6aa6 <_free_r+0xca>
    6a84:	4419      	add	r1, r3
    6a86:	f107 0008 	add.w	r0, r7, #8
    6a8a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    6a8e:	4283      	cmp	r3, r0
    6a90:	d073      	beq.n	6b7a <_free_r+0x19e>
    6a92:	f8dc 200c 	ldr.w	r2, [ip, #12]
    6a96:	60da      	str	r2, [r3, #12]
    6a98:	6093      	str	r3, [r2, #8]
    6a9a:	f041 0301 	orr.w	r3, r1, #1
    6a9e:	606b      	str	r3, [r5, #4]
    6aa0:	5069      	str	r1, [r5, r1]
    6aa2:	e7d0      	b.n	6a46 <_free_r+0x6a>
    6aa4:	4770      	bx	lr
    6aa6:	f041 0301 	orr.w	r3, r1, #1
    6aaa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6aae:	f844 3c04 	str.w	r3, [r4, #-4]
    6ab2:	f8cc 1000 	str.w	r1, [ip]
    6ab6:	d3c9      	bcc.n	6a4c <_free_r+0x70>
    6ab8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    6abc:	ea4f 2351 	mov.w	r3, r1, lsr #9
    6ac0:	d248      	bcs.n	6b54 <_free_r+0x178>
    6ac2:	098b      	lsrs	r3, r1, #6
    6ac4:	f103 0039 	add.w	r0, r3, #57	; 0x39
    6ac8:	f103 0238 	add.w	r2, r3, #56	; 0x38
    6acc:	00c3      	lsls	r3, r0, #3
    6ace:	18f8      	adds	r0, r7, r3
    6ad0:	58fb      	ldr	r3, [r7, r3]
    6ad2:	3808      	subs	r0, #8
    6ad4:	4298      	cmp	r0, r3
    6ad6:	d059      	beq.n	6b8c <_free_r+0x1b0>
    6ad8:	685a      	ldr	r2, [r3, #4]
    6ada:	f022 0203 	bic.w	r2, r2, #3
    6ade:	428a      	cmp	r2, r1
    6ae0:	d902      	bls.n	6ae8 <_free_r+0x10c>
    6ae2:	689b      	ldr	r3, [r3, #8]
    6ae4:	4298      	cmp	r0, r3
    6ae6:	d1f7      	bne.n	6ad8 <_free_r+0xfc>
    6ae8:	68d8      	ldr	r0, [r3, #12]
    6aea:	e9c5 3002 	strd	r3, r0, [r5, #8]
    6aee:	6085      	str	r5, [r0, #8]
    6af0:	60dd      	str	r5, [r3, #12]
    6af2:	4630      	mov	r0, r6
    6af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6af8:	f7ff b974 	b.w	5de4 <__malloc_unlock>
    6afc:	eb0c 0203 	add.w	r2, ip, r3
    6b00:	6852      	ldr	r2, [r2, #4]
    6b02:	07d2      	lsls	r2, r2, #31
    6b04:	d463      	bmi.n	6bce <_free_r+0x1f2>
    6b06:	440b      	add	r3, r1
    6b08:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    6b0c:	60ca      	str	r2, [r1, #12]
    6b0e:	6091      	str	r1, [r2, #8]
    6b10:	f043 0201 	orr.w	r2, r3, #1
    6b14:	606a      	str	r2, [r5, #4]
    6b16:	4630      	mov	r0, r6
    6b18:	50eb      	str	r3, [r5, r3]
    6b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6b1e:	f7ff b961 	b.w	5de4 <__malloc_unlock>
    6b22:	440b      	add	r3, r1
    6b24:	07d1      	lsls	r1, r2, #31
    6b26:	d407      	bmi.n	6b38 <_free_r+0x15c>
    6b28:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6b2c:	1aad      	subs	r5, r5, r2
    6b2e:	4413      	add	r3, r2
    6b30:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    6b34:	60ca      	str	r2, [r1, #12]
    6b36:	6091      	str	r1, [r2, #8]
    6b38:	f043 0201 	orr.w	r2, r3, #1
    6b3c:	606a      	str	r2, [r5, #4]
    6b3e:	4a28      	ldr	r2, [pc, #160]	; (6be0 <_free_r+0x204>)
    6b40:	60bd      	str	r5, [r7, #8]
    6b42:	6812      	ldr	r2, [r2, #0]
    6b44:	429a      	cmp	r2, r3
    6b46:	d893      	bhi.n	6a70 <_free_r+0x94>
    6b48:	4b26      	ldr	r3, [pc, #152]	; (6be4 <_free_r+0x208>)
    6b4a:	4630      	mov	r0, r6
    6b4c:	6819      	ldr	r1, [r3, #0]
    6b4e:	f7ff fef5 	bl	693c <_malloc_trim_r>
    6b52:	e78d      	b.n	6a70 <_free_r+0x94>
    6b54:	2b14      	cmp	r3, #20
    6b56:	d90a      	bls.n	6b6e <_free_r+0x192>
    6b58:	2b54      	cmp	r3, #84	; 0x54
    6b5a:	d81f      	bhi.n	6b9c <_free_r+0x1c0>
    6b5c:	0b0b      	lsrs	r3, r1, #12
    6b5e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    6b62:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    6b66:	00c3      	lsls	r3, r0, #3
    6b68:	e7b1      	b.n	6ace <_free_r+0xf2>
    6b6a:	4419      	add	r1, r3
    6b6c:	e78d      	b.n	6a8a <_free_r+0xae>
    6b6e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    6b72:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    6b76:	00c3      	lsls	r3, r0, #3
    6b78:	e7a9      	b.n	6ace <_free_r+0xf2>
    6b7a:	f041 0301 	orr.w	r3, r1, #1
    6b7e:	e9c7 5504 	strd	r5, r5, [r7, #16]
    6b82:	e9c5 0002 	strd	r0, r0, [r5, #8]
    6b86:	606b      	str	r3, [r5, #4]
    6b88:	5069      	str	r1, [r5, r1]
    6b8a:	e771      	b.n	6a70 <_free_r+0x94>
    6b8c:	6879      	ldr	r1, [r7, #4]
    6b8e:	1092      	asrs	r2, r2, #2
    6b90:	2401      	movs	r4, #1
    6b92:	fa04 f202 	lsl.w	r2, r4, r2
    6b96:	430a      	orrs	r2, r1
    6b98:	607a      	str	r2, [r7, #4]
    6b9a:	e7a6      	b.n	6aea <_free_r+0x10e>
    6b9c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6ba0:	d806      	bhi.n	6bb0 <_free_r+0x1d4>
    6ba2:	0bcb      	lsrs	r3, r1, #15
    6ba4:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6ba8:	f103 0277 	add.w	r2, r3, #119	; 0x77
    6bac:	00c3      	lsls	r3, r0, #3
    6bae:	e78e      	b.n	6ace <_free_r+0xf2>
    6bb0:	f240 5254 	movw	r2, #1364	; 0x554
    6bb4:	4293      	cmp	r3, r2
    6bb6:	d806      	bhi.n	6bc6 <_free_r+0x1ea>
    6bb8:	0c8b      	lsrs	r3, r1, #18
    6bba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6bbe:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    6bc2:	00c3      	lsls	r3, r0, #3
    6bc4:	e783      	b.n	6ace <_free_r+0xf2>
    6bc6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6bca:	227e      	movs	r2, #126	; 0x7e
    6bcc:	e77f      	b.n	6ace <_free_r+0xf2>
    6bce:	f041 0301 	orr.w	r3, r1, #1
    6bd2:	606b      	str	r3, [r5, #4]
    6bd4:	f8cc 1000 	str.w	r1, [ip]
    6bd8:	e74a      	b.n	6a70 <_free_r+0x94>
    6bda:	bf00      	nop
    6bdc:	1fff0814 	.word	0x1fff0814
    6be0:	1fff0c20 	.word	0x1fff0c20
    6be4:	1fff6294 	.word	0x1fff6294

00006be8 <__ascii_mbtowc>:
    6be8:	b082      	sub	sp, #8
    6bea:	b149      	cbz	r1, 6c00 <__ascii_mbtowc+0x18>
    6bec:	b15a      	cbz	r2, 6c06 <__ascii_mbtowc+0x1e>
    6bee:	b16b      	cbz	r3, 6c0c <__ascii_mbtowc+0x24>
    6bf0:	7813      	ldrb	r3, [r2, #0]
    6bf2:	600b      	str	r3, [r1, #0]
    6bf4:	7812      	ldrb	r2, [r2, #0]
    6bf6:	1e10      	subs	r0, r2, #0
    6bf8:	bf18      	it	ne
    6bfa:	2001      	movne	r0, #1
    6bfc:	b002      	add	sp, #8
    6bfe:	4770      	bx	lr
    6c00:	a901      	add	r1, sp, #4
    6c02:	2a00      	cmp	r2, #0
    6c04:	d1f3      	bne.n	6bee <__ascii_mbtowc+0x6>
    6c06:	4610      	mov	r0, r2
    6c08:	b002      	add	sp, #8
    6c0a:	4770      	bx	lr
    6c0c:	f06f 0001 	mvn.w	r0, #1
    6c10:	e7f4      	b.n	6bfc <__ascii_mbtowc+0x14>
    6c12:	bf00      	nop

00006c14 <_Balloc>:
    6c14:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6c16:	b570      	push	{r4, r5, r6, lr}
    6c18:	4605      	mov	r5, r0
    6c1a:	460c      	mov	r4, r1
    6c1c:	b14b      	cbz	r3, 6c32 <_Balloc+0x1e>
    6c1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6c22:	b180      	cbz	r0, 6c46 <_Balloc+0x32>
    6c24:	6802      	ldr	r2, [r0, #0]
    6c26:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    6c2a:	2300      	movs	r3, #0
    6c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    6c30:	bd70      	pop	{r4, r5, r6, pc}
    6c32:	2221      	movs	r2, #33	; 0x21
    6c34:	2104      	movs	r1, #4
    6c36:	f002 fbd5 	bl	93e4 <_calloc_r>
    6c3a:	4603      	mov	r3, r0
    6c3c:	6468      	str	r0, [r5, #68]	; 0x44
    6c3e:	2800      	cmp	r0, #0
    6c40:	d1ed      	bne.n	6c1e <_Balloc+0xa>
    6c42:	2000      	movs	r0, #0
    6c44:	bd70      	pop	{r4, r5, r6, pc}
    6c46:	2101      	movs	r1, #1
    6c48:	fa01 f604 	lsl.w	r6, r1, r4
    6c4c:	1d72      	adds	r2, r6, #5
    6c4e:	0092      	lsls	r2, r2, #2
    6c50:	4628      	mov	r0, r5
    6c52:	f002 fbc7 	bl	93e4 <_calloc_r>
    6c56:	2800      	cmp	r0, #0
    6c58:	d0f3      	beq.n	6c42 <_Balloc+0x2e>
    6c5a:	e9c0 4601 	strd	r4, r6, [r0, #4]
    6c5e:	e7e4      	b.n	6c2a <_Balloc+0x16>

00006c60 <_Bfree>:
    6c60:	b131      	cbz	r1, 6c70 <_Bfree+0x10>
    6c62:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6c64:	684a      	ldr	r2, [r1, #4]
    6c66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6c6a:	6008      	str	r0, [r1, #0]
    6c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    6c70:	4770      	bx	lr
    6c72:	bf00      	nop

00006c74 <__multadd>:
    6c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c78:	690e      	ldr	r6, [r1, #16]
    6c7a:	4680      	mov	r8, r0
    6c7c:	460f      	mov	r7, r1
    6c7e:	461d      	mov	r5, r3
    6c80:	f101 0e14 	add.w	lr, r1, #20
    6c84:	2000      	movs	r0, #0
    6c86:	f8de 1000 	ldr.w	r1, [lr]
    6c8a:	b28c      	uxth	r4, r1
    6c8c:	fb02 5304 	mla	r3, r2, r4, r5
    6c90:	0c09      	lsrs	r1, r1, #16
    6c92:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    6c96:	fb02 cc01 	mla	ip, r2, r1, ip
    6c9a:	3001      	adds	r0, #1
    6c9c:	b29c      	uxth	r4, r3
    6c9e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    6ca2:	4286      	cmp	r6, r0
    6ca4:	f84e 4b04 	str.w	r4, [lr], #4
    6ca8:	ea4f 451c 	mov.w	r5, ip, lsr #16
    6cac:	dceb      	bgt.n	6c86 <__multadd+0x12>
    6cae:	b13d      	cbz	r5, 6cc0 <__multadd+0x4c>
    6cb0:	68bb      	ldr	r3, [r7, #8]
    6cb2:	42b3      	cmp	r3, r6
    6cb4:	dd07      	ble.n	6cc6 <__multadd+0x52>
    6cb6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    6cba:	3601      	adds	r6, #1
    6cbc:	615d      	str	r5, [r3, #20]
    6cbe:	613e      	str	r6, [r7, #16]
    6cc0:	4638      	mov	r0, r7
    6cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cc6:	6879      	ldr	r1, [r7, #4]
    6cc8:	4640      	mov	r0, r8
    6cca:	3101      	adds	r1, #1
    6ccc:	f7ff ffa2 	bl	6c14 <_Balloc>
    6cd0:	4604      	mov	r4, r0
    6cd2:	b1b0      	cbz	r0, 6d02 <__multadd+0x8e>
    6cd4:	693a      	ldr	r2, [r7, #16]
    6cd6:	3202      	adds	r2, #2
    6cd8:	f107 010c 	add.w	r1, r7, #12
    6cdc:	0092      	lsls	r2, r2, #2
    6cde:	300c      	adds	r0, #12
    6ce0:	f7fd f906 	bl	3ef0 <memcpy>
    6ce4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    6ce8:	687a      	ldr	r2, [r7, #4]
    6cea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6cee:	6039      	str	r1, [r7, #0]
    6cf0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    6cf4:	4627      	mov	r7, r4
    6cf6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    6cfa:	3601      	adds	r6, #1
    6cfc:	615d      	str	r5, [r3, #20]
    6cfe:	613e      	str	r6, [r7, #16]
    6d00:	e7de      	b.n	6cc0 <__multadd+0x4c>
    6d02:	4b03      	ldr	r3, [pc, #12]	; (6d10 <__multadd+0x9c>)
    6d04:	4803      	ldr	r0, [pc, #12]	; (6d14 <__multadd+0xa0>)
    6d06:	4622      	mov	r2, r4
    6d08:	21ba      	movs	r1, #186	; 0xba
    6d0a:	f002 fb4b 	bl	93a4 <__assert_func>
    6d0e:	bf00      	nop
    6d10:	0000c988 	.word	0x0000c988
    6d14:	0000c99c 	.word	0x0000c99c

00006d18 <__hi0bits>:
    6d18:	0c03      	lsrs	r3, r0, #16
    6d1a:	041b      	lsls	r3, r3, #16
    6d1c:	b9d3      	cbnz	r3, 6d54 <__hi0bits+0x3c>
    6d1e:	0400      	lsls	r0, r0, #16
    6d20:	2310      	movs	r3, #16
    6d22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    6d26:	bf04      	itt	eq
    6d28:	0200      	lsleq	r0, r0, #8
    6d2a:	3308      	addeq	r3, #8
    6d2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    6d30:	bf04      	itt	eq
    6d32:	0100      	lsleq	r0, r0, #4
    6d34:	3304      	addeq	r3, #4
    6d36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    6d3a:	bf04      	itt	eq
    6d3c:	0080      	lsleq	r0, r0, #2
    6d3e:	3302      	addeq	r3, #2
    6d40:	2800      	cmp	r0, #0
    6d42:	db05      	blt.n	6d50 <__hi0bits+0x38>
    6d44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    6d48:	f103 0301 	add.w	r3, r3, #1
    6d4c:	bf08      	it	eq
    6d4e:	2320      	moveq	r3, #32
    6d50:	4618      	mov	r0, r3
    6d52:	4770      	bx	lr
    6d54:	2300      	movs	r3, #0
    6d56:	e7e4      	b.n	6d22 <__hi0bits+0xa>

00006d58 <__lo0bits>:
    6d58:	6803      	ldr	r3, [r0, #0]
    6d5a:	f013 0207 	ands.w	r2, r3, #7
    6d5e:	d008      	beq.n	6d72 <__lo0bits+0x1a>
    6d60:	07d9      	lsls	r1, r3, #31
    6d62:	d41f      	bmi.n	6da4 <__lo0bits+0x4c>
    6d64:	079a      	lsls	r2, r3, #30
    6d66:	d522      	bpl.n	6dae <__lo0bits+0x56>
    6d68:	085b      	lsrs	r3, r3, #1
    6d6a:	6003      	str	r3, [r0, #0]
    6d6c:	2201      	movs	r2, #1
    6d6e:	4610      	mov	r0, r2
    6d70:	4770      	bx	lr
    6d72:	b299      	uxth	r1, r3
    6d74:	b909      	cbnz	r1, 6d7a <__lo0bits+0x22>
    6d76:	0c1b      	lsrs	r3, r3, #16
    6d78:	2210      	movs	r2, #16
    6d7a:	b2d9      	uxtb	r1, r3
    6d7c:	b909      	cbnz	r1, 6d82 <__lo0bits+0x2a>
    6d7e:	3208      	adds	r2, #8
    6d80:	0a1b      	lsrs	r3, r3, #8
    6d82:	0719      	lsls	r1, r3, #28
    6d84:	bf04      	itt	eq
    6d86:	091b      	lsreq	r3, r3, #4
    6d88:	3204      	addeq	r2, #4
    6d8a:	0799      	lsls	r1, r3, #30
    6d8c:	bf04      	itt	eq
    6d8e:	089b      	lsreq	r3, r3, #2
    6d90:	3202      	addeq	r2, #2
    6d92:	07d9      	lsls	r1, r3, #31
    6d94:	d403      	bmi.n	6d9e <__lo0bits+0x46>
    6d96:	085b      	lsrs	r3, r3, #1
    6d98:	f102 0201 	add.w	r2, r2, #1
    6d9c:	d005      	beq.n	6daa <__lo0bits+0x52>
    6d9e:	6003      	str	r3, [r0, #0]
    6da0:	4610      	mov	r0, r2
    6da2:	4770      	bx	lr
    6da4:	2200      	movs	r2, #0
    6da6:	4610      	mov	r0, r2
    6da8:	4770      	bx	lr
    6daa:	2220      	movs	r2, #32
    6dac:	e7df      	b.n	6d6e <__lo0bits+0x16>
    6dae:	089b      	lsrs	r3, r3, #2
    6db0:	2202      	movs	r2, #2
    6db2:	6003      	str	r3, [r0, #0]
    6db4:	4610      	mov	r0, r2
    6db6:	4770      	bx	lr

00006db8 <__i2b>:
    6db8:	b538      	push	{r3, r4, r5, lr}
    6dba:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6dbc:	4604      	mov	r4, r0
    6dbe:	460d      	mov	r5, r1
    6dc0:	b14b      	cbz	r3, 6dd6 <__i2b+0x1e>
    6dc2:	6858      	ldr	r0, [r3, #4]
    6dc4:	b1b0      	cbz	r0, 6df4 <__i2b+0x3c>
    6dc6:	6802      	ldr	r2, [r0, #0]
    6dc8:	605a      	str	r2, [r3, #4]
    6dca:	2200      	movs	r2, #0
    6dcc:	2301      	movs	r3, #1
    6dce:	e9c0 3504 	strd	r3, r5, [r0, #16]
    6dd2:	60c2      	str	r2, [r0, #12]
    6dd4:	bd38      	pop	{r3, r4, r5, pc}
    6dd6:	2221      	movs	r2, #33	; 0x21
    6dd8:	2104      	movs	r1, #4
    6dda:	f002 fb03 	bl	93e4 <_calloc_r>
    6dde:	4603      	mov	r3, r0
    6de0:	6460      	str	r0, [r4, #68]	; 0x44
    6de2:	2800      	cmp	r0, #0
    6de4:	d1ed      	bne.n	6dc2 <__i2b+0xa>
    6de6:	4b09      	ldr	r3, [pc, #36]	; (6e0c <__i2b+0x54>)
    6de8:	4809      	ldr	r0, [pc, #36]	; (6e10 <__i2b+0x58>)
    6dea:	2200      	movs	r2, #0
    6dec:	f240 1145 	movw	r1, #325	; 0x145
    6df0:	f002 fad8 	bl	93a4 <__assert_func>
    6df4:	221c      	movs	r2, #28
    6df6:	2101      	movs	r1, #1
    6df8:	4620      	mov	r0, r4
    6dfa:	f002 faf3 	bl	93e4 <_calloc_r>
    6dfe:	2800      	cmp	r0, #0
    6e00:	d0f1      	beq.n	6de6 <__i2b+0x2e>
    6e02:	2201      	movs	r2, #1
    6e04:	2302      	movs	r3, #2
    6e06:	e9c0 2301 	strd	r2, r3, [r0, #4]
    6e0a:	e7de      	b.n	6dca <__i2b+0x12>
    6e0c:	0000c988 	.word	0x0000c988
    6e10:	0000c99c 	.word	0x0000c99c

00006e14 <__multiply>:
    6e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e18:	690e      	ldr	r6, [r1, #16]
    6e1a:	6915      	ldr	r5, [r2, #16]
    6e1c:	42ae      	cmp	r6, r5
    6e1e:	b085      	sub	sp, #20
    6e20:	4688      	mov	r8, r1
    6e22:	4614      	mov	r4, r2
    6e24:	db05      	blt.n	6e32 <__multiply+0x1e>
    6e26:	462a      	mov	r2, r5
    6e28:	4623      	mov	r3, r4
    6e2a:	4635      	mov	r5, r6
    6e2c:	460c      	mov	r4, r1
    6e2e:	4616      	mov	r6, r2
    6e30:	4698      	mov	r8, r3
    6e32:	68a3      	ldr	r3, [r4, #8]
    6e34:	6861      	ldr	r1, [r4, #4]
    6e36:	19af      	adds	r7, r5, r6
    6e38:	42bb      	cmp	r3, r7
    6e3a:	bfb8      	it	lt
    6e3c:	3101      	addlt	r1, #1
    6e3e:	f7ff fee9 	bl	6c14 <_Balloc>
    6e42:	9001      	str	r0, [sp, #4]
    6e44:	2800      	cmp	r0, #0
    6e46:	f000 8087 	beq.w	6f58 <__multiply+0x144>
    6e4a:	9b01      	ldr	r3, [sp, #4]
    6e4c:	f103 0914 	add.w	r9, r3, #20
    6e50:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    6e54:	45d1      	cmp	r9, sl
    6e56:	d205      	bcs.n	6e64 <__multiply+0x50>
    6e58:	464b      	mov	r3, r9
    6e5a:	2200      	movs	r2, #0
    6e5c:	f843 2b04 	str.w	r2, [r3], #4
    6e60:	459a      	cmp	sl, r3
    6e62:	d8fb      	bhi.n	6e5c <__multiply+0x48>
    6e64:	f108 0814 	add.w	r8, r8, #20
    6e68:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    6e6c:	f104 0314 	add.w	r3, r4, #20
    6e70:	45d8      	cmp	r8, fp
    6e72:	461a      	mov	r2, r3
    6e74:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6e78:	d25f      	bcs.n	6f3a <__multiply+0x126>
    6e7a:	1b2b      	subs	r3, r5, r4
    6e7c:	3b15      	subs	r3, #21
    6e7e:	f023 0303 	bic.w	r3, r3, #3
    6e82:	3304      	adds	r3, #4
    6e84:	3415      	adds	r4, #21
    6e86:	42a5      	cmp	r5, r4
    6e88:	bf38      	it	cc
    6e8a:	2304      	movcc	r3, #4
    6e8c:	e9cd a702 	strd	sl, r7, [sp, #8]
    6e90:	46ac      	mov	ip, r5
    6e92:	461f      	mov	r7, r3
    6e94:	4692      	mov	sl, r2
    6e96:	e005      	b.n	6ea4 <__multiply+0x90>
    6e98:	0c09      	lsrs	r1, r1, #16
    6e9a:	d129      	bne.n	6ef0 <__multiply+0xdc>
    6e9c:	45c3      	cmp	fp, r8
    6e9e:	f109 0904 	add.w	r9, r9, #4
    6ea2:	d948      	bls.n	6f36 <__multiply+0x122>
    6ea4:	f858 1b04 	ldr.w	r1, [r8], #4
    6ea8:	b28d      	uxth	r5, r1
    6eaa:	2d00      	cmp	r5, #0
    6eac:	d0f4      	beq.n	6e98 <__multiply+0x84>
    6eae:	4656      	mov	r6, sl
    6eb0:	464c      	mov	r4, r9
    6eb2:	2300      	movs	r3, #0
    6eb4:	f856 1b04 	ldr.w	r1, [r6], #4
    6eb8:	6822      	ldr	r2, [r4, #0]
    6eba:	fa1f fe81 	uxth.w	lr, r1
    6ebe:	b290      	uxth	r0, r2
    6ec0:	0c09      	lsrs	r1, r1, #16
    6ec2:	fb05 000e 	mla	r0, r5, lr, r0
    6ec6:	0c12      	lsrs	r2, r2, #16
    6ec8:	4403      	add	r3, r0
    6eca:	fb05 2201 	mla	r2, r5, r1, r2
    6ece:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    6ed2:	b29b      	uxth	r3, r3
    6ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6ed8:	45b4      	cmp	ip, r6
    6eda:	f844 3b04 	str.w	r3, [r4], #4
    6ede:	ea4f 4312 	mov.w	r3, r2, lsr #16
    6ee2:	d8e7      	bhi.n	6eb4 <__multiply+0xa0>
    6ee4:	f849 3007 	str.w	r3, [r9, r7]
    6ee8:	f858 1c04 	ldr.w	r1, [r8, #-4]
    6eec:	0c09      	lsrs	r1, r1, #16
    6eee:	d0d5      	beq.n	6e9c <__multiply+0x88>
    6ef0:	f8d9 3000 	ldr.w	r3, [r9]
    6ef4:	4650      	mov	r0, sl
    6ef6:	461a      	mov	r2, r3
    6ef8:	464c      	mov	r4, r9
    6efa:	2600      	movs	r6, #0
    6efc:	8805      	ldrh	r5, [r0, #0]
    6efe:	0c12      	lsrs	r2, r2, #16
    6f00:	fb01 2205 	mla	r2, r1, r5, r2
    6f04:	4416      	add	r6, r2
    6f06:	b29b      	uxth	r3, r3
    6f08:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    6f0c:	f844 3b04 	str.w	r3, [r4], #4
    6f10:	f850 5b04 	ldr.w	r5, [r0], #4
    6f14:	6822      	ldr	r2, [r4, #0]
    6f16:	0c2d      	lsrs	r5, r5, #16
    6f18:	b293      	uxth	r3, r2
    6f1a:	fb01 3305 	mla	r3, r1, r5, r3
    6f1e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    6f22:	4584      	cmp	ip, r0
    6f24:	ea4f 4613 	mov.w	r6, r3, lsr #16
    6f28:	d8e8      	bhi.n	6efc <__multiply+0xe8>
    6f2a:	45c3      	cmp	fp, r8
    6f2c:	f849 3007 	str.w	r3, [r9, r7]
    6f30:	f109 0904 	add.w	r9, r9, #4
    6f34:	d8b6      	bhi.n	6ea4 <__multiply+0x90>
    6f36:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    6f3a:	2f00      	cmp	r7, #0
    6f3c:	dc02      	bgt.n	6f44 <__multiply+0x130>
    6f3e:	e005      	b.n	6f4c <__multiply+0x138>
    6f40:	3f01      	subs	r7, #1
    6f42:	d003      	beq.n	6f4c <__multiply+0x138>
    6f44:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d0f9      	beq.n	6f40 <__multiply+0x12c>
    6f4c:	9b01      	ldr	r3, [sp, #4]
    6f4e:	4618      	mov	r0, r3
    6f50:	611f      	str	r7, [r3, #16]
    6f52:	b005      	add	sp, #20
    6f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f58:	4b03      	ldr	r3, [pc, #12]	; (6f68 <__multiply+0x154>)
    6f5a:	4804      	ldr	r0, [pc, #16]	; (6f6c <__multiply+0x158>)
    6f5c:	9a01      	ldr	r2, [sp, #4]
    6f5e:	f44f 71b1 	mov.w	r1, #354	; 0x162
    6f62:	f002 fa1f 	bl	93a4 <__assert_func>
    6f66:	bf00      	nop
    6f68:	0000c988 	.word	0x0000c988
    6f6c:	0000c99c 	.word	0x0000c99c

00006f70 <__pow5mult>:
    6f70:	f012 0303 	ands.w	r3, r2, #3
    6f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f78:	4614      	mov	r4, r2
    6f7a:	4606      	mov	r6, r0
    6f7c:	d132      	bne.n	6fe4 <__pow5mult+0x74>
    6f7e:	460d      	mov	r5, r1
    6f80:	10a4      	asrs	r4, r4, #2
    6f82:	d020      	beq.n	6fc6 <__pow5mult+0x56>
    6f84:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    6f88:	f1b8 0f00 	cmp.w	r8, #0
    6f8c:	d033      	beq.n	6ff6 <__pow5mult+0x86>
    6f8e:	07e3      	lsls	r3, r4, #31
    6f90:	f04f 0700 	mov.w	r7, #0
    6f94:	d407      	bmi.n	6fa6 <__pow5mult+0x36>
    6f96:	1064      	asrs	r4, r4, #1
    6f98:	d015      	beq.n	6fc6 <__pow5mult+0x56>
    6f9a:	f8d8 0000 	ldr.w	r0, [r8]
    6f9e:	b1a8      	cbz	r0, 6fcc <__pow5mult+0x5c>
    6fa0:	4680      	mov	r8, r0
    6fa2:	07e3      	lsls	r3, r4, #31
    6fa4:	d5f7      	bpl.n	6f96 <__pow5mult+0x26>
    6fa6:	4642      	mov	r2, r8
    6fa8:	4629      	mov	r1, r5
    6faa:	4630      	mov	r0, r6
    6fac:	f7ff ff32 	bl	6e14 <__multiply>
    6fb0:	b1b5      	cbz	r5, 6fe0 <__pow5mult+0x70>
    6fb2:	6869      	ldr	r1, [r5, #4]
    6fb4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    6fb6:	1064      	asrs	r4, r4, #1
    6fb8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    6fbc:	602a      	str	r2, [r5, #0]
    6fbe:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    6fc2:	4605      	mov	r5, r0
    6fc4:	d1e9      	bne.n	6f9a <__pow5mult+0x2a>
    6fc6:	4628      	mov	r0, r5
    6fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fcc:	4642      	mov	r2, r8
    6fce:	4641      	mov	r1, r8
    6fd0:	4630      	mov	r0, r6
    6fd2:	f7ff ff1f 	bl	6e14 <__multiply>
    6fd6:	f8c8 0000 	str.w	r0, [r8]
    6fda:	6007      	str	r7, [r0, #0]
    6fdc:	4680      	mov	r8, r0
    6fde:	e7e0      	b.n	6fa2 <__pow5mult+0x32>
    6fe0:	4605      	mov	r5, r0
    6fe2:	e7d8      	b.n	6f96 <__pow5mult+0x26>
    6fe4:	3b01      	subs	r3, #1
    6fe6:	4a0f      	ldr	r2, [pc, #60]	; (7024 <__pow5mult+0xb4>)
    6fe8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6fec:	2300      	movs	r3, #0
    6fee:	f7ff fe41 	bl	6c74 <__multadd>
    6ff2:	4605      	mov	r5, r0
    6ff4:	e7c4      	b.n	6f80 <__pow5mult+0x10>
    6ff6:	2101      	movs	r1, #1
    6ff8:	4630      	mov	r0, r6
    6ffa:	f7ff fe0b 	bl	6c14 <_Balloc>
    6ffe:	4680      	mov	r8, r0
    7000:	b140      	cbz	r0, 7014 <__pow5mult+0xa4>
    7002:	2301      	movs	r3, #1
    7004:	f240 2271 	movw	r2, #625	; 0x271
    7008:	e9c0 3204 	strd	r3, r2, [r0, #16]
    700c:	2300      	movs	r3, #0
    700e:	6430      	str	r0, [r6, #64]	; 0x40
    7010:	6003      	str	r3, [r0, #0]
    7012:	e7bc      	b.n	6f8e <__pow5mult+0x1e>
    7014:	4b04      	ldr	r3, [pc, #16]	; (7028 <__pow5mult+0xb8>)
    7016:	4805      	ldr	r0, [pc, #20]	; (702c <__pow5mult+0xbc>)
    7018:	4642      	mov	r2, r8
    701a:	f240 1145 	movw	r1, #325	; 0x145
    701e:	f002 f9c1 	bl	93a4 <__assert_func>
    7022:	bf00      	nop
    7024:	0000cae8 	.word	0x0000cae8
    7028:	0000c988 	.word	0x0000c988
    702c:	0000c99c 	.word	0x0000c99c

00007030 <__lshift>:
    7030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7034:	460d      	mov	r5, r1
    7036:	4614      	mov	r4, r2
    7038:	692f      	ldr	r7, [r5, #16]
    703a:	68ab      	ldr	r3, [r5, #8]
    703c:	6849      	ldr	r1, [r1, #4]
    703e:	eb07 1762 	add.w	r7, r7, r2, asr #5
    7042:	1c7e      	adds	r6, r7, #1
    7044:	429e      	cmp	r6, r3
    7046:	4680      	mov	r8, r0
    7048:	ea4f 1962 	mov.w	r9, r2, asr #5
    704c:	dd04      	ble.n	7058 <__lshift+0x28>
    704e:	005b      	lsls	r3, r3, #1
    7050:	429e      	cmp	r6, r3
    7052:	f101 0101 	add.w	r1, r1, #1
    7056:	dcfa      	bgt.n	704e <__lshift+0x1e>
    7058:	4640      	mov	r0, r8
    705a:	f7ff fddb 	bl	6c14 <_Balloc>
    705e:	4684      	mov	ip, r0
    7060:	2800      	cmp	r0, #0
    7062:	d052      	beq.n	710a <__lshift+0xda>
    7064:	f1b9 0f00 	cmp.w	r9, #0
    7068:	f100 0214 	add.w	r2, r0, #20
    706c:	dd0e      	ble.n	708c <__lshift+0x5c>
    706e:	f109 0105 	add.w	r1, r9, #5
    7072:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    7076:	4613      	mov	r3, r2
    7078:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    707c:	2000      	movs	r0, #0
    707e:	f843 0b04 	str.w	r0, [r3], #4
    7082:	428b      	cmp	r3, r1
    7084:	d1fb      	bne.n	707e <__lshift+0x4e>
    7086:	f1ae 0314 	sub.w	r3, lr, #20
    708a:	441a      	add	r2, r3
    708c:	6929      	ldr	r1, [r5, #16]
    708e:	f105 0314 	add.w	r3, r5, #20
    7092:	f014 0e1f 	ands.w	lr, r4, #31
    7096:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    709a:	d02e      	beq.n	70fa <__lshift+0xca>
    709c:	f1ce 0920 	rsb	r9, lr, #32
    70a0:	4610      	mov	r0, r2
    70a2:	f04f 0a00 	mov.w	sl, #0
    70a6:	681c      	ldr	r4, [r3, #0]
    70a8:	fa04 f40e 	lsl.w	r4, r4, lr
    70ac:	ea44 040a 	orr.w	r4, r4, sl
    70b0:	f840 4b04 	str.w	r4, [r0], #4
    70b4:	f853 4b04 	ldr.w	r4, [r3], #4
    70b8:	4299      	cmp	r1, r3
    70ba:	fa24 fa09 	lsr.w	sl, r4, r9
    70be:	d8f2      	bhi.n	70a6 <__lshift+0x76>
    70c0:	1b4b      	subs	r3, r1, r5
    70c2:	3b15      	subs	r3, #21
    70c4:	f023 0303 	bic.w	r3, r3, #3
    70c8:	3304      	adds	r3, #4
    70ca:	f105 0015 	add.w	r0, r5, #21
    70ce:	4281      	cmp	r1, r0
    70d0:	bf38      	it	cc
    70d2:	2304      	movcc	r3, #4
    70d4:	f1ba 0f00 	cmp.w	sl, #0
    70d8:	bf18      	it	ne
    70da:	4637      	movne	r7, r6
    70dc:	f842 a003 	str.w	sl, [r2, r3]
    70e0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    70e4:	686a      	ldr	r2, [r5, #4]
    70e6:	f8cc 7010 	str.w	r7, [ip, #16]
    70ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    70ee:	6029      	str	r1, [r5, #0]
    70f0:	4660      	mov	r0, ip
    70f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    70f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70fa:	3a04      	subs	r2, #4
    70fc:	f853 0b04 	ldr.w	r0, [r3], #4
    7100:	f842 0f04 	str.w	r0, [r2, #4]!
    7104:	4299      	cmp	r1, r3
    7106:	d8f9      	bhi.n	70fc <__lshift+0xcc>
    7108:	e7ea      	b.n	70e0 <__lshift+0xb0>
    710a:	4b03      	ldr	r3, [pc, #12]	; (7118 <__lshift+0xe8>)
    710c:	4803      	ldr	r0, [pc, #12]	; (711c <__lshift+0xec>)
    710e:	4662      	mov	r2, ip
    7110:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    7114:	f002 f946 	bl	93a4 <__assert_func>
    7118:	0000c988 	.word	0x0000c988
    711c:	0000c99c 	.word	0x0000c99c

00007120 <__mcmp>:
    7120:	690b      	ldr	r3, [r1, #16]
    7122:	4684      	mov	ip, r0
    7124:	6900      	ldr	r0, [r0, #16]
    7126:	1ac0      	subs	r0, r0, r3
    7128:	d116      	bne.n	7158 <__mcmp+0x38>
    712a:	f10c 0c14 	add.w	ip, ip, #20
    712e:	3114      	adds	r1, #20
    7130:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    7134:	b410      	push	{r4}
    7136:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    713a:	e001      	b.n	7140 <__mcmp+0x20>
    713c:	4594      	cmp	ip, r2
    713e:	d208      	bcs.n	7152 <__mcmp+0x32>
    7140:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    7144:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    7148:	428c      	cmp	r4, r1
    714a:	d0f7      	beq.n	713c <__mcmp+0x1c>
    714c:	d205      	bcs.n	715a <__mcmp+0x3a>
    714e:	f04f 30ff 	mov.w	r0, #4294967295
    7152:	f85d 4b04 	ldr.w	r4, [sp], #4
    7156:	4770      	bx	lr
    7158:	4770      	bx	lr
    715a:	2001      	movs	r0, #1
    715c:	f85d 4b04 	ldr.w	r4, [sp], #4
    7160:	4770      	bx	lr
    7162:	bf00      	nop

00007164 <__mdiff>:
    7164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7168:	690f      	ldr	r7, [r1, #16]
    716a:	6913      	ldr	r3, [r2, #16]
    716c:	1aff      	subs	r7, r7, r3
    716e:	2f00      	cmp	r7, #0
    7170:	460e      	mov	r6, r1
    7172:	4690      	mov	r8, r2
    7174:	d17f      	bne.n	7276 <__mdiff+0x112>
    7176:	f101 0514 	add.w	r5, r1, #20
    717a:	3214      	adds	r2, #20
    717c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7180:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    7184:	e001      	b.n	718a <__mdiff+0x26>
    7186:	429d      	cmp	r5, r3
    7188:	d278      	bcs.n	727c <__mdiff+0x118>
    718a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    718e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    7192:	42a1      	cmp	r1, r4
    7194:	d0f7      	beq.n	7186 <__mdiff+0x22>
    7196:	d369      	bcc.n	726c <__mdiff+0x108>
    7198:	6871      	ldr	r1, [r6, #4]
    719a:	f7ff fd3b 	bl	6c14 <_Balloc>
    719e:	4681      	mov	r9, r0
    71a0:	2800      	cmp	r0, #0
    71a2:	d077      	beq.n	7294 <__mdiff+0x130>
    71a4:	6935      	ldr	r5, [r6, #16]
    71a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
    71aa:	60c7      	str	r7, [r0, #12]
    71ac:	f108 0e14 	add.w	lr, r8, #20
    71b0:	f106 0014 	add.w	r0, r6, #20
    71b4:	f109 0a14 	add.w	sl, r9, #20
    71b8:	f106 0110 	add.w	r1, r6, #16
    71bc:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    71c0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    71c4:	4656      	mov	r6, sl
    71c6:	f04f 0c00 	mov.w	ip, #0
    71ca:	f85e 4b04 	ldr.w	r4, [lr], #4
    71ce:	f851 bf04 	ldr.w	fp, [r1, #4]!
    71d2:	b2a3      	uxth	r3, r4
    71d4:	fa1c fc8b 	uxtah	ip, ip, fp
    71d8:	ebac 0303 	sub.w	r3, ip, r3
    71dc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    71e0:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    71e4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    71e8:	b29b      	uxth	r3, r3
    71ea:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    71ee:	4572      	cmp	r2, lr
    71f0:	f846 3b04 	str.w	r3, [r6], #4
    71f4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    71f8:	d8e7      	bhi.n	71ca <__mdiff+0x66>
    71fa:	eba2 0108 	sub.w	r1, r2, r8
    71fe:	3915      	subs	r1, #21
    7200:	f108 0815 	add.w	r8, r8, #21
    7204:	4542      	cmp	r2, r8
    7206:	f021 0403 	bic.w	r4, r1, #3
    720a:	f104 0404 	add.w	r4, r4, #4
    720e:	bf38      	it	cc
    7210:	2404      	movcc	r4, #4
    7212:	4420      	add	r0, r4
    7214:	f021 0203 	bic.w	r2, r1, #3
    7218:	bf38      	it	cc
    721a:	2200      	movcc	r2, #0
    721c:	4287      	cmp	r7, r0
    721e:	4452      	add	r2, sl
    7220:	4454      	add	r4, sl
    7222:	d918      	bls.n	7256 <__mdiff+0xf2>
    7224:	4626      	mov	r6, r4
    7226:	4601      	mov	r1, r0
    7228:	f851 3b04 	ldr.w	r3, [r1], #4
    722c:	fa1c fc83 	uxtah	ip, ip, r3
    7230:	ea4f 422c 	mov.w	r2, ip, asr #16
    7234:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    7238:	fa1f fc8c 	uxth.w	ip, ip
    723c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    7240:	428f      	cmp	r7, r1
    7242:	f846 3b04 	str.w	r3, [r6], #4
    7246:	ea4f 4c22 	mov.w	ip, r2, asr #16
    724a:	d8ed      	bhi.n	7228 <__mdiff+0xc4>
    724c:	3f01      	subs	r7, #1
    724e:	1a3f      	subs	r7, r7, r0
    7250:	f027 0703 	bic.w	r7, r7, #3
    7254:	19e2      	adds	r2, r4, r7
    7256:	b923      	cbnz	r3, 7262 <__mdiff+0xfe>
    7258:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    725c:	3d01      	subs	r5, #1
    725e:	2b00      	cmp	r3, #0
    7260:	d0fa      	beq.n	7258 <__mdiff+0xf4>
    7262:	f8c9 5010 	str.w	r5, [r9, #16]
    7266:	4648      	mov	r0, r9
    7268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    726c:	4633      	mov	r3, r6
    726e:	2701      	movs	r7, #1
    7270:	4646      	mov	r6, r8
    7272:	4698      	mov	r8, r3
    7274:	e790      	b.n	7198 <__mdiff+0x34>
    7276:	dbf9      	blt.n	726c <__mdiff+0x108>
    7278:	2700      	movs	r7, #0
    727a:	e78d      	b.n	7198 <__mdiff+0x34>
    727c:	2100      	movs	r1, #0
    727e:	f7ff fcc9 	bl	6c14 <_Balloc>
    7282:	4681      	mov	r9, r0
    7284:	b168      	cbz	r0, 72a2 <__mdiff+0x13e>
    7286:	2201      	movs	r2, #1
    7288:	2300      	movs	r3, #0
    728a:	e9c9 2304 	strd	r2, r3, [r9, #16]
    728e:	4648      	mov	r0, r9
    7290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7294:	4b06      	ldr	r3, [pc, #24]	; (72b0 <__mdiff+0x14c>)
    7296:	4807      	ldr	r0, [pc, #28]	; (72b4 <__mdiff+0x150>)
    7298:	464a      	mov	r2, r9
    729a:	f240 2145 	movw	r1, #581	; 0x245
    729e:	f002 f881 	bl	93a4 <__assert_func>
    72a2:	4b03      	ldr	r3, [pc, #12]	; (72b0 <__mdiff+0x14c>)
    72a4:	4803      	ldr	r0, [pc, #12]	; (72b4 <__mdiff+0x150>)
    72a6:	464a      	mov	r2, r9
    72a8:	f240 2137 	movw	r1, #567	; 0x237
    72ac:	f002 f87a 	bl	93a4 <__assert_func>
    72b0:	0000c988 	.word	0x0000c988
    72b4:	0000c99c 	.word	0x0000c99c

000072b8 <__d2b>:
    72b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    72bc:	4688      	mov	r8, r1
    72be:	b083      	sub	sp, #12
    72c0:	2101      	movs	r1, #1
    72c2:	ec57 6b10 	vmov	r6, r7, d0
    72c6:	4615      	mov	r5, r2
    72c8:	f7ff fca4 	bl	6c14 <_Balloc>
    72cc:	4604      	mov	r4, r0
    72ce:	2800      	cmp	r0, #0
    72d0:	d051      	beq.n	7376 <__d2b+0xbe>
    72d2:	f3c7 590a 	ubfx	r9, r7, #20, #11
    72d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
    72da:	f1b9 0f00 	cmp.w	r9, #0
    72de:	d001      	beq.n	72e4 <__d2b+0x2c>
    72e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    72e4:	2e00      	cmp	r6, #0
    72e6:	9301      	str	r3, [sp, #4]
    72e8:	d118      	bne.n	731c <__d2b+0x64>
    72ea:	a801      	add	r0, sp, #4
    72ec:	f7ff fd34 	bl	6d58 <__lo0bits>
    72f0:	9a01      	ldr	r2, [sp, #4]
    72f2:	6162      	str	r2, [r4, #20]
    72f4:	2201      	movs	r2, #1
    72f6:	f100 0320 	add.w	r3, r0, #32
    72fa:	6122      	str	r2, [r4, #16]
    72fc:	f1b9 0f00 	cmp.w	r9, #0
    7300:	d025      	beq.n	734e <__d2b+0x96>
    7302:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    7306:	eb09 0203 	add.w	r2, r9, r3
    730a:	4620      	mov	r0, r4
    730c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    7310:	f8c8 2000 	str.w	r2, [r8]
    7314:	602b      	str	r3, [r5, #0]
    7316:	b003      	add	sp, #12
    7318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    731c:	4668      	mov	r0, sp
    731e:	9600      	str	r6, [sp, #0]
    7320:	f7ff fd1a 	bl	6d58 <__lo0bits>
    7324:	4603      	mov	r3, r0
    7326:	b310      	cbz	r0, 736e <__d2b+0xb6>
    7328:	e9dd 0200 	ldrd	r0, r2, [sp]
    732c:	f1c3 0120 	rsb	r1, r3, #32
    7330:	fa02 f101 	lsl.w	r1, r2, r1
    7334:	4301      	orrs	r1, r0
    7336:	40da      	lsrs	r2, r3
    7338:	6161      	str	r1, [r4, #20]
    733a:	9201      	str	r2, [sp, #4]
    733c:	2a00      	cmp	r2, #0
    733e:	61a2      	str	r2, [r4, #24]
    7340:	bf14      	ite	ne
    7342:	2202      	movne	r2, #2
    7344:	2201      	moveq	r2, #1
    7346:	6122      	str	r2, [r4, #16]
    7348:	f1b9 0f00 	cmp.w	r9, #0
    734c:	d1d9      	bne.n	7302 <__d2b+0x4a>
    734e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    7352:	f8c8 3000 	str.w	r3, [r8]
    7356:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    735a:	6918      	ldr	r0, [r3, #16]
    735c:	f7ff fcdc 	bl	6d18 <__hi0bits>
    7360:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    7364:	4620      	mov	r0, r4
    7366:	602b      	str	r3, [r5, #0]
    7368:	b003      	add	sp, #12
    736a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    736e:	9a00      	ldr	r2, [sp, #0]
    7370:	6162      	str	r2, [r4, #20]
    7372:	9a01      	ldr	r2, [sp, #4]
    7374:	e7e2      	b.n	733c <__d2b+0x84>
    7376:	4b03      	ldr	r3, [pc, #12]	; (7384 <__d2b+0xcc>)
    7378:	4803      	ldr	r0, [pc, #12]	; (7388 <__d2b+0xd0>)
    737a:	4622      	mov	r2, r4
    737c:	f240 310f 	movw	r1, #783	; 0x30f
    7380:	f002 f810 	bl	93a4 <__assert_func>
    7384:	0000c988 	.word	0x0000c988
    7388:	0000c99c 	.word	0x0000c99c

0000738c <__ascii_wctomb>:
    738c:	b149      	cbz	r1, 73a2 <__ascii_wctomb+0x16>
    738e:	2aff      	cmp	r2, #255	; 0xff
    7390:	d802      	bhi.n	7398 <__ascii_wctomb+0xc>
    7392:	700a      	strb	r2, [r1, #0]
    7394:	2001      	movs	r0, #1
    7396:	4770      	bx	lr
    7398:	238a      	movs	r3, #138	; 0x8a
    739a:	6003      	str	r3, [r0, #0]
    739c:	f04f 30ff 	mov.w	r0, #4294967295
    73a0:	4770      	bx	lr
    73a2:	4608      	mov	r0, r1
    73a4:	4770      	bx	lr
    73a6:	bf00      	nop

000073a8 <_svfprintf_r>:
    73a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73ac:	ed2d 8b06 	vpush	{d8-d10}
    73b0:	b0d3      	sub	sp, #332	; 0x14c
    73b2:	460c      	mov	r4, r1
    73b4:	ee0a 1a10 	vmov	s20, r1
    73b8:	4690      	mov	r8, r2
    73ba:	9308      	str	r3, [sp, #32]
    73bc:	4682      	mov	sl, r0
    73be:	f001 ff09 	bl	91d4 <_localeconv_r>
    73c2:	6803      	ldr	r3, [r0, #0]
    73c4:	9313      	str	r3, [sp, #76]	; 0x4c
    73c6:	4618      	mov	r0, r3
    73c8:	f7ff fa3a 	bl	6840 <strlen>
    73cc:	2208      	movs	r2, #8
    73ce:	9011      	str	r0, [sp, #68]	; 0x44
    73d0:	2100      	movs	r1, #0
    73d2:	a822      	add	r0, sp, #136	; 0x88
    73d4:	f7ff f904 	bl	65e0 <memset>
    73d8:	89a3      	ldrh	r3, [r4, #12]
    73da:	061f      	lsls	r7, r3, #24
    73dc:	d503      	bpl.n	73e6 <_svfprintf_r+0x3e>
    73de:	6923      	ldr	r3, [r4, #16]
    73e0:	2b00      	cmp	r3, #0
    73e2:	f000 8752 	beq.w	828a <_svfprintf_r+0xee2>
    73e6:	ed9f 7b84 	vldr	d7, [pc, #528]	; 75f8 <_svfprintf_r+0x250>
    73ea:	2300      	movs	r3, #0
    73ec:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
    73f0:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    73f4:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
    73f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    73fc:	aa29      	add	r2, sp, #164	; 0xa4
    73fe:	930d      	str	r3, [sp, #52]	; 0x34
    7400:	9226      	str	r2, [sp, #152]	; 0x98
    7402:	4691      	mov	r9, r2
    7404:	9312      	str	r3, [sp, #72]	; 0x48
    7406:	9304      	str	r3, [sp, #16]
    7408:	4644      	mov	r4, r8
    740a:	46a0      	mov	r8, r4
    740c:	4b7c      	ldr	r3, [pc, #496]	; (7600 <_svfprintf_r+0x258>)
    740e:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    7412:	f7ff f969 	bl	66e8 <__locale_mb_cur_max>
    7416:	4603      	mov	r3, r0
    7418:	a822      	add	r0, sp, #136	; 0x88
    741a:	9000      	str	r0, [sp, #0]
    741c:	4642      	mov	r2, r8
    741e:	a91e      	add	r1, sp, #120	; 0x78
    7420:	4650      	mov	r0, sl
    7422:	47a8      	blx	r5
    7424:	2800      	cmp	r0, #0
    7426:	f000 80b0 	beq.w	758a <_svfprintf_r+0x1e2>
    742a:	f2c0 80a6 	blt.w	757a <_svfprintf_r+0x1d2>
    742e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    7430:	2a25      	cmp	r2, #37	; 0x25
    7432:	4603      	mov	r3, r0
    7434:	d001      	beq.n	743a <_svfprintf_r+0x92>
    7436:	4498      	add	r8, r3
    7438:	e7e8      	b.n	740c <_svfprintf_r+0x64>
    743a:	ebb8 0704 	subs.w	r7, r8, r4
    743e:	4606      	mov	r6, r0
    7440:	f040 80a7 	bne.w	7592 <_svfprintf_r+0x1ea>
    7444:	2300      	movs	r3, #0
    7446:	f04f 32ff 	mov.w	r2, #4294967295
    744a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    744e:	469b      	mov	fp, r3
    7450:	9306      	str	r3, [sp, #24]
    7452:	f108 0801 	add.w	r8, r8, #1
    7456:	f898 3000 	ldrb.w	r3, [r8]
    745a:	9203      	str	r2, [sp, #12]
    745c:	252b      	movs	r5, #43	; 0x2b
    745e:	2620      	movs	r6, #32
    7460:	f108 0801 	add.w	r8, r8, #1
    7464:	f1a3 0220 	sub.w	r2, r3, #32
    7468:	2a5a      	cmp	r2, #90	; 0x5a
    746a:	f200 80cb 	bhi.w	7604 <_svfprintf_r+0x25c>
    746e:	e8df f012 	tbh	[pc, r2, lsl #1]
    7472:	02f3      	.short	0x02f3
    7474:	00c900c9 	.word	0x00c900c9
    7478:	00c902ee 	.word	0x00c902ee
    747c:	00c900c9 	.word	0x00c900c9
    7480:	00c9006a 	.word	0x00c9006a
    7484:	021400c9 	.word	0x021400c9
    7488:	00c90290 	.word	0x00c90290
    748c:	02d4021f 	.word	0x02d4021f
    7490:	02cf00c9 	.word	0x02cf00c9
    7494:	005b005b 	.word	0x005b005b
    7498:	005b005b 	.word	0x005b005b
    749c:	005b005b 	.word	0x005b005b
    74a0:	005b005b 	.word	0x005b005b
    74a4:	00c9005b 	.word	0x00c9005b
    74a8:	00c900c9 	.word	0x00c900c9
    74ac:	00c900c9 	.word	0x00c900c9
    74b0:	00c900c9 	.word	0x00c900c9
    74b4:	00c9014c 	.word	0x00c9014c
    74b8:	02290195 	.word	0x02290195
    74bc:	014c014c 	.word	0x014c014c
    74c0:	00c9014c 	.word	0x00c9014c
    74c4:	00c900c9 	.word	0x00c900c9
    74c8:	022400c9 	.word	0x022400c9
    74cc:	00c900c9 	.word	0x00c900c9
    74d0:	00c902a2 	.word	0x00c902a2
    74d4:	00c900c9 	.word	0x00c900c9
    74d8:	00c901bd 	.word	0x00c901bd
    74dc:	00c902b5 	.word	0x00c902b5
    74e0:	06ef00c9 	.word	0x06ef00c9
    74e4:	00c900c9 	.word	0x00c900c9
    74e8:	00c900c9 	.word	0x00c900c9
    74ec:	00c900c9 	.word	0x00c900c9
    74f0:	00c900c9 	.word	0x00c900c9
    74f4:	00c9014c 	.word	0x00c9014c
    74f8:	01ee0195 	.word	0x01ee0195
    74fc:	014c014c 	.word	0x014c014c
    7500:	0283014c 	.word	0x0283014c
    7504:	007f01ee 	.word	0x007f01ee
    7508:	029500c9 	.word	0x029500c9
    750c:	026b00c9 	.word	0x026b00c9
    7510:	023e06ec 	.word	0x023e06ec
    7514:	00c9007f 	.word	0x00c9007f
    7518:	007c01bd 	.word	0x007c01bd
    751c:	00c906c6 	.word	0x00c906c6
    7520:	06ca00c9 	.word	0x06ca00c9
    7524:	007c00c9 	.word	0x007c00c9
    7528:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    752c:	2100      	movs	r1, #0
    752e:	f818 3b01 	ldrb.w	r3, [r8], #1
    7532:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7536:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    753a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    753e:	2a09      	cmp	r2, #9
    7540:	d9f5      	bls.n	752e <_svfprintf_r+0x186>
    7542:	9106      	str	r1, [sp, #24]
    7544:	e78e      	b.n	7464 <_svfprintf_r+0xbc>
    7546:	4650      	mov	r0, sl
    7548:	f001 fe44 	bl	91d4 <_localeconv_r>
    754c:	6843      	ldr	r3, [r0, #4]
    754e:	9316      	str	r3, [sp, #88]	; 0x58
    7550:	4618      	mov	r0, r3
    7552:	f7ff f975 	bl	6840 <strlen>
    7556:	9017      	str	r0, [sp, #92]	; 0x5c
    7558:	4607      	mov	r7, r0
    755a:	4650      	mov	r0, sl
    755c:	f001 fe3a 	bl	91d4 <_localeconv_r>
    7560:	6883      	ldr	r3, [r0, #8]
    7562:	9314      	str	r3, [sp, #80]	; 0x50
    7564:	2f00      	cmp	r7, #0
    7566:	f040 85d0 	bne.w	810a <_svfprintf_r+0xd62>
    756a:	f898 3000 	ldrb.w	r3, [r8]
    756e:	e777      	b.n	7460 <_svfprintf_r+0xb8>
    7570:	f898 3000 	ldrb.w	r3, [r8]
    7574:	f04b 0b20 	orr.w	fp, fp, #32
    7578:	e772      	b.n	7460 <_svfprintf_r+0xb8>
    757a:	2208      	movs	r2, #8
    757c:	2100      	movs	r1, #0
    757e:	a822      	add	r0, sp, #136	; 0x88
    7580:	f7ff f82e 	bl	65e0 <memset>
    7584:	2301      	movs	r3, #1
    7586:	4498      	add	r8, r3
    7588:	e740      	b.n	740c <_svfprintf_r+0x64>
    758a:	ebb8 0704 	subs.w	r7, r8, r4
    758e:	4606      	mov	r6, r0
    7590:	d011      	beq.n	75b6 <_svfprintf_r+0x20e>
    7592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    7594:	443b      	add	r3, r7
    7596:	9328      	str	r3, [sp, #160]	; 0xa0
    7598:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    759a:	3301      	adds	r3, #1
    759c:	2b07      	cmp	r3, #7
    759e:	e9c9 4700 	strd	r4, r7, [r9]
    75a2:	9327      	str	r3, [sp, #156]	; 0x9c
    75a4:	dc1c      	bgt.n	75e0 <_svfprintf_r+0x238>
    75a6:	f109 0908 	add.w	r9, r9, #8
    75aa:	9b04      	ldr	r3, [sp, #16]
    75ac:	443b      	add	r3, r7
    75ae:	9304      	str	r3, [sp, #16]
    75b0:	2e00      	cmp	r6, #0
    75b2:	f47f af47 	bne.w	7444 <_svfprintf_r+0x9c>
    75b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    75b8:	2b00      	cmp	r3, #0
    75ba:	f041 8219 	bne.w	89f0 <_svfprintf_r+0x1648>
    75be:	ee1a 3a10 	vmov	r3, s20
    75c2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    75c6:	f013 0f40 	tst.w	r3, #64	; 0x40
    75ca:	9b04      	ldr	r3, [sp, #16]
    75cc:	bf18      	it	ne
    75ce:	f04f 33ff 	movne.w	r3, #4294967295
    75d2:	9304      	str	r3, [sp, #16]
    75d4:	9804      	ldr	r0, [sp, #16]
    75d6:	b053      	add	sp, #332	; 0x14c
    75d8:	ecbd 8b06 	vpop	{d8-d10}
    75dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75e0:	ee1a 1a10 	vmov	r1, s20
    75e4:	aa26      	add	r2, sp, #152	; 0x98
    75e6:	4650      	mov	r0, sl
    75e8:	f002 ffb2 	bl	a550 <__ssprint_r>
    75ec:	2800      	cmp	r0, #0
    75ee:	d1e6      	bne.n	75be <_svfprintf_r+0x216>
    75f0:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    75f4:	e7d9      	b.n	75aa <_svfprintf_r+0x202>
    75f6:	bf00      	nop
	...
    7600:	1fff0c30 	.word	0x1fff0c30
    7604:	930a      	str	r3, [sp, #40]	; 0x28
    7606:	2b00      	cmp	r3, #0
    7608:	d0d5      	beq.n	75b6 <_svfprintf_r+0x20e>
    760a:	2200      	movs	r2, #0
    760c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    7610:	2301      	movs	r3, #1
    7612:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    7616:	9302      	str	r3, [sp, #8]
    7618:	9207      	str	r2, [sp, #28]
    761a:	9305      	str	r3, [sp, #20]
    761c:	9203      	str	r2, [sp, #12]
    761e:	920c      	str	r2, [sp, #48]	; 0x30
    7620:	9210      	str	r2, [sp, #64]	; 0x40
    7622:	920b      	str	r2, [sp, #44]	; 0x2c
    7624:	ac39      	add	r4, sp, #228	; 0xe4
    7626:	f01b 0302 	ands.w	r3, fp, #2
    762a:	d002      	beq.n	7632 <_svfprintf_r+0x28a>
    762c:	9902      	ldr	r1, [sp, #8]
    762e:	3102      	adds	r1, #2
    7630:	9102      	str	r1, [sp, #8]
    7632:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    7636:	9109      	str	r1, [sp, #36]	; 0x24
    7638:	d105      	bne.n	7646 <_svfprintf_r+0x29e>
    763a:	9906      	ldr	r1, [sp, #24]
    763c:	9802      	ldr	r0, [sp, #8]
    763e:	1a0f      	subs	r7, r1, r0
    7640:	2f00      	cmp	r7, #0
    7642:	f300 8387 	bgt.w	7d54 <_svfprintf_r+0x9ac>
    7646:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7648:	b182      	cbz	r2, 766c <_svfprintf_r+0x2c4>
    764a:	2201      	movs	r2, #1
    764c:	f8c9 2004 	str.w	r2, [r9, #4]
    7650:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    7652:	3201      	adds	r2, #1
    7654:	3601      	adds	r6, #1
    7656:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
    765a:	2a07      	cmp	r2, #7
    765c:	9628      	str	r6, [sp, #160]	; 0xa0
    765e:	9227      	str	r2, [sp, #156]	; 0x9c
    7660:	f8c9 1000 	str.w	r1, [r9]
    7664:	f300 83bf 	bgt.w	7de6 <_svfprintf_r+0xa3e>
    7668:	f109 0908 	add.w	r9, r9, #8
    766c:	b183      	cbz	r3, 7690 <_svfprintf_r+0x2e8>
    766e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7670:	aa1c      	add	r2, sp, #112	; 0x70
    7672:	3301      	adds	r3, #1
    7674:	3602      	adds	r6, #2
    7676:	f8c9 2000 	str.w	r2, [r9]
    767a:	2b07      	cmp	r3, #7
    767c:	f04f 0202 	mov.w	r2, #2
    7680:	9628      	str	r6, [sp, #160]	; 0xa0
    7682:	9327      	str	r3, [sp, #156]	; 0x9c
    7684:	f8c9 2004 	str.w	r2, [r9, #4]
    7688:	f300 83c2 	bgt.w	7e10 <_svfprintf_r+0xa68>
    768c:	f109 0908 	add.w	r9, r9, #8
    7690:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7692:	2b80      	cmp	r3, #128	; 0x80
    7694:	f000 8286 	beq.w	7ba4 <_svfprintf_r+0x7fc>
    7698:	9b03      	ldr	r3, [sp, #12]
    769a:	9a05      	ldr	r2, [sp, #20]
    769c:	1a9f      	subs	r7, r3, r2
    769e:	2f00      	cmp	r7, #0
    76a0:	f300 82c0 	bgt.w	7c24 <_svfprintf_r+0x87c>
    76a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
    76a8:	f040 8222 	bne.w	7af0 <_svfprintf_r+0x748>
    76ac:	9b05      	ldr	r3, [sp, #20]
    76ae:	f8c9 3004 	str.w	r3, [r9, #4]
    76b2:	441e      	add	r6, r3
    76b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    76b6:	f8c9 4000 	str.w	r4, [r9]
    76ba:	3301      	adds	r3, #1
    76bc:	2b07      	cmp	r3, #7
    76be:	9628      	str	r6, [sp, #160]	; 0xa0
    76c0:	9327      	str	r3, [sp, #156]	; 0x9c
    76c2:	f300 833b 	bgt.w	7d3c <_svfprintf_r+0x994>
    76c6:	f109 0908 	add.w	r9, r9, #8
    76ca:	f01b 0f04 	tst.w	fp, #4
    76ce:	d005      	beq.n	76dc <_svfprintf_r+0x334>
    76d0:	9b06      	ldr	r3, [sp, #24]
    76d2:	9a02      	ldr	r2, [sp, #8]
    76d4:	1a9c      	subs	r4, r3, r2
    76d6:	2c00      	cmp	r4, #0
    76d8:	f300 83a7 	bgt.w	7e2a <_svfprintf_r+0xa82>
    76dc:	9b04      	ldr	r3, [sp, #16]
    76de:	9a06      	ldr	r2, [sp, #24]
    76e0:	9902      	ldr	r1, [sp, #8]
    76e2:	428a      	cmp	r2, r1
    76e4:	bfac      	ite	ge
    76e6:	189b      	addge	r3, r3, r2
    76e8:	185b      	addlt	r3, r3, r1
    76ea:	9304      	str	r3, [sp, #16]
    76ec:	2e00      	cmp	r6, #0
    76ee:	f040 82cd 	bne.w	7c8c <_svfprintf_r+0x8e4>
    76f2:	2300      	movs	r3, #0
    76f4:	9327      	str	r3, [sp, #156]	; 0x9c
    76f6:	9b07      	ldr	r3, [sp, #28]
    76f8:	b11b      	cbz	r3, 7702 <_svfprintf_r+0x35a>
    76fa:	9907      	ldr	r1, [sp, #28]
    76fc:	4650      	mov	r0, sl
    76fe:	f7ff f96d 	bl	69dc <_free_r>
    7702:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7706:	4644      	mov	r4, r8
    7708:	e67f      	b.n	740a <_svfprintf_r+0x62>
    770a:	930a      	str	r3, [sp, #40]	; 0x28
    770c:	9b08      	ldr	r3, [sp, #32]
    770e:	3307      	adds	r3, #7
    7710:	f023 0307 	bic.w	r3, r3, #7
    7714:	ecb3 7b02 	vldmia	r3!, {d7}
    7718:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    771c:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
    7720:	9308      	str	r3, [sp, #32]
    7722:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    7726:	ee09 3a90 	vmov	s19, r3
    772a:	ee09 5a10 	vmov	s18, r5
    772e:	4bb4      	ldr	r3, [pc, #720]	; (7a00 <_svfprintf_r+0x658>)
    7730:	ec51 0b19 	vmov	r0, r1, d9
    7734:	f04f 32ff 	mov.w	r2, #4294967295
    7738:	f7fe f888 	bl	584c <__aeabi_dcmpun>
    773c:	2800      	cmp	r0, #0
    773e:	f040 8502 	bne.w	8146 <_svfprintf_r+0xd9e>
    7742:	4baf      	ldr	r3, [pc, #700]	; (7a00 <_svfprintf_r+0x658>)
    7744:	ec51 0b19 	vmov	r0, r1, d9
    7748:	f04f 32ff 	mov.w	r2, #4294967295
    774c:	f7fe f860 	bl	5810 <__aeabi_dcmple>
    7750:	2800      	cmp	r0, #0
    7752:	f040 84f8 	bne.w	8146 <_svfprintf_r+0xd9e>
    7756:	2200      	movs	r2, #0
    7758:	2300      	movs	r3, #0
    775a:	4628      	mov	r0, r5
    775c:	4631      	mov	r1, r6
    775e:	f7fe f84d 	bl	57fc <__aeabi_dcmplt>
    7762:	2800      	cmp	r0, #0
    7764:	f041 805c 	bne.w	8820 <_svfprintf_r+0x1478>
    7768:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    776c:	4ca5      	ldr	r4, [pc, #660]	; (7a04 <_svfprintf_r+0x65c>)
    776e:	4ba6      	ldr	r3, [pc, #664]	; (7a08 <_svfprintf_r+0x660>)
    7770:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    7774:	990a      	ldr	r1, [sp, #40]	; 0x28
    7776:	2947      	cmp	r1, #71	; 0x47
    7778:	bfc8      	it	gt
    777a:	461c      	movgt	r4, r3
    777c:	2300      	movs	r3, #0
    777e:	2103      	movs	r1, #3
    7780:	9307      	str	r3, [sp, #28]
    7782:	9102      	str	r1, [sp, #8]
    7784:	9105      	str	r1, [sp, #20]
    7786:	9303      	str	r3, [sp, #12]
    7788:	930c      	str	r3, [sp, #48]	; 0x30
    778a:	9310      	str	r3, [sp, #64]	; 0x40
    778c:	930b      	str	r3, [sp, #44]	; 0x2c
    778e:	2a00      	cmp	r2, #0
    7790:	f43f af49 	beq.w	7626 <_svfprintf_r+0x27e>
    7794:	9b02      	ldr	r3, [sp, #8]
    7796:	3301      	adds	r3, #1
    7798:	9302      	str	r3, [sp, #8]
    779a:	e744      	b.n	7626 <_svfprintf_r+0x27e>
    779c:	2b43      	cmp	r3, #67	; 0x43
    779e:	930a      	str	r3, [sp, #40]	; 0x28
    77a0:	d003      	beq.n	77aa <_svfprintf_r+0x402>
    77a2:	f01b 0f10 	tst.w	fp, #16
    77a6:	f000 8557 	beq.w	8258 <_svfprintf_r+0xeb0>
    77aa:	9e08      	ldr	r6, [sp, #32]
    77ac:	2208      	movs	r2, #8
    77ae:	2100      	movs	r1, #0
    77b0:	a824      	add	r0, sp, #144	; 0x90
    77b2:	ac39      	add	r4, sp, #228	; 0xe4
    77b4:	f7fe ff14 	bl	65e0 <memset>
    77b8:	ab24      	add	r3, sp, #144	; 0x90
    77ba:	f856 2b04 	ldr.w	r2, [r6], #4
    77be:	4621      	mov	r1, r4
    77c0:	4650      	mov	r0, sl
    77c2:	f002 fe7f 	bl	a4c4 <_wcrtomb_r>
    77c6:	4603      	mov	r3, r0
    77c8:	3301      	adds	r3, #1
    77ca:	9005      	str	r0, [sp, #20]
    77cc:	f001 8323 	beq.w	8e16 <_svfprintf_r+0x1a6e>
    77d0:	9b05      	ldr	r3, [sp, #20]
    77d2:	9608      	str	r6, [sp, #32]
    77d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    77d8:	9302      	str	r3, [sp, #8]
    77da:	2200      	movs	r2, #0
    77dc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    77e0:	9207      	str	r2, [sp, #28]
    77e2:	9203      	str	r2, [sp, #12]
    77e4:	920c      	str	r2, [sp, #48]	; 0x30
    77e6:	9210      	str	r2, [sp, #64]	; 0x40
    77e8:	920b      	str	r2, [sp, #44]	; 0x2c
    77ea:	e71c      	b.n	7626 <_svfprintf_r+0x27e>
    77ec:	9f08      	ldr	r7, [sp, #32]
    77ee:	930a      	str	r3, [sp, #40]	; 0x28
    77f0:	f857 4b04 	ldr.w	r4, [r7], #4
    77f4:	2300      	movs	r3, #0
    77f6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    77fa:	2c00      	cmp	r4, #0
    77fc:	f000 8552 	beq.w	82a4 <_svfprintf_r+0xefc>
    7800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7802:	2b53      	cmp	r3, #83	; 0x53
    7804:	f000 86de 	beq.w	85c4 <_svfprintf_r+0x121c>
    7808:	f01b 0310 	ands.w	r3, fp, #16
    780c:	930b      	str	r3, [sp, #44]	; 0x2c
    780e:	f040 86d9 	bne.w	85c4 <_svfprintf_r+0x121c>
    7812:	9b03      	ldr	r3, [sp, #12]
    7814:	1c5d      	adds	r5, r3, #1
    7816:	f001 80e3 	beq.w	89e0 <_svfprintf_r+0x1638>
    781a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    781c:	461a      	mov	r2, r3
    781e:	4620      	mov	r0, r4
    7820:	f001 fcf6 	bl	9210 <memchr>
    7824:	9007      	str	r0, [sp, #28]
    7826:	2800      	cmp	r0, #0
    7828:	f001 833b 	beq.w	8ea2 <_svfprintf_r+0x1afa>
    782c:	9b07      	ldr	r3, [sp, #28]
    782e:	9708      	str	r7, [sp, #32]
    7830:	1b19      	subs	r1, r3, r4
    7832:	9105      	str	r1, [sp, #20]
    7834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7836:	9303      	str	r3, [sp, #12]
    7838:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    783c:	930c      	str	r3, [sp, #48]	; 0x30
    783e:	9310      	str	r3, [sp, #64]	; 0x40
    7840:	9307      	str	r3, [sp, #28]
    7842:	2373      	movs	r3, #115	; 0x73
    7844:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    7848:	9102      	str	r1, [sp, #8]
    784a:	930a      	str	r3, [sp, #40]	; 0x28
    784c:	e79f      	b.n	778e <_svfprintf_r+0x3e6>
    784e:	f01b 0f20 	tst.w	fp, #32
    7852:	930a      	str	r3, [sp, #40]	; 0x28
    7854:	9b08      	ldr	r3, [sp, #32]
    7856:	d03c      	beq.n	78d2 <_svfprintf_r+0x52a>
    7858:	3307      	adds	r3, #7
    785a:	f023 0307 	bic.w	r3, r3, #7
    785e:	461a      	mov	r2, r3
    7860:	4611      	mov	r1, r2
    7862:	685b      	ldr	r3, [r3, #4]
    7864:	f851 2b08 	ldr.w	r2, [r1], #8
    7868:	9108      	str	r1, [sp, #32]
    786a:	4619      	mov	r1, r3
    786c:	2b00      	cmp	r3, #0
    786e:	f2c0 8407 	blt.w	8080 <_svfprintf_r+0xcd8>
    7872:	9b03      	ldr	r3, [sp, #12]
    7874:	3301      	adds	r3, #1
    7876:	f000 82a7 	beq.w	7dc8 <_svfprintf_r+0xa20>
    787a:	ea52 0301 	orrs.w	r3, r2, r1
    787e:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    7882:	f040 82a2 	bne.w	7dca <_svfprintf_r+0xa22>
    7886:	9b03      	ldr	r3, [sp, #12]
    7888:	2b00      	cmp	r3, #0
    788a:	f040 82a3 	bne.w	7dd4 <_svfprintf_r+0xa2c>
    788e:	46ab      	mov	fp, r5
    7890:	2300      	movs	r3, #0
    7892:	9303      	str	r3, [sp, #12]
    7894:	9305      	str	r3, [sp, #20]
    7896:	ac52      	add	r4, sp, #328	; 0x148
    7898:	e100      	b.n	7a9c <_svfprintf_r+0x6f4>
    789a:	9b08      	ldr	r3, [sp, #32]
    789c:	f853 2b04 	ldr.w	r2, [r3], #4
    78a0:	9206      	str	r2, [sp, #24]
    78a2:	2a00      	cmp	r2, #0
    78a4:	f280 8414 	bge.w	80d0 <_svfprintf_r+0xd28>
    78a8:	9a06      	ldr	r2, [sp, #24]
    78aa:	9308      	str	r3, [sp, #32]
    78ac:	4252      	negs	r2, r2
    78ae:	9206      	str	r2, [sp, #24]
    78b0:	f898 3000 	ldrb.w	r3, [r8]
    78b4:	f04b 0b04 	orr.w	fp, fp, #4
    78b8:	e5d2      	b.n	7460 <_svfprintf_r+0xb8>
    78ba:	f898 3000 	ldrb.w	r3, [r8]
    78be:	f04b 0b08 	orr.w	fp, fp, #8
    78c2:	e5cd      	b.n	7460 <_svfprintf_r+0xb8>
    78c4:	f04b 0b10 	orr.w	fp, fp, #16
    78c8:	f01b 0f20 	tst.w	fp, #32
    78cc:	930a      	str	r3, [sp, #40]	; 0x28
    78ce:	9b08      	ldr	r3, [sp, #32]
    78d0:	d1c2      	bne.n	7858 <_svfprintf_r+0x4b0>
    78d2:	f01b 0f10 	tst.w	fp, #16
    78d6:	f040 8406 	bne.w	80e6 <_svfprintf_r+0xd3e>
    78da:	f01b 0f40 	tst.w	fp, #64	; 0x40
    78de:	f000 83fe 	beq.w	80de <_svfprintf_r+0xd36>
    78e2:	f933 2b04 	ldrsh.w	r2, [r3], #4
    78e6:	9308      	str	r3, [sp, #32]
    78e8:	17d1      	asrs	r1, r2, #31
    78ea:	460b      	mov	r3, r1
    78ec:	e7be      	b.n	786c <_svfprintf_r+0x4c4>
    78ee:	9b08      	ldr	r3, [sp, #32]
    78f0:	f853 2b04 	ldr.w	r2, [r3], #4
    78f4:	9308      	str	r3, [sp, #32]
    78f6:	f647 0330 	movw	r3, #30768	; 0x7830
    78fa:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    78fe:	2078      	movs	r0, #120	; 0x78
    7900:	4b42      	ldr	r3, [pc, #264]	; (7a0c <_svfprintf_r+0x664>)
    7902:	9312      	str	r3, [sp, #72]	; 0x48
    7904:	f04b 0502 	orr.w	r5, fp, #2
    7908:	2100      	movs	r1, #0
    790a:	2302      	movs	r3, #2
    790c:	900a      	str	r0, [sp, #40]	; 0x28
    790e:	2000      	movs	r0, #0
    7910:	9c03      	ldr	r4, [sp, #12]
    7912:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    7916:	1c60      	adds	r0, r4, #1
    7918:	f000 80a9 	beq.w	7a6e <_svfprintf_r+0x6c6>
    791c:	ea52 0001 	orrs.w	r0, r2, r1
    7920:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    7924:	f040 80a2 	bne.w	7a6c <_svfprintf_r+0x6c4>
    7928:	2c00      	cmp	r4, #0
    792a:	f040 86a1 	bne.w	8670 <_svfprintf_r+0x12c8>
    792e:	2b00      	cmp	r3, #0
    7930:	d1ae      	bne.n	7890 <_svfprintf_r+0x4e8>
    7932:	f015 0301 	ands.w	r3, r5, #1
    7936:	9305      	str	r3, [sp, #20]
    7938:	f000 83cf 	beq.w	80da <_svfprintf_r+0xd32>
    793c:	2330      	movs	r3, #48	; 0x30
    793e:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
    7942:	f20d 1447 	addw	r4, sp, #327	; 0x147
    7946:	e0a9      	b.n	7a9c <_svfprintf_r+0x6f4>
    7948:	f01b 0f20 	tst.w	fp, #32
    794c:	f040 83f0 	bne.w	8130 <_svfprintf_r+0xd88>
    7950:	f01b 0f10 	tst.w	fp, #16
    7954:	f040 8692 	bne.w	867c <_svfprintf_r+0x12d4>
    7958:	f01b 0f40 	tst.w	fp, #64	; 0x40
    795c:	f040 8797 	bne.w	888e <_svfprintf_r+0x14e6>
    7960:	f41b 7f00 	tst.w	fp, #512	; 0x200
    7964:	f000 868a 	beq.w	867c <_svfprintf_r+0x12d4>
    7968:	9b08      	ldr	r3, [sp, #32]
    796a:	9904      	ldr	r1, [sp, #16]
    796c:	f853 2b04 	ldr.w	r2, [r3], #4
    7970:	9308      	str	r3, [sp, #32]
    7972:	7011      	strb	r1, [r2, #0]
    7974:	4644      	mov	r4, r8
    7976:	e548      	b.n	740a <_svfprintf_r+0x62>
    7978:	f898 3000 	ldrb.w	r3, [r8]
    797c:	2b68      	cmp	r3, #104	; 0x68
    797e:	bf03      	ittte	eq
    7980:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    7984:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    7988:	f108 0801 	addeq.w	r8, r8, #1
    798c:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    7990:	e566      	b.n	7460 <_svfprintf_r+0xb8>
    7992:	f898 3000 	ldrb.w	r3, [r8]
    7996:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
    799a:	e561      	b.n	7460 <_svfprintf_r+0xb8>
    799c:	f898 3000 	ldrb.w	r3, [r8]
    79a0:	2b6c      	cmp	r3, #108	; 0x6c
    79a2:	bf03      	ittte	eq
    79a4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    79a8:	f04b 0b20 	orreq.w	fp, fp, #32
    79ac:	f108 0801 	addeq.w	r8, r8, #1
    79b0:	f04b 0b10 	orrne.w	fp, fp, #16
    79b4:	e554      	b.n	7460 <_svfprintf_r+0xb8>
    79b6:	930a      	str	r3, [sp, #40]	; 0x28
    79b8:	f04b 0b10 	orr.w	fp, fp, #16
    79bc:	f01b 0120 	ands.w	r1, fp, #32
    79c0:	f000 8350 	beq.w	8064 <_svfprintf_r+0xcbc>
    79c4:	9b08      	ldr	r3, [sp, #32]
    79c6:	3307      	adds	r3, #7
    79c8:	f023 0307 	bic.w	r3, r3, #7
    79cc:	6859      	ldr	r1, [r3, #4]
    79ce:	f853 2b08 	ldr.w	r2, [r3], #8
    79d2:	9308      	str	r3, [sp, #32]
    79d4:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    79d8:	2300      	movs	r3, #0
    79da:	e798      	b.n	790e <_svfprintf_r+0x566>
    79dc:	930a      	str	r3, [sp, #40]	; 0x28
    79de:	f04b 0510 	orr.w	r5, fp, #16
    79e2:	f015 0120 	ands.w	r1, r5, #32
    79e6:	f000 832e 	beq.w	8046 <_svfprintf_r+0xc9e>
    79ea:	9b08      	ldr	r3, [sp, #32]
    79ec:	3307      	adds	r3, #7
    79ee:	f023 0307 	bic.w	r3, r3, #7
    79f2:	6859      	ldr	r1, [r3, #4]
    79f4:	f853 2b08 	ldr.w	r2, [r3], #8
    79f8:	9308      	str	r3, [sp, #32]
    79fa:	2301      	movs	r3, #1
    79fc:	e787      	b.n	790e <_svfprintf_r+0x566>
    79fe:	bf00      	nop
    7a00:	7fefffff 	.word	0x7fefffff
    7a04:	0000caf4 	.word	0x0000caf4
    7a08:	0000caf8 	.word	0x0000caf8
    7a0c:	0000cb04 	.word	0x0000cb04
    7a10:	f898 3000 	ldrb.w	r3, [r8]
    7a14:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    7a18:	e522      	b.n	7460 <_svfprintf_r+0xb8>
    7a1a:	4641      	mov	r1, r8
    7a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
    7a20:	2b2a      	cmp	r3, #42	; 0x2a
    7a22:	f001 8277 	beq.w	8f14 <_svfprintf_r+0x1b6c>
    7a26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7a2a:	2a09      	cmp	r2, #9
    7a2c:	4688      	mov	r8, r1
    7a2e:	bf98      	it	ls
    7a30:	2100      	movls	r1, #0
    7a32:	f201 818c 	bhi.w	8d4e <_svfprintf_r+0x19a6>
    7a36:	f818 3b01 	ldrb.w	r3, [r8], #1
    7a3a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7a3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7a42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7a46:	2a09      	cmp	r2, #9
    7a48:	d9f5      	bls.n	7a36 <_svfprintf_r+0x68e>
    7a4a:	9103      	str	r1, [sp, #12]
    7a4c:	e50a      	b.n	7464 <_svfprintf_r+0xbc>
    7a4e:	f898 3000 	ldrb.w	r3, [r8]
    7a52:	f04b 0b01 	orr.w	fp, fp, #1
    7a56:	e503      	b.n	7460 <_svfprintf_r+0xb8>
    7a58:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
    7a5c:	2b00      	cmp	r3, #0
    7a5e:	f47f ad84 	bne.w	756a <_svfprintf_r+0x1c2>
    7a62:	f898 3000 	ldrb.w	r3, [r8]
    7a66:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
    7a6a:	e4f9      	b.n	7460 <_svfprintf_r+0xb8>
    7a6c:	465d      	mov	r5, fp
    7a6e:	2b01      	cmp	r3, #1
    7a70:	f000 81ab 	beq.w	7dca <_svfprintf_r+0xa22>
    7a74:	2b02      	cmp	r3, #2
    7a76:	ac52      	add	r4, sp, #328	; 0x148
    7a78:	d11f      	bne.n	7aba <_svfprintf_r+0x712>
    7a7a:	9812      	ldr	r0, [sp, #72]	; 0x48
    7a7c:	f002 030f 	and.w	r3, r2, #15
    7a80:	0912      	lsrs	r2, r2, #4
    7a82:	5cc3      	ldrb	r3, [r0, r3]
    7a84:	f804 3d01 	strb.w	r3, [r4, #-1]!
    7a88:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    7a8c:	0909      	lsrs	r1, r1, #4
    7a8e:	ea52 0301 	orrs.w	r3, r2, r1
    7a92:	d1f3      	bne.n	7a7c <_svfprintf_r+0x6d4>
    7a94:	ab52      	add	r3, sp, #328	; 0x148
    7a96:	1b1b      	subs	r3, r3, r4
    7a98:	46ab      	mov	fp, r5
    7a9a:	9305      	str	r3, [sp, #20]
    7a9c:	9905      	ldr	r1, [sp, #20]
    7a9e:	9803      	ldr	r0, [sp, #12]
    7aa0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    7aa4:	4281      	cmp	r1, r0
    7aa6:	f04f 0300 	mov.w	r3, #0
    7aaa:	bfb8      	it	lt
    7aac:	4601      	movlt	r1, r0
    7aae:	9307      	str	r3, [sp, #28]
    7ab0:	9102      	str	r1, [sp, #8]
    7ab2:	930c      	str	r3, [sp, #48]	; 0x30
    7ab4:	9310      	str	r3, [sp, #64]	; 0x40
    7ab6:	930b      	str	r3, [sp, #44]	; 0x2c
    7ab8:	e669      	b.n	778e <_svfprintf_r+0x3e6>
    7aba:	f002 0307 	and.w	r3, r2, #7
    7abe:	08d2      	lsrs	r2, r2, #3
    7ac0:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    7ac4:	08c9      	lsrs	r1, r1, #3
    7ac6:	3330      	adds	r3, #48	; 0x30
    7ac8:	ea52 0601 	orrs.w	r6, r2, r1
    7acc:	4620      	mov	r0, r4
    7ace:	f804 3d01 	strb.w	r3, [r4, #-1]!
    7ad2:	d1f2      	bne.n	7aba <_svfprintf_r+0x712>
    7ad4:	07e9      	lsls	r1, r5, #31
    7ad6:	d5dd      	bpl.n	7a94 <_svfprintf_r+0x6ec>
    7ad8:	2b30      	cmp	r3, #48	; 0x30
    7ada:	d0db      	beq.n	7a94 <_svfprintf_r+0x6ec>
    7adc:	2330      	movs	r3, #48	; 0x30
    7ade:	3802      	subs	r0, #2
    7ae0:	f804 3c01 	strb.w	r3, [r4, #-1]
    7ae4:	ab52      	add	r3, sp, #328	; 0x148
    7ae6:	1a1b      	subs	r3, r3, r0
    7ae8:	46ab      	mov	fp, r5
    7aea:	9305      	str	r3, [sp, #20]
    7aec:	4604      	mov	r4, r0
    7aee:	e7d5      	b.n	7a9c <_svfprintf_r+0x6f4>
    7af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7af2:	2b65      	cmp	r3, #101	; 0x65
    7af4:	f340 80dc 	ble.w	7cb0 <_svfprintf_r+0x908>
    7af8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    7afc:	2200      	movs	r2, #0
    7afe:	2300      	movs	r3, #0
    7b00:	f7fd fe72 	bl	57e8 <__aeabi_dcmpeq>
    7b04:	2800      	cmp	r0, #0
    7b06:	f000 81c8 	beq.w	7e9a <_svfprintf_r+0xaf2>
    7b0a:	2301      	movs	r3, #1
    7b0c:	f8c9 3004 	str.w	r3, [r9, #4]
    7b10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7b12:	4abc      	ldr	r2, [pc, #752]	; (7e04 <_svfprintf_r+0xa5c>)
    7b14:	f8c9 2000 	str.w	r2, [r9]
    7b18:	3301      	adds	r3, #1
    7b1a:	3601      	adds	r6, #1
    7b1c:	2b07      	cmp	r3, #7
    7b1e:	9628      	str	r6, [sp, #160]	; 0xa0
    7b20:	9327      	str	r3, [sp, #156]	; 0x9c
    7b22:	f300 8541 	bgt.w	85a8 <_svfprintf_r+0x1200>
    7b26:	f109 0908 	add.w	r9, r9, #8
    7b2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7b2e:	4293      	cmp	r3, r2
    7b30:	f280 82c9 	bge.w	80c6 <_svfprintf_r+0xd1e>
    7b34:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7b36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7b38:	441e      	add	r6, r3
    7b3a:	e9c9 2300 	strd	r2, r3, [r9]
    7b3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7b40:	9628      	str	r6, [sp, #160]	; 0xa0
    7b42:	3301      	adds	r3, #1
    7b44:	2b07      	cmp	r3, #7
    7b46:	9327      	str	r3, [sp, #156]	; 0x9c
    7b48:	f300 8392 	bgt.w	8270 <_svfprintf_r+0xec8>
    7b4c:	f109 0908 	add.w	r9, r9, #8
    7b50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7b52:	1e5c      	subs	r4, r3, #1
    7b54:	2c00      	cmp	r4, #0
    7b56:	f77f adb8 	ble.w	76ca <_svfprintf_r+0x322>
    7b5a:	2c10      	cmp	r4, #16
    7b5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7b5e:	4daa      	ldr	r5, [pc, #680]	; (7e08 <_svfprintf_r+0xa60>)
    7b60:	f340 855e 	ble.w	8620 <_svfprintf_r+0x1278>
    7b64:	4632      	mov	r2, r6
    7b66:	2710      	movs	r7, #16
    7b68:	ee1a 6a10 	vmov	r6, s20
    7b6c:	e005      	b.n	7b7a <_svfprintf_r+0x7d2>
    7b6e:	f109 0908 	add.w	r9, r9, #8
    7b72:	3c10      	subs	r4, #16
    7b74:	2c10      	cmp	r4, #16
    7b76:	f340 8552 	ble.w	861e <_svfprintf_r+0x1276>
    7b7a:	3301      	adds	r3, #1
    7b7c:	3210      	adds	r2, #16
    7b7e:	2b07      	cmp	r3, #7
    7b80:	e9c9 5700 	strd	r5, r7, [r9]
    7b84:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    7b88:	ddf1      	ble.n	7b6e <_svfprintf_r+0x7c6>
    7b8a:	aa26      	add	r2, sp, #152	; 0x98
    7b8c:	4631      	mov	r1, r6
    7b8e:	4650      	mov	r0, sl
    7b90:	f002 fcde 	bl	a550 <__ssprint_r>
    7b94:	2800      	cmp	r0, #0
    7b96:	f040 8082 	bne.w	7c9e <_svfprintf_r+0x8f6>
    7b9a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    7b9e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7ba2:	e7e6      	b.n	7b72 <_svfprintf_r+0x7ca>
    7ba4:	9b06      	ldr	r3, [sp, #24]
    7ba6:	9a02      	ldr	r2, [sp, #8]
    7ba8:	1a9f      	subs	r7, r3, r2
    7baa:	2f00      	cmp	r7, #0
    7bac:	f77f ad74 	ble.w	7698 <_svfprintf_r+0x2f0>
    7bb0:	2f10      	cmp	r7, #16
    7bb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7bb4:	4d94      	ldr	r5, [pc, #592]	; (7e08 <_svfprintf_r+0xa60>)
    7bb6:	dd22      	ble.n	7bfe <_svfprintf_r+0x856>
    7bb8:	4632      	mov	r2, r6
    7bba:	ee1a 6a10 	vmov	r6, s20
    7bbe:	e004      	b.n	7bca <_svfprintf_r+0x822>
    7bc0:	3f10      	subs	r7, #16
    7bc2:	2f10      	cmp	r7, #16
    7bc4:	f109 0908 	add.w	r9, r9, #8
    7bc8:	dd18      	ble.n	7bfc <_svfprintf_r+0x854>
    7bca:	3301      	adds	r3, #1
    7bcc:	3210      	adds	r2, #16
    7bce:	2110      	movs	r1, #16
    7bd0:	2b07      	cmp	r3, #7
    7bd2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    7bd6:	f8c9 5000 	str.w	r5, [r9]
    7bda:	f8c9 1004 	str.w	r1, [r9, #4]
    7bde:	ddef      	ble.n	7bc0 <_svfprintf_r+0x818>
    7be0:	aa26      	add	r2, sp, #152	; 0x98
    7be2:	4631      	mov	r1, r6
    7be4:	4650      	mov	r0, sl
    7be6:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7bea:	f002 fcb1 	bl	a550 <__ssprint_r>
    7bee:	2800      	cmp	r0, #0
    7bf0:	d155      	bne.n	7c9e <_svfprintf_r+0x8f6>
    7bf2:	3f10      	subs	r7, #16
    7bf4:	2f10      	cmp	r7, #16
    7bf6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    7bfa:	dce6      	bgt.n	7bca <_svfprintf_r+0x822>
    7bfc:	4616      	mov	r6, r2
    7bfe:	3301      	adds	r3, #1
    7c00:	443e      	add	r6, r7
    7c02:	2b07      	cmp	r3, #7
    7c04:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    7c08:	f8c9 5000 	str.w	r5, [r9]
    7c0c:	f8c9 7004 	str.w	r7, [r9, #4]
    7c10:	f300 8520 	bgt.w	8654 <_svfprintf_r+0x12ac>
    7c14:	9b03      	ldr	r3, [sp, #12]
    7c16:	9a05      	ldr	r2, [sp, #20]
    7c18:	1a9f      	subs	r7, r3, r2
    7c1a:	2f00      	cmp	r7, #0
    7c1c:	f109 0908 	add.w	r9, r9, #8
    7c20:	f77f ad40 	ble.w	76a4 <_svfprintf_r+0x2fc>
    7c24:	2f10      	cmp	r7, #16
    7c26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7c28:	4d77      	ldr	r5, [pc, #476]	; (7e08 <_svfprintf_r+0xa60>)
    7c2a:	dd21      	ble.n	7c70 <_svfprintf_r+0x8c8>
    7c2c:	4632      	mov	r2, r6
    7c2e:	ee1a 6a10 	vmov	r6, s20
    7c32:	e004      	b.n	7c3e <_svfprintf_r+0x896>
    7c34:	3f10      	subs	r7, #16
    7c36:	2f10      	cmp	r7, #16
    7c38:	f109 0908 	add.w	r9, r9, #8
    7c3c:	dd17      	ble.n	7c6e <_svfprintf_r+0x8c6>
    7c3e:	3301      	adds	r3, #1
    7c40:	3210      	adds	r2, #16
    7c42:	2110      	movs	r1, #16
    7c44:	2b07      	cmp	r3, #7
    7c46:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    7c4a:	f8c9 5000 	str.w	r5, [r9]
    7c4e:	f8c9 1004 	str.w	r1, [r9, #4]
    7c52:	ddef      	ble.n	7c34 <_svfprintf_r+0x88c>
    7c54:	aa26      	add	r2, sp, #152	; 0x98
    7c56:	4631      	mov	r1, r6
    7c58:	4650      	mov	r0, sl
    7c5a:	f002 fc79 	bl	a550 <__ssprint_r>
    7c5e:	b9f0      	cbnz	r0, 7c9e <_svfprintf_r+0x8f6>
    7c60:	3f10      	subs	r7, #16
    7c62:	2f10      	cmp	r7, #16
    7c64:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    7c68:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7c6c:	dce7      	bgt.n	7c3e <_svfprintf_r+0x896>
    7c6e:	4616      	mov	r6, r2
    7c70:	3301      	adds	r3, #1
    7c72:	443e      	add	r6, r7
    7c74:	2b07      	cmp	r3, #7
    7c76:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    7c7a:	f8c9 5000 	str.w	r5, [r9]
    7c7e:	f8c9 7004 	str.w	r7, [r9, #4]
    7c82:	f300 81d2 	bgt.w	802a <_svfprintf_r+0xc82>
    7c86:	f109 0908 	add.w	r9, r9, #8
    7c8a:	e50b      	b.n	76a4 <_svfprintf_r+0x2fc>
    7c8c:	ee1a 1a10 	vmov	r1, s20
    7c90:	aa26      	add	r2, sp, #152	; 0x98
    7c92:	4650      	mov	r0, sl
    7c94:	f002 fc5c 	bl	a550 <__ssprint_r>
    7c98:	2800      	cmp	r0, #0
    7c9a:	f43f ad2a 	beq.w	76f2 <_svfprintf_r+0x34a>
    7c9e:	9b07      	ldr	r3, [sp, #28]
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	f43f ac8c 	beq.w	75be <_svfprintf_r+0x216>
    7ca6:	9907      	ldr	r1, [sp, #28]
    7ca8:	4650      	mov	r0, sl
    7caa:	f7fe fe97 	bl	69dc <_free_r>
    7cae:	e486      	b.n	75be <_svfprintf_r+0x216>
    7cb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7cb2:	2b01      	cmp	r3, #1
    7cb4:	f340 816f 	ble.w	7f96 <_svfprintf_r+0xbee>
    7cb8:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    7cba:	f8c9 4000 	str.w	r4, [r9]
    7cbe:	2301      	movs	r3, #1
    7cc0:	441f      	add	r7, r3
    7cc2:	3601      	adds	r6, #1
    7cc4:	2f07      	cmp	r7, #7
    7cc6:	f8c9 3004 	str.w	r3, [r9, #4]
    7cca:	9628      	str	r6, [sp, #160]	; 0xa0
    7ccc:	9727      	str	r7, [sp, #156]	; 0x9c
    7cce:	f300 81de 	bgt.w	808e <_svfprintf_r+0xce6>
    7cd2:	f109 0908 	add.w	r9, r9, #8
    7cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7cd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7cda:	3701      	adds	r7, #1
    7cdc:	441e      	add	r6, r3
    7cde:	2f07      	cmp	r7, #7
    7ce0:	e9c9 2300 	strd	r2, r3, [r9]
    7ce4:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    7ce8:	f300 81df 	bgt.w	80aa <_svfprintf_r+0xd02>
    7cec:	f109 0908 	add.w	r9, r9, #8
    7cf0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    7cf4:	2200      	movs	r2, #0
    7cf6:	2300      	movs	r3, #0
    7cf8:	f7fd fd76 	bl	57e8 <__aeabi_dcmpeq>
    7cfc:	2800      	cmp	r0, #0
    7cfe:	f040 8169 	bne.w	7fd4 <_svfprintf_r+0xc2c>
    7d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d04:	3701      	adds	r7, #1
    7d06:	3b01      	subs	r3, #1
    7d08:	3401      	adds	r4, #1
    7d0a:	441e      	add	r6, r3
    7d0c:	2f07      	cmp	r7, #7
    7d0e:	f8c9 4000 	str.w	r4, [r9]
    7d12:	9727      	str	r7, [sp, #156]	; 0x9c
    7d14:	f8c9 3004 	str.w	r3, [r9, #4]
    7d18:	9628      	str	r6, [sp, #160]	; 0xa0
    7d1a:	f300 814d 	bgt.w	7fb8 <_svfprintf_r+0xc10>
    7d1e:	f109 0908 	add.w	r9, r9, #8
    7d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7d24:	f8c9 3004 	str.w	r3, [r9, #4]
    7d28:	3701      	adds	r7, #1
    7d2a:	441e      	add	r6, r3
    7d2c:	2f07      	cmp	r7, #7
    7d2e:	ab20      	add	r3, sp, #128	; 0x80
    7d30:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    7d34:	f8c9 3000 	str.w	r3, [r9]
    7d38:	f77f acc5 	ble.w	76c6 <_svfprintf_r+0x31e>
    7d3c:	ee1a 1a10 	vmov	r1, s20
    7d40:	aa26      	add	r2, sp, #152	; 0x98
    7d42:	4650      	mov	r0, sl
    7d44:	f002 fc04 	bl	a550 <__ssprint_r>
    7d48:	2800      	cmp	r0, #0
    7d4a:	d1a8      	bne.n	7c9e <_svfprintf_r+0x8f6>
    7d4c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7d4e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7d52:	e4ba      	b.n	76ca <_svfprintf_r+0x322>
    7d54:	2f10      	cmp	r7, #16
    7d56:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
    7d5a:	4d2c      	ldr	r5, [pc, #176]	; (7e0c <_svfprintf_r+0xa64>)
    7d5c:	dd24      	ble.n	7da8 <_svfprintf_r+0xa00>
    7d5e:	9318      	str	r3, [sp, #96]	; 0x60
    7d60:	9419      	str	r4, [sp, #100]	; 0x64
    7d62:	2610      	movs	r6, #16
    7d64:	ee1a 4a10 	vmov	r4, s20
    7d68:	460b      	mov	r3, r1
    7d6a:	e004      	b.n	7d76 <_svfprintf_r+0x9ce>
    7d6c:	3f10      	subs	r7, #16
    7d6e:	2f10      	cmp	r7, #16
    7d70:	f109 0908 	add.w	r9, r9, #8
    7d74:	dd15      	ble.n	7da2 <_svfprintf_r+0x9fa>
    7d76:	3201      	adds	r2, #1
    7d78:	3310      	adds	r3, #16
    7d7a:	2a07      	cmp	r2, #7
    7d7c:	e9c9 5600 	strd	r5, r6, [r9]
    7d80:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
    7d84:	ddf2      	ble.n	7d6c <_svfprintf_r+0x9c4>
    7d86:	aa26      	add	r2, sp, #152	; 0x98
    7d88:	4621      	mov	r1, r4
    7d8a:	4650      	mov	r0, sl
    7d8c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7d90:	f002 fbde 	bl	a550 <__ssprint_r>
    7d94:	2800      	cmp	r0, #0
    7d96:	d182      	bne.n	7c9e <_svfprintf_r+0x8f6>
    7d98:	3f10      	subs	r7, #16
    7d9a:	2f10      	cmp	r7, #16
    7d9c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
    7da0:	dce9      	bgt.n	7d76 <_svfprintf_r+0x9ce>
    7da2:	4619      	mov	r1, r3
    7da4:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
    7da8:	3201      	adds	r2, #1
    7daa:	187e      	adds	r6, r7, r1
    7dac:	2a07      	cmp	r2, #7
    7dae:	e9cd 2627 	strd	r2, r6, [sp, #156]	; 0x9c
    7db2:	f8c9 5000 	str.w	r5, [r9]
    7db6:	f8c9 7004 	str.w	r7, [r9, #4]
    7dba:	f300 83a3 	bgt.w	8504 <_svfprintf_r+0x115c>
    7dbe:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    7dc2:	f109 0908 	add.w	r9, r9, #8
    7dc6:	e43f      	b.n	7648 <_svfprintf_r+0x2a0>
    7dc8:	465d      	mov	r5, fp
    7dca:	2a0a      	cmp	r2, #10
    7dcc:	f171 0300 	sbcs.w	r3, r1, #0
    7dd0:	f080 8334 	bcs.w	843c <_svfprintf_r+0x1094>
    7dd4:	3230      	adds	r2, #48	; 0x30
    7dd6:	2301      	movs	r3, #1
    7dd8:	f88d 2147 	strb.w	r2, [sp, #327]	; 0x147
    7ddc:	46ab      	mov	fp, r5
    7dde:	9305      	str	r3, [sp, #20]
    7de0:	f20d 1447 	addw	r4, sp, #327	; 0x147
    7de4:	e65a      	b.n	7a9c <_svfprintf_r+0x6f4>
    7de6:	ee1a 1a10 	vmov	r1, s20
    7dea:	aa26      	add	r2, sp, #152	; 0x98
    7dec:	4650      	mov	r0, sl
    7dee:	9318      	str	r3, [sp, #96]	; 0x60
    7df0:	f002 fbae 	bl	a550 <__ssprint_r>
    7df4:	2800      	cmp	r0, #0
    7df6:	f47f af52 	bne.w	7c9e <_svfprintf_r+0x8f6>
    7dfa:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7dfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7dfe:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7e02:	e433      	b.n	766c <_svfprintf_r+0x2c4>
    7e04:	0000cb34 	.word	0x0000cb34
    7e08:	0000cb48 	.word	0x0000cb48
    7e0c:	0000cb38 	.word	0x0000cb38
    7e10:	ee1a 1a10 	vmov	r1, s20
    7e14:	aa26      	add	r2, sp, #152	; 0x98
    7e16:	4650      	mov	r0, sl
    7e18:	f002 fb9a 	bl	a550 <__ssprint_r>
    7e1c:	2800      	cmp	r0, #0
    7e1e:	f47f af3e 	bne.w	7c9e <_svfprintf_r+0x8f6>
    7e22:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7e24:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7e28:	e432      	b.n	7690 <_svfprintf_r+0x2e8>
    7e2a:	2c10      	cmp	r4, #16
    7e2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7e2e:	4dbe      	ldr	r5, [pc, #760]	; (8128 <_svfprintf_r+0xd80>)
    7e30:	dd1f      	ble.n	7e72 <_svfprintf_r+0xaca>
    7e32:	ee1a ba10 	vmov	fp, s20
    7e36:	2710      	movs	r7, #16
    7e38:	e004      	b.n	7e44 <_svfprintf_r+0xa9c>
    7e3a:	3c10      	subs	r4, #16
    7e3c:	2c10      	cmp	r4, #16
    7e3e:	f109 0908 	add.w	r9, r9, #8
    7e42:	dd16      	ble.n	7e72 <_svfprintf_r+0xaca>
    7e44:	3301      	adds	r3, #1
    7e46:	3610      	adds	r6, #16
    7e48:	2b07      	cmp	r3, #7
    7e4a:	e9c9 5700 	strd	r5, r7, [r9]
    7e4e:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    7e52:	ddf2      	ble.n	7e3a <_svfprintf_r+0xa92>
    7e54:	aa26      	add	r2, sp, #152	; 0x98
    7e56:	4659      	mov	r1, fp
    7e58:	4650      	mov	r0, sl
    7e5a:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7e5e:	f002 fb77 	bl	a550 <__ssprint_r>
    7e62:	2800      	cmp	r0, #0
    7e64:	f47f af1b 	bne.w	7c9e <_svfprintf_r+0x8f6>
    7e68:	3c10      	subs	r4, #16
    7e6a:	2c10      	cmp	r4, #16
    7e6c:	e9dd 3627 	ldrd	r3, r6, [sp, #156]	; 0x9c
    7e70:	dce8      	bgt.n	7e44 <_svfprintf_r+0xa9c>
    7e72:	3301      	adds	r3, #1
    7e74:	4426      	add	r6, r4
    7e76:	2b07      	cmp	r3, #7
    7e78:	e9c9 5400 	strd	r5, r4, [r9]
    7e7c:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    7e80:	f77f ac2c 	ble.w	76dc <_svfprintf_r+0x334>
    7e84:	ee1a 1a10 	vmov	r1, s20
    7e88:	aa26      	add	r2, sp, #152	; 0x98
    7e8a:	4650      	mov	r0, sl
    7e8c:	f002 fb60 	bl	a550 <__ssprint_r>
    7e90:	2800      	cmp	r0, #0
    7e92:	f47f af04 	bne.w	7c9e <_svfprintf_r+0x8f6>
    7e96:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7e98:	e420      	b.n	76dc <_svfprintf_r+0x334>
    7e9a:	991d      	ldr	r1, [sp, #116]	; 0x74
    7e9c:	2900      	cmp	r1, #0
    7e9e:	f340 8343 	ble.w	8528 <_svfprintf_r+0x1180>
    7ea2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    7ea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7ea6:	429d      	cmp	r5, r3
    7ea8:	bfa8      	it	ge
    7eaa:	461d      	movge	r5, r3
    7eac:	2d00      	cmp	r5, #0
    7eae:	dd0b      	ble.n	7ec8 <_svfprintf_r+0xb20>
    7eb0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7eb2:	3301      	adds	r3, #1
    7eb4:	442e      	add	r6, r5
    7eb6:	2b07      	cmp	r3, #7
    7eb8:	e9c9 4500 	strd	r4, r5, [r9]
    7ebc:	9628      	str	r6, [sp, #160]	; 0xa0
    7ebe:	9327      	str	r3, [sp, #156]	; 0x9c
    7ec0:	f300 86fc 	bgt.w	8cbc <_svfprintf_r+0x1914>
    7ec4:	f109 0908 	add.w	r9, r9, #8
    7ec8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    7eca:	2d00      	cmp	r5, #0
    7ecc:	bfa8      	it	ge
    7ece:	1b7f      	subge	r7, r7, r5
    7ed0:	2f00      	cmp	r7, #0
    7ed2:	f300 81f8 	bgt.w	82c6 <_svfprintf_r+0xf1e>
    7ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7ed8:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    7edc:	4423      	add	r3, r4
    7ede:	9305      	str	r3, [sp, #20]
    7ee0:	f040 8218 	bne.w	8314 <_svfprintf_r+0xf6c>
    7ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7ee8:	4293      	cmp	r3, r2
    7eea:	db03      	blt.n	7ef4 <_svfprintf_r+0xb4c>
    7eec:	f01b 0f01 	tst.w	fp, #1
    7ef0:	f000 84bc 	beq.w	886c <_svfprintf_r+0x14c4>
    7ef4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7ef6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7ef8:	4416      	add	r6, r2
    7efa:	e9c9 1200 	strd	r1, r2, [r9]
    7efe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    7f00:	9628      	str	r6, [sp, #160]	; 0xa0
    7f02:	3201      	adds	r2, #1
    7f04:	2a07      	cmp	r2, #7
    7f06:	9227      	str	r2, [sp, #156]	; 0x9c
    7f08:	f300 86e6 	bgt.w	8cd8 <_svfprintf_r+0x1930>
    7f0c:	f109 0908 	add.w	r9, r9, #8
    7f10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7f12:	18a5      	adds	r5, r4, r2
    7f14:	1ad4      	subs	r4, r2, r3
    7f16:	9b05      	ldr	r3, [sp, #20]
    7f18:	1aed      	subs	r5, r5, r3
    7f1a:	42a5      	cmp	r5, r4
    7f1c:	bfa8      	it	ge
    7f1e:	4625      	movge	r5, r4
    7f20:	2d00      	cmp	r5, #0
    7f22:	dd0d      	ble.n	7f40 <_svfprintf_r+0xb98>
    7f24:	f8c9 3000 	str.w	r3, [r9]
    7f28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7f2a:	f8c9 5004 	str.w	r5, [r9, #4]
    7f2e:	3301      	adds	r3, #1
    7f30:	442e      	add	r6, r5
    7f32:	2b07      	cmp	r3, #7
    7f34:	9628      	str	r6, [sp, #160]	; 0xa0
    7f36:	9327      	str	r3, [sp, #156]	; 0x9c
    7f38:	f300 86f8 	bgt.w	8d2c <_svfprintf_r+0x1984>
    7f3c:	f109 0908 	add.w	r9, r9, #8
    7f40:	2d00      	cmp	r5, #0
    7f42:	bfa8      	it	ge
    7f44:	1b64      	subge	r4, r4, r5
    7f46:	2c00      	cmp	r4, #0
    7f48:	f77f abbf 	ble.w	76ca <_svfprintf_r+0x322>
    7f4c:	2c10      	cmp	r4, #16
    7f4e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7f50:	4d76      	ldr	r5, [pc, #472]	; (812c <_svfprintf_r+0xd84>)
    7f52:	f340 8365 	ble.w	8620 <_svfprintf_r+0x1278>
    7f56:	4632      	mov	r2, r6
    7f58:	2710      	movs	r7, #16
    7f5a:	ee1a 6a10 	vmov	r6, s20
    7f5e:	e005      	b.n	7f6c <_svfprintf_r+0xbc4>
    7f60:	f109 0908 	add.w	r9, r9, #8
    7f64:	3c10      	subs	r4, #16
    7f66:	2c10      	cmp	r4, #16
    7f68:	f340 8359 	ble.w	861e <_svfprintf_r+0x1276>
    7f6c:	3301      	adds	r3, #1
    7f6e:	3210      	adds	r2, #16
    7f70:	2b07      	cmp	r3, #7
    7f72:	e9c9 5700 	strd	r5, r7, [r9]
    7f76:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    7f7a:	ddf1      	ble.n	7f60 <_svfprintf_r+0xbb8>
    7f7c:	aa26      	add	r2, sp, #152	; 0x98
    7f7e:	4631      	mov	r1, r6
    7f80:	4650      	mov	r0, sl
    7f82:	f002 fae5 	bl	a550 <__ssprint_r>
    7f86:	2800      	cmp	r0, #0
    7f88:	f47f ae89 	bne.w	7c9e <_svfprintf_r+0x8f6>
    7f8c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    7f90:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7f94:	e7e6      	b.n	7f64 <_svfprintf_r+0xbbc>
    7f96:	f01b 0f01 	tst.w	fp, #1
    7f9a:	f47f ae8d 	bne.w	7cb8 <_svfprintf_r+0x910>
    7f9e:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    7fa0:	f8c9 4000 	str.w	r4, [r9]
    7fa4:	2301      	movs	r3, #1
    7fa6:	441f      	add	r7, r3
    7fa8:	3601      	adds	r6, #1
    7faa:	2f07      	cmp	r7, #7
    7fac:	f8c9 3004 	str.w	r3, [r9, #4]
    7fb0:	9628      	str	r6, [sp, #160]	; 0xa0
    7fb2:	9727      	str	r7, [sp, #156]	; 0x9c
    7fb4:	f77f aeb3 	ble.w	7d1e <_svfprintf_r+0x976>
    7fb8:	ee1a 1a10 	vmov	r1, s20
    7fbc:	aa26      	add	r2, sp, #152	; 0x98
    7fbe:	4650      	mov	r0, sl
    7fc0:	f002 fac6 	bl	a550 <__ssprint_r>
    7fc4:	2800      	cmp	r0, #0
    7fc6:	f47f ae6a 	bne.w	7c9e <_svfprintf_r+0x8f6>
    7fca:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    7fce:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    7fd2:	e6a6      	b.n	7d22 <_svfprintf_r+0x97a>
    7fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fd6:	1e5c      	subs	r4, r3, #1
    7fd8:	2c00      	cmp	r4, #0
    7fda:	f77f aea2 	ble.w	7d22 <_svfprintf_r+0x97a>
    7fde:	2c10      	cmp	r4, #16
    7fe0:	4d52      	ldr	r5, [pc, #328]	; (812c <_svfprintf_r+0xd84>)
    7fe2:	f340 8356 	ble.w	8692 <_svfprintf_r+0x12ea>
    7fe6:	f8cd 800c 	str.w	r8, [sp, #12]
    7fea:	2310      	movs	r3, #16
    7fec:	ee1a 8a10 	vmov	r8, s20
    7ff0:	e005      	b.n	7ffe <_svfprintf_r+0xc56>
    7ff2:	f109 0908 	add.w	r9, r9, #8
    7ff6:	3c10      	subs	r4, #16
    7ff8:	2c10      	cmp	r4, #16
    7ffa:	f340 8348 	ble.w	868e <_svfprintf_r+0x12e6>
    7ffe:	3701      	adds	r7, #1
    8000:	3610      	adds	r6, #16
    8002:	2f07      	cmp	r7, #7
    8004:	e9c9 5300 	strd	r5, r3, [r9]
    8008:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    800c:	ddf1      	ble.n	7ff2 <_svfprintf_r+0xc4a>
    800e:	aa26      	add	r2, sp, #152	; 0x98
    8010:	4641      	mov	r1, r8
    8012:	4650      	mov	r0, sl
    8014:	f002 fa9c 	bl	a550 <__ssprint_r>
    8018:	2800      	cmp	r0, #0
    801a:	f47f ae40 	bne.w	7c9e <_svfprintf_r+0x8f6>
    801e:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    8022:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8026:	2310      	movs	r3, #16
    8028:	e7e5      	b.n	7ff6 <_svfprintf_r+0xc4e>
    802a:	ee1a 1a10 	vmov	r1, s20
    802e:	aa26      	add	r2, sp, #152	; 0x98
    8030:	4650      	mov	r0, sl
    8032:	f002 fa8d 	bl	a550 <__ssprint_r>
    8036:	2800      	cmp	r0, #0
    8038:	f47f ae31 	bne.w	7c9e <_svfprintf_r+0x8f6>
    803c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    803e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8042:	f7ff bb2f 	b.w	76a4 <_svfprintf_r+0x2fc>
    8046:	f015 0310 	ands.w	r3, r5, #16
    804a:	d158      	bne.n	80fe <_svfprintf_r+0xd56>
    804c:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    8050:	f000 836e 	beq.w	8730 <_svfprintf_r+0x1388>
    8054:	9808      	ldr	r0, [sp, #32]
    8056:	f850 2b04 	ldr.w	r2, [r0], #4
    805a:	9008      	str	r0, [sp, #32]
    805c:	4619      	mov	r1, r3
    805e:	b292      	uxth	r2, r2
    8060:	2301      	movs	r3, #1
    8062:	e454      	b.n	790e <_svfprintf_r+0x566>
    8064:	f01b 0310 	ands.w	r3, fp, #16
    8068:	d144      	bne.n	80f4 <_svfprintf_r+0xd4c>
    806a:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    806e:	f000 836e 	beq.w	874e <_svfprintf_r+0x13a6>
    8072:	9808      	ldr	r0, [sp, #32]
    8074:	f850 2b04 	ldr.w	r2, [r0], #4
    8078:	9008      	str	r0, [sp, #32]
    807a:	4619      	mov	r1, r3
    807c:	b292      	uxth	r2, r2
    807e:	e4a9      	b.n	79d4 <_svfprintf_r+0x62c>
    8080:	4252      	negs	r2, r2
    8082:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8086:	465d      	mov	r5, fp
    8088:	202d      	movs	r0, #45	; 0x2d
    808a:	2301      	movs	r3, #1
    808c:	e440      	b.n	7910 <_svfprintf_r+0x568>
    808e:	ee1a 1a10 	vmov	r1, s20
    8092:	aa26      	add	r2, sp, #152	; 0x98
    8094:	4650      	mov	r0, sl
    8096:	f002 fa5b 	bl	a550 <__ssprint_r>
    809a:	2800      	cmp	r0, #0
    809c:	f47f adff 	bne.w	7c9e <_svfprintf_r+0x8f6>
    80a0:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    80a4:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    80a8:	e615      	b.n	7cd6 <_svfprintf_r+0x92e>
    80aa:	ee1a 1a10 	vmov	r1, s20
    80ae:	aa26      	add	r2, sp, #152	; 0x98
    80b0:	4650      	mov	r0, sl
    80b2:	f002 fa4d 	bl	a550 <__ssprint_r>
    80b6:	2800      	cmp	r0, #0
    80b8:	f47f adf1 	bne.w	7c9e <_svfprintf_r+0x8f6>
    80bc:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    80c0:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    80c4:	e614      	b.n	7cf0 <_svfprintf_r+0x948>
    80c6:	f01b 0f01 	tst.w	fp, #1
    80ca:	f43f aafe 	beq.w	76ca <_svfprintf_r+0x322>
    80ce:	e531      	b.n	7b34 <_svfprintf_r+0x78c>
    80d0:	9308      	str	r3, [sp, #32]
    80d2:	f898 3000 	ldrb.w	r3, [r8]
    80d6:	f7ff b9c3 	b.w	7460 <_svfprintf_r+0xb8>
    80da:	ac52      	add	r4, sp, #328	; 0x148
    80dc:	e4de      	b.n	7a9c <_svfprintf_r+0x6f4>
    80de:	f41b 7f00 	tst.w	fp, #512	; 0x200
    80e2:	f040 83cd 	bne.w	8880 <_svfprintf_r+0x14d8>
    80e6:	f853 2b04 	ldr.w	r2, [r3], #4
    80ea:	9308      	str	r3, [sp, #32]
    80ec:	17d1      	asrs	r1, r2, #31
    80ee:	460b      	mov	r3, r1
    80f0:	f7ff bbbc 	b.w	786c <_svfprintf_r+0x4c4>
    80f4:	9b08      	ldr	r3, [sp, #32]
    80f6:	f853 2b04 	ldr.w	r2, [r3], #4
    80fa:	9308      	str	r3, [sp, #32]
    80fc:	e46a      	b.n	79d4 <_svfprintf_r+0x62c>
    80fe:	9b08      	ldr	r3, [sp, #32]
    8100:	f853 2b04 	ldr.w	r2, [r3], #4
    8104:	9308      	str	r3, [sp, #32]
    8106:	2301      	movs	r3, #1
    8108:	e401      	b.n	790e <_svfprintf_r+0x566>
    810a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    810c:	2b00      	cmp	r3, #0
    810e:	f43f aa2c 	beq.w	756a <_svfprintf_r+0x1c2>
    8112:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8114:	781b      	ldrb	r3, [r3, #0]
    8116:	2b00      	cmp	r3, #0
    8118:	f43f aa27 	beq.w	756a <_svfprintf_r+0x1c2>
    811c:	f898 3000 	ldrb.w	r3, [r8]
    8120:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    8124:	f7ff b99c 	b.w	7460 <_svfprintf_r+0xb8>
    8128:	0000cb38 	.word	0x0000cb38
    812c:	0000cb48 	.word	0x0000cb48
    8130:	9b08      	ldr	r3, [sp, #32]
    8132:	9804      	ldr	r0, [sp, #16]
    8134:	f853 1b04 	ldr.w	r1, [r3], #4
    8138:	9308      	str	r3, [sp, #32]
    813a:	17c2      	asrs	r2, r0, #31
    813c:	e9c1 0200 	strd	r0, r2, [r1]
    8140:	4644      	mov	r4, r8
    8142:	f7ff b962 	b.w	740a <_svfprintf_r+0x62>
    8146:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    814a:	4602      	mov	r2, r0
    814c:	460b      	mov	r3, r1
    814e:	f7fd fb7d 	bl	584c <__aeabi_dcmpun>
    8152:	2800      	cmp	r0, #0
    8154:	f040 86b2 	bne.w	8ebc <_svfprintf_r+0x1b14>
    8158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    815a:	2b61      	cmp	r3, #97	; 0x61
    815c:	f000 8566 	beq.w	8c2c <_svfprintf_r+0x1884>
    8160:	2b41      	cmp	r3, #65	; 0x41
    8162:	f000 85c8 	beq.w	8cf6 <_svfprintf_r+0x194e>
    8166:	9b03      	ldr	r3, [sp, #12]
    8168:	3301      	adds	r3, #1
    816a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    816c:	f023 0320 	bic.w	r3, r3, #32
    8170:	9302      	str	r3, [sp, #8]
    8172:	f000 8466 	beq.w	8a42 <_svfprintf_r+0x169a>
    8176:	2b47      	cmp	r3, #71	; 0x47
    8178:	d104      	bne.n	8184 <_svfprintf_r+0xddc>
    817a:	9b03      	ldr	r3, [sp, #12]
    817c:	2b00      	cmp	r3, #0
    817e:	bf08      	it	eq
    8180:	2301      	moveq	r3, #1
    8182:	9303      	str	r3, [sp, #12]
    8184:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    8188:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
    818c:	2900      	cmp	r1, #0
    818e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    8192:	f04f 0300 	mov.w	r3, #0
    8196:	4693      	mov	fp, r2
    8198:	f2c0 8584 	blt.w	8ca4 <_svfprintf_r+0x18fc>
    819c:	ec41 0b18 	vmov	d8, r0, r1
    81a0:	9318      	str	r3, [sp, #96]	; 0x60
    81a2:	9307      	str	r3, [sp, #28]
    81a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    81a6:	3b41      	subs	r3, #65	; 0x41
    81a8:	2b25      	cmp	r3, #37	; 0x25
    81aa:	f200 8379 	bhi.w	88a0 <_svfprintf_r+0x14f8>
    81ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    81b2:	0453      	.short	0x0453
    81b4:	03770377 	.word	0x03770377
    81b8:	044c0377 	.word	0x044c0377
    81bc:	03770450 	.word	0x03770450
    81c0:	03770377 	.word	0x03770377
    81c4:	03770377 	.word	0x03770377
    81c8:	03770377 	.word	0x03770377
    81cc:	03770377 	.word	0x03770377
    81d0:	03770377 	.word	0x03770377
    81d4:	03770377 	.word	0x03770377
    81d8:	03770377 	.word	0x03770377
    81dc:	03770377 	.word	0x03770377
    81e0:	03770377 	.word	0x03770377
    81e4:	03770377 	.word	0x03770377
    81e8:	03770377 	.word	0x03770377
    81ec:	03770377 	.word	0x03770377
    81f0:	03770377 	.word	0x03770377
    81f4:	03770377 	.word	0x03770377
    81f8:	044c0377 	.word	0x044c0377
    81fc:	0450      	.short	0x0450
    81fe:	930a      	str	r3, [sp, #40]	; 0x28
    8200:	465d      	mov	r5, fp
    8202:	f7ff bbee 	b.w	79e2 <_svfprintf_r+0x63a>
    8206:	930a      	str	r3, [sp, #40]	; 0x28
    8208:	4bb9      	ldr	r3, [pc, #740]	; (84f0 <_svfprintf_r+0x1148>)
    820a:	9312      	str	r3, [sp, #72]	; 0x48
    820c:	f01b 0120 	ands.w	r1, fp, #32
    8210:	f000 80ff 	beq.w	8412 <_svfprintf_r+0x106a>
    8214:	9b08      	ldr	r3, [sp, #32]
    8216:	3307      	adds	r3, #7
    8218:	f023 0307 	bic.w	r3, r3, #7
    821c:	6859      	ldr	r1, [r3, #4]
    821e:	f853 2b08 	ldr.w	r2, [r3], #8
    8222:	9308      	str	r3, [sp, #32]
    8224:	f01b 0f01 	tst.w	fp, #1
    8228:	d00a      	beq.n	8240 <_svfprintf_r+0xe98>
    822a:	ea52 0301 	orrs.w	r3, r2, r1
    822e:	d007      	beq.n	8240 <_svfprintf_r+0xe98>
    8230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8232:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    8236:	2330      	movs	r3, #48	; 0x30
    8238:	f04b 0b02 	orr.w	fp, fp, #2
    823c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    8240:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    8244:	2302      	movs	r3, #2
    8246:	f7ff bb62 	b.w	790e <_svfprintf_r+0x566>
    824a:	930a      	str	r3, [sp, #40]	; 0x28
    824c:	f7ff bbb6 	b.w	79bc <_svfprintf_r+0x614>
    8250:	930a      	str	r3, [sp, #40]	; 0x28
    8252:	4ba8      	ldr	r3, [pc, #672]	; (84f4 <_svfprintf_r+0x114c>)
    8254:	9312      	str	r3, [sp, #72]	; 0x48
    8256:	e7d9      	b.n	820c <_svfprintf_r+0xe64>
    8258:	9b08      	ldr	r3, [sp, #32]
    825a:	2101      	movs	r1, #1
    825c:	f853 2b04 	ldr.w	r2, [r3], #4
    8260:	9102      	str	r1, [sp, #8]
    8262:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
    8266:	9308      	str	r3, [sp, #32]
    8268:	9105      	str	r1, [sp, #20]
    826a:	ac39      	add	r4, sp, #228	; 0xe4
    826c:	f7ff bab5 	b.w	77da <_svfprintf_r+0x432>
    8270:	ee1a 1a10 	vmov	r1, s20
    8274:	aa26      	add	r2, sp, #152	; 0x98
    8276:	4650      	mov	r0, sl
    8278:	f002 f96a 	bl	a550 <__ssprint_r>
    827c:	2800      	cmp	r0, #0
    827e:	f47f ad0e 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8282:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8284:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8288:	e462      	b.n	7b50 <_svfprintf_r+0x7a8>
    828a:	2140      	movs	r1, #64	; 0x40
    828c:	4650      	mov	r0, sl
    828e:	f7fd faf3 	bl	5878 <_malloc_r>
    8292:	6020      	str	r0, [r4, #0]
    8294:	6120      	str	r0, [r4, #16]
    8296:	2800      	cmp	r0, #0
    8298:	f000 8662 	beq.w	8f60 <_svfprintf_r+0x1bb8>
    829c:	2340      	movs	r3, #64	; 0x40
    829e:	6163      	str	r3, [r4, #20]
    82a0:	f7ff b8a1 	b.w	73e6 <_svfprintf_r+0x3e>
    82a4:	9b03      	ldr	r3, [sp, #12]
    82a6:	9407      	str	r4, [sp, #28]
    82a8:	2b06      	cmp	r3, #6
    82aa:	4621      	mov	r1, r4
    82ac:	bf28      	it	cs
    82ae:	2306      	movcs	r3, #6
    82b0:	9403      	str	r4, [sp, #12]
    82b2:	4622      	mov	r2, r4
    82b4:	9302      	str	r3, [sp, #8]
    82b6:	4c90      	ldr	r4, [pc, #576]	; (84f8 <_svfprintf_r+0x1150>)
    82b8:	9708      	str	r7, [sp, #32]
    82ba:	9305      	str	r3, [sp, #20]
    82bc:	910c      	str	r1, [sp, #48]	; 0x30
    82be:	9110      	str	r1, [sp, #64]	; 0x40
    82c0:	910b      	str	r1, [sp, #44]	; 0x2c
    82c2:	f7ff ba64 	b.w	778e <_svfprintf_r+0x3e6>
    82c6:	2f10      	cmp	r7, #16
    82c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    82ca:	4d8c      	ldr	r5, [pc, #560]	; (84fc <_svfprintf_r+0x1154>)
    82cc:	f340 824e 	ble.w	876c <_svfprintf_r+0x13c4>
    82d0:	4632      	mov	r2, r6
    82d2:	ee1a 6a10 	vmov	r6, s20
    82d6:	e005      	b.n	82e4 <_svfprintf_r+0xf3c>
    82d8:	f109 0908 	add.w	r9, r9, #8
    82dc:	3f10      	subs	r7, #16
    82de:	2f10      	cmp	r7, #16
    82e0:	f340 8243 	ble.w	876a <_svfprintf_r+0x13c2>
    82e4:	3301      	adds	r3, #1
    82e6:	3210      	adds	r2, #16
    82e8:	2110      	movs	r1, #16
    82ea:	2b07      	cmp	r3, #7
    82ec:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    82f0:	f8c9 5000 	str.w	r5, [r9]
    82f4:	f8c9 1004 	str.w	r1, [r9, #4]
    82f8:	ddee      	ble.n	82d8 <_svfprintf_r+0xf30>
    82fa:	aa26      	add	r2, sp, #152	; 0x98
    82fc:	4631      	mov	r1, r6
    82fe:	4650      	mov	r0, sl
    8300:	f002 f926 	bl	a550 <__ssprint_r>
    8304:	2800      	cmp	r0, #0
    8306:	f47f acca 	bne.w	7c9e <_svfprintf_r+0x8f6>
    830a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    830e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8312:	e7e3      	b.n	82dc <_svfprintf_r+0xf34>
    8314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8316:	9d05      	ldr	r5, [sp, #20]
    8318:	f8cd b014 	str.w	fp, [sp, #20]
    831c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    8320:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    8324:	18e3      	adds	r3, r4, r3
    8326:	9303      	str	r3, [sp, #12]
    8328:	464a      	mov	r2, r9
    832a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    832c:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    8330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8332:	940a      	str	r4, [sp, #40]	; 0x28
    8334:	ee1a 9a10 	vmov	r9, s20
    8338:	46b4      	mov	ip, r6
    833a:	f1bb 0f00 	cmp.w	fp, #0
    833e:	d030      	beq.n	83a2 <_svfprintf_r+0xffa>
    8340:	bb93      	cbnz	r3, 83a8 <_svfprintf_r+0x1000>
    8342:	3f01      	subs	r7, #1
    8344:	f10b 3bff 	add.w	fp, fp, #4294967295
    8348:	9b16      	ldr	r3, [sp, #88]	; 0x58
    834a:	e9c2 3800 	strd	r3, r8, [r2]
    834e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8350:	3301      	adds	r3, #1
    8352:	44c4      	add	ip, r8
    8354:	2b07      	cmp	r3, #7
    8356:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    835a:	9327      	str	r3, [sp, #156]	; 0x9c
    835c:	dc62      	bgt.n	8424 <_svfprintf_r+0x107c>
    835e:	3208      	adds	r2, #8
    8360:	9b03      	ldr	r3, [sp, #12]
    8362:	7838      	ldrb	r0, [r7, #0]
    8364:	1b5b      	subs	r3, r3, r5
    8366:	4283      	cmp	r3, r0
    8368:	bfa8      	it	ge
    836a:	4603      	movge	r3, r0
    836c:	2b00      	cmp	r3, #0
    836e:	461e      	mov	r6, r3
    8370:	dd0c      	ble.n	838c <_svfprintf_r+0xfe4>
    8372:	9827      	ldr	r0, [sp, #156]	; 0x9c
    8374:	3001      	adds	r0, #1
    8376:	449c      	add	ip, r3
    8378:	2807      	cmp	r0, #7
    837a:	e9c2 5300 	strd	r5, r3, [r2]
    837e:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    8382:	9027      	str	r0, [sp, #156]	; 0x9c
    8384:	f300 8159 	bgt.w	863a <_svfprintf_r+0x1292>
    8388:	7838      	ldrb	r0, [r7, #0]
    838a:	3208      	adds	r2, #8
    838c:	2e00      	cmp	r6, #0
    838e:	bfac      	ite	ge
    8390:	1b84      	subge	r4, r0, r6
    8392:	4604      	movlt	r4, r0
    8394:	2c00      	cmp	r4, #0
    8396:	dc0b      	bgt.n	83b0 <_svfprintf_r+0x1008>
    8398:	4405      	add	r5, r0
    839a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    839c:	f1bb 0f00 	cmp.w	fp, #0
    83a0:	d1ce      	bne.n	8340 <_svfprintf_r+0xf98>
    83a2:	2b00      	cmp	r3, #0
    83a4:	f000 83d4 	beq.w	8b50 <_svfprintf_r+0x17a8>
    83a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83aa:	3b01      	subs	r3, #1
    83ac:	930c      	str	r3, [sp, #48]	; 0x30
    83ae:	e7cb      	b.n	8348 <_svfprintf_r+0xfa0>
    83b0:	2c10      	cmp	r4, #16
    83b2:	9827      	ldr	r0, [sp, #156]	; 0x9c
    83b4:	dd1f      	ble.n	83f6 <_svfprintf_r+0x104e>
    83b6:	2610      	movs	r6, #16
    83b8:	4663      	mov	r3, ip
    83ba:	e004      	b.n	83c6 <_svfprintf_r+0x101e>
    83bc:	3c10      	subs	r4, #16
    83be:	2c10      	cmp	r4, #16
    83c0:	f102 0208 	add.w	r2, r2, #8
    83c4:	dd16      	ble.n	83f4 <_svfprintf_r+0x104c>
    83c6:	3001      	adds	r0, #1
    83c8:	494c      	ldr	r1, [pc, #304]	; (84fc <_svfprintf_r+0x1154>)
    83ca:	3310      	adds	r3, #16
    83cc:	2807      	cmp	r0, #7
    83ce:	e9c2 1600 	strd	r1, r6, [r2]
    83d2:	e9cd 0327 	strd	r0, r3, [sp, #156]	; 0x9c
    83d6:	ddf1      	ble.n	83bc <_svfprintf_r+0x1014>
    83d8:	aa26      	add	r2, sp, #152	; 0x98
    83da:	4649      	mov	r1, r9
    83dc:	4650      	mov	r0, sl
    83de:	f002 f8b7 	bl	a550 <__ssprint_r>
    83e2:	2800      	cmp	r0, #0
    83e4:	f47f ac5b 	bne.w	7c9e <_svfprintf_r+0x8f6>
    83e8:	3c10      	subs	r4, #16
    83ea:	2c10      	cmp	r4, #16
    83ec:	e9dd 0327 	ldrd	r0, r3, [sp, #156]	; 0x9c
    83f0:	aa29      	add	r2, sp, #164	; 0xa4
    83f2:	dce8      	bgt.n	83c6 <_svfprintf_r+0x101e>
    83f4:	469c      	mov	ip, r3
    83f6:	3001      	adds	r0, #1
    83f8:	4b40      	ldr	r3, [pc, #256]	; (84fc <_svfprintf_r+0x1154>)
    83fa:	6054      	str	r4, [r2, #4]
    83fc:	44a4      	add	ip, r4
    83fe:	2807      	cmp	r0, #7
    8400:	e9cd 0c27 	strd	r0, ip, [sp, #156]	; 0x9c
    8404:	6013      	str	r3, [r2, #0]
    8406:	f300 83fa 	bgt.w	8bfe <_svfprintf_r+0x1856>
    840a:	7838      	ldrb	r0, [r7, #0]
    840c:	3208      	adds	r2, #8
    840e:	4405      	add	r5, r0
    8410:	e7c3      	b.n	839a <_svfprintf_r+0xff2>
    8412:	f01b 0310 	ands.w	r3, fp, #16
    8416:	f000 80bc 	beq.w	8592 <_svfprintf_r+0x11ea>
    841a:	9b08      	ldr	r3, [sp, #32]
    841c:	f853 2b04 	ldr.w	r2, [r3], #4
    8420:	9308      	str	r3, [sp, #32]
    8422:	e6ff      	b.n	8224 <_svfprintf_r+0xe7c>
    8424:	aa26      	add	r2, sp, #152	; 0x98
    8426:	4649      	mov	r1, r9
    8428:	4650      	mov	r0, sl
    842a:	f002 f891 	bl	a550 <__ssprint_r>
    842e:	2800      	cmp	r0, #0
    8430:	f47f ac35 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8434:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    8438:	aa29      	add	r2, sp, #164	; 0xa4
    843a:	e791      	b.n	8360 <_svfprintf_r+0xfb8>
    843c:	f405 6080 	and.w	r0, r5, #1024	; 0x400
    8440:	2600      	movs	r6, #0
    8442:	f8cd 8008 	str.w	r8, [sp, #8]
    8446:	9505      	str	r5, [sp, #20]
    8448:	4b2d      	ldr	r3, [pc, #180]	; (8500 <_svfprintf_r+0x1158>)
    844a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    844e:	ee0a aa90 	vmov	s21, sl
    8452:	ac52      	add	r4, sp, #328	; 0x148
    8454:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    8458:	46b4      	mov	ip, r6
    845a:	4605      	mov	r5, r0
    845c:	e005      	b.n	846a <_svfprintf_r+0x10c2>
    845e:	2a0a      	cmp	r2, #10
    8460:	f171 0100 	sbcs.w	r1, r1, #0
    8464:	d334      	bcc.n	84d0 <_svfprintf_r+0x1128>
    8466:	4652      	mov	r2, sl
    8468:	4639      	mov	r1, r7
    846a:	1850      	adds	r0, r2, r1
    846c:	f140 0000 	adc.w	r0, r0, #0
    8470:	fba3 6700 	umull	r6, r7, r3, r0
    8474:	f027 0603 	bic.w	r6, r7, #3
    8478:	eb06 0697 	add.w	r6, r6, r7, lsr #2
    847c:	1b80      	subs	r0, r0, r6
    847e:	1a16      	subs	r6, r2, r0
    8480:	f161 0e00 	sbc.w	lr, r1, #0
    8484:	fb0b f706 	mul.w	r7, fp, r6
    8488:	fb03 770e 	mla	r7, r3, lr, r7
    848c:	fba6 a603 	umull	sl, r6, r6, r3
    8490:	4437      	add	r7, r6
    8492:	f00a 0e01 	and.w	lr, sl, #1
    8496:	2605      	movs	r6, #5
    8498:	fbae 6e06 	umull	r6, lr, lr, r6
    849c:	1830      	adds	r0, r6, r0
    849e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    84a2:	3030      	adds	r0, #48	; 0x30
    84a4:	f804 0c01 	strb.w	r0, [r4, #-1]
    84a8:	ea4a 7ac7 	orr.w	sl, sl, r7, lsl #31
    84ac:	f10c 0c01 	add.w	ip, ip, #1
    84b0:	3c01      	subs	r4, #1
    84b2:	087f      	lsrs	r7, r7, #1
    84b4:	2d00      	cmp	r5, #0
    84b6:	d0d2      	beq.n	845e <_svfprintf_r+0x10b6>
    84b8:	f898 0000 	ldrb.w	r0, [r8]
    84bc:	4584      	cmp	ip, r0
    84be:	d1ce      	bne.n	845e <_svfprintf_r+0x10b6>
    84c0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    84c4:	d0cb      	beq.n	845e <_svfprintf_r+0x10b6>
    84c6:	2a0a      	cmp	r2, #10
    84c8:	f171 0100 	sbcs.w	r1, r1, #0
    84cc:	f080 815d 	bcs.w	878a <_svfprintf_r+0x13e2>
    84d0:	9d05      	ldr	r5, [sp, #20]
    84d2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    84d6:	ab52      	add	r3, sp, #328	; 0x148
    84d8:	1b1b      	subs	r3, r3, r4
    84da:	f8dd 8008 	ldr.w	r8, [sp, #8]
    84de:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    84e2:	ee1a aa90 	vmov	sl, s21
    84e6:	46ab      	mov	fp, r5
    84e8:	9305      	str	r3, [sp, #20]
    84ea:	f7ff bad7 	b.w	7a9c <_svfprintf_r+0x6f4>
    84ee:	bf00      	nop
    84f0:	0000cb04 	.word	0x0000cb04
    84f4:	0000cb18 	.word	0x0000cb18
    84f8:	0000cb2c 	.word	0x0000cb2c
    84fc:	0000cb48 	.word	0x0000cb48
    8500:	cccccccd 	.word	0xcccccccd
    8504:	ee1a 1a10 	vmov	r1, s20
    8508:	aa26      	add	r2, sp, #152	; 0x98
    850a:	4650      	mov	r0, sl
    850c:	9318      	str	r3, [sp, #96]	; 0x60
    850e:	f002 f81f 	bl	a550 <__ssprint_r>
    8512:	2800      	cmp	r0, #0
    8514:	f47f abc3 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8518:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    851c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    851e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8520:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8524:	f7ff b890 	b.w	7648 <_svfprintf_r+0x2a0>
    8528:	2301      	movs	r3, #1
    852a:	f8c9 3004 	str.w	r3, [r9, #4]
    852e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8530:	4abe      	ldr	r2, [pc, #760]	; (882c <_svfprintf_r+0x1484>)
    8532:	f8c9 2000 	str.w	r2, [r9]
    8536:	3301      	adds	r3, #1
    8538:	3601      	adds	r6, #1
    853a:	2b07      	cmp	r3, #7
    853c:	9628      	str	r6, [sp, #160]	; 0xa0
    853e:	9327      	str	r3, [sp, #156]	; 0x9c
    8540:	f300 817a 	bgt.w	8838 <_svfprintf_r+0x1490>
    8544:	f109 0908 	add.w	r9, r9, #8
    8548:	2900      	cmp	r1, #0
    854a:	f040 80ae 	bne.w	86aa <_svfprintf_r+0x1302>
    854e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8550:	f00b 0301 	and.w	r3, fp, #1
    8554:	4313      	orrs	r3, r2
    8556:	f43f a8b8 	beq.w	76ca <_svfprintf_r+0x322>
    855a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    855c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    855e:	199a      	adds	r2, r3, r6
    8560:	e9c9 1300 	strd	r1, r3, [r9]
    8564:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8566:	9228      	str	r2, [sp, #160]	; 0xa0
    8568:	3301      	adds	r3, #1
    856a:	2b07      	cmp	r3, #7
    856c:	9327      	str	r3, [sp, #156]	; 0x9c
    856e:	f300 8259 	bgt.w	8a24 <_svfprintf_r+0x167c>
    8572:	f109 0908 	add.w	r9, r9, #8
    8576:	990d      	ldr	r1, [sp, #52]	; 0x34
    8578:	f8c9 4000 	str.w	r4, [r9]
    857c:	3301      	adds	r3, #1
    857e:	188e      	adds	r6, r1, r2
    8580:	2b07      	cmp	r3, #7
    8582:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    8586:	f8c9 1004 	str.w	r1, [r9, #4]
    858a:	f77f a89c 	ble.w	76c6 <_svfprintf_r+0x31e>
    858e:	f7ff bbd5 	b.w	7d3c <_svfprintf_r+0x994>
    8592:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    8596:	f000 80be 	beq.w	8716 <_svfprintf_r+0x136e>
    859a:	9808      	ldr	r0, [sp, #32]
    859c:	f850 2b04 	ldr.w	r2, [r0], #4
    85a0:	9008      	str	r0, [sp, #32]
    85a2:	4619      	mov	r1, r3
    85a4:	b292      	uxth	r2, r2
    85a6:	e63d      	b.n	8224 <_svfprintf_r+0xe7c>
    85a8:	ee1a 1a10 	vmov	r1, s20
    85ac:	aa26      	add	r2, sp, #152	; 0x98
    85ae:	4650      	mov	r0, sl
    85b0:	f001 ffce 	bl	a550 <__ssprint_r>
    85b4:	2800      	cmp	r0, #0
    85b6:	f47f ab72 	bne.w	7c9e <_svfprintf_r+0x8f6>
    85ba:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    85bc:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    85c0:	f7ff bab3 	b.w	7b2a <_svfprintf_r+0x782>
    85c4:	ae24      	add	r6, sp, #144	; 0x90
    85c6:	2208      	movs	r2, #8
    85c8:	2100      	movs	r1, #0
    85ca:	4630      	mov	r0, r6
    85cc:	941f      	str	r4, [sp, #124]	; 0x7c
    85ce:	f7fe f807 	bl	65e0 <memset>
    85d2:	9b03      	ldr	r3, [sp, #12]
    85d4:	1c5a      	adds	r2, r3, #1
    85d6:	f000 80e8 	beq.w	87aa <_svfprintf_r+0x1402>
    85da:	2500      	movs	r5, #0
    85dc:	f8cd 8008 	str.w	r8, [sp, #8]
    85e0:	f8cd b01c 	str.w	fp, [sp, #28]
    85e4:	46a8      	mov	r8, r5
    85e6:	469b      	mov	fp, r3
    85e8:	e00c      	b.n	8604 <_svfprintf_r+0x125c>
    85ea:	a939      	add	r1, sp, #228	; 0xe4
    85ec:	4650      	mov	r0, sl
    85ee:	f001 ff69 	bl	a4c4 <_wcrtomb_r>
    85f2:	1c43      	adds	r3, r0, #1
    85f4:	4440      	add	r0, r8
    85f6:	f000 840e 	beq.w	8e16 <_svfprintf_r+0x1a6e>
    85fa:	4558      	cmp	r0, fp
    85fc:	dc08      	bgt.n	8610 <_svfprintf_r+0x1268>
    85fe:	f000 841a 	beq.w	8e36 <_svfprintf_r+0x1a8e>
    8602:	4680      	mov	r8, r0
    8604:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8606:	5952      	ldr	r2, [r2, r5]
    8608:	4633      	mov	r3, r6
    860a:	3504      	adds	r5, #4
    860c:	2a00      	cmp	r2, #0
    860e:	d1ec      	bne.n	85ea <_svfprintf_r+0x1242>
    8610:	f8cd 8014 	str.w	r8, [sp, #20]
    8614:	f8dd b01c 	ldr.w	fp, [sp, #28]
    8618:	f8dd 8008 	ldr.w	r8, [sp, #8]
    861c:	e0d2      	b.n	87c4 <_svfprintf_r+0x141c>
    861e:	4616      	mov	r6, r2
    8620:	3301      	adds	r3, #1
    8622:	4426      	add	r6, r4
    8624:	2b07      	cmp	r3, #7
    8626:	f8c9 5000 	str.w	r5, [r9]
    862a:	f8c9 4004 	str.w	r4, [r9, #4]
    862e:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    8632:	f77f a848 	ble.w	76c6 <_svfprintf_r+0x31e>
    8636:	f7ff bb81 	b.w	7d3c <_svfprintf_r+0x994>
    863a:	aa26      	add	r2, sp, #152	; 0x98
    863c:	4649      	mov	r1, r9
    863e:	4650      	mov	r0, sl
    8640:	f001 ff86 	bl	a550 <__ssprint_r>
    8644:	2800      	cmp	r0, #0
    8646:	f47f ab2a 	bne.w	7c9e <_svfprintf_r+0x8f6>
    864a:	7838      	ldrb	r0, [r7, #0]
    864c:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    8650:	aa29      	add	r2, sp, #164	; 0xa4
    8652:	e69b      	b.n	838c <_svfprintf_r+0xfe4>
    8654:	ee1a 1a10 	vmov	r1, s20
    8658:	aa26      	add	r2, sp, #152	; 0x98
    865a:	4650      	mov	r0, sl
    865c:	f001 ff78 	bl	a550 <__ssprint_r>
    8660:	2800      	cmp	r0, #0
    8662:	f47f ab1c 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8666:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8668:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    866c:	f7ff b814 	b.w	7698 <_svfprintf_r+0x2f0>
    8670:	2b01      	cmp	r3, #1
    8672:	465d      	mov	r5, fp
    8674:	f47f a9fe 	bne.w	7a74 <_svfprintf_r+0x6cc>
    8678:	f7ff bbac 	b.w	7dd4 <_svfprintf_r+0xa2c>
    867c:	9b08      	ldr	r3, [sp, #32]
    867e:	9904      	ldr	r1, [sp, #16]
    8680:	f853 2b04 	ldr.w	r2, [r3], #4
    8684:	4644      	mov	r4, r8
    8686:	6011      	str	r1, [r2, #0]
    8688:	9308      	str	r3, [sp, #32]
    868a:	f7fe bebe 	b.w	740a <_svfprintf_r+0x62>
    868e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    8692:	f8c9 5000 	str.w	r5, [r9]
    8696:	3701      	adds	r7, #1
    8698:	4426      	add	r6, r4
    869a:	2f07      	cmp	r7, #7
    869c:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    86a0:	f8c9 4004 	str.w	r4, [r9, #4]
    86a4:	f77f ab3b 	ble.w	7d1e <_svfprintf_r+0x976>
    86a8:	e486      	b.n	7fb8 <_svfprintf_r+0xc10>
    86aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    86ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
    86ae:	199a      	adds	r2, r3, r6
    86b0:	e9c9 0300 	strd	r0, r3, [r9]
    86b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    86b6:	9228      	str	r2, [sp, #160]	; 0xa0
    86b8:	3301      	adds	r3, #1
    86ba:	2b07      	cmp	r3, #7
    86bc:	9327      	str	r3, [sp, #156]	; 0x9c
    86be:	f300 81b1 	bgt.w	8a24 <_svfprintf_r+0x167c>
    86c2:	f109 0908 	add.w	r9, r9, #8
    86c6:	2900      	cmp	r1, #0
    86c8:	f6bf af55 	bge.w	8576 <_svfprintf_r+0x11ce>
    86cc:	424f      	negs	r7, r1
    86ce:	3110      	adds	r1, #16
    86d0:	4d57      	ldr	r5, [pc, #348]	; (8830 <_svfprintf_r+0x1488>)
    86d2:	f280 836a 	bge.w	8daa <_svfprintf_r+0x1a02>
    86d6:	ee1a 1a10 	vmov	r1, s20
    86da:	2610      	movs	r6, #16
    86dc:	e005      	b.n	86ea <_svfprintf_r+0x1342>
    86de:	f109 0908 	add.w	r9, r9, #8
    86e2:	3f10      	subs	r7, #16
    86e4:	2f10      	cmp	r7, #16
    86e6:	f340 8360 	ble.w	8daa <_svfprintf_r+0x1a02>
    86ea:	3301      	adds	r3, #1
    86ec:	3210      	adds	r2, #16
    86ee:	2b07      	cmp	r3, #7
    86f0:	e9c9 5600 	strd	r5, r6, [r9]
    86f4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    86f8:	ddf1      	ble.n	86de <_svfprintf_r+0x1336>
    86fa:	aa26      	add	r2, sp, #152	; 0x98
    86fc:	4650      	mov	r0, sl
    86fe:	9103      	str	r1, [sp, #12]
    8700:	f001 ff26 	bl	a550 <__ssprint_r>
    8704:	2800      	cmp	r0, #0
    8706:	f47f aaca 	bne.w	7c9e <_svfprintf_r+0x8f6>
    870a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    870e:	9903      	ldr	r1, [sp, #12]
    8710:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8714:	e7e5      	b.n	86e2 <_svfprintf_r+0x133a>
    8716:	9b08      	ldr	r3, [sp, #32]
    8718:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    871c:	bf1a      	itte	ne
    871e:	4611      	movne	r1, r2
    8720:	f853 2b04 	ldrne.w	r2, [r3], #4
    8724:	f853 2b04 	ldreq.w	r2, [r3], #4
    8728:	9308      	str	r3, [sp, #32]
    872a:	bf18      	it	ne
    872c:	b2d2      	uxtbne	r2, r2
    872e:	e579      	b.n	8224 <_svfprintf_r+0xe7c>
    8730:	9b08      	ldr	r3, [sp, #32]
    8732:	f415 7100 	ands.w	r1, r5, #512	; 0x200
    8736:	bf1a      	itte	ne
    8738:	4611      	movne	r1, r2
    873a:	f853 2b04 	ldrne.w	r2, [r3], #4
    873e:	f853 2b04 	ldreq.w	r2, [r3], #4
    8742:	9308      	str	r3, [sp, #32]
    8744:	bf18      	it	ne
    8746:	b2d2      	uxtbne	r2, r2
    8748:	2301      	movs	r3, #1
    874a:	f7ff b8e0 	b.w	790e <_svfprintf_r+0x566>
    874e:	9b08      	ldr	r3, [sp, #32]
    8750:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    8754:	bf1a      	itte	ne
    8756:	4611      	movne	r1, r2
    8758:	f853 2b04 	ldrne.w	r2, [r3], #4
    875c:	f853 2b04 	ldreq.w	r2, [r3], #4
    8760:	9308      	str	r3, [sp, #32]
    8762:	bf18      	it	ne
    8764:	b2d2      	uxtbne	r2, r2
    8766:	f7ff b935 	b.w	79d4 <_svfprintf_r+0x62c>
    876a:	4616      	mov	r6, r2
    876c:	3301      	adds	r3, #1
    876e:	443e      	add	r6, r7
    8770:	2b07      	cmp	r3, #7
    8772:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    8776:	f8c9 5000 	str.w	r5, [r9]
    877a:	f8c9 7004 	str.w	r7, [r9, #4]
    877e:	f300 8143 	bgt.w	8a08 <_svfprintf_r+0x1660>
    8782:	f109 0908 	add.w	r9, r9, #8
    8786:	f7ff bba6 	b.w	7ed6 <_svfprintf_r+0xb2e>
    878a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    878c:	9916      	ldr	r1, [sp, #88]	; 0x58
    878e:	1ae4      	subs	r4, r4, r3
    8790:	461a      	mov	r2, r3
    8792:	4620      	mov	r0, r4
    8794:	f7fd ff76 	bl	6684 <strncpy>
    8798:	f898 2001 	ldrb.w	r2, [r8, #1]
    879c:	4b25      	ldr	r3, [pc, #148]	; (8834 <_svfprintf_r+0x148c>)
    879e:	b10a      	cbz	r2, 87a4 <_svfprintf_r+0x13fc>
    87a0:	f108 0801 	add.w	r8, r8, #1
    87a4:	f04f 0c00 	mov.w	ip, #0
    87a8:	e65d      	b.n	8466 <_svfprintf_r+0x10be>
    87aa:	2300      	movs	r3, #0
    87ac:	4619      	mov	r1, r3
    87ae:	9600      	str	r6, [sp, #0]
    87b0:	aa1f      	add	r2, sp, #124	; 0x7c
    87b2:	4650      	mov	r0, sl
    87b4:	f001 feac 	bl	a510 <_wcsrtombs_r>
    87b8:	4603      	mov	r3, r0
    87ba:	3301      	adds	r3, #1
    87bc:	9005      	str	r0, [sp, #20]
    87be:	f000 832a 	beq.w	8e16 <_svfprintf_r+0x1a6e>
    87c2:	941f      	str	r4, [sp, #124]	; 0x7c
    87c4:	9b05      	ldr	r3, [sp, #20]
    87c6:	2b00      	cmp	r3, #0
    87c8:	d044      	beq.n	8854 <_svfprintf_r+0x14ac>
    87ca:	2b63      	cmp	r3, #99	; 0x63
    87cc:	f340 8118 	ble.w	8a00 <_svfprintf_r+0x1658>
    87d0:	1c59      	adds	r1, r3, #1
    87d2:	4650      	mov	r0, sl
    87d4:	f7fd f850 	bl	5878 <_malloc_r>
    87d8:	4604      	mov	r4, r0
    87da:	2800      	cmp	r0, #0
    87dc:	f000 831b 	beq.w	8e16 <_svfprintf_r+0x1a6e>
    87e0:	9007      	str	r0, [sp, #28]
    87e2:	2208      	movs	r2, #8
    87e4:	2100      	movs	r1, #0
    87e6:	4630      	mov	r0, r6
    87e8:	f7fd fefa 	bl	65e0 <memset>
    87ec:	9d05      	ldr	r5, [sp, #20]
    87ee:	9600      	str	r6, [sp, #0]
    87f0:	462b      	mov	r3, r5
    87f2:	aa1f      	add	r2, sp, #124	; 0x7c
    87f4:	4621      	mov	r1, r4
    87f6:	4650      	mov	r0, sl
    87f8:	f001 fe8a 	bl	a510 <_wcsrtombs_r>
    87fc:	4285      	cmp	r5, r0
    87fe:	f040 83bb 	bne.w	8f78 <_svfprintf_r+0x1bd0>
    8802:	9905      	ldr	r1, [sp, #20]
    8804:	9708      	str	r7, [sp, #32]
    8806:	2300      	movs	r3, #0
    8808:	5463      	strb	r3, [r4, r1]
    880a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    880e:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    8812:	9303      	str	r3, [sp, #12]
    8814:	9102      	str	r1, [sp, #8]
    8816:	930c      	str	r3, [sp, #48]	; 0x30
    8818:	9310      	str	r3, [sp, #64]	; 0x40
    881a:	930b      	str	r3, [sp, #44]	; 0x2c
    881c:	f7fe bfb7 	b.w	778e <_svfprintf_r+0x3e6>
    8820:	222d      	movs	r2, #45	; 0x2d
    8822:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    8826:	f7fe bfa1 	b.w	776c <_svfprintf_r+0x3c4>
    882a:	bf00      	nop
    882c:	0000cb34 	.word	0x0000cb34
    8830:	0000cb48 	.word	0x0000cb48
    8834:	cccccccd 	.word	0xcccccccd
    8838:	ee1a 1a10 	vmov	r1, s20
    883c:	aa26      	add	r2, sp, #152	; 0x98
    883e:	4650      	mov	r0, sl
    8840:	f001 fe86 	bl	a550 <__ssprint_r>
    8844:	2800      	cmp	r0, #0
    8846:	f47f aa2a 	bne.w	7c9e <_svfprintf_r+0x8f6>
    884a:	991d      	ldr	r1, [sp, #116]	; 0x74
    884c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    884e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8852:	e679      	b.n	8548 <_svfprintf_r+0x11a0>
    8854:	9b05      	ldr	r3, [sp, #20]
    8856:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    885a:	9708      	str	r7, [sp, #32]
    885c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8860:	930c      	str	r3, [sp, #48]	; 0x30
    8862:	9310      	str	r3, [sp, #64]	; 0x40
    8864:	930b      	str	r3, [sp, #44]	; 0x2c
    8866:	9307      	str	r3, [sp, #28]
    8868:	f7fe bf91 	b.w	778e <_svfprintf_r+0x3e6>
    886c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    886e:	9905      	ldr	r1, [sp, #20]
    8870:	18a5      	adds	r5, r4, r2
    8872:	1a6d      	subs	r5, r5, r1
    8874:	1ad4      	subs	r4, r2, r3
    8876:	42a5      	cmp	r5, r4
    8878:	bfa8      	it	ge
    887a:	4625      	movge	r5, r4
    887c:	f7ff bb60 	b.w	7f40 <_svfprintf_r+0xb98>
    8880:	f913 2b04 	ldrsb.w	r2, [r3], #4
    8884:	9308      	str	r3, [sp, #32]
    8886:	17d1      	asrs	r1, r2, #31
    8888:	460b      	mov	r3, r1
    888a:	f7fe bfef 	b.w	786c <_svfprintf_r+0x4c4>
    888e:	9b08      	ldr	r3, [sp, #32]
    8890:	9904      	ldr	r1, [sp, #16]
    8892:	f853 2b04 	ldr.w	r2, [r3], #4
    8896:	9308      	str	r3, [sp, #32]
    8898:	8011      	strh	r1, [r2, #0]
    889a:	4644      	mov	r4, r8
    889c:	f7fe bdb5 	b.w	740a <_svfprintf_r+0x62>
    88a0:	9e03      	ldr	r6, [sp, #12]
    88a2:	2102      	movs	r1, #2
    88a4:	ab24      	add	r3, sp, #144	; 0x90
    88a6:	9301      	str	r3, [sp, #4]
    88a8:	ab1f      	add	r3, sp, #124	; 0x7c
    88aa:	9300      	str	r3, [sp, #0]
    88ac:	4632      	mov	r2, r6
    88ae:	ab1d      	add	r3, sp, #116	; 0x74
    88b0:	4650      	mov	r0, sl
    88b2:	eeb0 0a48 	vmov.f32	s0, s16
    88b6:	eef0 0a68 	vmov.f32	s1, s17
    88ba:	f000 fe65 	bl	9588 <_dtoa_r>
    88be:	9b02      	ldr	r3, [sp, #8]
    88c0:	2b47      	cmp	r3, #71	; 0x47
    88c2:	4604      	mov	r4, r0
    88c4:	f000 8195 	beq.w	8bf2 <_svfprintf_r+0x184a>
    88c8:	2b46      	cmp	r3, #70	; 0x46
    88ca:	eb00 0506 	add.w	r5, r0, r6
    88ce:	d105      	bne.n	88dc <_svfprintf_r+0x1534>
    88d0:	7803      	ldrb	r3, [r0, #0]
    88d2:	2b30      	cmp	r3, #48	; 0x30
    88d4:	f000 830e 	beq.w	8ef4 <_svfprintf_r+0x1b4c>
    88d8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    88da:	4435      	add	r5, r6
    88dc:	ec51 0b18 	vmov	r0, r1, d8
    88e0:	2200      	movs	r2, #0
    88e2:	2300      	movs	r3, #0
    88e4:	f7fc ff80 	bl	57e8 <__aeabi_dcmpeq>
    88e8:	2800      	cmp	r0, #0
    88ea:	f000 8176 	beq.w	8bda <_svfprintf_r+0x1832>
    88ee:	462b      	mov	r3, r5
    88f0:	1b1b      	subs	r3, r3, r4
    88f2:	930d      	str	r3, [sp, #52]	; 0x34
    88f4:	9b02      	ldr	r3, [sp, #8]
    88f6:	2b47      	cmp	r3, #71	; 0x47
    88f8:	f000 813b 	beq.w	8b72 <_svfprintf_r+0x17ca>
    88fc:	9b02      	ldr	r3, [sp, #8]
    88fe:	2b46      	cmp	r3, #70	; 0x46
    8900:	f000 81fb 	beq.w	8cfa <_svfprintf_r+0x1952>
    8904:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8906:	930b      	str	r3, [sp, #44]	; 0x2c
    8908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    890a:	9a02      	ldr	r2, [sp, #8]
    890c:	3b01      	subs	r3, #1
    890e:	2a41      	cmp	r2, #65	; 0x41
    8910:	931d      	str	r3, [sp, #116]	; 0x74
    8912:	f000 822d 	beq.w	8d70 <_svfprintf_r+0x19c8>
    8916:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    891a:	2100      	movs	r1, #0
    891c:	2b00      	cmp	r3, #0
    891e:	bfb8      	it	lt
    8920:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
    8922:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    8926:	bfba      	itte	lt
    8928:	f1c3 0301 	rsblt	r3, r3, #1
    892c:	222d      	movlt	r2, #45	; 0x2d
    892e:	222b      	movge	r2, #43	; 0x2b
    8930:	2b09      	cmp	r3, #9
    8932:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    8936:	f340 8220 	ble.w	8d7a <_svfprintf_r+0x19d2>
    893a:	f10d 0597 	add.w	r5, sp, #151	; 0x97
    893e:	4eb7      	ldr	r6, [pc, #732]	; (8c1c <_svfprintf_r+0x1874>)
    8940:	462a      	mov	r2, r5
    8942:	4610      	mov	r0, r2
    8944:	fb86 2103 	smull	r2, r1, r6, r3
    8948:	17da      	asrs	r2, r3, #31
    894a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    894e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8952:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    8956:	3130      	adds	r1, #48	; 0x30
    8958:	f800 1c01 	strb.w	r1, [r0, #-1]
    895c:	4619      	mov	r1, r3
    895e:	2963      	cmp	r1, #99	; 0x63
    8960:	4613      	mov	r3, r2
    8962:	f100 32ff 	add.w	r2, r0, #4294967295
    8966:	dcec      	bgt.n	8942 <_svfprintf_r+0x159a>
    8968:	3330      	adds	r3, #48	; 0x30
    896a:	b2d9      	uxtb	r1, r3
    896c:	1e83      	subs	r3, r0, #2
    896e:	429d      	cmp	r5, r3
    8970:	f802 1c01 	strb.w	r1, [r2, #-1]
    8974:	f240 82cb 	bls.w	8f0e <_svfprintf_r+0x1b66>
    8978:	4613      	mov	r3, r2
    897a:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    897e:	e001      	b.n	8984 <_svfprintf_r+0x15dc>
    8980:	f813 1b01 	ldrb.w	r1, [r3], #1
    8984:	f802 1b01 	strb.w	r1, [r2], #1
    8988:	429d      	cmp	r5, r3
    898a:	d1f9      	bne.n	8980 <_svfprintf_r+0x15d8>
    898c:	f10d 0399 	add.w	r3, sp, #153	; 0x99
    8990:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    8994:	1a1b      	subs	r3, r3, r0
    8996:	4413      	add	r3, r2
    8998:	aa20      	add	r2, sp, #128	; 0x80
    899a:	1a9b      	subs	r3, r3, r2
    899c:	9315      	str	r3, [sp, #84]	; 0x54
    899e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    89a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
    89a2:	2b01      	cmp	r3, #1
    89a4:	441a      	add	r2, r3
    89a6:	9205      	str	r2, [sp, #20]
    89a8:	f340 823e 	ble.w	8e28 <_svfprintf_r+0x1a80>
    89ac:	9b05      	ldr	r3, [sp, #20]
    89ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
    89b0:	4413      	add	r3, r2
    89b2:	9305      	str	r3, [sp, #20]
    89b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    89b6:	9a05      	ldr	r2, [sp, #20]
    89b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    89bc:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
    89c0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    89c4:	2300      	movs	r3, #0
    89c6:	930c      	str	r3, [sp, #48]	; 0x30
    89c8:	9202      	str	r2, [sp, #8]
    89ca:	9310      	str	r3, [sp, #64]	; 0x40
    89cc:	930b      	str	r3, [sp, #44]	; 0x2c
    89ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
    89d0:	2b00      	cmp	r3, #0
    89d2:	f040 80dc 	bne.w	8b8e <_svfprintf_r+0x17e6>
    89d6:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    89da:	9303      	str	r3, [sp, #12]
    89dc:	f7fe bed7 	b.w	778e <_svfprintf_r+0x3e6>
    89e0:	4620      	mov	r0, r4
    89e2:	9708      	str	r7, [sp, #32]
    89e4:	f7fd ff2c 	bl	6840 <strlen>
    89e8:	4601      	mov	r1, r0
    89ea:	9005      	str	r0, [sp, #20]
    89ec:	f7fe bf22 	b.w	7834 <_svfprintf_r+0x48c>
    89f0:	ee1a 1a10 	vmov	r1, s20
    89f4:	aa26      	add	r2, sp, #152	; 0x98
    89f6:	4650      	mov	r0, sl
    89f8:	f001 fdaa 	bl	a550 <__ssprint_r>
    89fc:	f7fe bddf 	b.w	75be <_svfprintf_r+0x216>
    8a00:	2300      	movs	r3, #0
    8a02:	9307      	str	r3, [sp, #28]
    8a04:	ac39      	add	r4, sp, #228	; 0xe4
    8a06:	e6ec      	b.n	87e2 <_svfprintf_r+0x143a>
    8a08:	ee1a 1a10 	vmov	r1, s20
    8a0c:	aa26      	add	r2, sp, #152	; 0x98
    8a0e:	4650      	mov	r0, sl
    8a10:	f001 fd9e 	bl	a550 <__ssprint_r>
    8a14:	2800      	cmp	r0, #0
    8a16:	f47f a942 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8a1a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8a1c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8a20:	f7ff ba59 	b.w	7ed6 <_svfprintf_r+0xb2e>
    8a24:	ee1a 1a10 	vmov	r1, s20
    8a28:	aa26      	add	r2, sp, #152	; 0x98
    8a2a:	4650      	mov	r0, sl
    8a2c:	f001 fd90 	bl	a550 <__ssprint_r>
    8a30:	2800      	cmp	r0, #0
    8a32:	f47f a934 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8a36:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    8a3a:	991d      	ldr	r1, [sp, #116]	; 0x74
    8a3c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8a40:	e641      	b.n	86c6 <_svfprintf_r+0x131e>
    8a42:	2306      	movs	r3, #6
    8a44:	9303      	str	r3, [sp, #12]
    8a46:	f7ff bb9d 	b.w	8184 <_svfprintf_r+0xddc>
    8a4a:	9b03      	ldr	r3, [sp, #12]
    8a4c:	2102      	movs	r1, #2
    8a4e:	1c5e      	adds	r6, r3, #1
    8a50:	e728      	b.n	88a4 <_svfprintf_r+0x14fc>
    8a52:	9e03      	ldr	r6, [sp, #12]
    8a54:	2103      	movs	r1, #3
    8a56:	e725      	b.n	88a4 <_svfprintf_r+0x14fc>
    8a58:	a81d      	add	r0, sp, #116	; 0x74
    8a5a:	eeb0 0a48 	vmov.f32	s0, s16
    8a5e:	eef0 0a68 	vmov.f32	s1, s17
    8a62:	f000 fc25 	bl	92b0 <frexp>
    8a66:	2200      	movs	r2, #0
    8a68:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    8a6c:	ec51 0b10 	vmov	r0, r1, d0
    8a70:	f003 fa1c 	bl	beac <__aeabi_dmul>
    8a74:	2200      	movs	r2, #0
    8a76:	2300      	movs	r3, #0
    8a78:	4606      	mov	r6, r0
    8a7a:	460f      	mov	r7, r1
    8a7c:	f7fc feb4 	bl	57e8 <__aeabi_dcmpeq>
    8a80:	b108      	cbz	r0, 8a86 <_svfprintf_r+0x16de>
    8a82:	2301      	movs	r3, #1
    8a84:	931d      	str	r3, [sp, #116]	; 0x74
    8a86:	4b66      	ldr	r3, [pc, #408]	; (8c20 <_svfprintf_r+0x1878>)
    8a88:	9305      	str	r3, [sp, #20]
    8a8a:	9b03      	ldr	r3, [sp, #12]
    8a8c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    8a90:	3b01      	subs	r3, #1
    8a92:	ee0a aa90 	vmov	s21, sl
    8a96:	e9cd 9b0c 	strd	r9, fp, [sp, #48]	; 0x30
    8a9a:	f8dd a014 	ldr.w	sl, [sp, #20]
    8a9e:	9410      	str	r4, [sp, #64]	; 0x40
    8aa0:	4625      	mov	r5, r4
    8aa2:	4698      	mov	r8, r3
    8aa4:	e006      	b.n	8ab4 <_svfprintf_r+0x170c>
    8aa6:	2200      	movs	r2, #0
    8aa8:	2300      	movs	r3, #0
    8aaa:	f108 38ff 	add.w	r8, r8, #4294967295
    8aae:	f7fc fe9b 	bl	57e8 <__aeabi_dcmpeq>
    8ab2:	b9e8      	cbnz	r0, 8af0 <_svfprintf_r+0x1748>
    8ab4:	4b5b      	ldr	r3, [pc, #364]	; (8c24 <_svfprintf_r+0x187c>)
    8ab6:	2200      	movs	r2, #0
    8ab8:	4630      	mov	r0, r6
    8aba:	4639      	mov	r1, r7
    8abc:	f003 f9f6 	bl	beac <__aeabi_dmul>
    8ac0:	460f      	mov	r7, r1
    8ac2:	4606      	mov	r6, r0
    8ac4:	f003 fc04 	bl	c2d0 <__aeabi_d2iz>
    8ac8:	4604      	mov	r4, r0
    8aca:	f7fc fdcd 	bl	5668 <__aeabi_i2d>
    8ace:	460b      	mov	r3, r1
    8ad0:	4602      	mov	r2, r0
    8ad2:	4639      	mov	r1, r7
    8ad4:	4630      	mov	r0, r6
    8ad6:	f7fc fc79 	bl	53cc <__aeabi_dsub>
    8ada:	f81a 3004 	ldrb.w	r3, [sl, r4]
    8ade:	f1b8 3fff 	cmp.w	r8, #4294967295
    8ae2:	46ab      	mov	fp, r5
    8ae4:	46c1      	mov	r9, r8
    8ae6:	f805 3b01 	strb.w	r3, [r5], #1
    8aea:	4606      	mov	r6, r0
    8aec:	460f      	mov	r7, r1
    8aee:	d1da      	bne.n	8aa6 <_svfprintf_r+0x16fe>
    8af0:	4b4d      	ldr	r3, [pc, #308]	; (8c28 <_svfprintf_r+0x1880>)
    8af2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    8af6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    8afa:	2200      	movs	r2, #0
    8afc:	4630      	mov	r0, r6
    8afe:	4639      	mov	r1, r7
    8b00:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    8b04:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    8b08:	ee1a aa90 	vmov	sl, s21
    8b0c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    8b10:	940d      	str	r4, [sp, #52]	; 0x34
    8b12:	9c10      	ldr	r4, [sp, #64]	; 0x40
    8b14:	f7fc fe90 	bl	5838 <__aeabi_dcmpgt>
    8b18:	2800      	cmp	r0, #0
    8b1a:	f040 8160 	bne.w	8dde <_svfprintf_r+0x1a36>
    8b1e:	4b42      	ldr	r3, [pc, #264]	; (8c28 <_svfprintf_r+0x1880>)
    8b20:	4630      	mov	r0, r6
    8b22:	4639      	mov	r1, r7
    8b24:	2200      	movs	r2, #0
    8b26:	f7fc fe5f 	bl	57e8 <__aeabi_dcmpeq>
    8b2a:	b118      	cbz	r0, 8b34 <_svfprintf_r+0x178c>
    8b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8b2e:	07de      	lsls	r6, r3, #31
    8b30:	f100 8155 	bmi.w	8dde <_svfprintf_r+0x1a36>
    8b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b36:	2b00      	cmp	r3, #0
    8b38:	db07      	blt.n	8b4a <_svfprintf_r+0x17a2>
    8b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b3c:	3301      	adds	r3, #1
    8b3e:	442b      	add	r3, r5
    8b40:	2230      	movs	r2, #48	; 0x30
    8b42:	f805 2b01 	strb.w	r2, [r5], #1
    8b46:	42ab      	cmp	r3, r5
    8b48:	d1fb      	bne.n	8b42 <_svfprintf_r+0x179a>
    8b4a:	1b2b      	subs	r3, r5, r4
    8b4c:	930d      	str	r3, [sp, #52]	; 0x34
    8b4e:	e6d1      	b.n	88f4 <_svfprintf_r+0x154c>
    8b50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8b54:	f8dd b014 	ldr.w	fp, [sp, #20]
    8b58:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    8b5c:	9714      	str	r7, [sp, #80]	; 0x50
    8b5e:	18e3      	adds	r3, r4, r3
    8b60:	429d      	cmp	r5, r3
    8b62:	4691      	mov	r9, r2
    8b64:	462a      	mov	r2, r5
    8b66:	bf28      	it	cs
    8b68:	461a      	movcs	r2, r3
    8b6a:	4666      	mov	r6, ip
    8b6c:	9205      	str	r2, [sp, #20]
    8b6e:	f7ff b9b9 	b.w	7ee4 <_svfprintf_r+0xb3c>
    8b72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8b74:	930b      	str	r3, [sp, #44]	; 0x2c
    8b76:	1cdd      	adds	r5, r3, #3
    8b78:	db02      	blt.n	8b80 <_svfprintf_r+0x17d8>
    8b7a:	9a03      	ldr	r2, [sp, #12]
    8b7c:	4293      	cmp	r3, r2
    8b7e:	dd0d      	ble.n	8b9c <_svfprintf_r+0x17f4>
    8b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b82:	3b02      	subs	r3, #2
    8b84:	930a      	str	r3, [sp, #40]	; 0x28
    8b86:	f023 0320 	bic.w	r3, r3, #32
    8b8a:	9302      	str	r3, [sp, #8]
    8b8c:	e6bc      	b.n	8908 <_svfprintf_r+0x1560>
    8b8e:	222d      	movs	r2, #45	; 0x2d
    8b90:	2300      	movs	r3, #0
    8b92:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    8b96:	9303      	str	r3, [sp, #12]
    8b98:	f7fe bdfc 	b.w	7794 <_svfprintf_r+0x3ec>
    8b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8ba0:	4293      	cmp	r3, r2
    8ba2:	f2c0 80d8 	blt.w	8d56 <_svfprintf_r+0x19ae>
    8ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8ba8:	f013 0f01 	tst.w	r3, #1
    8bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8bae:	f000 8140 	beq.w	8e32 <_svfprintf_r+0x1a8a>
    8bb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8bb4:	4413      	add	r3, r2
    8bb6:	9305      	str	r3, [sp, #20]
    8bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8bba:	0559      	lsls	r1, r3, #21
    8bbc:	d503      	bpl.n	8bc6 <_svfprintf_r+0x181e>
    8bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8bc0:	2b00      	cmp	r3, #0
    8bc2:	f300 813f 	bgt.w	8e44 <_svfprintf_r+0x1a9c>
    8bc6:	9b05      	ldr	r3, [sp, #20]
    8bc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8bcc:	9302      	str	r3, [sp, #8]
    8bce:	2367      	movs	r3, #103	; 0x67
    8bd0:	930a      	str	r3, [sp, #40]	; 0x28
    8bd2:	2300      	movs	r3, #0
    8bd4:	930c      	str	r3, [sp, #48]	; 0x30
    8bd6:	9310      	str	r3, [sp, #64]	; 0x40
    8bd8:	e6f9      	b.n	89ce <_svfprintf_r+0x1626>
    8bda:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8bdc:	42ab      	cmp	r3, r5
    8bde:	f4bf ae87 	bcs.w	88f0 <_svfprintf_r+0x1548>
    8be2:	2130      	movs	r1, #48	; 0x30
    8be4:	1c5a      	adds	r2, r3, #1
    8be6:	9224      	str	r2, [sp, #144]	; 0x90
    8be8:	7019      	strb	r1, [r3, #0]
    8bea:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8bec:	429d      	cmp	r5, r3
    8bee:	d8f9      	bhi.n	8be4 <_svfprintf_r+0x183c>
    8bf0:	e67e      	b.n	88f0 <_svfprintf_r+0x1548>
    8bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8bf4:	07db      	lsls	r3, r3, #31
    8bf6:	f100 80b9 	bmi.w	8d6c <_svfprintf_r+0x19c4>
    8bfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8bfc:	e678      	b.n	88f0 <_svfprintf_r+0x1548>
    8bfe:	aa26      	add	r2, sp, #152	; 0x98
    8c00:	4649      	mov	r1, r9
    8c02:	4650      	mov	r0, sl
    8c04:	f001 fca4 	bl	a550 <__ssprint_r>
    8c08:	2800      	cmp	r0, #0
    8c0a:	f47f a848 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8c0e:	7838      	ldrb	r0, [r7, #0]
    8c10:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    8c14:	aa29      	add	r2, sp, #164	; 0xa4
    8c16:	4405      	add	r5, r0
    8c18:	f7ff bbbf 	b.w	839a <_svfprintf_r+0xff2>
    8c1c:	66666667 	.word	0x66666667
    8c20:	0000cb18 	.word	0x0000cb18
    8c24:	40300000 	.word	0x40300000
    8c28:	3fe00000 	.word	0x3fe00000
    8c2c:	2378      	movs	r3, #120	; 0x78
    8c2e:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    8c32:	2330      	movs	r3, #48	; 0x30
    8c34:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    8c38:	f04b 0302 	orr.w	r3, fp, #2
    8c3c:	9309      	str	r3, [sp, #36]	; 0x24
    8c3e:	9b03      	ldr	r3, [sp, #12]
    8c40:	2b63      	cmp	r3, #99	; 0x63
    8c42:	f300 80a9 	bgt.w	8d98 <_svfprintf_r+0x19f0>
    8c46:	2300      	movs	r3, #0
    8c48:	9307      	str	r3, [sp, #28]
    8c4a:	ac39      	add	r4, sp, #228	; 0xe4
    8c4c:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    8c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8c52:	2a00      	cmp	r2, #0
    8c54:	f023 0320 	bic.w	r3, r3, #32
    8c58:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
    8c5c:	9302      	str	r3, [sp, #8]
    8c5e:	db22      	blt.n	8ca6 <_svfprintf_r+0x18fe>
    8c60:	2300      	movs	r3, #0
    8c62:	ec42 1b18 	vmov	d8, r1, r2
    8c66:	9318      	str	r3, [sp, #96]	; 0x60
    8c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8c6a:	2b61      	cmp	r3, #97	; 0x61
    8c6c:	f47f aa9a 	bne.w	81a4 <_svfprintf_r+0xdfc>
    8c70:	eeb0 0a48 	vmov.f32	s0, s16
    8c74:	eef0 0a68 	vmov.f32	s1, s17
    8c78:	a81d      	add	r0, sp, #116	; 0x74
    8c7a:	f000 fb19 	bl	92b0 <frexp>
    8c7e:	2200      	movs	r2, #0
    8c80:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    8c84:	ec51 0b10 	vmov	r0, r1, d0
    8c88:	f003 f910 	bl	beac <__aeabi_dmul>
    8c8c:	2200      	movs	r2, #0
    8c8e:	2300      	movs	r3, #0
    8c90:	4606      	mov	r6, r0
    8c92:	460f      	mov	r7, r1
    8c94:	f7fc fda8 	bl	57e8 <__aeabi_dcmpeq>
    8c98:	b108      	cbz	r0, 8c9e <_svfprintf_r+0x18f6>
    8c9a:	2301      	movs	r3, #1
    8c9c:	931d      	str	r3, [sp, #116]	; 0x74
    8c9e:	4bad      	ldr	r3, [pc, #692]	; (8f54 <_svfprintf_r+0x1bac>)
    8ca0:	9305      	str	r3, [sp, #20]
    8ca2:	e6f2      	b.n	8a8a <_svfprintf_r+0x16e2>
    8ca4:	9307      	str	r3, [sp, #28]
    8ca6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    8caa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    8cae:	ee08 3a90 	vmov	s17, r3
    8cb2:	232d      	movs	r3, #45	; 0x2d
    8cb4:	ee08 2a10 	vmov	s16, r2
    8cb8:	9318      	str	r3, [sp, #96]	; 0x60
    8cba:	e7d5      	b.n	8c68 <_svfprintf_r+0x18c0>
    8cbc:	ee1a 1a10 	vmov	r1, s20
    8cc0:	aa26      	add	r2, sp, #152	; 0x98
    8cc2:	4650      	mov	r0, sl
    8cc4:	f001 fc44 	bl	a550 <__ssprint_r>
    8cc8:	2800      	cmp	r0, #0
    8cca:	f47e afe8 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8cce:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8cd0:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8cd4:	f7ff b8f8 	b.w	7ec8 <_svfprintf_r+0xb20>
    8cd8:	ee1a 1a10 	vmov	r1, s20
    8cdc:	aa26      	add	r2, sp, #152	; 0x98
    8cde:	4650      	mov	r0, sl
    8ce0:	f001 fc36 	bl	a550 <__ssprint_r>
    8ce4:	2800      	cmp	r0, #0
    8ce6:	f47e afda 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8cea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8cec:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8cee:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8cf2:	f7ff b90d 	b.w	7f10 <_svfprintf_r+0xb68>
    8cf6:	2358      	movs	r3, #88	; 0x58
    8cf8:	e799      	b.n	8c2e <_svfprintf_r+0x1886>
    8cfa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    8cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8cfe:	920b      	str	r2, [sp, #44]	; 0x2c
    8d00:	2a00      	cmp	r2, #0
    8d02:	f003 0301 	and.w	r3, r3, #1
    8d06:	f340 8111 	ble.w	8f2c <_svfprintf_r+0x1b84>
    8d0a:	9903      	ldr	r1, [sp, #12]
    8d0c:	430b      	orrs	r3, r1
    8d0e:	f040 80c1 	bne.w	8e94 <_svfprintf_r+0x1aec>
    8d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d14:	9305      	str	r3, [sp, #20]
    8d16:	2366      	movs	r3, #102	; 0x66
    8d18:	930a      	str	r3, [sp, #40]	; 0x28
    8d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d1c:	055a      	lsls	r2, r3, #21
    8d1e:	f100 8093 	bmi.w	8e48 <_svfprintf_r+0x1aa0>
    8d22:	9b05      	ldr	r3, [sp, #20]
    8d24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8d28:	9302      	str	r3, [sp, #8]
    8d2a:	e752      	b.n	8bd2 <_svfprintf_r+0x182a>
    8d2c:	ee1a 1a10 	vmov	r1, s20
    8d30:	aa26      	add	r2, sp, #152	; 0x98
    8d32:	4650      	mov	r0, sl
    8d34:	f001 fc0c 	bl	a550 <__ssprint_r>
    8d38:	2800      	cmp	r0, #0
    8d3a:	f47e afb0 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8d3e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    8d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d42:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    8d44:	1b1c      	subs	r4, r3, r4
    8d46:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8d4a:	f7ff b8f9 	b.w	7f40 <_svfprintf_r+0xb98>
    8d4e:	2200      	movs	r2, #0
    8d50:	9203      	str	r2, [sp, #12]
    8d52:	f7fe bb87 	b.w	7464 <_svfprintf_r+0xbc>
    8d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d58:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8d5a:	189a      	adds	r2, r3, r2
    8d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d5e:	9205      	str	r2, [sp, #20]
    8d60:	2b00      	cmp	r3, #0
    8d62:	f340 80bd 	ble.w	8ee0 <_svfprintf_r+0x1b38>
    8d66:	2367      	movs	r3, #103	; 0x67
    8d68:	930a      	str	r3, [sp, #40]	; 0x28
    8d6a:	e7d6      	b.n	8d1a <_svfprintf_r+0x1972>
    8d6c:	19a5      	adds	r5, r4, r6
    8d6e:	e5b5      	b.n	88dc <_svfprintf_r+0x1534>
    8d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8d72:	320f      	adds	r2, #15
    8d74:	b2d2      	uxtb	r2, r2
    8d76:	2101      	movs	r1, #1
    8d78:	e5d0      	b.n	891c <_svfprintf_r+0x1574>
    8d7a:	2900      	cmp	r1, #0
    8d7c:	f040 80ad 	bne.w	8eda <_svfprintf_r+0x1b32>
    8d80:	2230      	movs	r2, #48	; 0x30
    8d82:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
    8d86:	f10d 0283 	add.w	r2, sp, #131	; 0x83
    8d8a:	3330      	adds	r3, #48	; 0x30
    8d8c:	f802 3b01 	strb.w	r3, [r2], #1
    8d90:	ab20      	add	r3, sp, #128	; 0x80
    8d92:	1ad3      	subs	r3, r2, r3
    8d94:	9315      	str	r3, [sp, #84]	; 0x54
    8d96:	e602      	b.n	899e <_svfprintf_r+0x15f6>
    8d98:	1c59      	adds	r1, r3, #1
    8d9a:	4650      	mov	r0, sl
    8d9c:	f7fc fd6c 	bl	5878 <_malloc_r>
    8da0:	4604      	mov	r4, r0
    8da2:	2800      	cmp	r0, #0
    8da4:	d037      	beq.n	8e16 <_svfprintf_r+0x1a6e>
    8da6:	9007      	str	r0, [sp, #28]
    8da8:	e750      	b.n	8c4c <_svfprintf_r+0x18a4>
    8daa:	3301      	adds	r3, #1
    8dac:	443a      	add	r2, r7
    8dae:	2b07      	cmp	r3, #7
    8db0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    8db4:	f8c9 5000 	str.w	r5, [r9]
    8db8:	f8c9 7004 	str.w	r7, [r9, #4]
    8dbc:	f77f abd9 	ble.w	8572 <_svfprintf_r+0x11ca>
    8dc0:	ee1a 1a10 	vmov	r1, s20
    8dc4:	aa26      	add	r2, sp, #152	; 0x98
    8dc6:	4650      	mov	r0, sl
    8dc8:	f001 fbc2 	bl	a550 <__ssprint_r>
    8dcc:	2800      	cmp	r0, #0
    8dce:	f47e af66 	bne.w	7c9e <_svfprintf_r+0x8f6>
    8dd2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    8dd6:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    8dda:	f7ff bbcc 	b.w	8576 <_svfprintf_r+0x11ce>
    8dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8de0:	9a05      	ldr	r2, [sp, #20]
    8de2:	9324      	str	r3, [sp, #144]	; 0x90
    8de4:	7bd1      	ldrb	r1, [r2, #15]
    8de6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    8dea:	428b      	cmp	r3, r1
    8dec:	462a      	mov	r2, r5
    8dee:	d109      	bne.n	8e04 <_svfprintf_r+0x1a5c>
    8df0:	2030      	movs	r0, #48	; 0x30
    8df2:	f802 0c01 	strb.w	r0, [r2, #-1]
    8df6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8df8:	1e53      	subs	r3, r2, #1
    8dfa:	9324      	str	r3, [sp, #144]	; 0x90
    8dfc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    8e00:	4299      	cmp	r1, r3
    8e02:	d0f6      	beq.n	8df2 <_svfprintf_r+0x1a4a>
    8e04:	2b39      	cmp	r3, #57	; 0x39
    8e06:	bf0b      	itete	eq
    8e08:	9b05      	ldreq	r3, [sp, #20]
    8e0a:	3301      	addne	r3, #1
    8e0c:	7a9b      	ldrbeq	r3, [r3, #10]
    8e0e:	b2db      	uxtbne	r3, r3
    8e10:	f802 3c01 	strb.w	r3, [r2, #-1]
    8e14:	e699      	b.n	8b4a <_svfprintf_r+0x17a2>
    8e16:	ee1a 2a10 	vmov	r2, s20
    8e1a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    8e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e22:	8193      	strh	r3, [r2, #12]
    8e24:	f7fe bbcf 	b.w	75c6 <_svfprintf_r+0x21e>
    8e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e2a:	07d8      	lsls	r0, r3, #31
    8e2c:	f57f adc2 	bpl.w	89b4 <_svfprintf_r+0x160c>
    8e30:	e5bc      	b.n	89ac <_svfprintf_r+0x1604>
    8e32:	9305      	str	r3, [sp, #20]
    8e34:	e6c0      	b.n	8bb8 <_svfprintf_r+0x1810>
    8e36:	9b03      	ldr	r3, [sp, #12]
    8e38:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8e3c:	f8dd b01c 	ldr.w	fp, [sp, #28]
    8e40:	9305      	str	r3, [sp, #20]
    8e42:	e4bf      	b.n	87c4 <_svfprintf_r+0x141c>
    8e44:	2367      	movs	r3, #103	; 0x67
    8e46:	930a      	str	r3, [sp, #40]	; 0x28
    8e48:	9914      	ldr	r1, [sp, #80]	; 0x50
    8e4a:	780b      	ldrb	r3, [r1, #0]
    8e4c:	2bff      	cmp	r3, #255	; 0xff
    8e4e:	f000 808f 	beq.w	8f70 <_svfprintf_r+0x1bc8>
    8e52:	2500      	movs	r5, #0
    8e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8e56:	4628      	mov	r0, r5
    8e58:	e003      	b.n	8e62 <_svfprintf_r+0x1aba>
    8e5a:	3001      	adds	r0, #1
    8e5c:	3101      	adds	r1, #1
    8e5e:	2bff      	cmp	r3, #255	; 0xff
    8e60:	d008      	beq.n	8e74 <_svfprintf_r+0x1acc>
    8e62:	4293      	cmp	r3, r2
    8e64:	da06      	bge.n	8e74 <_svfprintf_r+0x1acc>
    8e66:	1ad2      	subs	r2, r2, r3
    8e68:	784b      	ldrb	r3, [r1, #1]
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	d1f5      	bne.n	8e5a <_svfprintf_r+0x1ab2>
    8e6e:	780b      	ldrb	r3, [r1, #0]
    8e70:	3501      	adds	r5, #1
    8e72:	e7f4      	b.n	8e5e <_svfprintf_r+0x1ab6>
    8e74:	920b      	str	r2, [sp, #44]	; 0x2c
    8e76:	9114      	str	r1, [sp, #80]	; 0x50
    8e78:	9010      	str	r0, [sp, #64]	; 0x40
    8e7a:	950c      	str	r5, [sp, #48]	; 0x30
    8e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e80:	9917      	ldr	r1, [sp, #92]	; 0x5c
    8e82:	4413      	add	r3, r2
    8e84:	9a05      	ldr	r2, [sp, #20]
    8e86:	fb01 2303 	mla	r3, r1, r3, r2
    8e8a:	9305      	str	r3, [sp, #20]
    8e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8e90:	9302      	str	r3, [sp, #8]
    8e92:	e59c      	b.n	89ce <_svfprintf_r+0x1626>
    8e94:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e96:	18d5      	adds	r5, r2, r3
    8e98:	4429      	add	r1, r5
    8e9a:	2366      	movs	r3, #102	; 0x66
    8e9c:	9105      	str	r1, [sp, #20]
    8e9e:	930a      	str	r3, [sp, #40]	; 0x28
    8ea0:	e73b      	b.n	8d1a <_svfprintf_r+0x1972>
    8ea2:	9b03      	ldr	r3, [sp, #12]
    8ea4:	9302      	str	r3, [sp, #8]
    8ea6:	9305      	str	r3, [sp, #20]
    8ea8:	2373      	movs	r3, #115	; 0x73
    8eaa:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    8eae:	9708      	str	r7, [sp, #32]
    8eb0:	9003      	str	r0, [sp, #12]
    8eb2:	900c      	str	r0, [sp, #48]	; 0x30
    8eb4:	9010      	str	r0, [sp, #64]	; 0x40
    8eb6:	930a      	str	r3, [sp, #40]	; 0x28
    8eb8:	f7fe bc69 	b.w	778e <_svfprintf_r+0x3e6>
    8ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ebe:	4c26      	ldr	r4, [pc, #152]	; (8f58 <_svfprintf_r+0x1bb0>)
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	bfb4      	ite	lt
    8ec4:	222d      	movlt	r2, #45	; 0x2d
    8ec6:	f89d 206f 	ldrbge.w	r2, [sp, #111]	; 0x6f
    8eca:	4b24      	ldr	r3, [pc, #144]	; (8f5c <_svfprintf_r+0x1bb4>)
    8ecc:	bfb8      	it	lt
    8ece:	f88d 206f 	strblt.w	r2, [sp, #111]	; 0x6f
    8ed2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    8ed6:	f7fe bc4d 	b.w	7774 <_svfprintf_r+0x3cc>
    8eda:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    8ede:	e754      	b.n	8d8a <_svfprintf_r+0x19e2>
    8ee0:	f1c3 0301 	rsb	r3, r3, #1
    8ee4:	441a      	add	r2, r3
    8ee6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    8eea:	9302      	str	r3, [sp, #8]
    8eec:	2367      	movs	r3, #103	; 0x67
    8eee:	9205      	str	r2, [sp, #20]
    8ef0:	930a      	str	r3, [sp, #40]	; 0x28
    8ef2:	e66e      	b.n	8bd2 <_svfprintf_r+0x182a>
    8ef4:	ec51 0b18 	vmov	r0, r1, d8
    8ef8:	2200      	movs	r2, #0
    8efa:	2300      	movs	r3, #0
    8efc:	f7fc fc74 	bl	57e8 <__aeabi_dcmpeq>
    8f00:	2800      	cmp	r0, #0
    8f02:	f47f ace9 	bne.w	88d8 <_svfprintf_r+0x1530>
    8f06:	f1c6 0601 	rsb	r6, r6, #1
    8f0a:	961d      	str	r6, [sp, #116]	; 0x74
    8f0c:	e4e5      	b.n	88da <_svfprintf_r+0x1532>
    8f0e:	2302      	movs	r3, #2
    8f10:	9315      	str	r3, [sp, #84]	; 0x54
    8f12:	e544      	b.n	899e <_svfprintf_r+0x15f6>
    8f14:	9a08      	ldr	r2, [sp, #32]
    8f16:	f898 3001 	ldrb.w	r3, [r8, #1]
    8f1a:	4688      	mov	r8, r1
    8f1c:	f852 1b04 	ldr.w	r1, [r2], #4
    8f20:	9208      	str	r2, [sp, #32]
    8f22:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    8f26:	9103      	str	r1, [sp, #12]
    8f28:	f7fe ba9a 	b.w	7460 <_svfprintf_r+0xb8>
    8f2c:	9a03      	ldr	r2, [sp, #12]
    8f2e:	4313      	orrs	r3, r2
    8f30:	d105      	bne.n	8f3e <_svfprintf_r+0x1b96>
    8f32:	2301      	movs	r3, #1
    8f34:	2266      	movs	r2, #102	; 0x66
    8f36:	9302      	str	r3, [sp, #8]
    8f38:	920a      	str	r2, [sp, #40]	; 0x28
    8f3a:	9305      	str	r3, [sp, #20]
    8f3c:	e649      	b.n	8bd2 <_svfprintf_r+0x182a>
    8f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f40:	1c5d      	adds	r5, r3, #1
    8f42:	442a      	add	r2, r5
    8f44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    8f48:	9302      	str	r3, [sp, #8]
    8f4a:	2366      	movs	r3, #102	; 0x66
    8f4c:	9205      	str	r2, [sp, #20]
    8f4e:	930a      	str	r3, [sp, #40]	; 0x28
    8f50:	e63f      	b.n	8bd2 <_svfprintf_r+0x182a>
    8f52:	bf00      	nop
    8f54:	0000cb04 	.word	0x0000cb04
    8f58:	0000cafc 	.word	0x0000cafc
    8f5c:	0000cb00 	.word	0x0000cb00
    8f60:	230c      	movs	r3, #12
    8f62:	f8ca 3000 	str.w	r3, [sl]
    8f66:	f04f 33ff 	mov.w	r3, #4294967295
    8f6a:	9304      	str	r3, [sp, #16]
    8f6c:	f7fe bb32 	b.w	75d4 <_svfprintf_r+0x22c>
    8f70:	2300      	movs	r3, #0
    8f72:	930c      	str	r3, [sp, #48]	; 0x30
    8f74:	9310      	str	r3, [sp, #64]	; 0x40
    8f76:	e781      	b.n	8e7c <_svfprintf_r+0x1ad4>
    8f78:	ee1a 2a10 	vmov	r2, s20
    8f7c:	8993      	ldrh	r3, [r2, #12]
    8f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8f82:	8193      	strh	r3, [r2, #12]
    8f84:	f7fe be8b 	b.w	7c9e <_svfprintf_r+0x8f6>

00008f88 <_fclose_r>:
    8f88:	b570      	push	{r4, r5, r6, lr}
    8f8a:	2900      	cmp	r1, #0
    8f8c:	d04b      	beq.n	9026 <_fclose_r+0x9e>
    8f8e:	4606      	mov	r6, r0
    8f90:	460c      	mov	r4, r1
    8f92:	b110      	cbz	r0, 8f9a <_fclose_r+0x12>
    8f94:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8f96:	2b00      	cmp	r3, #0
    8f98:	d048      	beq.n	902c <_fclose_r+0xa4>
    8f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8f9c:	07d8      	lsls	r0, r3, #31
    8f9e:	d534      	bpl.n	900a <_fclose_r+0x82>
    8fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d03e      	beq.n	9026 <_fclose_r+0x9e>
    8fa8:	4621      	mov	r1, r4
    8faa:	4630      	mov	r0, r6
    8fac:	f000 f850 	bl	9050 <__sflush_r>
    8fb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8fb2:	4605      	mov	r5, r0
    8fb4:	b133      	cbz	r3, 8fc4 <_fclose_r+0x3c>
    8fb6:	69e1      	ldr	r1, [r4, #28]
    8fb8:	4630      	mov	r0, r6
    8fba:	4798      	blx	r3
    8fbc:	2800      	cmp	r0, #0
    8fbe:	bfb8      	it	lt
    8fc0:	f04f 35ff 	movlt.w	r5, #4294967295
    8fc4:	89a3      	ldrh	r3, [r4, #12]
    8fc6:	061a      	lsls	r2, r3, #24
    8fc8:	d43c      	bmi.n	9044 <_fclose_r+0xbc>
    8fca:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8fcc:	b141      	cbz	r1, 8fe0 <_fclose_r+0x58>
    8fce:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8fd2:	4299      	cmp	r1, r3
    8fd4:	d002      	beq.n	8fdc <_fclose_r+0x54>
    8fd6:	4630      	mov	r0, r6
    8fd8:	f7fd fd00 	bl	69dc <_free_r>
    8fdc:	2300      	movs	r3, #0
    8fde:	6323      	str	r3, [r4, #48]	; 0x30
    8fe0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    8fe2:	b121      	cbz	r1, 8fee <_fclose_r+0x66>
    8fe4:	4630      	mov	r0, r6
    8fe6:	f7fd fcf9 	bl	69dc <_free_r>
    8fea:	2300      	movs	r3, #0
    8fec:	6463      	str	r3, [r4, #68]	; 0x44
    8fee:	f7fd f99f 	bl	6330 <__sfp_lock_acquire>
    8ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8ff4:	2200      	movs	r2, #0
    8ff6:	07db      	lsls	r3, r3, #31
    8ff8:	81a2      	strh	r2, [r4, #12]
    8ffa:	d51f      	bpl.n	903c <_fclose_r+0xb4>
    8ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ffe:	f7fd fc0b 	bl	6818 <__retarget_lock_close_recursive>
    9002:	f7fd f99b 	bl	633c <__sfp_lock_release>
    9006:	4628      	mov	r0, r5
    9008:	bd70      	pop	{r4, r5, r6, pc}
    900a:	89a3      	ldrh	r3, [r4, #12]
    900c:	0599      	lsls	r1, r3, #22
    900e:	d4cb      	bmi.n	8fa8 <_fclose_r+0x20>
    9010:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9012:	f7fd fc03 	bl	681c <__retarget_lock_acquire_recursive>
    9016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    901a:	2b00      	cmp	r3, #0
    901c:	d1c4      	bne.n	8fa8 <_fclose_r+0x20>
    901e:	6e65      	ldr	r5, [r4, #100]	; 0x64
    9020:	f015 0501 	ands.w	r5, r5, #1
    9024:	d005      	beq.n	9032 <_fclose_r+0xaa>
    9026:	2500      	movs	r5, #0
    9028:	4628      	mov	r0, r5
    902a:	bd70      	pop	{r4, r5, r6, pc}
    902c:	f7fd f962 	bl	62f4 <__sinit>
    9030:	e7b3      	b.n	8f9a <_fclose_r+0x12>
    9032:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9034:	f7fd fbf4 	bl	6820 <__retarget_lock_release_recursive>
    9038:	4628      	mov	r0, r5
    903a:	bd70      	pop	{r4, r5, r6, pc}
    903c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    903e:	f7fd fbef 	bl	6820 <__retarget_lock_release_recursive>
    9042:	e7db      	b.n	8ffc <_fclose_r+0x74>
    9044:	6921      	ldr	r1, [r4, #16]
    9046:	4630      	mov	r0, r6
    9048:	f7fd fcc8 	bl	69dc <_free_r>
    904c:	e7bd      	b.n	8fca <_fclose_r+0x42>
    904e:	bf00      	nop

00009050 <__sflush_r>:
    9050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    9054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9058:	460c      	mov	r4, r1
    905a:	0711      	lsls	r1, r2, #28
    905c:	4680      	mov	r8, r0
    905e:	d447      	bmi.n	90f0 <__sflush_r+0xa0>
    9060:	6863      	ldr	r3, [r4, #4]
    9062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    9066:	2b00      	cmp	r3, #0
    9068:	81a2      	strh	r2, [r4, #12]
    906a:	dd5e      	ble.n	912a <__sflush_r+0xda>
    906c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    906e:	2d00      	cmp	r5, #0
    9070:	d058      	beq.n	9124 <__sflush_r+0xd4>
    9072:	2300      	movs	r3, #0
    9074:	f8d8 6000 	ldr.w	r6, [r8]
    9078:	f8c8 3000 	str.w	r3, [r8]
    907c:	b293      	uxth	r3, r2
    907e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    9082:	d156      	bne.n	9132 <__sflush_r+0xe2>
    9084:	2301      	movs	r3, #1
    9086:	69e1      	ldr	r1, [r4, #28]
    9088:	4640      	mov	r0, r8
    908a:	47a8      	blx	r5
    908c:	1c43      	adds	r3, r0, #1
    908e:	d067      	beq.n	9160 <__sflush_r+0x110>
    9090:	89a3      	ldrh	r3, [r4, #12]
    9092:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9094:	075f      	lsls	r7, r3, #29
    9096:	d505      	bpl.n	90a4 <__sflush_r+0x54>
    9098:	6863      	ldr	r3, [r4, #4]
    909a:	1ac0      	subs	r0, r0, r3
    909c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    909e:	b10b      	cbz	r3, 90a4 <__sflush_r+0x54>
    90a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    90a2:	1ac0      	subs	r0, r0, r3
    90a4:	69e1      	ldr	r1, [r4, #28]
    90a6:	4602      	mov	r2, r0
    90a8:	2300      	movs	r3, #0
    90aa:	4640      	mov	r0, r8
    90ac:	47a8      	blx	r5
    90ae:	1c41      	adds	r1, r0, #1
    90b0:	d141      	bne.n	9136 <__sflush_r+0xe6>
    90b2:	f8d8 3000 	ldr.w	r3, [r8]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d03d      	beq.n	9136 <__sflush_r+0xe6>
    90ba:	2b1d      	cmp	r3, #29
    90bc:	d001      	beq.n	90c2 <__sflush_r+0x72>
    90be:	2b16      	cmp	r3, #22
    90c0:	d156      	bne.n	9170 <__sflush_r+0x120>
    90c2:	89a3      	ldrh	r3, [r4, #12]
    90c4:	6922      	ldr	r2, [r4, #16]
    90c6:	6022      	str	r2, [r4, #0]
    90c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    90cc:	2100      	movs	r1, #0
    90ce:	6061      	str	r1, [r4, #4]
    90d0:	81a3      	strh	r3, [r4, #12]
    90d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    90d4:	f8c8 6000 	str.w	r6, [r8]
    90d8:	b321      	cbz	r1, 9124 <__sflush_r+0xd4>
    90da:	f104 0340 	add.w	r3, r4, #64	; 0x40
    90de:	4299      	cmp	r1, r3
    90e0:	d002      	beq.n	90e8 <__sflush_r+0x98>
    90e2:	4640      	mov	r0, r8
    90e4:	f7fd fc7a 	bl	69dc <_free_r>
    90e8:	2000      	movs	r0, #0
    90ea:	6320      	str	r0, [r4, #48]	; 0x30
    90ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90f0:	6926      	ldr	r6, [r4, #16]
    90f2:	b1be      	cbz	r6, 9124 <__sflush_r+0xd4>
    90f4:	b293      	uxth	r3, r2
    90f6:	6825      	ldr	r5, [r4, #0]
    90f8:	6026      	str	r6, [r4, #0]
    90fa:	079a      	lsls	r2, r3, #30
    90fc:	bf0c      	ite	eq
    90fe:	6963      	ldreq	r3, [r4, #20]
    9100:	2300      	movne	r3, #0
    9102:	1bad      	subs	r5, r5, r6
    9104:	60a3      	str	r3, [r4, #8]
    9106:	e00b      	b.n	9120 <__sflush_r+0xd0>
    9108:	462b      	mov	r3, r5
    910a:	4632      	mov	r2, r6
    910c:	69e1      	ldr	r1, [r4, #28]
    910e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9110:	4640      	mov	r0, r8
    9112:	47b8      	blx	r7
    9114:	f1b0 0c00 	subs.w	ip, r0, #0
    9118:	eba5 050c 	sub.w	r5, r5, ip
    911c:	4466      	add	r6, ip
    911e:	dd17      	ble.n	9150 <__sflush_r+0x100>
    9120:	2d00      	cmp	r5, #0
    9122:	dcf1      	bgt.n	9108 <__sflush_r+0xb8>
    9124:	2000      	movs	r0, #0
    9126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    912a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    912c:	2b00      	cmp	r3, #0
    912e:	dc9d      	bgt.n	906c <__sflush_r+0x1c>
    9130:	e7f8      	b.n	9124 <__sflush_r+0xd4>
    9132:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9134:	e7ae      	b.n	9094 <__sflush_r+0x44>
    9136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    913a:	6922      	ldr	r2, [r4, #16]
    913c:	6022      	str	r2, [r4, #0]
    913e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9142:	81a3      	strh	r3, [r4, #12]
    9144:	2200      	movs	r2, #0
    9146:	04db      	lsls	r3, r3, #19
    9148:	6062      	str	r2, [r4, #4]
    914a:	d5c2      	bpl.n	90d2 <__sflush_r+0x82>
    914c:	6520      	str	r0, [r4, #80]	; 0x50
    914e:	e7c0      	b.n	90d2 <__sflush_r+0x82>
    9150:	89a3      	ldrh	r3, [r4, #12]
    9152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9156:	f04f 30ff 	mov.w	r0, #4294967295
    915a:	81a3      	strh	r3, [r4, #12]
    915c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9160:	f8d8 3000 	ldr.w	r3, [r8]
    9164:	2b00      	cmp	r3, #0
    9166:	d093      	beq.n	9090 <__sflush_r+0x40>
    9168:	2b1d      	cmp	r3, #29
    916a:	d006      	beq.n	917a <__sflush_r+0x12a>
    916c:	2b16      	cmp	r3, #22
    916e:	d004      	beq.n	917a <__sflush_r+0x12a>
    9170:	89a3      	ldrh	r3, [r4, #12]
    9172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9176:	81a3      	strh	r3, [r4, #12]
    9178:	e7d5      	b.n	9126 <__sflush_r+0xd6>
    917a:	f8c8 6000 	str.w	r6, [r8]
    917e:	e7d1      	b.n	9124 <__sflush_r+0xd4>

00009180 <_fflush_r>:
    9180:	b538      	push	{r3, r4, r5, lr}
    9182:	460c      	mov	r4, r1
    9184:	4605      	mov	r5, r0
    9186:	b108      	cbz	r0, 918c <_fflush_r+0xc>
    9188:	6b43      	ldr	r3, [r0, #52]	; 0x34
    918a:	b303      	cbz	r3, 91ce <_fflush_r+0x4e>
    918c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9190:	b188      	cbz	r0, 91b6 <_fflush_r+0x36>
    9192:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9194:	07db      	lsls	r3, r3, #31
    9196:	d401      	bmi.n	919c <_fflush_r+0x1c>
    9198:	0581      	lsls	r1, r0, #22
    919a:	d50f      	bpl.n	91bc <_fflush_r+0x3c>
    919c:	4628      	mov	r0, r5
    919e:	4621      	mov	r1, r4
    91a0:	f7ff ff56 	bl	9050 <__sflush_r>
    91a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    91a6:	07da      	lsls	r2, r3, #31
    91a8:	4605      	mov	r5, r0
    91aa:	d402      	bmi.n	91b2 <_fflush_r+0x32>
    91ac:	89a3      	ldrh	r3, [r4, #12]
    91ae:	059b      	lsls	r3, r3, #22
    91b0:	d508      	bpl.n	91c4 <_fflush_r+0x44>
    91b2:	4628      	mov	r0, r5
    91b4:	bd38      	pop	{r3, r4, r5, pc}
    91b6:	4605      	mov	r5, r0
    91b8:	4628      	mov	r0, r5
    91ba:	bd38      	pop	{r3, r4, r5, pc}
    91bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91be:	f7fd fb2d 	bl	681c <__retarget_lock_acquire_recursive>
    91c2:	e7eb      	b.n	919c <_fflush_r+0x1c>
    91c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91c6:	f7fd fb2b 	bl	6820 <__retarget_lock_release_recursive>
    91ca:	4628      	mov	r0, r5
    91cc:	bd38      	pop	{r3, r4, r5, pc}
    91ce:	f7fd f891 	bl	62f4 <__sinit>
    91d2:	e7db      	b.n	918c <_fflush_r+0xc>

000091d4 <_localeconv_r>:
    91d4:	4800      	ldr	r0, [pc, #0]	; (91d8 <_localeconv_r+0x4>)
    91d6:	4770      	bx	lr
    91d8:	1fff0d20 	.word	0x1fff0d20

000091dc <__libc_fini_array>:
    91dc:	b538      	push	{r3, r4, r5, lr}
    91de:	4d07      	ldr	r5, [pc, #28]	; (91fc <__libc_fini_array+0x20>)
    91e0:	4c07      	ldr	r4, [pc, #28]	; (9200 <__libc_fini_array+0x24>)
    91e2:	1b2c      	subs	r4, r5, r4
    91e4:	10a4      	asrs	r4, r4, #2
    91e6:	d005      	beq.n	91f4 <__libc_fini_array+0x18>
    91e8:	3c01      	subs	r4, #1
    91ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    91ee:	4798      	blx	r3
    91f0:	2c00      	cmp	r4, #0
    91f2:	d1f9      	bne.n	91e8 <__libc_fini_array+0xc>
    91f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    91f8:	f003 bd20 	b.w	cc3c <__init_array_end>
	...
    9204:	ffffffff 	.word	0xffffffff
    9208:	ffffffff 	.word	0xffffffff
    920c:	ffffffff 	.word	0xffffffff

00009210 <memchr>:
    9210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9214:	2a10      	cmp	r2, #16
    9216:	db2b      	blt.n	9270 <memchr+0x60>
    9218:	f010 0f07 	tst.w	r0, #7
    921c:	d008      	beq.n	9230 <memchr+0x20>
    921e:	f810 3b01 	ldrb.w	r3, [r0], #1
    9222:	3a01      	subs	r2, #1
    9224:	428b      	cmp	r3, r1
    9226:	d02d      	beq.n	9284 <memchr+0x74>
    9228:	f010 0f07 	tst.w	r0, #7
    922c:	b342      	cbz	r2, 9280 <memchr+0x70>
    922e:	d1f6      	bne.n	921e <memchr+0xe>
    9230:	b4f0      	push	{r4, r5, r6, r7}
    9232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    9236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    923a:	f022 0407 	bic.w	r4, r2, #7
    923e:	f07f 0700 	mvns.w	r7, #0
    9242:	2300      	movs	r3, #0
    9244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    9248:	3c08      	subs	r4, #8
    924a:	ea85 0501 	eor.w	r5, r5, r1
    924e:	ea86 0601 	eor.w	r6, r6, r1
    9252:	fa85 f547 	uadd8	r5, r5, r7
    9256:	faa3 f587 	sel	r5, r3, r7
    925a:	fa86 f647 	uadd8	r6, r6, r7
    925e:	faa5 f687 	sel	r6, r5, r7
    9262:	b98e      	cbnz	r6, 9288 <memchr+0x78>
    9264:	d1ee      	bne.n	9244 <memchr+0x34>
    9266:	bcf0      	pop	{r4, r5, r6, r7}
    9268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    926c:	f002 0207 	and.w	r2, r2, #7
    9270:	b132      	cbz	r2, 9280 <memchr+0x70>
    9272:	f810 3b01 	ldrb.w	r3, [r0], #1
    9276:	3a01      	subs	r2, #1
    9278:	ea83 0301 	eor.w	r3, r3, r1
    927c:	b113      	cbz	r3, 9284 <memchr+0x74>
    927e:	d1f8      	bne.n	9272 <memchr+0x62>
    9280:	2000      	movs	r0, #0
    9282:	4770      	bx	lr
    9284:	3801      	subs	r0, #1
    9286:	4770      	bx	lr
    9288:	2d00      	cmp	r5, #0
    928a:	bf06      	itte	eq
    928c:	4635      	moveq	r5, r6
    928e:	3803      	subeq	r0, #3
    9290:	3807      	subne	r0, #7
    9292:	f015 0f01 	tst.w	r5, #1
    9296:	d107      	bne.n	92a8 <memchr+0x98>
    9298:	3001      	adds	r0, #1
    929a:	f415 7f80 	tst.w	r5, #256	; 0x100
    929e:	bf02      	ittt	eq
    92a0:	3001      	addeq	r0, #1
    92a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    92a6:	3001      	addeq	r0, #1
    92a8:	bcf0      	pop	{r4, r5, r6, r7}
    92aa:	3801      	subs	r0, #1
    92ac:	4770      	bx	lr
    92ae:	bf00      	nop

000092b0 <frexp>:
    92b0:	ec53 2b10 	vmov	r2, r3, d0
    92b4:	b570      	push	{r4, r5, r6, lr}
    92b6:	4e16      	ldr	r6, [pc, #88]	; (9310 <frexp+0x60>)
    92b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    92bc:	2500      	movs	r5, #0
    92be:	42b1      	cmp	r1, r6
    92c0:	4604      	mov	r4, r0
    92c2:	6005      	str	r5, [r0, #0]
    92c4:	dc21      	bgt.n	930a <frexp+0x5a>
    92c6:	ee10 6a10 	vmov	r6, s0
    92ca:	430e      	orrs	r6, r1
    92cc:	d01d      	beq.n	930a <frexp+0x5a>
    92ce:	4e11      	ldr	r6, [pc, #68]	; (9314 <frexp+0x64>)
    92d0:	401e      	ands	r6, r3
    92d2:	4618      	mov	r0, r3
    92d4:	b966      	cbnz	r6, 92f0 <frexp+0x40>
    92d6:	4619      	mov	r1, r3
    92d8:	2200      	movs	r2, #0
    92da:	ee10 0a10 	vmov	r0, s0
    92de:	4b0e      	ldr	r3, [pc, #56]	; (9318 <frexp+0x68>)
    92e0:	f002 fde4 	bl	beac <__aeabi_dmul>
    92e4:	f06f 0535 	mvn.w	r5, #53	; 0x35
    92e8:	4602      	mov	r2, r0
    92ea:	4608      	mov	r0, r1
    92ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    92f0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
    92f4:	1509      	asrs	r1, r1, #20
    92f6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
    92fa:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
    92fe:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    9302:	4429      	add	r1, r5
    9304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    9308:	6021      	str	r1, [r4, #0]
    930a:	ec43 2b10 	vmov	d0, r2, r3
    930e:	bd70      	pop	{r4, r5, r6, pc}
    9310:	7fefffff 	.word	0x7fefffff
    9314:	7ff00000 	.word	0x7ff00000
    9318:	43500000 	.word	0x43500000

0000931c <__register_exitproc>:
    931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9320:	f8df a07c 	ldr.w	sl, [pc, #124]	; 93a0 <__register_exitproc+0x84>
    9324:	4606      	mov	r6, r0
    9326:	f8da 0000 	ldr.w	r0, [sl]
    932a:	4698      	mov	r8, r3
    932c:	460f      	mov	r7, r1
    932e:	4691      	mov	r9, r2
    9330:	f7fd fa74 	bl	681c <__retarget_lock_acquire_recursive>
    9334:	4b18      	ldr	r3, [pc, #96]	; (9398 <__register_exitproc+0x7c>)
    9336:	681c      	ldr	r4, [r3, #0]
    9338:	b324      	cbz	r4, 9384 <__register_exitproc+0x68>
    933a:	6865      	ldr	r5, [r4, #4]
    933c:	2d1f      	cmp	r5, #31
    933e:	dc24      	bgt.n	938a <__register_exitproc+0x6e>
    9340:	b95e      	cbnz	r6, 935a <__register_exitproc+0x3e>
    9342:	1c6b      	adds	r3, r5, #1
    9344:	3502      	adds	r5, #2
    9346:	f8da 0000 	ldr.w	r0, [sl]
    934a:	6063      	str	r3, [r4, #4]
    934c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    9350:	f7fd fa66 	bl	6820 <__retarget_lock_release_recursive>
    9354:	2000      	movs	r0, #0
    9356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    935a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    935e:	2301      	movs	r3, #1
    9360:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    9364:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    9368:	40ab      	lsls	r3, r5
    936a:	431a      	orrs	r2, r3
    936c:	2e02      	cmp	r6, #2
    936e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    9372:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    9376:	d1e4      	bne.n	9342 <__register_exitproc+0x26>
    9378:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    937c:	431a      	orrs	r2, r3
    937e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    9382:	e7de      	b.n	9342 <__register_exitproc+0x26>
    9384:	4c05      	ldr	r4, [pc, #20]	; (939c <__register_exitproc+0x80>)
    9386:	601c      	str	r4, [r3, #0]
    9388:	e7d7      	b.n	933a <__register_exitproc+0x1e>
    938a:	f8da 0000 	ldr.w	r0, [sl]
    938e:	f7fd fa47 	bl	6820 <__retarget_lock_release_recursive>
    9392:	f04f 30ff 	mov.w	r0, #4294967295
    9396:	e7de      	b.n	9356 <__register_exitproc+0x3a>
    9398:	1fff63e4 	.word	0x1fff63e4
    939c:	1fff63e8 	.word	0x1fff63e8
    93a0:	1fff0ec4 	.word	0x1fff0ec4

000093a4 <__assert_func>:
    93a4:	b500      	push	{lr}
    93a6:	4c0b      	ldr	r4, [pc, #44]	; (93d4 <__assert_func+0x30>)
    93a8:	6825      	ldr	r5, [r4, #0]
    93aa:	4614      	mov	r4, r2
    93ac:	68ee      	ldr	r6, [r5, #12]
    93ae:	461a      	mov	r2, r3
    93b0:	b085      	sub	sp, #20
    93b2:	4603      	mov	r3, r0
    93b4:	460d      	mov	r5, r1
    93b6:	b14c      	cbz	r4, 93cc <__assert_func+0x28>
    93b8:	4907      	ldr	r1, [pc, #28]	; (93d8 <__assert_func+0x34>)
    93ba:	9500      	str	r5, [sp, #0]
    93bc:	e9cd 1401 	strd	r1, r4, [sp, #4]
    93c0:	4630      	mov	r0, r6
    93c2:	4906      	ldr	r1, [pc, #24]	; (93dc <__assert_func+0x38>)
    93c4:	f001 f8b0 	bl	a528 <fiprintf>
    93c8:	f7fa fec0 	bl	414c <abort>
    93cc:	4904      	ldr	r1, [pc, #16]	; (93e0 <__assert_func+0x3c>)
    93ce:	460c      	mov	r4, r1
    93d0:	e7f3      	b.n	93ba <__assert_func+0x16>
    93d2:	bf00      	nop
    93d4:	1fff0ec0 	.word	0x1fff0ec0
    93d8:	0000cb58 	.word	0x0000cb58
    93dc:	0000cb68 	.word	0x0000cb68
    93e0:	0000cb64 	.word	0x0000cb64

000093e4 <_calloc_r>:
    93e4:	b538      	push	{r3, r4, r5, lr}
    93e6:	fba1 1402 	umull	r1, r4, r1, r2
    93ea:	bb8c      	cbnz	r4, 9450 <_calloc_r+0x6c>
    93ec:	f7fc fa44 	bl	5878 <_malloc_r>
    93f0:	4605      	mov	r5, r0
    93f2:	b1e0      	cbz	r0, 942e <_calloc_r+0x4a>
    93f4:	f850 2c04 	ldr.w	r2, [r0, #-4]
    93f8:	f022 0203 	bic.w	r2, r2, #3
    93fc:	3a04      	subs	r2, #4
    93fe:	2a24      	cmp	r2, #36	; 0x24
    9400:	d817      	bhi.n	9432 <_calloc_r+0x4e>
    9402:	2a13      	cmp	r2, #19
    9404:	d91a      	bls.n	943c <_calloc_r+0x58>
    9406:	2a1b      	cmp	r2, #27
    9408:	e9c0 4400 	strd	r4, r4, [r0]
    940c:	d91d      	bls.n	944a <_calloc_r+0x66>
    940e:	2a24      	cmp	r2, #36	; 0x24
    9410:	bf14      	ite	ne
    9412:	f100 0210 	addne.w	r2, r0, #16
    9416:	f100 0218 	addeq.w	r2, r0, #24
    941a:	f04f 0300 	mov.w	r3, #0
    941e:	e9c0 4402 	strd	r4, r4, [r0, #8]
    9422:	bf04      	itt	eq
    9424:	6104      	streq	r4, [r0, #16]
    9426:	6144      	streq	r4, [r0, #20]
    9428:	e9c2 3300 	strd	r3, r3, [r2]
    942c:	6093      	str	r3, [r2, #8]
    942e:	4628      	mov	r0, r5
    9430:	bd38      	pop	{r3, r4, r5, pc}
    9432:	4621      	mov	r1, r4
    9434:	f7fd f8d4 	bl	65e0 <memset>
    9438:	4628      	mov	r0, r5
    943a:	bd38      	pop	{r3, r4, r5, pc}
    943c:	4602      	mov	r2, r0
    943e:	2300      	movs	r3, #0
    9440:	e9c2 3300 	strd	r3, r3, [r2]
    9444:	6093      	str	r3, [r2, #8]
    9446:	4628      	mov	r0, r5
    9448:	bd38      	pop	{r3, r4, r5, pc}
    944a:	f100 0208 	add.w	r2, r0, #8
    944e:	e7f6      	b.n	943e <_calloc_r+0x5a>
    9450:	f7fd f9b6 	bl	67c0 <__errno>
    9454:	230c      	movs	r3, #12
    9456:	2500      	movs	r5, #0
    9458:	6003      	str	r3, [r0, #0]
    945a:	e7e8      	b.n	942e <_calloc_r+0x4a>

0000945c <quorem>:
    945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9460:	6903      	ldr	r3, [r0, #16]
    9462:	690c      	ldr	r4, [r1, #16]
    9464:	42a3      	cmp	r3, r4
    9466:	b083      	sub	sp, #12
    9468:	f2c0 8087 	blt.w	957a <quorem+0x11e>
    946c:	3c01      	subs	r4, #1
    946e:	f101 0514 	add.w	r5, r1, #20
    9472:	00a3      	lsls	r3, r4, #2
    9474:	f100 0814 	add.w	r8, r0, #20
    9478:	9300      	str	r3, [sp, #0]
    947a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    947e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    9482:	3301      	adds	r3, #1
    9484:	4681      	mov	r9, r0
    9486:	429a      	cmp	r2, r3
    9488:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    948c:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    9490:	9001      	str	r0, [sp, #4]
    9492:	fbb2 f6f3 	udiv	r6, r2, r3
    9496:	d33b      	bcc.n	9510 <quorem+0xb4>
    9498:	f04f 0c00 	mov.w	ip, #0
    949c:	46ae      	mov	lr, r5
    949e:	4640      	mov	r0, r8
    94a0:	46e2      	mov	sl, ip
    94a2:	4663      	mov	r3, ip
    94a4:	f85e bb04 	ldr.w	fp, [lr], #4
    94a8:	6802      	ldr	r2, [r0, #0]
    94aa:	fa1f fc8b 	uxth.w	ip, fp
    94ae:	fb06 330c 	mla	r3, r6, ip, r3
    94b2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    94b6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    94ba:	fb06 cc0b 	mla	ip, r6, fp, ip
    94be:	b29b      	uxth	r3, r3
    94c0:	ebaa 0303 	sub.w	r3, sl, r3
    94c4:	fa1f fa8c 	uxth.w	sl, ip
    94c8:	fa13 f382 	uxtah	r3, r3, r2
    94cc:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    94d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
    94d4:	b29b      	uxth	r3, r3
    94d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    94da:	4577      	cmp	r7, lr
    94dc:	f840 3b04 	str.w	r3, [r0], #4
    94e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
    94e4:	ea4f 431c 	mov.w	r3, ip, lsr #16
    94e8:	d2dc      	bcs.n	94a4 <quorem+0x48>
    94ea:	9b00      	ldr	r3, [sp, #0]
    94ec:	f858 3003 	ldr.w	r3, [r8, r3]
    94f0:	b973      	cbnz	r3, 9510 <quorem+0xb4>
    94f2:	9b01      	ldr	r3, [sp, #4]
    94f4:	3b04      	subs	r3, #4
    94f6:	4598      	cmp	r8, r3
    94f8:	d304      	bcc.n	9504 <quorem+0xa8>
    94fa:	e007      	b.n	950c <quorem+0xb0>
    94fc:	4598      	cmp	r8, r3
    94fe:	f104 34ff 	add.w	r4, r4, #4294967295
    9502:	d203      	bcs.n	950c <quorem+0xb0>
    9504:	f853 2904 	ldr.w	r2, [r3], #-4
    9508:	2a00      	cmp	r2, #0
    950a:	d0f7      	beq.n	94fc <quorem+0xa0>
    950c:	f8c9 4010 	str.w	r4, [r9, #16]
    9510:	4648      	mov	r0, r9
    9512:	f7fd fe05 	bl	7120 <__mcmp>
    9516:	2800      	cmp	r0, #0
    9518:	db2b      	blt.n	9572 <quorem+0x116>
    951a:	3601      	adds	r6, #1
    951c:	4641      	mov	r1, r8
    951e:	2300      	movs	r3, #0
    9520:	f855 0b04 	ldr.w	r0, [r5], #4
    9524:	f8d1 c000 	ldr.w	ip, [r1]
    9528:	b282      	uxth	r2, r0
    952a:	1a9a      	subs	r2, r3, r2
    952c:	0c03      	lsrs	r3, r0, #16
    952e:	fa12 f28c 	uxtah	r2, r2, ip
    9532:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    9536:	eb03 4322 	add.w	r3, r3, r2, asr #16
    953a:	b292      	uxth	r2, r2
    953c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    9540:	42af      	cmp	r7, r5
    9542:	f841 2b04 	str.w	r2, [r1], #4
    9546:	ea4f 4323 	mov.w	r3, r3, asr #16
    954a:	d2e9      	bcs.n	9520 <quorem+0xc4>
    954c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    9550:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    9554:	b96a      	cbnz	r2, 9572 <quorem+0x116>
    9556:	3b04      	subs	r3, #4
    9558:	4598      	cmp	r8, r3
    955a:	d304      	bcc.n	9566 <quorem+0x10a>
    955c:	e007      	b.n	956e <quorem+0x112>
    955e:	4598      	cmp	r8, r3
    9560:	f104 34ff 	add.w	r4, r4, #4294967295
    9564:	d203      	bcs.n	956e <quorem+0x112>
    9566:	f853 2904 	ldr.w	r2, [r3], #-4
    956a:	2a00      	cmp	r2, #0
    956c:	d0f7      	beq.n	955e <quorem+0x102>
    956e:	f8c9 4010 	str.w	r4, [r9, #16]
    9572:	4630      	mov	r0, r6
    9574:	b003      	add	sp, #12
    9576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    957a:	2000      	movs	r0, #0
    957c:	b003      	add	sp, #12
    957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9582:	bf00      	nop
    9584:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00009588 <_dtoa_r>:
    9588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    958c:	ed2d 8b06 	vpush	{d8-d10}
    9590:	b095      	sub	sp, #84	; 0x54
    9592:	ed8d 0b02 	vstr	d0, [sp, #8]
    9596:	9101      	str	r1, [sp, #4]
    9598:	6b81      	ldr	r1, [r0, #56]	; 0x38
    959a:	9d24      	ldr	r5, [sp, #144]	; 0x90
    959c:	9209      	str	r2, [sp, #36]	; 0x24
    959e:	ec59 8b10 	vmov	r8, r9, d0
    95a2:	4604      	mov	r4, r0
    95a4:	9306      	str	r3, [sp, #24]
    95a6:	b141      	cbz	r1, 95ba <_dtoa_r+0x32>
    95a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    95aa:	604a      	str	r2, [r1, #4]
    95ac:	2301      	movs	r3, #1
    95ae:	4093      	lsls	r3, r2
    95b0:	608b      	str	r3, [r1, #8]
    95b2:	f7fd fb55 	bl	6c60 <_Bfree>
    95b6:	2300      	movs	r3, #0
    95b8:	63a3      	str	r3, [r4, #56]	; 0x38
    95ba:	f1b9 0a00 	subs.w	sl, r9, #0
    95be:	bfb4      	ite	lt
    95c0:	2301      	movlt	r3, #1
    95c2:	2300      	movge	r3, #0
    95c4:	602b      	str	r3, [r5, #0]
    95c6:	4b7c      	ldr	r3, [pc, #496]	; (97b8 <_dtoa_r+0x230>)
    95c8:	bfbc      	itt	lt
    95ca:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
    95ce:	f8cd a00c 	strlt.w	sl, [sp, #12]
    95d2:	ea33 030a 	bics.w	r3, r3, sl
    95d6:	f000 80b3 	beq.w	9740 <_dtoa_r+0x1b8>
    95da:	ed9d 7b02 	vldr	d7, [sp, #8]
    95de:	2200      	movs	r2, #0
    95e0:	ec51 0b17 	vmov	r0, r1, d7
    95e4:	eeb0 9a47 	vmov.f32	s18, s14
    95e8:	eef0 9a67 	vmov.f32	s19, s15
    95ec:	2300      	movs	r3, #0
    95ee:	f7fc f8fb 	bl	57e8 <__aeabi_dcmpeq>
    95f2:	4607      	mov	r7, r0
    95f4:	b188      	cbz	r0, 961a <_dtoa_r+0x92>
    95f6:	9a06      	ldr	r2, [sp, #24]
    95f8:	2301      	movs	r3, #1
    95fa:	6013      	str	r3, [r2, #0]
    95fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    95fe:	2b00      	cmp	r3, #0
    9600:	f000 83ce 	beq.w	9da0 <_dtoa_r+0x818>
    9604:	4b6d      	ldr	r3, [pc, #436]	; (97bc <_dtoa_r+0x234>)
    9606:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9608:	6013      	str	r3, [r2, #0]
    960a:	3b01      	subs	r3, #1
    960c:	9300      	str	r3, [sp, #0]
    960e:	9800      	ldr	r0, [sp, #0]
    9610:	b015      	add	sp, #84	; 0x54
    9612:	ecbd 8b06 	vpop	{d8-d10}
    9616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    961a:	aa12      	add	r2, sp, #72	; 0x48
    961c:	a913      	add	r1, sp, #76	; 0x4c
    961e:	4620      	mov	r0, r4
    9620:	eeb0 0a49 	vmov.f32	s0, s18
    9624:	eef0 0a69 	vmov.f32	s1, s19
    9628:	f7fd fe46 	bl	72b8 <__d2b>
    962c:	eeb0 8a49 	vmov.f32	s16, s18
    9630:	eef0 8a69 	vmov.f32	s17, s19
    9634:	ea5f 561a 	movs.w	r6, sl, lsr #20
    9638:	4605      	mov	r5, r0
    963a:	f040 8099 	bne.w	9770 <_dtoa_r+0x1e8>
    963e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
    9642:	443e      	add	r6, r7
    9644:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9648:	2b20      	cmp	r3, #32
    964a:	f340 83c2 	ble.w	9dd2 <_dtoa_r+0x84a>
    964e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    9652:	fa0a fa03 	lsl.w	sl, sl, r3
    9656:	f206 4312 	addw	r3, r6, #1042	; 0x412
    965a:	fa28 f003 	lsr.w	r0, r8, r3
    965e:	ea4a 0000 	orr.w	r0, sl, r0
    9662:	f7fb fff1 	bl	5648 <__aeabi_ui2d>
    9666:	2301      	movs	r3, #1
    9668:	3e01      	subs	r6, #1
    966a:	930d      	str	r3, [sp, #52]	; 0x34
    966c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    9670:	4b53      	ldr	r3, [pc, #332]	; (97c0 <_dtoa_r+0x238>)
    9672:	2200      	movs	r2, #0
    9674:	f7fb feaa 	bl	53cc <__aeabi_dsub>
    9678:	a349      	add	r3, pc, #292	; (adr r3, 97a0 <_dtoa_r+0x218>)
    967a:	e9d3 2300 	ldrd	r2, r3, [r3]
    967e:	f002 fc15 	bl	beac <__aeabi_dmul>
    9682:	a349      	add	r3, pc, #292	; (adr r3, 97a8 <_dtoa_r+0x220>)
    9684:	e9d3 2300 	ldrd	r2, r3, [r3]
    9688:	f7fb fea2 	bl	53d0 <__adddf3>
    968c:	4680      	mov	r8, r0
    968e:	4630      	mov	r0, r6
    9690:	4689      	mov	r9, r1
    9692:	f7fb ffe9 	bl	5668 <__aeabi_i2d>
    9696:	a346      	add	r3, pc, #280	; (adr r3, 97b0 <_dtoa_r+0x228>)
    9698:	e9d3 2300 	ldrd	r2, r3, [r3]
    969c:	f002 fc06 	bl	beac <__aeabi_dmul>
    96a0:	4602      	mov	r2, r0
    96a2:	460b      	mov	r3, r1
    96a4:	4640      	mov	r0, r8
    96a6:	4649      	mov	r1, r9
    96a8:	f7fb fe92 	bl	53d0 <__adddf3>
    96ac:	4680      	mov	r8, r0
    96ae:	4689      	mov	r9, r1
    96b0:	f002 fe0e 	bl	c2d0 <__aeabi_d2iz>
    96b4:	2200      	movs	r2, #0
    96b6:	4683      	mov	fp, r0
    96b8:	2300      	movs	r3, #0
    96ba:	4640      	mov	r0, r8
    96bc:	4649      	mov	r1, r9
    96be:	f7fc f89d 	bl	57fc <__aeabi_dcmplt>
    96c2:	2800      	cmp	r0, #0
    96c4:	f040 835f 	bne.w	9d86 <_dtoa_r+0x7fe>
    96c8:	f1bb 0f16 	cmp.w	fp, #22
    96cc:	f200 834e 	bhi.w	9d6c <_dtoa_r+0x7e4>
    96d0:	4b3c      	ldr	r3, [pc, #240]	; (97c4 <_dtoa_r+0x23c>)
    96d2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    96d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    96da:	ec51 0b19 	vmov	r0, r1, d9
    96de:	f7fc f88d 	bl	57fc <__aeabi_dcmplt>
    96e2:	2800      	cmp	r0, #0
    96e4:	d074      	beq.n	97d0 <_dtoa_r+0x248>
    96e6:	2300      	movs	r3, #0
    96e8:	1bbf      	subs	r7, r7, r6
    96ea:	930c      	str	r3, [sp, #48]	; 0x30
    96ec:	1e7b      	subs	r3, r7, #1
    96ee:	f10b 3bff 	add.w	fp, fp, #4294967295
    96f2:	9304      	str	r3, [sp, #16]
    96f4:	f100 8341 	bmi.w	9d7a <_dtoa_r+0x7f2>
    96f8:	2300      	movs	r3, #0
    96fa:	9308      	str	r3, [sp, #32]
    96fc:	f1bb 0f00 	cmp.w	fp, #0
    9700:	da6d      	bge.n	97de <_dtoa_r+0x256>
    9702:	9b08      	ldr	r3, [sp, #32]
    9704:	f8cd b014 	str.w	fp, [sp, #20]
    9708:	eba3 030b 	sub.w	r3, r3, fp
    970c:	9308      	str	r3, [sp, #32]
    970e:	f1cb 0300 	rsb	r3, fp, #0
    9712:	930b      	str	r3, [sp, #44]	; 0x2c
    9714:	9b01      	ldr	r3, [sp, #4]
    9716:	2b09      	cmp	r3, #9
    9718:	f04f 0b00 	mov.w	fp, #0
    971c:	d868      	bhi.n	97f0 <_dtoa_r+0x268>
    971e:	2b05      	cmp	r3, #5
    9720:	f340 8355 	ble.w	9dce <_dtoa_r+0x846>
    9724:	3b04      	subs	r3, #4
    9726:	9301      	str	r3, [sp, #4]
    9728:	2600      	movs	r6, #0
    972a:	9b01      	ldr	r3, [sp, #4]
    972c:	3b02      	subs	r3, #2
    972e:	2b03      	cmp	r3, #3
    9730:	f200 86a4 	bhi.w	a47c <_dtoa_r+0xef4>
    9734:	e8df f013 	tbh	[pc, r3, lsl #1]
    9738:	04630466 	.word	0x04630466
    973c:	043e045b 	.word	0x043e045b
    9740:	9a06      	ldr	r2, [sp, #24]
    9742:	f3ca 0a13 	ubfx	sl, sl, #0, #20
    9746:	f242 730f 	movw	r3, #9999	; 0x270f
    974a:	ea5a 0a08 	orrs.w	sl, sl, r8
    974e:	6013      	str	r3, [r2, #0]
    9750:	d11d      	bne.n	978e <_dtoa_r+0x206>
    9752:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9754:	2b00      	cmp	r3, #0
    9756:	f000 86a0 	beq.w	a49a <_dtoa_r+0xf12>
    975a:	4b1b      	ldr	r3, [pc, #108]	; (97c8 <_dtoa_r+0x240>)
    975c:	9300      	str	r3, [sp, #0]
    975e:	3308      	adds	r3, #8
    9760:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9762:	9800      	ldr	r0, [sp, #0]
    9764:	6013      	str	r3, [r2, #0]
    9766:	b015      	add	sp, #84	; 0x54
    9768:	ecbd 8b06 	vpop	{d8-d10}
    976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9770:	ee18 3a90 	vmov	r3, s17
    9774:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9778:	ec51 0b19 	vmov	r0, r1, d9
    977c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    9780:	970d      	str	r7, [sp, #52]	; 0x34
    9782:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9786:	9f12      	ldr	r7, [sp, #72]	; 0x48
    9788:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    978c:	e770      	b.n	9670 <_dtoa_r+0xe8>
    978e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9790:	2b00      	cmp	r3, #0
    9792:	f040 83f0 	bne.w	9f76 <_dtoa_r+0x9ee>
    9796:	4b0d      	ldr	r3, [pc, #52]	; (97cc <_dtoa_r+0x244>)
    9798:	9300      	str	r3, [sp, #0]
    979a:	e738      	b.n	960e <_dtoa_r+0x86>
    979c:	f3af 8000 	nop.w
    97a0:	636f4361 	.word	0x636f4361
    97a4:	3fd287a7 	.word	0x3fd287a7
    97a8:	8b60c8b3 	.word	0x8b60c8b3
    97ac:	3fc68a28 	.word	0x3fc68a28
    97b0:	509f79fb 	.word	0x509f79fb
    97b4:	3fd34413 	.word	0x3fd34413
    97b8:	7ff00000 	.word	0x7ff00000
    97bc:	0000cb35 	.word	0x0000cb35
    97c0:	3ff80000 	.word	0x3ff80000
    97c4:	0000ca20 	.word	0x0000ca20
    97c8:	0000cb98 	.word	0x0000cb98
    97cc:	0000cba4 	.word	0x0000cba4
    97d0:	1bbf      	subs	r7, r7, r6
    97d2:	1e7b      	subs	r3, r7, #1
    97d4:	9304      	str	r3, [sp, #16]
    97d6:	f100 849b 	bmi.w	a110 <_dtoa_r+0xb88>
    97da:	900c      	str	r0, [sp, #48]	; 0x30
    97dc:	9008      	str	r0, [sp, #32]
    97de:	9b04      	ldr	r3, [sp, #16]
    97e0:	445b      	add	r3, fp
    97e2:	e9cd 3b04 	strd	r3, fp, [sp, #16]
    97e6:	2300      	movs	r3, #0
    97e8:	930b      	str	r3, [sp, #44]	; 0x2c
    97ea:	9b01      	ldr	r3, [sp, #4]
    97ec:	2b09      	cmp	r3, #9
    97ee:	d996      	bls.n	971e <_dtoa_r+0x196>
    97f0:	2300      	movs	r3, #0
    97f2:	2601      	movs	r6, #1
    97f4:	f04f 32ff 	mov.w	r2, #4294967295
    97f8:	9301      	str	r3, [sp, #4]
    97fa:	960a      	str	r6, [sp, #40]	; 0x28
    97fc:	9207      	str	r2, [sp, #28]
    97fe:	9309      	str	r3, [sp, #36]	; 0x24
    9800:	9b07      	ldr	r3, [sp, #28]
    9802:	930f      	str	r3, [sp, #60]	; 0x3c
    9804:	2100      	movs	r1, #0
    9806:	63e1      	str	r1, [r4, #60]	; 0x3c
    9808:	4620      	mov	r0, r4
    980a:	f7fd fa03 	bl	6c14 <_Balloc>
    980e:	9000      	str	r0, [sp, #0]
    9810:	2800      	cmp	r0, #0
    9812:	f000 863b 	beq.w	a48c <_dtoa_r+0xf04>
    9816:	9b00      	ldr	r3, [sp, #0]
    9818:	63a3      	str	r3, [r4, #56]	; 0x38
    981a:	9b07      	ldr	r3, [sp, #28]
    981c:	2b0e      	cmp	r3, #14
    981e:	f200 811e 	bhi.w	9a5e <_dtoa_r+0x4d6>
    9822:	2e00      	cmp	r6, #0
    9824:	f000 811b 	beq.w	9a5e <_dtoa_r+0x4d6>
    9828:	9905      	ldr	r1, [sp, #20]
    982a:	2900      	cmp	r1, #0
    982c:	f340 8472 	ble.w	a114 <_dtoa_r+0xb8c>
    9830:	4bd0      	ldr	r3, [pc, #832]	; (9b74 <_dtoa_r+0x5ec>)
    9832:	f001 020f 	and.w	r2, r1, #15
    9836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    983a:	ea4f 1821 	mov.w	r8, r1, asr #4
    983e:	05c9      	lsls	r1, r1, #23
    9840:	e9d3 6700 	ldrd	r6, r7, [r3]
    9844:	f140 842e 	bpl.w	a0a4 <_dtoa_r+0xb1c>
    9848:	4bcb      	ldr	r3, [pc, #812]	; (9b78 <_dtoa_r+0x5f0>)
    984a:	ec51 0b19 	vmov	r0, r1, d9
    984e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9852:	f002 fc55 	bl	c100 <__aeabi_ddiv>
    9856:	ec41 0b18 	vmov	d8, r0, r1
    985a:	f008 080f 	and.w	r8, r8, #15
    985e:	f04f 0a03 	mov.w	sl, #3
    9862:	f1b8 0f00 	cmp.w	r8, #0
    9866:	d013      	beq.n	9890 <_dtoa_r+0x308>
    9868:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9b78 <_dtoa_r+0x5f0>
    986c:	f018 0f01 	tst.w	r8, #1
    9870:	d009      	beq.n	9886 <_dtoa_r+0x2fe>
    9872:	4630      	mov	r0, r6
    9874:	4639      	mov	r1, r7
    9876:	e9d9 2300 	ldrd	r2, r3, [r9]
    987a:	f002 fb17 	bl	beac <__aeabi_dmul>
    987e:	f10a 0a01 	add.w	sl, sl, #1
    9882:	4606      	mov	r6, r0
    9884:	460f      	mov	r7, r1
    9886:	ea5f 0868 	movs.w	r8, r8, asr #1
    988a:	f109 0908 	add.w	r9, r9, #8
    988e:	d1ed      	bne.n	986c <_dtoa_r+0x2e4>
    9890:	ec51 0b18 	vmov	r0, r1, d8
    9894:	4632      	mov	r2, r6
    9896:	463b      	mov	r3, r7
    9898:	f002 fc32 	bl	c100 <__aeabi_ddiv>
    989c:	ec41 0b1a 	vmov	d10, r0, r1
    98a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    98a2:	b15b      	cbz	r3, 98bc <_dtoa_r+0x334>
    98a4:	ec57 6b1a 	vmov	r6, r7, d10
    98a8:	4bb4      	ldr	r3, [pc, #720]	; (9b7c <_dtoa_r+0x5f4>)
    98aa:	ee1a 0a10 	vmov	r0, s20
    98ae:	2200      	movs	r2, #0
    98b0:	4639      	mov	r1, r7
    98b2:	f7fb ffa3 	bl	57fc <__aeabi_dcmplt>
    98b6:	2800      	cmp	r0, #0
    98b8:	f040 854e 	bne.w	a358 <_dtoa_r+0xdd0>
    98bc:	4650      	mov	r0, sl
    98be:	f7fb fed3 	bl	5668 <__aeabi_i2d>
    98c2:	ec53 2b1a 	vmov	r2, r3, d10
    98c6:	f002 faf1 	bl	beac <__aeabi_dmul>
    98ca:	4bad      	ldr	r3, [pc, #692]	; (9b80 <_dtoa_r+0x5f8>)
    98cc:	2200      	movs	r2, #0
    98ce:	f7fb fd7f 	bl	53d0 <__adddf3>
    98d2:	9b07      	ldr	r3, [sp, #28]
    98d4:	4680      	mov	r8, r0
    98d6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    98da:	2b00      	cmp	r3, #0
    98dc:	f000 80a5 	beq.w	9a2a <_dtoa_r+0x4a2>
    98e0:	9b05      	ldr	r3, [sp, #20]
    98e2:	9310      	str	r3, [sp, #64]	; 0x40
    98e4:	9b07      	ldr	r3, [sp, #28]
    98e6:	930e      	str	r3, [sp, #56]	; 0x38
    98e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    98ea:	2b00      	cmp	r3, #0
    98ec:	f000 84bc 	beq.w	a268 <_dtoa_r+0xce0>
    98f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    98f2:	4ba0      	ldr	r3, [pc, #640]	; (9b74 <_dtoa_r+0x5ec>)
    98f4:	49a3      	ldr	r1, [pc, #652]	; (9b84 <_dtoa_r+0x5fc>)
    98f6:	f8dd a000 	ldr.w	sl, [sp]
    98fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    98fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    9902:	2000      	movs	r0, #0
    9904:	f002 fbfc 	bl	c100 <__aeabi_ddiv>
    9908:	4642      	mov	r2, r8
    990a:	464b      	mov	r3, r9
    990c:	f7fb fd5e 	bl	53cc <__aeabi_dsub>
    9910:	ec59 8b1a 	vmov	r8, r9, d10
    9914:	ec41 0b18 	vmov	d8, r0, r1
    9918:	4649      	mov	r1, r9
    991a:	ee1a 0a10 	vmov	r0, s20
    991e:	f002 fcd7 	bl	c2d0 <__aeabi_d2iz>
    9922:	4607      	mov	r7, r0
    9924:	f7fb fea0 	bl	5668 <__aeabi_i2d>
    9928:	4602      	mov	r2, r0
    992a:	460b      	mov	r3, r1
    992c:	ee1a 0a10 	vmov	r0, s20
    9930:	4649      	mov	r1, r9
    9932:	f7fb fd4b 	bl	53cc <__aeabi_dsub>
    9936:	3730      	adds	r7, #48	; 0x30
    9938:	4606      	mov	r6, r0
    993a:	f80a 7b01 	strb.w	r7, [sl], #1
    993e:	460f      	mov	r7, r1
    9940:	4632      	mov	r2, r6
    9942:	ec51 0b18 	vmov	r0, r1, d8
    9946:	463b      	mov	r3, r7
    9948:	f7fb ff76 	bl	5838 <__aeabi_dcmpgt>
    994c:	2800      	cmp	r0, #0
    994e:	f040 854f 	bne.w	a3f0 <_dtoa_r+0xe68>
    9952:	f04f 0800 	mov.w	r8, #0
    9956:	ee0a 5a10 	vmov	s20, r5
    995a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    995e:	4655      	mov	r5, sl
    9960:	ec5b ab18 	vmov	sl, fp, d8
    9964:	ee08 4a10 	vmov	s16, r4
    9968:	4644      	mov	r4, r8
    996a:	e02b      	b.n	99c4 <_dtoa_r+0x43c>
    996c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    996e:	3401      	adds	r4, #1
    9970:	429c      	cmp	r4, r3
    9972:	f280 854d 	bge.w	a410 <_dtoa_r+0xe88>
    9976:	4b84      	ldr	r3, [pc, #528]	; (9b88 <_dtoa_r+0x600>)
    9978:	4650      	mov	r0, sl
    997a:	4659      	mov	r1, fp
    997c:	2200      	movs	r2, #0
    997e:	f002 fa95 	bl	beac <__aeabi_dmul>
    9982:	4b81      	ldr	r3, [pc, #516]	; (9b88 <_dtoa_r+0x600>)
    9984:	2200      	movs	r2, #0
    9986:	4682      	mov	sl, r0
    9988:	468b      	mov	fp, r1
    998a:	4630      	mov	r0, r6
    998c:	4639      	mov	r1, r7
    998e:	f002 fa8d 	bl	beac <__aeabi_dmul>
    9992:	4689      	mov	r9, r1
    9994:	4680      	mov	r8, r0
    9996:	f002 fc9b 	bl	c2d0 <__aeabi_d2iz>
    999a:	4607      	mov	r7, r0
    999c:	f7fb fe64 	bl	5668 <__aeabi_i2d>
    99a0:	4602      	mov	r2, r0
    99a2:	460b      	mov	r3, r1
    99a4:	4640      	mov	r0, r8
    99a6:	4649      	mov	r1, r9
    99a8:	f7fb fd10 	bl	53cc <__aeabi_dsub>
    99ac:	3730      	adds	r7, #48	; 0x30
    99ae:	f805 7b01 	strb.w	r7, [r5], #1
    99b2:	4652      	mov	r2, sl
    99b4:	465b      	mov	r3, fp
    99b6:	4606      	mov	r6, r0
    99b8:	460f      	mov	r7, r1
    99ba:	f7fb ff1f 	bl	57fc <__aeabi_dcmplt>
    99be:	2800      	cmp	r0, #0
    99c0:	f040 8511 	bne.w	a3e6 <_dtoa_r+0xe5e>
    99c4:	4632      	mov	r2, r6
    99c6:	463b      	mov	r3, r7
    99c8:	496c      	ldr	r1, [pc, #432]	; (9b7c <_dtoa_r+0x5f4>)
    99ca:	2000      	movs	r0, #0
    99cc:	f7fb fcfe 	bl	53cc <__aeabi_dsub>
    99d0:	4652      	mov	r2, sl
    99d2:	465b      	mov	r3, fp
    99d4:	f7fb ff12 	bl	57fc <__aeabi_dcmplt>
    99d8:	2800      	cmp	r0, #0
    99da:	d0c7      	beq.n	996c <_dtoa_r+0x3e4>
    99dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    99de:	9a00      	ldr	r2, [sp, #0]
    99e0:	9305      	str	r3, [sp, #20]
    99e2:	46aa      	mov	sl, r5
    99e4:	ee18 4a10 	vmov	r4, s16
    99e8:	ee1a 5a10 	vmov	r5, s20
    99ec:	e002      	b.n	99f4 <_dtoa_r+0x46c>
    99ee:	4552      	cmp	r2, sl
    99f0:	f000 84e3 	beq.w	a3ba <_dtoa_r+0xe32>
    99f4:	46d1      	mov	r9, sl
    99f6:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
    99fa:	2b39      	cmp	r3, #57	; 0x39
    99fc:	d0f7      	beq.n	99ee <_dtoa_r+0x466>
    99fe:	3301      	adds	r3, #1
    9a00:	b2db      	uxtb	r3, r3
    9a02:	f88a 3000 	strb.w	r3, [sl]
    9a06:	9b05      	ldr	r3, [sp, #20]
    9a08:	3301      	adds	r3, #1
    9a0a:	9305      	str	r3, [sp, #20]
    9a0c:	e198      	b.n	9d40 <_dtoa_r+0x7b8>
    9a0e:	4650      	mov	r0, sl
    9a10:	f7fb fe2a 	bl	5668 <__aeabi_i2d>
    9a14:	ec53 2b1a 	vmov	r2, r3, d10
    9a18:	f002 fa48 	bl	beac <__aeabi_dmul>
    9a1c:	4b58      	ldr	r3, [pc, #352]	; (9b80 <_dtoa_r+0x5f8>)
    9a1e:	2200      	movs	r2, #0
    9a20:	f7fb fcd6 	bl	53d0 <__adddf3>
    9a24:	4680      	mov	r8, r0
    9a26:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    9a2a:	4b58      	ldr	r3, [pc, #352]	; (9b8c <_dtoa_r+0x604>)
    9a2c:	2200      	movs	r2, #0
    9a2e:	ec51 0b1a 	vmov	r0, r1, d10
    9a32:	f7fb fccb 	bl	53cc <__aeabi_dsub>
    9a36:	4642      	mov	r2, r8
    9a38:	464b      	mov	r3, r9
    9a3a:	4606      	mov	r6, r0
    9a3c:	460f      	mov	r7, r1
    9a3e:	f7fb fefb 	bl	5838 <__aeabi_dcmpgt>
    9a42:	4682      	mov	sl, r0
    9a44:	2800      	cmp	r0, #0
    9a46:	f040 84c8 	bne.w	a3da <_dtoa_r+0xe52>
    9a4a:	4630      	mov	r0, r6
    9a4c:	4639      	mov	r1, r7
    9a4e:	4642      	mov	r2, r8
    9a50:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    9a54:	f7fb fed2 	bl	57fc <__aeabi_dcmplt>
    9a58:	2800      	cmp	r0, #0
    9a5a:	f040 8357 	bne.w	a10c <_dtoa_r+0xb84>
    9a5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9a60:	2b00      	cmp	r3, #0
    9a62:	f2c0 8095 	blt.w	9b90 <_dtoa_r+0x608>
    9a66:	9a05      	ldr	r2, [sp, #20]
    9a68:	2a0e      	cmp	r2, #14
    9a6a:	f300 8091 	bgt.w	9b90 <_dtoa_r+0x608>
    9a6e:	4b41      	ldr	r3, [pc, #260]	; (9b74 <_dtoa_r+0x5ec>)
    9a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9a74:	e9d3 8900 	ldrd	r8, r9, [r3]
    9a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	da1b      	bge.n	9ab6 <_dtoa_r+0x52e>
    9a7e:	9b07      	ldr	r3, [sp, #28]
    9a80:	2b00      	cmp	r3, #0
    9a82:	dc18      	bgt.n	9ab6 <_dtoa_r+0x52e>
    9a84:	f040 8340 	bne.w	a108 <_dtoa_r+0xb80>
    9a88:	4b40      	ldr	r3, [pc, #256]	; (9b8c <_dtoa_r+0x604>)
    9a8a:	2200      	movs	r2, #0
    9a8c:	4640      	mov	r0, r8
    9a8e:	4649      	mov	r1, r9
    9a90:	f002 fa0c 	bl	beac <__aeabi_dmul>
    9a94:	4602      	mov	r2, r0
    9a96:	460b      	mov	r3, r1
    9a98:	ec51 0b19 	vmov	r0, r1, d9
    9a9c:	f7fb feb8 	bl	5810 <__aeabi_dcmple>
    9aa0:	f8dd a01c 	ldr.w	sl, [sp, #28]
    9aa4:	4656      	mov	r6, sl
    9aa6:	2800      	cmp	r0, #0
    9aa8:	f000 82c4 	beq.w	a034 <_dtoa_r+0xaac>
    9aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9aae:	f8dd 8000 	ldr.w	r8, [sp]
    9ab2:	43df      	mvns	r7, r3
    9ab4:	e2c6      	b.n	a044 <_dtoa_r+0xabc>
    9ab6:	4642      	mov	r2, r8
    9ab8:	464b      	mov	r3, r9
    9aba:	ec51 0b19 	vmov	r0, r1, d9
    9abe:	f002 fb1f 	bl	c100 <__aeabi_ddiv>
    9ac2:	f002 fc05 	bl	c2d0 <__aeabi_d2iz>
    9ac6:	4606      	mov	r6, r0
    9ac8:	4683      	mov	fp, r0
    9aca:	f7fb fdcd 	bl	5668 <__aeabi_i2d>
    9ace:	4642      	mov	r2, r8
    9ad0:	464b      	mov	r3, r9
    9ad2:	f002 f9eb 	bl	beac <__aeabi_dmul>
    9ad6:	460b      	mov	r3, r1
    9ad8:	4602      	mov	r2, r0
    9ada:	ec51 0b19 	vmov	r0, r1, d9
    9ade:	f7fb fc75 	bl	53cc <__aeabi_dsub>
    9ae2:	f8dd a000 	ldr.w	sl, [sp]
    9ae6:	4633      	mov	r3, r6
    9ae8:	3330      	adds	r3, #48	; 0x30
    9aea:	f80a 3b01 	strb.w	r3, [sl], #1
    9aee:	9b07      	ldr	r3, [sp, #28]
    9af0:	2b01      	cmp	r3, #1
    9af2:	f000 8371 	beq.w	a1d8 <_dtoa_r+0xc50>
    9af6:	f04f 0b01 	mov.w	fp, #1
    9afa:	ee08 5a10 	vmov	s16, r5
    9afe:	ee08 4a90 	vmov	s17, r4
    9b02:	461d      	mov	r5, r3
    9b04:	4654      	mov	r4, sl
    9b06:	46da      	mov	sl, fp
    9b08:	e01d      	b.n	9b46 <_dtoa_r+0x5be>
    9b0a:	4642      	mov	r2, r8
    9b0c:	464b      	mov	r3, r9
    9b0e:	4630      	mov	r0, r6
    9b10:	4639      	mov	r1, r7
    9b12:	f002 faf5 	bl	c100 <__aeabi_ddiv>
    9b16:	f002 fbdb 	bl	c2d0 <__aeabi_d2iz>
    9b1a:	4683      	mov	fp, r0
    9b1c:	f7fb fda4 	bl	5668 <__aeabi_i2d>
    9b20:	4642      	mov	r2, r8
    9b22:	464b      	mov	r3, r9
    9b24:	f002 f9c2 	bl	beac <__aeabi_dmul>
    9b28:	f10a 0a01 	add.w	sl, sl, #1
    9b2c:	460b      	mov	r3, r1
    9b2e:	4602      	mov	r2, r0
    9b30:	4639      	mov	r1, r7
    9b32:	4630      	mov	r0, r6
    9b34:	f7fb fc4a 	bl	53cc <__aeabi_dsub>
    9b38:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    9b3c:	45aa      	cmp	sl, r5
    9b3e:	f804 3b01 	strb.w	r3, [r4], #1
    9b42:	f000 8344 	beq.w	a1ce <_dtoa_r+0xc46>
    9b46:	4b10      	ldr	r3, [pc, #64]	; (9b88 <_dtoa_r+0x600>)
    9b48:	2200      	movs	r2, #0
    9b4a:	f002 f9af 	bl	beac <__aeabi_dmul>
    9b4e:	2200      	movs	r2, #0
    9b50:	2300      	movs	r3, #0
    9b52:	4606      	mov	r6, r0
    9b54:	460f      	mov	r7, r1
    9b56:	f7fb fe47 	bl	57e8 <__aeabi_dcmpeq>
    9b5a:	2800      	cmp	r0, #0
    9b5c:	d0d5      	beq.n	9b0a <_dtoa_r+0x582>
    9b5e:	46a2      	mov	sl, r4
    9b60:	ee18 5a10 	vmov	r5, s16
    9b64:	ee18 4a90 	vmov	r4, s17
    9b68:	9b05      	ldr	r3, [sp, #20]
    9b6a:	3301      	adds	r3, #1
    9b6c:	9305      	str	r3, [sp, #20]
    9b6e:	46d1      	mov	r9, sl
    9b70:	e0e6      	b.n	9d40 <_dtoa_r+0x7b8>
    9b72:	bf00      	nop
    9b74:	0000ca20 	.word	0x0000ca20
    9b78:	0000c9f8 	.word	0x0000c9f8
    9b7c:	3ff00000 	.word	0x3ff00000
    9b80:	401c0000 	.word	0x401c0000
    9b84:	3fe00000 	.word	0x3fe00000
    9b88:	40240000 	.word	0x40240000
    9b8c:	40140000 	.word	0x40140000
    9b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9b92:	2a00      	cmp	r2, #0
    9b94:	f000 810c 	beq.w	9db0 <_dtoa_r+0x828>
    9b98:	9a01      	ldr	r2, [sp, #4]
    9b9a:	2a01      	cmp	r2, #1
    9b9c:	f340 829d 	ble.w	a0da <_dtoa_r+0xb52>
    9ba0:	9b07      	ldr	r3, [sp, #28]
    9ba2:	f103 38ff 	add.w	r8, r3, #4294967295
    9ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ba8:	4543      	cmp	r3, r8
    9baa:	f280 8260 	bge.w	a06e <_dtoa_r+0xae6>
    9bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9bb0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    9bb4:	eba8 0303 	sub.w	r3, r8, r3
    9bb8:	449b      	add	fp, r3
    9bba:	f04f 0800 	mov.w	r8, #0
    9bbe:	9b07      	ldr	r3, [sp, #28]
    9bc0:	2b00      	cmp	r3, #0
    9bc2:	f2c0 833b 	blt.w	a23c <_dtoa_r+0xcb4>
    9bc6:	9a04      	ldr	r2, [sp, #16]
    9bc8:	441a      	add	r2, r3
    9bca:	9204      	str	r2, [sp, #16]
    9bcc:	9a08      	ldr	r2, [sp, #32]
    9bce:	4617      	mov	r7, r2
    9bd0:	441a      	add	r2, r3
    9bd2:	9208      	str	r2, [sp, #32]
    9bd4:	2101      	movs	r1, #1
    9bd6:	4620      	mov	r0, r4
    9bd8:	f7fd f8ee 	bl	6db8 <__i2b>
    9bdc:	4606      	mov	r6, r0
    9bde:	b167      	cbz	r7, 9bfa <_dtoa_r+0x672>
    9be0:	9a04      	ldr	r2, [sp, #16]
    9be2:	2a00      	cmp	r2, #0
    9be4:	dd09      	ble.n	9bfa <_dtoa_r+0x672>
    9be6:	9908      	ldr	r1, [sp, #32]
    9be8:	42ba      	cmp	r2, r7
    9bea:	4613      	mov	r3, r2
    9bec:	bfa8      	it	ge
    9bee:	463b      	movge	r3, r7
    9bf0:	1ac9      	subs	r1, r1, r3
    9bf2:	1aff      	subs	r7, r7, r3
    9bf4:	1ad3      	subs	r3, r2, r3
    9bf6:	9108      	str	r1, [sp, #32]
    9bf8:	9304      	str	r3, [sp, #16]
    9bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9bfc:	b163      	cbz	r3, 9c18 <_dtoa_r+0x690>
    9bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c00:	2b00      	cmp	r3, #0
    9c02:	f000 82bf 	beq.w	a184 <_dtoa_r+0xbfc>
    9c06:	f1b8 0f00 	cmp.w	r8, #0
    9c0a:	f300 8233 	bgt.w	a074 <_dtoa_r+0xaec>
    9c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c10:	ebb3 0208 	subs.w	r2, r3, r8
    9c14:	f040 8322 	bne.w	a25c <_dtoa_r+0xcd4>
    9c18:	2101      	movs	r1, #1
    9c1a:	4620      	mov	r0, r4
    9c1c:	f7fd f8cc 	bl	6db8 <__i2b>
    9c20:	f1bb 0f00 	cmp.w	fp, #0
    9c24:	4682      	mov	sl, r0
    9c26:	f300 80d9 	bgt.w	9ddc <_dtoa_r+0x854>
    9c2a:	9b01      	ldr	r3, [sp, #4]
    9c2c:	2b01      	cmp	r3, #1
    9c2e:	f340 81a9 	ble.w	9f84 <_dtoa_r+0x9fc>
    9c32:	f04f 0800 	mov.w	r8, #0
    9c36:	2001      	movs	r0, #1
    9c38:	f1bb 0f00 	cmp.w	fp, #0
    9c3c:	f040 80da 	bne.w	9df4 <_dtoa_r+0x86c>
    9c40:	9b04      	ldr	r3, [sp, #16]
    9c42:	4418      	add	r0, r3
    9c44:	f010 001f 	ands.w	r0, r0, #31
    9c48:	f000 819a 	beq.w	9f80 <_dtoa_r+0x9f8>
    9c4c:	f1c0 0320 	rsb	r3, r0, #32
    9c50:	2b04      	cmp	r3, #4
    9c52:	f300 80b2 	bgt.w	9dba <_dtoa_r+0x832>
    9c56:	f040 822d 	bne.w	a0b4 <_dtoa_r+0xb2c>
    9c5a:	9b08      	ldr	r3, [sp, #32]
    9c5c:	2b00      	cmp	r3, #0
    9c5e:	dd05      	ble.n	9c6c <_dtoa_r+0x6e4>
    9c60:	4629      	mov	r1, r5
    9c62:	461a      	mov	r2, r3
    9c64:	4620      	mov	r0, r4
    9c66:	f7fd f9e3 	bl	7030 <__lshift>
    9c6a:	4605      	mov	r5, r0
    9c6c:	9b04      	ldr	r3, [sp, #16]
    9c6e:	2b00      	cmp	r3, #0
    9c70:	dd05      	ble.n	9c7e <_dtoa_r+0x6f6>
    9c72:	4651      	mov	r1, sl
    9c74:	461a      	mov	r2, r3
    9c76:	4620      	mov	r0, r4
    9c78:	f7fd f9da 	bl	7030 <__lshift>
    9c7c:	4682      	mov	sl, r0
    9c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c80:	2b00      	cmp	r3, #0
    9c82:	f040 815d 	bne.w	9f40 <_dtoa_r+0x9b8>
    9c86:	9b07      	ldr	r3, [sp, #28]
    9c88:	2b00      	cmp	r3, #0
    9c8a:	f340 8144 	ble.w	9f16 <_dtoa_r+0x98e>
    9c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c90:	2b00      	cmp	r3, #0
    9c92:	f040 80c7 	bne.w	9e24 <_dtoa_r+0x89c>
    9c96:	9b05      	ldr	r3, [sp, #20]
    9c98:	3301      	adds	r3, #1
    9c9a:	9305      	str	r3, [sp, #20]
    9c9c:	f8dd 8000 	ldr.w	r8, [sp]
    9ca0:	f8dd 901c 	ldr.w	r9, [sp, #28]
    9ca4:	2701      	movs	r7, #1
    9ca6:	e007      	b.n	9cb8 <_dtoa_r+0x730>
    9ca8:	4629      	mov	r1, r5
    9caa:	2300      	movs	r3, #0
    9cac:	220a      	movs	r2, #10
    9cae:	4620      	mov	r0, r4
    9cb0:	f7fc ffe0 	bl	6c74 <__multadd>
    9cb4:	3701      	adds	r7, #1
    9cb6:	4605      	mov	r5, r0
    9cb8:	4651      	mov	r1, sl
    9cba:	4628      	mov	r0, r5
    9cbc:	f7ff fbce 	bl	945c <quorem>
    9cc0:	45b9      	cmp	r9, r7
    9cc2:	f100 0030 	add.w	r0, r0, #48	; 0x30
    9cc6:	f808 0b01 	strb.w	r0, [r8], #1
    9cca:	dced      	bgt.n	9ca8 <_dtoa_r+0x720>
    9ccc:	9a07      	ldr	r2, [sp, #28]
    9cce:	2a00      	cmp	r2, #0
    9cd0:	bfc8      	it	gt
    9cd2:	4693      	movgt	fp, r2
    9cd4:	9a00      	ldr	r2, [sp, #0]
    9cd6:	bfd8      	it	le
    9cd8:	f04f 0b01 	movle.w	fp, #1
    9cdc:	4603      	mov	r3, r0
    9cde:	4493      	add	fp, r2
    9ce0:	2700      	movs	r7, #0
    9ce2:	4629      	mov	r1, r5
    9ce4:	2201      	movs	r2, #1
    9ce6:	4620      	mov	r0, r4
    9ce8:	9301      	str	r3, [sp, #4]
    9cea:	f7fd f9a1 	bl	7030 <__lshift>
    9cee:	4651      	mov	r1, sl
    9cf0:	4605      	mov	r5, r0
    9cf2:	f7fd fa15 	bl	7120 <__mcmp>
    9cf6:	2800      	cmp	r0, #0
    9cf8:	f340 81e4 	ble.w	a0c4 <_dtoa_r+0xb3c>
    9cfc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    9d00:	9a00      	ldr	r2, [sp, #0]
    9d02:	f10b 3bff 	add.w	fp, fp, #4294967295
    9d06:	e004      	b.n	9d12 <_dtoa_r+0x78a>
    9d08:	455a      	cmp	r2, fp
    9d0a:	f000 81f6 	beq.w	a0fa <_dtoa_r+0xb72>
    9d0e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    9d12:	2b39      	cmp	r3, #57	; 0x39
    9d14:	f10b 0901 	add.w	r9, fp, #1
    9d18:	d0f6      	beq.n	9d08 <_dtoa_r+0x780>
    9d1a:	3301      	adds	r3, #1
    9d1c:	f88b 3000 	strb.w	r3, [fp]
    9d20:	4651      	mov	r1, sl
    9d22:	4620      	mov	r0, r4
    9d24:	f7fc ff9c 	bl	6c60 <_Bfree>
    9d28:	b156      	cbz	r6, 9d40 <_dtoa_r+0x7b8>
    9d2a:	b12f      	cbz	r7, 9d38 <_dtoa_r+0x7b0>
    9d2c:	42b7      	cmp	r7, r6
    9d2e:	d003      	beq.n	9d38 <_dtoa_r+0x7b0>
    9d30:	4639      	mov	r1, r7
    9d32:	4620      	mov	r0, r4
    9d34:	f7fc ff94 	bl	6c60 <_Bfree>
    9d38:	4631      	mov	r1, r6
    9d3a:	4620      	mov	r0, r4
    9d3c:	f7fc ff90 	bl	6c60 <_Bfree>
    9d40:	4629      	mov	r1, r5
    9d42:	4620      	mov	r0, r4
    9d44:	f7fc ff8c 	bl	6c60 <_Bfree>
    9d48:	2300      	movs	r3, #0
    9d4a:	f889 3000 	strb.w	r3, [r9]
    9d4e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    9d52:	601a      	str	r2, [r3, #0]
    9d54:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9d56:	2b00      	cmp	r3, #0
    9d58:	f43f ac59 	beq.w	960e <_dtoa_r+0x86>
    9d5c:	9800      	ldr	r0, [sp, #0]
    9d5e:	f8c3 9000 	str.w	r9, [r3]
    9d62:	b015      	add	sp, #84	; 0x54
    9d64:	ecbd 8b06 	vpop	{d8-d10}
    9d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d6c:	2301      	movs	r3, #1
    9d6e:	1bbf      	subs	r7, r7, r6
    9d70:	930c      	str	r3, [sp, #48]	; 0x30
    9d72:	1e7b      	subs	r3, r7, #1
    9d74:	9304      	str	r3, [sp, #16]
    9d76:	f57f acbf 	bpl.w	96f8 <_dtoa_r+0x170>
    9d7a:	f1c7 0301 	rsb	r3, r7, #1
    9d7e:	9308      	str	r3, [sp, #32]
    9d80:	2300      	movs	r3, #0
    9d82:	9304      	str	r3, [sp, #16]
    9d84:	e4ba      	b.n	96fc <_dtoa_r+0x174>
    9d86:	4658      	mov	r0, fp
    9d88:	f7fb fc6e 	bl	5668 <__aeabi_i2d>
    9d8c:	4642      	mov	r2, r8
    9d8e:	464b      	mov	r3, r9
    9d90:	f7fb fd2a 	bl	57e8 <__aeabi_dcmpeq>
    9d94:	2800      	cmp	r0, #0
    9d96:	f47f ac97 	bne.w	96c8 <_dtoa_r+0x140>
    9d9a:	f10b 3bff 	add.w	fp, fp, #4294967295
    9d9e:	e493      	b.n	96c8 <_dtoa_r+0x140>
    9da0:	4bbd      	ldr	r3, [pc, #756]	; (a098 <_dtoa_r+0xb10>)
    9da2:	9300      	str	r3, [sp, #0]
    9da4:	9800      	ldr	r0, [sp, #0]
    9da6:	b015      	add	sp, #84	; 0x54
    9da8:	ecbd 8b06 	vpop	{d8-d10}
    9dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9db0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    9db4:	9f08      	ldr	r7, [sp, #32]
    9db6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9db8:	e711      	b.n	9bde <_dtoa_r+0x656>
    9dba:	f1c0 001c 	rsb	r0, r0, #28
    9dbe:	9b08      	ldr	r3, [sp, #32]
    9dc0:	4403      	add	r3, r0
    9dc2:	9308      	str	r3, [sp, #32]
    9dc4:	9b04      	ldr	r3, [sp, #16]
    9dc6:	4403      	add	r3, r0
    9dc8:	4407      	add	r7, r0
    9dca:	9304      	str	r3, [sp, #16]
    9dcc:	e745      	b.n	9c5a <_dtoa_r+0x6d2>
    9dce:	2601      	movs	r6, #1
    9dd0:	e4ab      	b.n	972a <_dtoa_r+0x1a2>
    9dd2:	f1c3 0320 	rsb	r3, r3, #32
    9dd6:	fa08 f003 	lsl.w	r0, r8, r3
    9dda:	e442      	b.n	9662 <_dtoa_r+0xda>
    9ddc:	4601      	mov	r1, r0
    9dde:	465a      	mov	r2, fp
    9de0:	4620      	mov	r0, r4
    9de2:	f7fd f8c5 	bl	6f70 <__pow5mult>
    9de6:	9b01      	ldr	r3, [sp, #4]
    9de8:	2b01      	cmp	r3, #1
    9dea:	4682      	mov	sl, r0
    9dec:	f340 81be 	ble.w	a16c <_dtoa_r+0xbe4>
    9df0:	f04f 0800 	mov.w	r8, #0
    9df4:	f8da 3010 	ldr.w	r3, [sl, #16]
    9df8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    9dfc:	6918      	ldr	r0, [r3, #16]
    9dfe:	f7fc ff8b 	bl	6d18 <__hi0bits>
    9e02:	f1c0 0020 	rsb	r0, r0, #32
    9e06:	e71b      	b.n	9c40 <_dtoa_r+0x6b8>
    9e08:	4631      	mov	r1, r6
    9e0a:	2300      	movs	r3, #0
    9e0c:	220a      	movs	r2, #10
    9e0e:	4620      	mov	r0, r4
    9e10:	f7fc ff30 	bl	6c74 <__multadd>
    9e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9e16:	2b00      	cmp	r3, #0
    9e18:	4606      	mov	r6, r0
    9e1a:	f340 8319 	ble.w	a450 <_dtoa_r+0xec8>
    9e1e:	f8cd 9014 	str.w	r9, [sp, #20]
    9e22:	9307      	str	r3, [sp, #28]
    9e24:	2f00      	cmp	r7, #0
    9e26:	f300 811b 	bgt.w	a060 <_dtoa_r+0xad8>
    9e2a:	f1b8 0f00 	cmp.w	r8, #0
    9e2e:	f040 81ee 	bne.w	a20e <_dtoa_r+0xc86>
    9e32:	46b0      	mov	r8, r6
    9e34:	9b02      	ldr	r3, [sp, #8]
    9e36:	9f00      	ldr	r7, [sp, #0]
    9e38:	9907      	ldr	r1, [sp, #28]
    9e3a:	f003 0201 	and.w	r2, r3, #1
    9e3e:	1e7b      	subs	r3, r7, #1
    9e40:	4419      	add	r1, r3
    9e42:	9b01      	ldr	r3, [sp, #4]
    9e44:	920a      	str	r2, [sp, #40]	; 0x28
    9e46:	4313      	orrs	r3, r2
    9e48:	9108      	str	r1, [sp, #32]
    9e4a:	9309      	str	r3, [sp, #36]	; 0x24
    9e4c:	4651      	mov	r1, sl
    9e4e:	4628      	mov	r0, r5
    9e50:	f7ff fb04 	bl	945c <quorem>
    9e54:	4631      	mov	r1, r6
    9e56:	4683      	mov	fp, r0
    9e58:	4628      	mov	r0, r5
    9e5a:	f7fd f961 	bl	7120 <__mcmp>
    9e5e:	4642      	mov	r2, r8
    9e60:	4651      	mov	r1, sl
    9e62:	4681      	mov	r9, r0
    9e64:	4620      	mov	r0, r4
    9e66:	f7fd f97d 	bl	7164 <__mdiff>
    9e6a:	68c2      	ldr	r2, [r0, #12]
    9e6c:	4601      	mov	r1, r0
    9e6e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    9e72:	2a00      	cmp	r2, #0
    9e74:	d142      	bne.n	9efc <_dtoa_r+0x974>
    9e76:	9004      	str	r0, [sp, #16]
    9e78:	4628      	mov	r0, r5
    9e7a:	9307      	str	r3, [sp, #28]
    9e7c:	f7fd f950 	bl	7120 <__mcmp>
    9e80:	9904      	ldr	r1, [sp, #16]
    9e82:	9002      	str	r0, [sp, #8]
    9e84:	4620      	mov	r0, r4
    9e86:	f7fc feeb 	bl	6c60 <_Bfree>
    9e8a:	9a02      	ldr	r2, [sp, #8]
    9e8c:	9b07      	ldr	r3, [sp, #28]
    9e8e:	b91a      	cbnz	r2, 9e98 <_dtoa_r+0x910>
    9e90:	9909      	ldr	r1, [sp, #36]	; 0x24
    9e92:	2900      	cmp	r1, #0
    9e94:	f000 82c4 	beq.w	a420 <_dtoa_r+0xe98>
    9e98:	f1b9 0f00 	cmp.w	r9, #0
    9e9c:	f2c0 8179 	blt.w	a192 <_dtoa_r+0xc0a>
    9ea0:	9901      	ldr	r1, [sp, #4]
    9ea2:	ea49 0901 	orr.w	r9, r9, r1
    9ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
    9ea8:	ea51 0909 	orrs.w	r9, r1, r9
    9eac:	f000 8171 	beq.w	a192 <_dtoa_r+0xc0a>
    9eb0:	2a00      	cmp	r2, #0
    9eb2:	f300 81c7 	bgt.w	a244 <_dtoa_r+0xcbc>
    9eb6:	9a08      	ldr	r2, [sp, #32]
    9eb8:	703b      	strb	r3, [r7, #0]
    9eba:	f107 0901 	add.w	r9, r7, #1
    9ebe:	4297      	cmp	r7, r2
    9ec0:	46cb      	mov	fp, r9
    9ec2:	f000 81c5 	beq.w	a250 <_dtoa_r+0xcc8>
    9ec6:	4629      	mov	r1, r5
    9ec8:	2300      	movs	r3, #0
    9eca:	220a      	movs	r2, #10
    9ecc:	4620      	mov	r0, r4
    9ece:	f7fc fed1 	bl	6c74 <__multadd>
    9ed2:	4546      	cmp	r6, r8
    9ed4:	4605      	mov	r5, r0
    9ed6:	4631      	mov	r1, r6
    9ed8:	f04f 0300 	mov.w	r3, #0
    9edc:	f04f 020a 	mov.w	r2, #10
    9ee0:	4620      	mov	r0, r4
    9ee2:	d012      	beq.n	9f0a <_dtoa_r+0x982>
    9ee4:	f7fc fec6 	bl	6c74 <__multadd>
    9ee8:	4641      	mov	r1, r8
    9eea:	4606      	mov	r6, r0
    9eec:	2300      	movs	r3, #0
    9eee:	220a      	movs	r2, #10
    9ef0:	4620      	mov	r0, r4
    9ef2:	f7fc febf 	bl	6c74 <__multadd>
    9ef6:	464f      	mov	r7, r9
    9ef8:	4680      	mov	r8, r0
    9efa:	e7a7      	b.n	9e4c <_dtoa_r+0x8c4>
    9efc:	4620      	mov	r0, r4
    9efe:	9302      	str	r3, [sp, #8]
    9f00:	f7fc feae 	bl	6c60 <_Bfree>
    9f04:	9b02      	ldr	r3, [sp, #8]
    9f06:	2201      	movs	r2, #1
    9f08:	e7c6      	b.n	9e98 <_dtoa_r+0x910>
    9f0a:	f7fc feb3 	bl	6c74 <__multadd>
    9f0e:	464f      	mov	r7, r9
    9f10:	4606      	mov	r6, r0
    9f12:	4680      	mov	r8, r0
    9f14:	e79a      	b.n	9e4c <_dtoa_r+0x8c4>
    9f16:	9b01      	ldr	r3, [sp, #4]
    9f18:	2b02      	cmp	r3, #2
    9f1a:	dc7a      	bgt.n	a012 <_dtoa_r+0xa8a>
    9f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9f1e:	2b00      	cmp	r3, #0
    9f20:	d180      	bne.n	9e24 <_dtoa_r+0x89c>
    9f22:	9b05      	ldr	r3, [sp, #20]
    9f24:	4651      	mov	r1, sl
    9f26:	3301      	adds	r3, #1
    9f28:	4628      	mov	r0, r5
    9f2a:	9305      	str	r3, [sp, #20]
    9f2c:	f7ff fa96 	bl	945c <quorem>
    9f30:	f8dd b000 	ldr.w	fp, [sp]
    9f34:	f100 0330 	add.w	r3, r0, #48	; 0x30
    9f38:	f80b 3b01 	strb.w	r3, [fp], #1
    9f3c:	2700      	movs	r7, #0
    9f3e:	e6d0      	b.n	9ce2 <_dtoa_r+0x75a>
    9f40:	4651      	mov	r1, sl
    9f42:	4628      	mov	r0, r5
    9f44:	f7fd f8ec 	bl	7120 <__mcmp>
    9f48:	2800      	cmp	r0, #0
    9f4a:	f6bf ae9c 	bge.w	9c86 <_dtoa_r+0x6fe>
    9f4e:	4629      	mov	r1, r5
    9f50:	2300      	movs	r3, #0
    9f52:	220a      	movs	r2, #10
    9f54:	4620      	mov	r0, r4
    9f56:	f7fc fe8d 	bl	6c74 <__multadd>
    9f5a:	9b05      	ldr	r3, [sp, #20]
    9f5c:	f103 39ff 	add.w	r9, r3, #4294967295
    9f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9f62:	4605      	mov	r5, r0
    9f64:	2b00      	cmp	r3, #0
    9f66:	f47f af4f 	bne.w	9e08 <_dtoa_r+0x880>
    9f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	f340 825e 	ble.w	a42e <_dtoa_r+0xea6>
    9f72:	9307      	str	r3, [sp, #28]
    9f74:	e692      	b.n	9c9c <_dtoa_r+0x714>
    9f76:	4b49      	ldr	r3, [pc, #292]	; (a09c <_dtoa_r+0xb14>)
    9f78:	9300      	str	r3, [sp, #0]
    9f7a:	3303      	adds	r3, #3
    9f7c:	f7ff bbf0 	b.w	9760 <_dtoa_r+0x1d8>
    9f80:	201c      	movs	r0, #28
    9f82:	e71c      	b.n	9dbe <_dtoa_r+0x836>
    9f84:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    9f88:	2900      	cmp	r1, #0
    9f8a:	f47f ae52 	bne.w	9c32 <_dtoa_r+0x6aa>
    9f8e:	f3c2 0313 	ubfx	r3, r2, #0, #20
    9f92:	2b00      	cmp	r3, #0
    9f94:	f47f ae4d 	bne.w	9c32 <_dtoa_r+0x6aa>
    9f98:	4b41      	ldr	r3, [pc, #260]	; (a0a0 <_dtoa_r+0xb18>)
    9f9a:	4013      	ands	r3, r2
    9f9c:	2b00      	cmp	r3, #0
    9f9e:	f000 8220 	beq.w	a3e2 <_dtoa_r+0xe5a>
    9fa2:	9b08      	ldr	r3, [sp, #32]
    9fa4:	3301      	adds	r3, #1
    9fa6:	9308      	str	r3, [sp, #32]
    9fa8:	9b04      	ldr	r3, [sp, #16]
    9faa:	3301      	adds	r3, #1
    9fac:	9304      	str	r3, [sp, #16]
    9fae:	f04f 0801 	mov.w	r8, #1
    9fb2:	e640      	b.n	9c36 <_dtoa_r+0x6ae>
    9fb4:	2301      	movs	r3, #1
    9fb6:	930a      	str	r3, [sp, #40]	; 0x28
    9fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fba:	9a05      	ldr	r2, [sp, #20]
    9fbc:	4413      	add	r3, r2
    9fbe:	930f      	str	r3, [sp, #60]	; 0x3c
    9fc0:	3301      	adds	r3, #1
    9fc2:	2b01      	cmp	r3, #1
    9fc4:	461f      	mov	r7, r3
    9fc6:	9307      	str	r3, [sp, #28]
    9fc8:	bfb8      	it	lt
    9fca:	2701      	movlt	r7, #1
    9fcc:	2100      	movs	r1, #0
    9fce:	2f17      	cmp	r7, #23
    9fd0:	63e1      	str	r1, [r4, #60]	; 0x3c
    9fd2:	f77f ac19 	ble.w	9808 <_dtoa_r+0x280>
    9fd6:	2201      	movs	r2, #1
    9fd8:	2304      	movs	r3, #4
    9fda:	005b      	lsls	r3, r3, #1
    9fdc:	f103 0014 	add.w	r0, r3, #20
    9fe0:	42b8      	cmp	r0, r7
    9fe2:	4611      	mov	r1, r2
    9fe4:	f102 0201 	add.w	r2, r2, #1
    9fe8:	d9f7      	bls.n	9fda <_dtoa_r+0xa52>
    9fea:	63e1      	str	r1, [r4, #60]	; 0x3c
    9fec:	e40c      	b.n	9808 <_dtoa_r+0x280>
    9fee:	2301      	movs	r3, #1
    9ff0:	930a      	str	r3, [sp, #40]	; 0x28
    9ff2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9ff4:	2f00      	cmp	r7, #0
    9ff6:	dd60      	ble.n	a0ba <_dtoa_r+0xb32>
    9ff8:	970f      	str	r7, [sp, #60]	; 0x3c
    9ffa:	9707      	str	r7, [sp, #28]
    9ffc:	e7e6      	b.n	9fcc <_dtoa_r+0xa44>
    9ffe:	2300      	movs	r3, #0
    a000:	930a      	str	r3, [sp, #40]	; 0x28
    a002:	e7d9      	b.n	9fb8 <_dtoa_r+0xa30>
    a004:	2300      	movs	r3, #0
    a006:	930a      	str	r3, [sp, #40]	; 0x28
    a008:	e7f3      	b.n	9ff2 <_dtoa_r+0xa6a>
    a00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a00c:	9307      	str	r3, [sp, #28]
    a00e:	f8cd 9014 	str.w	r9, [sp, #20]
    a012:	9b07      	ldr	r3, [sp, #28]
    a014:	2b00      	cmp	r3, #0
    a016:	f47f ad49 	bne.w	9aac <_dtoa_r+0x524>
    a01a:	4651      	mov	r1, sl
    a01c:	2205      	movs	r2, #5
    a01e:	4620      	mov	r0, r4
    a020:	f7fc fe28 	bl	6c74 <__multadd>
    a024:	4601      	mov	r1, r0
    a026:	4682      	mov	sl, r0
    a028:	4628      	mov	r0, r5
    a02a:	f7fd f879 	bl	7120 <__mcmp>
    a02e:	2800      	cmp	r0, #0
    a030:	f77f ad3c 	ble.w	9aac <_dtoa_r+0x524>
    a034:	9b00      	ldr	r3, [sp, #0]
    a036:	9f05      	ldr	r7, [sp, #20]
    a038:	2231      	movs	r2, #49	; 0x31
    a03a:	4698      	mov	r8, r3
    a03c:	f803 2b01 	strb.w	r2, [r3], #1
    a040:	3701      	adds	r7, #1
    a042:	9300      	str	r3, [sp, #0]
    a044:	4651      	mov	r1, sl
    a046:	4620      	mov	r0, r4
    a048:	f7fc fe0a 	bl	6c60 <_Bfree>
    a04c:	1c7b      	adds	r3, r7, #1
    a04e:	f8dd 9000 	ldr.w	r9, [sp]
    a052:	9305      	str	r3, [sp, #20]
    a054:	f8cd 8000 	str.w	r8, [sp]
    a058:	2e00      	cmp	r6, #0
    a05a:	f47f ae6d 	bne.w	9d38 <_dtoa_r+0x7b0>
    a05e:	e66f      	b.n	9d40 <_dtoa_r+0x7b8>
    a060:	4631      	mov	r1, r6
    a062:	463a      	mov	r2, r7
    a064:	4620      	mov	r0, r4
    a066:	f7fc ffe3 	bl	7030 <__lshift>
    a06a:	4606      	mov	r6, r0
    a06c:	e6dd      	b.n	9e2a <_dtoa_r+0x8a2>
    a06e:	eba3 0808 	sub.w	r8, r3, r8
    a072:	e5a4      	b.n	9bbe <_dtoa_r+0x636>
    a074:	4631      	mov	r1, r6
    a076:	4642      	mov	r2, r8
    a078:	4620      	mov	r0, r4
    a07a:	f7fc ff79 	bl	6f70 <__pow5mult>
    a07e:	462a      	mov	r2, r5
    a080:	4601      	mov	r1, r0
    a082:	4606      	mov	r6, r0
    a084:	4620      	mov	r0, r4
    a086:	f7fc fec5 	bl	6e14 <__multiply>
    a08a:	4629      	mov	r1, r5
    a08c:	4605      	mov	r5, r0
    a08e:	4620      	mov	r0, r4
    a090:	f7fc fde6 	bl	6c60 <_Bfree>
    a094:	e5bb      	b.n	9c0e <_dtoa_r+0x686>
    a096:	bf00      	nop
    a098:	0000cb34 	.word	0x0000cb34
    a09c:	0000cba4 	.word	0x0000cba4
    a0a0:	7ff00000 	.word	0x7ff00000
    a0a4:	f04f 0a02 	mov.w	sl, #2
    a0a8:	eeb0 8a49 	vmov.f32	s16, s18
    a0ac:	eef0 8a69 	vmov.f32	s17, s19
    a0b0:	f7ff bbd7 	b.w	9862 <_dtoa_r+0x2da>
    a0b4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    a0b8:	e681      	b.n	9dbe <_dtoa_r+0x836>
    a0ba:	2301      	movs	r3, #1
    a0bc:	9309      	str	r3, [sp, #36]	; 0x24
    a0be:	9307      	str	r3, [sp, #28]
    a0c0:	f7ff bb9e 	b.w	9800 <_dtoa_r+0x278>
    a0c4:	d103      	bne.n	a0ce <_dtoa_r+0xb46>
    a0c6:	9b01      	ldr	r3, [sp, #4]
    a0c8:	07db      	lsls	r3, r3, #31
    a0ca:	f53f ae17 	bmi.w	9cfc <_dtoa_r+0x774>
    a0ce:	46d9      	mov	r9, fp
    a0d0:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    a0d4:	2b30      	cmp	r3, #48	; 0x30
    a0d6:	d0fa      	beq.n	a0ce <_dtoa_r+0xb46>
    a0d8:	e622      	b.n	9d20 <_dtoa_r+0x798>
    a0da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a0dc:	2a00      	cmp	r2, #0
    a0de:	f000 8137 	beq.w	a350 <_dtoa_r+0xdc8>
    a0e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a0e6:	9a04      	ldr	r2, [sp, #16]
    a0e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    a0ec:	441a      	add	r2, r3
    a0ee:	9204      	str	r2, [sp, #16]
    a0f0:	9a08      	ldr	r2, [sp, #32]
    a0f2:	4617      	mov	r7, r2
    a0f4:	441a      	add	r2, r3
    a0f6:	9208      	str	r2, [sp, #32]
    a0f8:	e56c      	b.n	9bd4 <_dtoa_r+0x64c>
    a0fa:	9b05      	ldr	r3, [sp, #20]
    a0fc:	9a00      	ldr	r2, [sp, #0]
    a0fe:	3301      	adds	r3, #1
    a100:	9305      	str	r3, [sp, #20]
    a102:	2331      	movs	r3, #49	; 0x31
    a104:	7013      	strb	r3, [r2, #0]
    a106:	e60b      	b.n	9d20 <_dtoa_r+0x798>
    a108:	f04f 0a00 	mov.w	sl, #0
    a10c:	4656      	mov	r6, sl
    a10e:	e4cd      	b.n	9aac <_dtoa_r+0x524>
    a110:	900c      	str	r0, [sp, #48]	; 0x30
    a112:	e632      	b.n	9d7a <_dtoa_r+0x7f2>
    a114:	f000 8149 	beq.w	a3aa <_dtoa_r+0xe22>
    a118:	9a05      	ldr	r2, [sp, #20]
    a11a:	4bc8      	ldr	r3, [pc, #800]	; (a43c <_dtoa_r+0xeb4>)
    a11c:	4256      	negs	r6, r2
    a11e:	f006 020f 	and.w	r2, r6, #15
    a122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a126:	e9d3 2300 	ldrd	r2, r3, [r3]
    a12a:	ec51 0b19 	vmov	r0, r1, d9
    a12e:	f001 febd 	bl	beac <__aeabi_dmul>
    a132:	1136      	asrs	r6, r6, #4
    a134:	ec41 0b1a 	vmov	d10, r0, r1
    a138:	f000 8195 	beq.w	a466 <_dtoa_r+0xede>
    a13c:	4fc0      	ldr	r7, [pc, #768]	; (a440 <_dtoa_r+0xeb8>)
    a13e:	2300      	movs	r3, #0
    a140:	f04f 0a02 	mov.w	sl, #2
    a144:	07f2      	lsls	r2, r6, #31
    a146:	d506      	bpl.n	a156 <_dtoa_r+0xbce>
    a148:	e9d7 2300 	ldrd	r2, r3, [r7]
    a14c:	f001 feae 	bl	beac <__aeabi_dmul>
    a150:	f10a 0a01 	add.w	sl, sl, #1
    a154:	2301      	movs	r3, #1
    a156:	1076      	asrs	r6, r6, #1
    a158:	f107 0708 	add.w	r7, r7, #8
    a15c:	d1f2      	bne.n	a144 <_dtoa_r+0xbbc>
    a15e:	2b00      	cmp	r3, #0
    a160:	f43f ab9e 	beq.w	98a0 <_dtoa_r+0x318>
    a164:	ec41 0b1a 	vmov	d10, r0, r1
    a168:	f7ff bb9a 	b.w	98a0 <_dtoa_r+0x318>
    a16c:	9b02      	ldr	r3, [sp, #8]
    a16e:	2b00      	cmp	r3, #0
    a170:	f47f ae3e 	bne.w	9df0 <_dtoa_r+0x868>
    a174:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    a178:	f3c2 0313 	ubfx	r3, r2, #0, #20
    a17c:	2b00      	cmp	r3, #0
    a17e:	f43f af0b 	beq.w	9f98 <_dtoa_r+0xa10>
    a182:	e635      	b.n	9df0 <_dtoa_r+0x868>
    a184:	4629      	mov	r1, r5
    a186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a188:	4620      	mov	r0, r4
    a18a:	f7fc fef1 	bl	6f70 <__pow5mult>
    a18e:	4605      	mov	r5, r0
    a190:	e542      	b.n	9c18 <_dtoa_r+0x690>
    a192:	2a00      	cmp	r2, #0
    a194:	dd12      	ble.n	a1bc <_dtoa_r+0xc34>
    a196:	4629      	mov	r1, r5
    a198:	2201      	movs	r2, #1
    a19a:	4620      	mov	r0, r4
    a19c:	9301      	str	r3, [sp, #4]
    a19e:	f7fc ff47 	bl	7030 <__lshift>
    a1a2:	4651      	mov	r1, sl
    a1a4:	4605      	mov	r5, r0
    a1a6:	f7fc ffbb 	bl	7120 <__mcmp>
    a1aa:	2800      	cmp	r0, #0
    a1ac:	9b01      	ldr	r3, [sp, #4]
    a1ae:	f340 8129 	ble.w	a404 <_dtoa_r+0xe7c>
    a1b2:	2b39      	cmp	r3, #57	; 0x39
    a1b4:	f000 8107 	beq.w	a3c6 <_dtoa_r+0xe3e>
    a1b8:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    a1bc:	46b9      	mov	r9, r7
    a1be:	f809 3b01 	strb.w	r3, [r9], #1
    a1c2:	9b05      	ldr	r3, [sp, #20]
    a1c4:	3301      	adds	r3, #1
    a1c6:	4637      	mov	r7, r6
    a1c8:	9305      	str	r3, [sp, #20]
    a1ca:	4646      	mov	r6, r8
    a1cc:	e5a8      	b.n	9d20 <_dtoa_r+0x798>
    a1ce:	46a2      	mov	sl, r4
    a1d0:	ee18 5a10 	vmov	r5, s16
    a1d4:	ee18 4a90 	vmov	r4, s17
    a1d8:	4602      	mov	r2, r0
    a1da:	460b      	mov	r3, r1
    a1dc:	f7fb f8f8 	bl	53d0 <__adddf3>
    a1e0:	4642      	mov	r2, r8
    a1e2:	464b      	mov	r3, r9
    a1e4:	4606      	mov	r6, r0
    a1e6:	460f      	mov	r7, r1
    a1e8:	f7fb fb26 	bl	5838 <__aeabi_dcmpgt>
    a1ec:	b960      	cbnz	r0, a208 <_dtoa_r+0xc80>
    a1ee:	4642      	mov	r2, r8
    a1f0:	464b      	mov	r3, r9
    a1f2:	4630      	mov	r0, r6
    a1f4:	4639      	mov	r1, r7
    a1f6:	f7fb faf7 	bl	57e8 <__aeabi_dcmpeq>
    a1fa:	2800      	cmp	r0, #0
    a1fc:	f43f acb4 	beq.w	9b68 <_dtoa_r+0x5e0>
    a200:	ea5f 71cb 	movs.w	r1, fp, lsl #31
    a204:	f57f acb0 	bpl.w	9b68 <_dtoa_r+0x5e0>
    a208:	9a00      	ldr	r2, [sp, #0]
    a20a:	f7ff bbf3 	b.w	99f4 <_dtoa_r+0x46c>
    a20e:	6871      	ldr	r1, [r6, #4]
    a210:	4620      	mov	r0, r4
    a212:	f7fc fcff 	bl	6c14 <_Balloc>
    a216:	4607      	mov	r7, r0
    a218:	2800      	cmp	r0, #0
    a21a:	f000 8128 	beq.w	a46e <_dtoa_r+0xee6>
    a21e:	6933      	ldr	r3, [r6, #16]
    a220:	3302      	adds	r3, #2
    a222:	009a      	lsls	r2, r3, #2
    a224:	f106 010c 	add.w	r1, r6, #12
    a228:	300c      	adds	r0, #12
    a22a:	f7f9 fe61 	bl	3ef0 <memcpy>
    a22e:	4639      	mov	r1, r7
    a230:	2201      	movs	r2, #1
    a232:	4620      	mov	r0, r4
    a234:	f7fc fefc 	bl	7030 <__lshift>
    a238:	4680      	mov	r8, r0
    a23a:	e5fb      	b.n	9e34 <_dtoa_r+0x8ac>
    a23c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
    a240:	1a9f      	subs	r7, r3, r2
    a242:	e4c7      	b.n	9bd4 <_dtoa_r+0x64c>
    a244:	2b39      	cmp	r3, #57	; 0x39
    a246:	f000 80be 	beq.w	a3c6 <_dtoa_r+0xe3e>
    a24a:	46b9      	mov	r9, r7
    a24c:	3301      	adds	r3, #1
    a24e:	e7b6      	b.n	a1be <_dtoa_r+0xc36>
    a250:	9a05      	ldr	r2, [sp, #20]
    a252:	3201      	adds	r2, #1
    a254:	4637      	mov	r7, r6
    a256:	9205      	str	r2, [sp, #20]
    a258:	4646      	mov	r6, r8
    a25a:	e542      	b.n	9ce2 <_dtoa_r+0x75a>
    a25c:	4629      	mov	r1, r5
    a25e:	4620      	mov	r0, r4
    a260:	f7fc fe86 	bl	6f70 <__pow5mult>
    a264:	4605      	mov	r5, r0
    a266:	e4d7      	b.n	9c18 <_dtoa_r+0x690>
    a268:	980e      	ldr	r0, [sp, #56]	; 0x38
    a26a:	4974      	ldr	r1, [pc, #464]	; (a43c <_dtoa_r+0xeb4>)
    a26c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    a270:	4642      	mov	r2, r8
    a272:	464b      	mov	r3, r9
    a274:	e951 0102 	ldrd	r0, r1, [r1, #-8]
    a278:	f001 fe18 	bl	beac <__aeabi_dmul>
    a27c:	ec5a 9b1a 	vmov	r9, sl, d10
    a280:	ec41 0b18 	vmov	d8, r0, r1
    a284:	4651      	mov	r1, sl
    a286:	ee1a 0a10 	vmov	r0, s20
    a28a:	f002 f821 	bl	c2d0 <__aeabi_d2iz>
    a28e:	4607      	mov	r7, r0
    a290:	f7fb f9ea 	bl	5668 <__aeabi_i2d>
    a294:	4602      	mov	r2, r0
    a296:	460b      	mov	r3, r1
    a298:	ee1a 0a10 	vmov	r0, s20
    a29c:	4651      	mov	r1, sl
    a29e:	f7fb f895 	bl	53cc <__aeabi_dsub>
    a2a2:	4606      	mov	r6, r0
    a2a4:	980e      	ldr	r0, [sp, #56]	; 0x38
    a2a6:	f8dd 8000 	ldr.w	r8, [sp]
    a2aa:	3730      	adds	r7, #48	; 0x30
    a2ac:	2801      	cmp	r0, #1
    a2ae:	f808 7b01 	strb.w	r7, [r8], #1
    a2b2:	460f      	mov	r7, r1
    a2b4:	f000 80d5 	beq.w	a462 <_dtoa_r+0xeda>
    a2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2ba:	9a00      	ldr	r2, [sp, #0]
    a2bc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    a2c0:	4413      	add	r3, r2
    a2c2:	469b      	mov	fp, r3
    a2c4:	46c2      	mov	sl, r8
    a2c6:	4b5f      	ldr	r3, [pc, #380]	; (a444 <_dtoa_r+0xebc>)
    a2c8:	2200      	movs	r2, #0
    a2ca:	4630      	mov	r0, r6
    a2cc:	4639      	mov	r1, r7
    a2ce:	f001 fded 	bl	beac <__aeabi_dmul>
    a2d2:	4689      	mov	r9, r1
    a2d4:	4680      	mov	r8, r0
    a2d6:	f001 fffb 	bl	c2d0 <__aeabi_d2iz>
    a2da:	4607      	mov	r7, r0
    a2dc:	f7fb f9c4 	bl	5668 <__aeabi_i2d>
    a2e0:	3730      	adds	r7, #48	; 0x30
    a2e2:	4602      	mov	r2, r0
    a2e4:	460b      	mov	r3, r1
    a2e6:	4640      	mov	r0, r8
    a2e8:	4649      	mov	r1, r9
    a2ea:	f7fb f86f 	bl	53cc <__aeabi_dsub>
    a2ee:	f80a 7b01 	strb.w	r7, [sl], #1
    a2f2:	45d3      	cmp	fp, sl
    a2f4:	4606      	mov	r6, r0
    a2f6:	460f      	mov	r7, r1
    a2f8:	d1e5      	bne.n	a2c6 <_dtoa_r+0xd3e>
    a2fa:	46da      	mov	sl, fp
    a2fc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    a300:	4b51      	ldr	r3, [pc, #324]	; (a448 <_dtoa_r+0xec0>)
    a302:	ec59 8b18 	vmov	r8, r9, d8
    a306:	2200      	movs	r2, #0
    a308:	ee18 0a10 	vmov	r0, s16
    a30c:	4649      	mov	r1, r9
    a30e:	f7fb f85f 	bl	53d0 <__adddf3>
    a312:	4632      	mov	r2, r6
    a314:	463b      	mov	r3, r7
    a316:	f7fb fa71 	bl	57fc <__aeabi_dcmplt>
    a31a:	2800      	cmp	r0, #0
    a31c:	d16d      	bne.n	a3fa <_dtoa_r+0xe72>
    a31e:	ee18 2a10 	vmov	r2, s16
    a322:	464b      	mov	r3, r9
    a324:	4948      	ldr	r1, [pc, #288]	; (a448 <_dtoa_r+0xec0>)
    a326:	2000      	movs	r0, #0
    a328:	f7fb f850 	bl	53cc <__aeabi_dsub>
    a32c:	4632      	mov	r2, r6
    a32e:	463b      	mov	r3, r7
    a330:	f7fb fa82 	bl	5838 <__aeabi_dcmpgt>
    a334:	2800      	cmp	r0, #0
    a336:	f43f ab92 	beq.w	9a5e <_dtoa_r+0x4d6>
    a33a:	46d1      	mov	r9, sl
    a33c:	f10a 3aff 	add.w	sl, sl, #4294967295
    a340:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    a344:	2b30      	cmp	r3, #48	; 0x30
    a346:	d0f8      	beq.n	a33a <_dtoa_r+0xdb2>
    a348:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a34a:	3301      	adds	r3, #1
    a34c:	9305      	str	r3, [sp, #20]
    a34e:	e4f7      	b.n	9d40 <_dtoa_r+0x7b8>
    a350:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a352:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a356:	e6c6      	b.n	a0e6 <_dtoa_r+0xb5e>
    a358:	9b07      	ldr	r3, [sp, #28]
    a35a:	2b00      	cmp	r3, #0
    a35c:	f43f ab57 	beq.w	9a0e <_dtoa_r+0x486>
    a360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a362:	2b00      	cmp	r3, #0
    a364:	f77f ab7b 	ble.w	9a5e <_dtoa_r+0x4d6>
    a368:	9a05      	ldr	r2, [sp, #20]
    a36a:	930e      	str	r3, [sp, #56]	; 0x38
    a36c:	3a01      	subs	r2, #1
    a36e:	4b35      	ldr	r3, [pc, #212]	; (a444 <_dtoa_r+0xebc>)
    a370:	9210      	str	r2, [sp, #64]	; 0x40
    a372:	ee1a 0a10 	vmov	r0, s20
    a376:	4639      	mov	r1, r7
    a378:	2200      	movs	r2, #0
    a37a:	f001 fd97 	bl	beac <__aeabi_dmul>
    a37e:	4602      	mov	r2, r0
    a380:	4616      	mov	r6, r2
    a382:	460f      	mov	r7, r1
    a384:	f10a 0001 	add.w	r0, sl, #1
    a388:	f7fb f96e 	bl	5668 <__aeabi_i2d>
    a38c:	4632      	mov	r2, r6
    a38e:	463b      	mov	r3, r7
    a390:	f001 fd8c 	bl	beac <__aeabi_dmul>
    a394:	4b2d      	ldr	r3, [pc, #180]	; (a44c <_dtoa_r+0xec4>)
    a396:	2200      	movs	r2, #0
    a398:	f7fb f81a 	bl	53d0 <__adddf3>
    a39c:	ec47 6b1a 	vmov	d10, r6, r7
    a3a0:	4680      	mov	r8, r0
    a3a2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    a3a6:	f7ff ba9f 	b.w	98e8 <_dtoa_r+0x360>
    a3aa:	f04f 0a02 	mov.w	sl, #2
    a3ae:	eeb0 aa49 	vmov.f32	s20, s18
    a3b2:	eef0 aa69 	vmov.f32	s21, s19
    a3b6:	f7ff ba73 	b.w	98a0 <_dtoa_r+0x318>
    a3ba:	9b05      	ldr	r3, [sp, #20]
    a3bc:	3301      	adds	r3, #1
    a3be:	9305      	str	r3, [sp, #20]
    a3c0:	2331      	movs	r3, #49	; 0x31
    a3c2:	f7ff bb1e 	b.w	9a02 <_dtoa_r+0x47a>
    a3c6:	9b05      	ldr	r3, [sp, #20]
    a3c8:	46bb      	mov	fp, r7
    a3ca:	3301      	adds	r3, #1
    a3cc:	9305      	str	r3, [sp, #20]
    a3ce:	2339      	movs	r3, #57	; 0x39
    a3d0:	4637      	mov	r7, r6
    a3d2:	f80b 3b01 	strb.w	r3, [fp], #1
    a3d6:	4646      	mov	r6, r8
    a3d8:	e492      	b.n	9d00 <_dtoa_r+0x778>
    a3da:	f04f 0a00 	mov.w	sl, #0
    a3de:	4656      	mov	r6, sl
    a3e0:	e628      	b.n	a034 <_dtoa_r+0xaac>
    a3e2:	4698      	mov	r8, r3
    a3e4:	e427      	b.n	9c36 <_dtoa_r+0x6ae>
    a3e6:	46aa      	mov	sl, r5
    a3e8:	ee18 4a10 	vmov	r4, s16
    a3ec:	ee1a 5a10 	vmov	r5, s20
    a3f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a3f2:	3301      	adds	r3, #1
    a3f4:	9305      	str	r3, [sp, #20]
    a3f6:	46d1      	mov	r9, sl
    a3f8:	e4a2      	b.n	9d40 <_dtoa_r+0x7b8>
    a3fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a3fc:	9a00      	ldr	r2, [sp, #0]
    a3fe:	9305      	str	r3, [sp, #20]
    a400:	f7ff baf8 	b.w	99f4 <_dtoa_r+0x46c>
    a404:	f47f aeda 	bne.w	a1bc <_dtoa_r+0xc34>
    a408:	07da      	lsls	r2, r3, #31
    a40a:	f57f aed7 	bpl.w	a1bc <_dtoa_r+0xc34>
    a40e:	e6d0      	b.n	a1b2 <_dtoa_r+0xc2a>
    a410:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    a414:	ee1a 5a10 	vmov	r5, s20
    a418:	ee18 4a10 	vmov	r4, s16
    a41c:	f7ff bb1f 	b.w	9a5e <_dtoa_r+0x4d6>
    a420:	2b39      	cmp	r3, #57	; 0x39
    a422:	d0d0      	beq.n	a3c6 <_dtoa_r+0xe3e>
    a424:	f1b9 0f00 	cmp.w	r9, #0
    a428:	f73f aec6 	bgt.w	a1b8 <_dtoa_r+0xc30>
    a42c:	e6c6      	b.n	a1bc <_dtoa_r+0xc34>
    a42e:	9b01      	ldr	r3, [sp, #4]
    a430:	2b02      	cmp	r3, #2
    a432:	f73f adea 	bgt.w	a00a <_dtoa_r+0xa82>
    a436:	f8cd 9014 	str.w	r9, [sp, #20]
    a43a:	e572      	b.n	9f22 <_dtoa_r+0x99a>
    a43c:	0000ca20 	.word	0x0000ca20
    a440:	0000c9f8 	.word	0x0000c9f8
    a444:	40240000 	.word	0x40240000
    a448:	3fe00000 	.word	0x3fe00000
    a44c:	401c0000 	.word	0x401c0000
    a450:	9b01      	ldr	r3, [sp, #4]
    a452:	2b02      	cmp	r3, #2
    a454:	f73f add9 	bgt.w	a00a <_dtoa_r+0xa82>
    a458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a45a:	f8cd 9014 	str.w	r9, [sp, #20]
    a45e:	9307      	str	r3, [sp, #28]
    a460:	e4e0      	b.n	9e24 <_dtoa_r+0x89c>
    a462:	46c2      	mov	sl, r8
    a464:	e74c      	b.n	a300 <_dtoa_r+0xd78>
    a466:	f04f 0a02 	mov.w	sl, #2
    a46a:	f7ff ba19 	b.w	98a0 <_dtoa_r+0x318>
    a46e:	4b12      	ldr	r3, [pc, #72]	; (a4b8 <_dtoa_r+0xf30>)
    a470:	4812      	ldr	r0, [pc, #72]	; (a4bc <_dtoa_r+0xf34>)
    a472:	463a      	mov	r2, r7
    a474:	f240 21ef 	movw	r1, #751	; 0x2ef
    a478:	f7fe ff94 	bl	93a4 <__assert_func>
    a47c:	2600      	movs	r6, #0
    a47e:	63e6      	str	r6, [r4, #60]	; 0x3c
    a480:	4631      	mov	r1, r6
    a482:	4620      	mov	r0, r4
    a484:	f7fc fbc6 	bl	6c14 <_Balloc>
    a488:	9000      	str	r0, [sp, #0]
    a48a:	b950      	cbnz	r0, a4a2 <_dtoa_r+0xf1a>
    a48c:	4b0a      	ldr	r3, [pc, #40]	; (a4b8 <_dtoa_r+0xf30>)
    a48e:	480b      	ldr	r0, [pc, #44]	; (a4bc <_dtoa_r+0xf34>)
    a490:	2200      	movs	r2, #0
    a492:	f240 11af 	movw	r1, #431	; 0x1af
    a496:	f7fe ff85 	bl	93a4 <__assert_func>
    a49a:	4b09      	ldr	r3, [pc, #36]	; (a4c0 <_dtoa_r+0xf38>)
    a49c:	9300      	str	r3, [sp, #0]
    a49e:	f7ff b8b6 	b.w	960e <_dtoa_r+0x86>
    a4a2:	9b00      	ldr	r3, [sp, #0]
    a4a4:	63a3      	str	r3, [r4, #56]	; 0x38
    a4a6:	f04f 33ff 	mov.w	r3, #4294967295
    a4aa:	930f      	str	r3, [sp, #60]	; 0x3c
    a4ac:	9307      	str	r3, [sp, #28]
    a4ae:	2301      	movs	r3, #1
    a4b0:	9609      	str	r6, [sp, #36]	; 0x24
    a4b2:	930a      	str	r3, [sp, #40]	; 0x28
    a4b4:	f7ff bad3 	b.w	9a5e <_dtoa_r+0x4d6>
    a4b8:	0000c988 	.word	0x0000c988
    a4bc:	0000cba8 	.word	0x0000cba8
    a4c0:	0000cb98 	.word	0x0000cb98

0000a4c4 <_wcrtomb_r>:
    a4c4:	b570      	push	{r4, r5, r6, lr}
    a4c6:	4605      	mov	r5, r0
    a4c8:	b084      	sub	sp, #16
    a4ca:	b15b      	cbz	r3, a4e4 <_wcrtomb_r+0x20>
    a4cc:	461c      	mov	r4, r3
    a4ce:	b169      	cbz	r1, a4ec <_wcrtomb_r+0x28>
    a4d0:	4b0e      	ldr	r3, [pc, #56]	; (a50c <_wcrtomb_r+0x48>)
    a4d2:	4628      	mov	r0, r5
    a4d4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    a4d8:	4623      	mov	r3, r4
    a4da:	47b0      	blx	r6
    a4dc:	1c43      	adds	r3, r0, #1
    a4de:	d00f      	beq.n	a500 <_wcrtomb_r+0x3c>
    a4e0:	b004      	add	sp, #16
    a4e2:	bd70      	pop	{r4, r5, r6, pc}
    a4e4:	f500 7482 	add.w	r4, r0, #260	; 0x104
    a4e8:	2900      	cmp	r1, #0
    a4ea:	d1f1      	bne.n	a4d0 <_wcrtomb_r+0xc>
    a4ec:	4a07      	ldr	r2, [pc, #28]	; (a50c <_wcrtomb_r+0x48>)
    a4ee:	4623      	mov	r3, r4
    a4f0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    a4f4:	4628      	mov	r0, r5
    a4f6:	460a      	mov	r2, r1
    a4f8:	a901      	add	r1, sp, #4
    a4fa:	47b0      	blx	r6
    a4fc:	1c43      	adds	r3, r0, #1
    a4fe:	d1ef      	bne.n	a4e0 <_wcrtomb_r+0x1c>
    a500:	2200      	movs	r2, #0
    a502:	238a      	movs	r3, #138	; 0x8a
    a504:	6022      	str	r2, [r4, #0]
    a506:	602b      	str	r3, [r5, #0]
    a508:	b004      	add	sp, #16
    a50a:	bd70      	pop	{r4, r5, r6, pc}
    a50c:	1fff0c30 	.word	0x1fff0c30

0000a510 <_wcsrtombs_r>:
    a510:	b510      	push	{r4, lr}
    a512:	b082      	sub	sp, #8
    a514:	9c04      	ldr	r4, [sp, #16]
    a516:	e9cd 3400 	strd	r3, r4, [sp]
    a51a:	f04f 33ff 	mov.w	r3, #4294967295
    a51e:	f001 fbc7 	bl	bcb0 <_wcsnrtombs_r>
    a522:	b002      	add	sp, #8
    a524:	bd10      	pop	{r4, pc}
    a526:	bf00      	nop

0000a528 <fiprintf>:
    a528:	b40e      	push	{r1, r2, r3}
    a52a:	b510      	push	{r4, lr}
    a52c:	b083      	sub	sp, #12
    a52e:	ab05      	add	r3, sp, #20
    a530:	4c06      	ldr	r4, [pc, #24]	; (a54c <fiprintf+0x24>)
    a532:	f853 2b04 	ldr.w	r2, [r3], #4
    a536:	9301      	str	r3, [sp, #4]
    a538:	4601      	mov	r1, r0
    a53a:	6820      	ldr	r0, [r4, #0]
    a53c:	f000 f8c4 	bl	a6c8 <_vfiprintf_r>
    a540:	b003      	add	sp, #12
    a542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a546:	b003      	add	sp, #12
    a548:	4770      	bx	lr
    a54a:	bf00      	nop
    a54c:	1fff0ec0 	.word	0x1fff0ec0

0000a550 <__ssprint_r>:
    a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a554:	6893      	ldr	r3, [r2, #8]
    a556:	6817      	ldr	r7, [r2, #0]
    a558:	b083      	sub	sp, #12
    a55a:	4692      	mov	sl, r2
    a55c:	2b00      	cmp	r3, #0
    a55e:	d070      	beq.n	a642 <__ssprint_r+0xf2>
    a560:	4681      	mov	r9, r0
    a562:	688a      	ldr	r2, [r1, #8]
    a564:	6808      	ldr	r0, [r1, #0]
    a566:	460c      	mov	r4, r1
    a568:	3708      	adds	r7, #8
    a56a:	e043      	b.n	a5f4 <__ssprint_r+0xa4>
    a56c:	89a3      	ldrh	r3, [r4, #12]
    a56e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    a572:	d02e      	beq.n	a5d2 <__ssprint_r+0x82>
    a574:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    a578:	eba0 0801 	sub.w	r8, r0, r1
    a57c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    a580:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    a584:	f108 0001 	add.w	r0, r8, #1
    a588:	1076      	asrs	r6, r6, #1
    a58a:	4428      	add	r0, r5
    a58c:	42b0      	cmp	r0, r6
    a58e:	4632      	mov	r2, r6
    a590:	bf84      	itt	hi
    a592:	4606      	movhi	r6, r0
    a594:	4632      	movhi	r2, r6
    a596:	055b      	lsls	r3, r3, #21
    a598:	d537      	bpl.n	a60a <__ssprint_r+0xba>
    a59a:	4611      	mov	r1, r2
    a59c:	4648      	mov	r0, r9
    a59e:	f7fb f96b 	bl	5878 <_malloc_r>
    a5a2:	9001      	str	r0, [sp, #4]
    a5a4:	2800      	cmp	r0, #0
    a5a6:	d03a      	beq.n	a61e <__ssprint_r+0xce>
    a5a8:	4642      	mov	r2, r8
    a5aa:	6921      	ldr	r1, [r4, #16]
    a5ac:	f7f9 fca0 	bl	3ef0 <memcpy>
    a5b0:	89a2      	ldrh	r2, [r4, #12]
    a5b2:	9b01      	ldr	r3, [sp, #4]
    a5b4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    a5b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a5bc:	81a2      	strh	r2, [r4, #12]
    a5be:	eba6 0208 	sub.w	r2, r6, r8
    a5c2:	eb03 0008 	add.w	r0, r3, r8
    a5c6:	6166      	str	r6, [r4, #20]
    a5c8:	60a2      	str	r2, [r4, #8]
    a5ca:	6123      	str	r3, [r4, #16]
    a5cc:	6020      	str	r0, [r4, #0]
    a5ce:	462e      	mov	r6, r5
    a5d0:	46a8      	mov	r8, r5
    a5d2:	4642      	mov	r2, r8
    a5d4:	4659      	mov	r1, fp
    a5d6:	f7fb ff87 	bl	64e8 <memmove>
    a5da:	f8da 3008 	ldr.w	r3, [sl, #8]
    a5de:	68a2      	ldr	r2, [r4, #8]
    a5e0:	6820      	ldr	r0, [r4, #0]
    a5e2:	1b92      	subs	r2, r2, r6
    a5e4:	4440      	add	r0, r8
    a5e6:	1b5b      	subs	r3, r3, r5
    a5e8:	60a2      	str	r2, [r4, #8]
    a5ea:	6020      	str	r0, [r4, #0]
    a5ec:	f8ca 3008 	str.w	r3, [sl, #8]
    a5f0:	b33b      	cbz	r3, a642 <__ssprint_r+0xf2>
    a5f2:	3708      	adds	r7, #8
    a5f4:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    a5f8:	2d00      	cmp	r5, #0
    a5fa:	d0fa      	beq.n	a5f2 <__ssprint_r+0xa2>
    a5fc:	42aa      	cmp	r2, r5
    a5fe:	4616      	mov	r6, r2
    a600:	4690      	mov	r8, r2
    a602:	d9b3      	bls.n	a56c <__ssprint_r+0x1c>
    a604:	462e      	mov	r6, r5
    a606:	46a8      	mov	r8, r5
    a608:	e7e3      	b.n	a5d2 <__ssprint_r+0x82>
    a60a:	4648      	mov	r0, r9
    a60c:	f7fb fbf0 	bl	5df0 <_realloc_r>
    a610:	4603      	mov	r3, r0
    a612:	2800      	cmp	r0, #0
    a614:	d1d3      	bne.n	a5be <__ssprint_r+0x6e>
    a616:	6921      	ldr	r1, [r4, #16]
    a618:	4648      	mov	r0, r9
    a61a:	f7fc f9df 	bl	69dc <_free_r>
    a61e:	89a3      	ldrh	r3, [r4, #12]
    a620:	220c      	movs	r2, #12
    a622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a626:	f8c9 2000 	str.w	r2, [r9]
    a62a:	f04f 30ff 	mov.w	r0, #4294967295
    a62e:	81a3      	strh	r3, [r4, #12]
    a630:	2200      	movs	r2, #0
    a632:	2300      	movs	r3, #0
    a634:	f8ca 2008 	str.w	r2, [sl, #8]
    a638:	f8ca 3004 	str.w	r3, [sl, #4]
    a63c:	b003      	add	sp, #12
    a63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a642:	2000      	movs	r0, #0
    a644:	2300      	movs	r3, #0
    a646:	f8ca 3004 	str.w	r3, [sl, #4]
    a64a:	b003      	add	sp, #12
    a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a650 <__sprint_r.part.0>:
    a650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a654:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    a656:	049c      	lsls	r4, r3, #18
    a658:	4690      	mov	r8, r2
    a65a:	d52d      	bpl.n	a6b8 <__sprint_r.part.0+0x68>
    a65c:	6893      	ldr	r3, [r2, #8]
    a65e:	6812      	ldr	r2, [r2, #0]
    a660:	b343      	cbz	r3, a6b4 <__sprint_r.part.0+0x64>
    a662:	468b      	mov	fp, r1
    a664:	4606      	mov	r6, r0
    a666:	f102 0908 	add.w	r9, r2, #8
    a66a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    a66e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    a672:	d015      	beq.n	a6a0 <__sprint_r.part.0+0x50>
    a674:	3d04      	subs	r5, #4
    a676:	2400      	movs	r4, #0
    a678:	e001      	b.n	a67e <__sprint_r.part.0+0x2e>
    a67a:	42a7      	cmp	r7, r4
    a67c:	d00e      	beq.n	a69c <__sprint_r.part.0+0x4c>
    a67e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    a682:	465a      	mov	r2, fp
    a684:	4630      	mov	r0, r6
    a686:	f001 fa5b 	bl	bb40 <_fputwc_r>
    a68a:	1c43      	adds	r3, r0, #1
    a68c:	f104 0401 	add.w	r4, r4, #1
    a690:	d1f3      	bne.n	a67a <__sprint_r.part.0+0x2a>
    a692:	2300      	movs	r3, #0
    a694:	e9c8 3301 	strd	r3, r3, [r8, #4]
    a698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a69c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a6a0:	f02a 0a03 	bic.w	sl, sl, #3
    a6a4:	eba3 030a 	sub.w	r3, r3, sl
    a6a8:	f8c8 3008 	str.w	r3, [r8, #8]
    a6ac:	f109 0908 	add.w	r9, r9, #8
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	d1da      	bne.n	a66a <__sprint_r.part.0+0x1a>
    a6b4:	2000      	movs	r0, #0
    a6b6:	e7ec      	b.n	a692 <__sprint_r.part.0+0x42>
    a6b8:	f001 f80c 	bl	b6d4 <__sfvwrite_r>
    a6bc:	2300      	movs	r3, #0
    a6be:	e9c8 3301 	strd	r3, r3, [r8, #4]
    a6c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6c6:	bf00      	nop

0000a6c8 <_vfiprintf_r>:
    a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6cc:	ed2d 8b02 	vpush	{d8}
    a6d0:	b0c5      	sub	sp, #276	; 0x114
    a6d2:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    a6d6:	4683      	mov	fp, r0
    a6d8:	ee08 1a10 	vmov	s16, r1
    a6dc:	4616      	mov	r6, r2
    a6de:	2100      	movs	r1, #0
    a6e0:	2208      	movs	r2, #8
    a6e2:	4650      	mov	r0, sl
    a6e4:	461c      	mov	r4, r3
    a6e6:	9307      	str	r3, [sp, #28]
    a6e8:	f7fb ff7a 	bl	65e0 <memset>
    a6ec:	f1bb 0f00 	cmp.w	fp, #0
    a6f0:	d004      	beq.n	a6fc <_vfiprintf_r+0x34>
    a6f2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    a6f6:	2b00      	cmp	r3, #0
    a6f8:	f000 86a0 	beq.w	b43c <_vfiprintf_r+0xd74>
    a6fc:	ee18 2a10 	vmov	r2, s16
    a700:	6e53      	ldr	r3, [r2, #100]	; 0x64
    a702:	07db      	lsls	r3, r3, #31
    a704:	f140 8513 	bpl.w	b12e <_vfiprintf_r+0xa66>
    a708:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    a70c:	b28a      	uxth	r2, r1
    a70e:	0495      	lsls	r5, r2, #18
    a710:	d40b      	bmi.n	a72a <_vfiprintf_r+0x62>
    a712:	ee18 3a10 	vmov	r3, s16
    a716:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    a71a:	8199      	strh	r1, [r3, #12]
    a71c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a71e:	b28a      	uxth	r2, r1
    a720:	ee18 1a10 	vmov	r1, s16
    a724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    a728:	664b      	str	r3, [r1, #100]	; 0x64
    a72a:	0710      	lsls	r0, r2, #28
    a72c:	f140 8105 	bpl.w	a93a <_vfiprintf_r+0x272>
    a730:	ee18 3a10 	vmov	r3, s16
    a734:	691b      	ldr	r3, [r3, #16]
    a736:	2b00      	cmp	r3, #0
    a738:	f000 80ff 	beq.w	a93a <_vfiprintf_r+0x272>
    a73c:	f002 031a 	and.w	r3, r2, #26
    a740:	2b0a      	cmp	r3, #10
    a742:	f000 810a 	beq.w	a95a <_vfiprintf_r+0x292>
    a746:	2300      	movs	r3, #0
    a748:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    a74c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    a750:	aa1b      	add	r2, sp, #108	; 0x6c
    a752:	930c      	str	r3, [sp, #48]	; 0x30
    a754:	9218      	str	r2, [sp, #96]	; 0x60
    a756:	4691      	mov	r9, r2
    a758:	930b      	str	r3, [sp, #44]	; 0x2c
    a75a:	9305      	str	r3, [sp, #20]
    a75c:	46b0      	mov	r8, r6
    a75e:	4644      	mov	r4, r8
    a760:	4ba8      	ldr	r3, [pc, #672]	; (aa04 <_vfiprintf_r+0x33c>)
    a762:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    a766:	f7fb ffbf 	bl	66e8 <__locale_mb_cur_max>
    a76a:	4622      	mov	r2, r4
    a76c:	4603      	mov	r3, r0
    a76e:	a912      	add	r1, sp, #72	; 0x48
    a770:	f8cd a000 	str.w	sl, [sp]
    a774:	4658      	mov	r0, fp
    a776:	47a8      	blx	r5
    a778:	2800      	cmp	r0, #0
    a77a:	f000 8145 	beq.w	aa08 <_vfiprintf_r+0x340>
    a77e:	f2c0 8139 	blt.w	a9f4 <_vfiprintf_r+0x32c>
    a782:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a784:	2a25      	cmp	r2, #37	; 0x25
    a786:	4603      	mov	r3, r0
    a788:	d001      	beq.n	a78e <_vfiprintf_r+0xc6>
    a78a:	441c      	add	r4, r3
    a78c:	e7e8      	b.n	a760 <_vfiprintf_r+0x98>
    a78e:	ebb4 0608 	subs.w	r6, r4, r8
    a792:	4605      	mov	r5, r0
    a794:	f040 813c 	bne.w	aa10 <_vfiprintf_r+0x348>
    a798:	2300      	movs	r3, #0
    a79a:	7861      	ldrb	r1, [r4, #1]
    a79c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    a7a0:	f104 0801 	add.w	r8, r4, #1
    a7a4:	9306      	str	r3, [sp, #24]
    a7a6:	f04f 37ff 	mov.w	r7, #4294967295
    a7aa:	461e      	mov	r6, r3
    a7ac:	242b      	movs	r4, #43	; 0x2b
    a7ae:	f108 0801 	add.w	r8, r8, #1
    a7b2:	f1a1 0320 	sub.w	r3, r1, #32
    a7b6:	2b5a      	cmp	r3, #90	; 0x5a
    a7b8:	f200 8178 	bhi.w	aaac <_vfiprintf_r+0x3e4>
    a7bc:	e8df f013 	tbh	[pc, r3, lsl #1]
    a7c0:	017602b5 	.word	0x017602b5
    a7c4:	02b00176 	.word	0x02b00176
    a7c8:	01760176 	.word	0x01760176
    a7cc:	006a0176 	.word	0x006a0176
    a7d0:	01760176 	.word	0x01760176
    a7d4:	028d027d 	.word	0x028d027d
    a7d8:	02880176 	.word	0x02880176
    a7dc:	01760297 	.word	0x01760297
    a7e0:	005b0292 	.word	0x005b0292
    a7e4:	005b005b 	.word	0x005b005b
    a7e8:	005b005b 	.word	0x005b005b
    a7ec:	005b005b 	.word	0x005b005b
    a7f0:	005b005b 	.word	0x005b005b
    a7f4:	01760176 	.word	0x01760176
    a7f8:	01760176 	.word	0x01760176
    a7fc:	01760176 	.word	0x01760176
    a800:	01760176 	.word	0x01760176
    a804:	025c0176 	.word	0x025c0176
    a808:	01760084 	.word	0x01760084
    a80c:	01760176 	.word	0x01760176
    a810:	01760176 	.word	0x01760176
    a814:	01760176 	.word	0x01760176
    a818:	01760176 	.word	0x01760176
    a81c:	00e80176 	.word	0x00e80176
    a820:	01760176 	.word	0x01760176
    a824:	02330176 	.word	0x02330176
    a828:	02da0176 	.word	0x02da0176
    a82c:	01760176 	.word	0x01760176
    a830:	0176058b 	.word	0x0176058b
    a834:	01760176 	.word	0x01760176
    a838:	01760176 	.word	0x01760176
    a83c:	01760176 	.word	0x01760176
    a840:	01760176 	.word	0x01760176
    a844:	025c0176 	.word	0x025c0176
    a848:	01760086 	.word	0x01760086
    a84c:	01760176 	.word	0x01760176
    a850:	008602cd 	.word	0x008602cd
    a854:	0176007f 	.word	0x0176007f
    a858:	017602c0 	.word	0x017602c0
    a85c:	00ea02fd 	.word	0x00ea02fd
    a860:	007f02ed 	.word	0x007f02ed
    a864:	02330176 	.word	0x02330176
    a868:	0569007c 	.word	0x0569007c
    a86c:	01760176 	.word	0x01760176
    a870:	0176056b 	.word	0x0176056b
    a874:	007c      	.short	0x007c
    a876:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    a87a:	2200      	movs	r2, #0
    a87c:	f818 1b01 	ldrb.w	r1, [r8], #1
    a880:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a884:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    a888:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    a88c:	2b09      	cmp	r3, #9
    a88e:	d9f5      	bls.n	a87c <_vfiprintf_r+0x1b4>
    a890:	9206      	str	r2, [sp, #24]
    a892:	e78e      	b.n	a7b2 <_vfiprintf_r+0xea>
    a894:	4658      	mov	r0, fp
    a896:	f7fe fc9d 	bl	91d4 <_localeconv_r>
    a89a:	6843      	ldr	r3, [r0, #4]
    a89c:	930d      	str	r3, [sp, #52]	; 0x34
    a89e:	4618      	mov	r0, r3
    a8a0:	f7fb ffce 	bl	6840 <strlen>
    a8a4:	900e      	str	r0, [sp, #56]	; 0x38
    a8a6:	4605      	mov	r5, r0
    a8a8:	4658      	mov	r0, fp
    a8aa:	f7fe fc93 	bl	91d4 <_localeconv_r>
    a8ae:	6883      	ldr	r3, [r0, #8]
    a8b0:	930b      	str	r3, [sp, #44]	; 0x2c
    a8b2:	2d00      	cmp	r5, #0
    a8b4:	f040 84d6 	bne.w	b264 <_vfiprintf_r+0xb9c>
    a8b8:	f898 1000 	ldrb.w	r1, [r8]
    a8bc:	e777      	b.n	a7ae <_vfiprintf_r+0xe6>
    a8be:	f898 1000 	ldrb.w	r1, [r8]
    a8c2:	f046 0620 	orr.w	r6, r6, #32
    a8c6:	e772      	b.n	a7ae <_vfiprintf_r+0xe6>
    a8c8:	f046 0610 	orr.w	r6, r6, #16
    a8cc:	06b4      	lsls	r4, r6, #26
    a8ce:	f140 818e 	bpl.w	abee <_vfiprintf_r+0x526>
    a8d2:	9b07      	ldr	r3, [sp, #28]
    a8d4:	3307      	adds	r3, #7
    a8d6:	f023 0307 	bic.w	r3, r3, #7
    a8da:	461a      	mov	r2, r3
    a8dc:	6859      	ldr	r1, [r3, #4]
    a8de:	f852 3b08 	ldr.w	r3, [r2], #8
    a8e2:	9207      	str	r2, [sp, #28]
    a8e4:	460a      	mov	r2, r1
    a8e6:	2900      	cmp	r1, #0
    a8e8:	f2c0 8470 	blt.w	b1cc <_vfiprintf_r+0xb04>
    a8ec:	1c79      	adds	r1, r7, #1
    a8ee:	f000 85a2 	beq.w	b436 <_vfiprintf_r+0xd6e>
    a8f2:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    a8f6:	9103      	str	r1, [sp, #12]
    a8f8:	ea53 0102 	orrs.w	r1, r3, r2
    a8fc:	f000 843f 	beq.w	b17e <_vfiprintf_r+0xab6>
    a900:	2b0a      	cmp	r3, #10
    a902:	f172 0100 	sbcs.w	r1, r2, #0
    a906:	f080 8541 	bcs.w	b38c <_vfiprintf_r+0xcc4>
    a90a:	3330      	adds	r3, #48	; 0x30
    a90c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    a910:	9e03      	ldr	r6, [sp, #12]
    a912:	2301      	movs	r3, #1
    a914:	9304      	str	r3, [sp, #16]
    a916:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    a91a:	9b04      	ldr	r3, [sp, #16]
    a91c:	42bb      	cmp	r3, r7
    a91e:	bfb8      	it	lt
    a920:	463b      	movlt	r3, r7
    a922:	9303      	str	r3, [sp, #12]
    a924:	2300      	movs	r3, #0
    a926:	9308      	str	r3, [sp, #32]
    a928:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    a92c:	2b00      	cmp	r3, #0
    a92e:	f000 80cb 	beq.w	aac8 <_vfiprintf_r+0x400>
    a932:	9b03      	ldr	r3, [sp, #12]
    a934:	3301      	adds	r3, #1
    a936:	9303      	str	r3, [sp, #12]
    a938:	e0c6      	b.n	aac8 <_vfiprintf_r+0x400>
    a93a:	ee18 1a10 	vmov	r1, s16
    a93e:	4658      	mov	r0, fp
    a940:	ee18 5a10 	vmov	r5, s16
    a944:	f001 f840 	bl	b9c8 <__swsetup_r>
    a948:	2800      	cmp	r0, #0
    a94a:	f040 8652 	bne.w	b5f2 <_vfiprintf_r+0xf2a>
    a94e:	89aa      	ldrh	r2, [r5, #12]
    a950:	f002 031a 	and.w	r3, r2, #26
    a954:	2b0a      	cmp	r3, #10
    a956:	f47f aef6 	bne.w	a746 <_vfiprintf_r+0x7e>
    a95a:	ee18 1a10 	vmov	r1, s16
    a95e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    a962:	2b00      	cmp	r3, #0
    a964:	f6ff aeef 	blt.w	a746 <_vfiprintf_r+0x7e>
    a968:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    a96a:	07db      	lsls	r3, r3, #31
    a96c:	d402      	bmi.n	a974 <_vfiprintf_r+0x2ac>
    a96e:	0597      	lsls	r7, r2, #22
    a970:	f140 8612 	bpl.w	b598 <_vfiprintf_r+0xed0>
    a974:	ee18 1a10 	vmov	r1, s16
    a978:	4623      	mov	r3, r4
    a97a:	4632      	mov	r2, r6
    a97c:	4658      	mov	r0, fp
    a97e:	f000 fe69 	bl	b654 <__sbprintf>
    a982:	9005      	str	r0, [sp, #20]
    a984:	9805      	ldr	r0, [sp, #20]
    a986:	b045      	add	sp, #276	; 0x114
    a988:	ecbd 8b02 	vpop	{d8}
    a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a990:	f046 0610 	orr.w	r6, r6, #16
    a994:	f016 0220 	ands.w	r2, r6, #32
    a998:	f000 8136 	beq.w	ac08 <_vfiprintf_r+0x540>
    a99c:	9b07      	ldr	r3, [sp, #28]
    a99e:	3307      	adds	r3, #7
    a9a0:	f023 0307 	bic.w	r3, r3, #7
    a9a4:	4619      	mov	r1, r3
    a9a6:	685a      	ldr	r2, [r3, #4]
    a9a8:	f851 3b08 	ldr.w	r3, [r1], #8
    a9ac:	9107      	str	r1, [sp, #28]
    a9ae:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    a9b2:	9103      	str	r1, [sp, #12]
    a9b4:	2100      	movs	r1, #0
    a9b6:	2000      	movs	r0, #0
    a9b8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    a9bc:	1c78      	adds	r0, r7, #1
    a9be:	f000 8210 	beq.w	ade2 <_vfiprintf_r+0x71a>
    a9c2:	9803      	ldr	r0, [sp, #12]
    a9c4:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    a9c8:	ea53 0002 	orrs.w	r0, r3, r2
    a9cc:	f040 8208 	bne.w	ade0 <_vfiprintf_r+0x718>
    a9d0:	2f00      	cmp	r7, #0
    a9d2:	f040 8538 	bne.w	b446 <_vfiprintf_r+0xd7e>
    a9d6:	2900      	cmp	r1, #0
    a9d8:	f040 83d5 	bne.w	b186 <_vfiprintf_r+0xabe>
    a9dc:	9b03      	ldr	r3, [sp, #12]
    a9de:	f013 0301 	ands.w	r3, r3, #1
    a9e2:	9304      	str	r3, [sp, #16]
    a9e4:	f000 8411 	beq.w	b20a <_vfiprintf_r+0xb42>
    a9e8:	2330      	movs	r3, #48	; 0x30
    a9ea:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    a9ee:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    a9f2:	e792      	b.n	a91a <_vfiprintf_r+0x252>
    a9f4:	2208      	movs	r2, #8
    a9f6:	2100      	movs	r1, #0
    a9f8:	4650      	mov	r0, sl
    a9fa:	f7fb fdf1 	bl	65e0 <memset>
    a9fe:	2301      	movs	r3, #1
    aa00:	441c      	add	r4, r3
    aa02:	e6ad      	b.n	a760 <_vfiprintf_r+0x98>
    aa04:	1fff0c30 	.word	0x1fff0c30
    aa08:	ebb4 0608 	subs.w	r6, r4, r8
    aa0c:	4605      	mov	r5, r0
    aa0e:	d01b      	beq.n	aa48 <_vfiprintf_r+0x380>
    aa10:	9b19      	ldr	r3, [sp, #100]	; 0x64
    aa12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    aa14:	3301      	adds	r3, #1
    aa16:	4432      	add	r2, r6
    aa18:	2b07      	cmp	r3, #7
    aa1a:	e9c9 8600 	strd	r8, r6, [r9]
    aa1e:	921a      	str	r2, [sp, #104]	; 0x68
    aa20:	9319      	str	r3, [sp, #100]	; 0x64
    aa22:	dd1c      	ble.n	aa5e <_vfiprintf_r+0x396>
    aa24:	2a00      	cmp	r2, #0
    aa26:	f000 83a6 	beq.w	b176 <_vfiprintf_r+0xaae>
    aa2a:	ee18 1a10 	vmov	r1, s16
    aa2e:	aa18      	add	r2, sp, #96	; 0x60
    aa30:	4658      	mov	r0, fp
    aa32:	f7ff fe0d 	bl	a650 <__sprint_r.part.0>
    aa36:	bb20      	cbnz	r0, aa82 <_vfiprintf_r+0x3ba>
    aa38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    aa3c:	9b05      	ldr	r3, [sp, #20]
    aa3e:	4433      	add	r3, r6
    aa40:	9305      	str	r3, [sp, #20]
    aa42:	2d00      	cmp	r5, #0
    aa44:	f47f aea8 	bne.w	a798 <_vfiprintf_r+0xd0>
    aa48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	f040 85c1 	bne.w	b5d2 <_vfiprintf_r+0xf0a>
    aa50:	ee18 3a10 	vmov	r3, s16
    aa54:	2200      	movs	r2, #0
    aa56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    aa5a:	9219      	str	r2, [sp, #100]	; 0x64
    aa5c:	e015      	b.n	aa8a <_vfiprintf_r+0x3c2>
    aa5e:	f109 0908 	add.w	r9, r9, #8
    aa62:	e7eb      	b.n	aa3c <_vfiprintf_r+0x374>
    aa64:	ee18 1a10 	vmov	r1, s16
    aa68:	aa18      	add	r2, sp, #96	; 0x60
    aa6a:	4658      	mov	r0, fp
    aa6c:	f7ff fdf0 	bl	a650 <__sprint_r.part.0>
    aa70:	2800      	cmp	r0, #0
    aa72:	f000 80a6 	beq.w	abc2 <_vfiprintf_r+0x4fa>
    aa76:	9b08      	ldr	r3, [sp, #32]
    aa78:	b11b      	cbz	r3, aa82 <_vfiprintf_r+0x3ba>
    aa7a:	9908      	ldr	r1, [sp, #32]
    aa7c:	4658      	mov	r0, fp
    aa7e:	f7fb ffad 	bl	69dc <_free_r>
    aa82:	ee18 3a10 	vmov	r3, s16
    aa86:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    aa8a:	ee18 2a10 	vmov	r2, s16
    aa8e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    aa90:	f012 0f01 	tst.w	r2, #1
    aa94:	b29a      	uxth	r2, r3
    aa96:	f000 80a0 	beq.w	abda <_vfiprintf_r+0x512>
    aa9a:	0650      	lsls	r0, r2, #25
    aa9c:	f100 85b2 	bmi.w	b604 <_vfiprintf_r+0xf3c>
    aaa0:	9805      	ldr	r0, [sp, #20]
    aaa2:	b045      	add	sp, #276	; 0x114
    aaa4:	ecbd 8b02 	vpop	{d8}
    aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaac:	2900      	cmp	r1, #0
    aaae:	d0cb      	beq.n	aa48 <_vfiprintf_r+0x380>
    aab0:	2300      	movs	r3, #0
    aab2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    aab6:	2301      	movs	r3, #1
    aab8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    aabc:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    aac0:	ac2b      	add	r4, sp, #172	; 0xac
    aac2:	2300      	movs	r3, #0
    aac4:	9308      	str	r3, [sp, #32]
    aac6:	461f      	mov	r7, r3
    aac8:	f016 0302 	ands.w	r3, r6, #2
    aacc:	9309      	str	r3, [sp, #36]	; 0x24
    aace:	d002      	beq.n	aad6 <_vfiprintf_r+0x40e>
    aad0:	9b03      	ldr	r3, [sp, #12]
    aad2:	3302      	adds	r3, #2
    aad4:	9303      	str	r3, [sp, #12]
    aad6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    aada:	930a      	str	r3, [sp, #40]	; 0x28
    aadc:	d105      	bne.n	aaea <_vfiprintf_r+0x422>
    aade:	9b06      	ldr	r3, [sp, #24]
    aae0:	9a03      	ldr	r2, [sp, #12]
    aae2:	1a9d      	subs	r5, r3, r2
    aae4:	2d00      	cmp	r5, #0
    aae6:	f300 827b 	bgt.w	afe0 <_vfiprintf_r+0x918>
    aaea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    aaee:	1c41      	adds	r1, r0, #1
    aaf0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    aaf4:	b182      	cbz	r2, ab18 <_vfiprintf_r+0x450>
    aaf6:	2201      	movs	r2, #1
    aaf8:	3301      	adds	r3, #1
    aafa:	f8c9 2004 	str.w	r2, [r9, #4]
    aafe:	2907      	cmp	r1, #7
    ab00:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    ab04:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    ab08:	f8c9 2000 	str.w	r2, [r9]
    ab0c:	f300 824a 	bgt.w	afa4 <_vfiprintf_r+0x8dc>
    ab10:	4608      	mov	r0, r1
    ab12:	f109 0908 	add.w	r9, r9, #8
    ab16:	3101      	adds	r1, #1
    ab18:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab1a:	b1e2      	cbz	r2, ab56 <_vfiprintf_r+0x48e>
    ab1c:	aa11      	add	r2, sp, #68	; 0x44
    ab1e:	3302      	adds	r3, #2
    ab20:	f8c9 2000 	str.w	r2, [r9]
    ab24:	2907      	cmp	r1, #7
    ab26:	f04f 0202 	mov.w	r2, #2
    ab2a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    ab2e:	f8c9 2004 	str.w	r2, [r9, #4]
    ab32:	f340 8250 	ble.w	afd6 <_vfiprintf_r+0x90e>
    ab36:	2b00      	cmp	r3, #0
    ab38:	f000 8343 	beq.w	b1c2 <_vfiprintf_r+0xafa>
    ab3c:	ee18 1a10 	vmov	r1, s16
    ab40:	aa18      	add	r2, sp, #96	; 0x60
    ab42:	4658      	mov	r0, fp
    ab44:	f7ff fd84 	bl	a650 <__sprint_r.part.0>
    ab48:	2800      	cmp	r0, #0
    ab4a:	d194      	bne.n	aa76 <_vfiprintf_r+0x3ae>
    ab4c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ab50:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ab54:	1c41      	adds	r1, r0, #1
    ab56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ab58:	2a80      	cmp	r2, #128	; 0x80
    ab5a:	f000 8184 	beq.w	ae66 <_vfiprintf_r+0x79e>
    ab5e:	9a04      	ldr	r2, [sp, #16]
    ab60:	1abd      	subs	r5, r7, r2
    ab62:	2d00      	cmp	r5, #0
    ab64:	f300 81d7 	bgt.w	af16 <_vfiprintf_r+0x84e>
    ab68:	9a04      	ldr	r2, [sp, #16]
    ab6a:	f8c9 4000 	str.w	r4, [r9]
    ab6e:	4413      	add	r3, r2
    ab70:	2907      	cmp	r1, #7
    ab72:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    ab76:	f8c9 2004 	str.w	r2, [r9, #4]
    ab7a:	f340 816e 	ble.w	ae5a <_vfiprintf_r+0x792>
    ab7e:	2b00      	cmp	r3, #0
    ab80:	f000 8275 	beq.w	b06e <_vfiprintf_r+0x9a6>
    ab84:	ee18 1a10 	vmov	r1, s16
    ab88:	aa18      	add	r2, sp, #96	; 0x60
    ab8a:	4658      	mov	r0, fp
    ab8c:	f7ff fd60 	bl	a650 <__sprint_r.part.0>
    ab90:	2800      	cmp	r0, #0
    ab92:	f47f af70 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    ab96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ab98:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ab9c:	0775      	lsls	r5, r6, #29
    ab9e:	d505      	bpl.n	abac <_vfiprintf_r+0x4e4>
    aba0:	9a06      	ldr	r2, [sp, #24]
    aba2:	9903      	ldr	r1, [sp, #12]
    aba4:	1a54      	subs	r4, r2, r1
    aba6:	2c00      	cmp	r4, #0
    aba8:	f300 826b 	bgt.w	b082 <_vfiprintf_r+0x9ba>
    abac:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    abb0:	9803      	ldr	r0, [sp, #12]
    abb2:	4281      	cmp	r1, r0
    abb4:	bfac      	ite	ge
    abb6:	1852      	addge	r2, r2, r1
    abb8:	1812      	addlt	r2, r2, r0
    abba:	9205      	str	r2, [sp, #20]
    abbc:	2b00      	cmp	r3, #0
    abbe:	f47f af51 	bne.w	aa64 <_vfiprintf_r+0x39c>
    abc2:	9908      	ldr	r1, [sp, #32]
    abc4:	2300      	movs	r3, #0
    abc6:	9319      	str	r3, [sp, #100]	; 0x64
    abc8:	2900      	cmp	r1, #0
    abca:	f000 8149 	beq.w	ae60 <_vfiprintf_r+0x798>
    abce:	4658      	mov	r0, fp
    abd0:	f7fb ff04 	bl	69dc <_free_r>
    abd4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    abd8:	e5c1      	b.n	a75e <_vfiprintf_r+0x96>
    abda:	059c      	lsls	r4, r3, #22
    abdc:	f53f af5d 	bmi.w	aa9a <_vfiprintf_r+0x3d2>
    abe0:	ee18 4a10 	vmov	r4, s16
    abe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    abe6:	f7fb fe1b 	bl	6820 <__retarget_lock_release_recursive>
    abea:	89a2      	ldrh	r2, [r4, #12]
    abec:	e755      	b.n	aa9a <_vfiprintf_r+0x3d2>
    abee:	06f0      	lsls	r0, r6, #27
    abf0:	9a07      	ldr	r2, [sp, #28]
    abf2:	f100 831f 	bmi.w	b234 <_vfiprintf_r+0xb6c>
    abf6:	0671      	lsls	r1, r6, #25
    abf8:	f140 8319 	bpl.w	b22e <_vfiprintf_r+0xb66>
    abfc:	f932 3b04 	ldrsh.w	r3, [r2], #4
    ac00:	9207      	str	r2, [sp, #28]
    ac02:	17da      	asrs	r2, r3, #31
    ac04:	4611      	mov	r1, r2
    ac06:	e66e      	b.n	a8e6 <_vfiprintf_r+0x21e>
    ac08:	f016 0310 	ands.w	r3, r6, #16
    ac0c:	9907      	ldr	r1, [sp, #28]
    ac0e:	f040 8309 	bne.w	b224 <_vfiprintf_r+0xb5c>
    ac12:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    ac16:	f000 8301 	beq.w	b21c <_vfiprintf_r+0xb54>
    ac1a:	461a      	mov	r2, r3
    ac1c:	f851 3b04 	ldr.w	r3, [r1], #4
    ac20:	9107      	str	r1, [sp, #28]
    ac22:	b29b      	uxth	r3, r3
    ac24:	e6c3      	b.n	a9ae <_vfiprintf_r+0x2e6>
    ac26:	9b07      	ldr	r3, [sp, #28]
    ac28:	461a      	mov	r2, r3
    ac2a:	2300      	movs	r3, #0
    ac2c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    ac30:	4613      	mov	r3, r2
    ac32:	f853 4b04 	ldr.w	r4, [r3], #4
    ac36:	9303      	str	r3, [sp, #12]
    ac38:	2c00      	cmp	r4, #0
    ac3a:	f000 8412 	beq.w	b462 <_vfiprintf_r+0xd9a>
    ac3e:	2953      	cmp	r1, #83	; 0x53
    ac40:	f000 8365 	beq.w	b30e <_vfiprintf_r+0xc46>
    ac44:	f016 0510 	ands.w	r5, r6, #16
    ac48:	f040 8361 	bne.w	b30e <_vfiprintf_r+0xc46>
    ac4c:	1c7b      	adds	r3, r7, #1
    ac4e:	f000 84b3 	beq.w	b5b8 <_vfiprintf_r+0xef0>
    ac52:	463a      	mov	r2, r7
    ac54:	4629      	mov	r1, r5
    ac56:	4620      	mov	r0, r4
    ac58:	f7fe fada 	bl	9210 <memchr>
    ac5c:	9008      	str	r0, [sp, #32]
    ac5e:	2800      	cmp	r0, #0
    ac60:	f000 849f 	beq.w	b5a2 <_vfiprintf_r+0xeda>
    ac64:	1b03      	subs	r3, r0, r4
    ac66:	9a03      	ldr	r2, [sp, #12]
    ac68:	9304      	str	r3, [sp, #16]
    ac6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ac6e:	462f      	mov	r7, r5
    ac70:	9207      	str	r2, [sp, #28]
    ac72:	9303      	str	r3, [sp, #12]
    ac74:	9508      	str	r5, [sp, #32]
    ac76:	e657      	b.n	a928 <_vfiprintf_r+0x260>
    ac78:	2943      	cmp	r1, #67	; 0x43
    ac7a:	d002      	beq.n	ac82 <_vfiprintf_r+0x5ba>
    ac7c:	06f5      	lsls	r5, r6, #27
    ac7e:	f140 832d 	bpl.w	b2dc <_vfiprintf_r+0xc14>
    ac82:	9d07      	ldr	r5, [sp, #28]
    ac84:	2208      	movs	r2, #8
    ac86:	2100      	movs	r1, #0
    ac88:	a816      	add	r0, sp, #88	; 0x58
    ac8a:	ac2b      	add	r4, sp, #172	; 0xac
    ac8c:	f7fb fca8 	bl	65e0 <memset>
    ac90:	ab16      	add	r3, sp, #88	; 0x58
    ac92:	f855 2b04 	ldr.w	r2, [r5], #4
    ac96:	4621      	mov	r1, r4
    ac98:	4658      	mov	r0, fp
    ac9a:	f7ff fc13 	bl	a4c4 <_wcrtomb_r>
    ac9e:	4603      	mov	r3, r0
    aca0:	3301      	adds	r3, #1
    aca2:	9004      	str	r0, [sp, #16]
    aca4:	f000 84b3 	beq.w	b60e <_vfiprintf_r+0xf46>
    aca8:	9b04      	ldr	r3, [sp, #16]
    acaa:	9507      	str	r5, [sp, #28]
    acac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    acb0:	9303      	str	r3, [sp, #12]
    acb2:	2300      	movs	r3, #0
    acb4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    acb8:	e703      	b.n	aac2 <_vfiprintf_r+0x3fa>
    acba:	9b07      	ldr	r3, [sp, #28]
    acbc:	f853 2b04 	ldr.w	r2, [r3], #4
    acc0:	9206      	str	r2, [sp, #24]
    acc2:	2a00      	cmp	r2, #0
    acc4:	f280 829c 	bge.w	b200 <_vfiprintf_r+0xb38>
    acc8:	9a06      	ldr	r2, [sp, #24]
    acca:	4252      	negs	r2, r2
    accc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    acd0:	f898 1000 	ldrb.w	r1, [r8]
    acd4:	f046 0604 	orr.w	r6, r6, #4
    acd8:	e569      	b.n	a7ae <_vfiprintf_r+0xe6>
    acda:	f898 1000 	ldrb.w	r1, [r8]
    acde:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    ace2:	e564      	b.n	a7ae <_vfiprintf_r+0xe6>
    ace4:	f898 1000 	ldrb.w	r1, [r8]
    ace8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    acec:	e55f      	b.n	a7ae <_vfiprintf_r+0xe6>
    acee:	4642      	mov	r2, r8
    acf0:	f812 1b01 	ldrb.w	r1, [r2], #1
    acf4:	292a      	cmp	r1, #42	; 0x2a
    acf6:	f000 8496 	beq.w	b626 <_vfiprintf_r+0xf5e>
    acfa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    acfe:	2b09      	cmp	r3, #9
    ad00:	4690      	mov	r8, r2
    ad02:	f04f 0700 	mov.w	r7, #0
    ad06:	f63f ad54 	bhi.w	a7b2 <_vfiprintf_r+0xea>
    ad0a:	f818 1b01 	ldrb.w	r1, [r8], #1
    ad0e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    ad12:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    ad16:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ad1a:	2b09      	cmp	r3, #9
    ad1c:	d9f5      	bls.n	ad0a <_vfiprintf_r+0x642>
    ad1e:	e548      	b.n	a7b2 <_vfiprintf_r+0xea>
    ad20:	f898 1000 	ldrb.w	r1, [r8]
    ad24:	f046 0601 	orr.w	r6, r6, #1
    ad28:	e541      	b.n	a7ae <_vfiprintf_r+0xe6>
    ad2a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    ad2e:	2b00      	cmp	r3, #0
    ad30:	f47f adc2 	bne.w	a8b8 <_vfiprintf_r+0x1f0>
    ad34:	2320      	movs	r3, #32
    ad36:	f898 1000 	ldrb.w	r1, [r8]
    ad3a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    ad3e:	e536      	b.n	a7ae <_vfiprintf_r+0xe6>
    ad40:	f898 1000 	ldrb.w	r1, [r8]
    ad44:	296c      	cmp	r1, #108	; 0x6c
    ad46:	bf03      	ittte	eq
    ad48:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    ad4c:	f046 0620 	orreq.w	r6, r6, #32
    ad50:	f108 0801 	addeq.w	r8, r8, #1
    ad54:	f046 0610 	orrne.w	r6, r6, #16
    ad58:	e529      	b.n	a7ae <_vfiprintf_r+0xe6>
    ad5a:	f898 1000 	ldrb.w	r1, [r8]
    ad5e:	2968      	cmp	r1, #104	; 0x68
    ad60:	bf03      	ittte	eq
    ad62:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    ad66:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    ad6a:	f108 0801 	addeq.w	r8, r8, #1
    ad6e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    ad72:	e51c      	b.n	a7ae <_vfiprintf_r+0xe6>
    ad74:	f046 0310 	orr.w	r3, r6, #16
    ad78:	9303      	str	r3, [sp, #12]
    ad7a:	9b03      	ldr	r3, [sp, #12]
    ad7c:	f013 0220 	ands.w	r2, r3, #32
    ad80:	f000 8206 	beq.w	b190 <_vfiprintf_r+0xac8>
    ad84:	9b07      	ldr	r3, [sp, #28]
    ad86:	3307      	adds	r3, #7
    ad88:	f023 0307 	bic.w	r3, r3, #7
    ad8c:	4619      	mov	r1, r3
    ad8e:	685a      	ldr	r2, [r3, #4]
    ad90:	f851 3b08 	ldr.w	r3, [r1], #8
    ad94:	9107      	str	r1, [sp, #28]
    ad96:	2101      	movs	r1, #1
    ad98:	e60d      	b.n	a9b6 <_vfiprintf_r+0x2ee>
    ad9a:	9a07      	ldr	r2, [sp, #28]
    ad9c:	f046 0302 	orr.w	r3, r6, #2
    ada0:	9303      	str	r3, [sp, #12]
    ada2:	f852 3b04 	ldr.w	r3, [r2], #4
    ada6:	9207      	str	r2, [sp, #28]
    ada8:	f647 0230 	movw	r2, #30768	; 0x7830
    adac:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    adb0:	4ab8      	ldr	r2, [pc, #736]	; (b094 <_vfiprintf_r+0x9cc>)
    adb2:	920c      	str	r2, [sp, #48]	; 0x30
    adb4:	2102      	movs	r1, #2
    adb6:	2200      	movs	r2, #0
    adb8:	e5fd      	b.n	a9b6 <_vfiprintf_r+0x2ee>
    adba:	06b7      	lsls	r7, r6, #26
    adbc:	f100 8248 	bmi.w	b250 <_vfiprintf_r+0xb88>
    adc0:	06f5      	lsls	r5, r6, #27
    adc2:	f100 8346 	bmi.w	b452 <_vfiprintf_r+0xd8a>
    adc6:	0674      	lsls	r4, r6, #25
    adc8:	f100 83d5 	bmi.w	b576 <_vfiprintf_r+0xeae>
    adcc:	05b0      	lsls	r0, r6, #22
    adce:	f140 8340 	bpl.w	b452 <_vfiprintf_r+0xd8a>
    add2:	9b07      	ldr	r3, [sp, #28]
    add4:	9905      	ldr	r1, [sp, #20]
    add6:	f853 2b04 	ldr.w	r2, [r3], #4
    adda:	9307      	str	r3, [sp, #28]
    addc:	7011      	strb	r1, [r2, #0]
    adde:	e4be      	b.n	a75e <_vfiprintf_r+0x96>
    ade0:	9603      	str	r6, [sp, #12]
    ade2:	2901      	cmp	r1, #1
    ade4:	f43f ad8c 	beq.w	a900 <_vfiprintf_r+0x238>
    ade8:	2902      	cmp	r1, #2
    adea:	ac44      	add	r4, sp, #272	; 0x110
    adec:	d111      	bne.n	ae12 <_vfiprintf_r+0x74a>
    adee:	980c      	ldr	r0, [sp, #48]	; 0x30
    adf0:	f003 010f 	and.w	r1, r3, #15
    adf4:	091b      	lsrs	r3, r3, #4
    adf6:	5c41      	ldrb	r1, [r0, r1]
    adf8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    adfc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    ae00:	0912      	lsrs	r2, r2, #4
    ae02:	ea53 0102 	orrs.w	r1, r3, r2
    ae06:	d1f3      	bne.n	adf0 <_vfiprintf_r+0x728>
    ae08:	9e03      	ldr	r6, [sp, #12]
    ae0a:	ab44      	add	r3, sp, #272	; 0x110
    ae0c:	1b1b      	subs	r3, r3, r4
    ae0e:	9304      	str	r3, [sp, #16]
    ae10:	e583      	b.n	a91a <_vfiprintf_r+0x252>
    ae12:	f003 0107 	and.w	r1, r3, #7
    ae16:	08db      	lsrs	r3, r3, #3
    ae18:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    ae1c:	08d2      	lsrs	r2, r2, #3
    ae1e:	3130      	adds	r1, #48	; 0x30
    ae20:	ea53 0502 	orrs.w	r5, r3, r2
    ae24:	4620      	mov	r0, r4
    ae26:	f804 1d01 	strb.w	r1, [r4, #-1]!
    ae2a:	d1f2      	bne.n	ae12 <_vfiprintf_r+0x74a>
    ae2c:	9e03      	ldr	r6, [sp, #12]
    ae2e:	07f3      	lsls	r3, r6, #31
    ae30:	d5eb      	bpl.n	ae0a <_vfiprintf_r+0x742>
    ae32:	2930      	cmp	r1, #48	; 0x30
    ae34:	d0e8      	beq.n	ae08 <_vfiprintf_r+0x740>
    ae36:	2330      	movs	r3, #48	; 0x30
    ae38:	3802      	subs	r0, #2
    ae3a:	f804 3c01 	strb.w	r3, [r4, #-1]
    ae3e:	ab44      	add	r3, sp, #272	; 0x110
    ae40:	1a1b      	subs	r3, r3, r0
    ae42:	9e03      	ldr	r6, [sp, #12]
    ae44:	9304      	str	r3, [sp, #16]
    ae46:	4604      	mov	r4, r0
    ae48:	e567      	b.n	a91a <_vfiprintf_r+0x252>
    ae4a:	9b04      	ldr	r3, [sp, #16]
    ae4c:	941b      	str	r4, [sp, #108]	; 0x6c
    ae4e:	2201      	movs	r2, #1
    ae50:	931c      	str	r3, [sp, #112]	; 0x70
    ae52:	931a      	str	r3, [sp, #104]	; 0x68
    ae54:	9219      	str	r2, [sp, #100]	; 0x64
    ae56:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ae5a:	f109 0908 	add.w	r9, r9, #8
    ae5e:	e69d      	b.n	ab9c <_vfiprintf_r+0x4d4>
    ae60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ae64:	e47b      	b.n	a75e <_vfiprintf_r+0x96>
    ae66:	9a06      	ldr	r2, [sp, #24]
    ae68:	9d03      	ldr	r5, [sp, #12]
    ae6a:	1b55      	subs	r5, r2, r5
    ae6c:	2d00      	cmp	r5, #0
    ae6e:	f77f ae76 	ble.w	ab5e <_vfiprintf_r+0x496>
    ae72:	2d10      	cmp	r5, #16
    ae74:	f340 83bb 	ble.w	b5ee <_vfiprintf_r+0xf26>
    ae78:	9409      	str	r4, [sp, #36]	; 0x24
    ae7a:	ee18 4a10 	vmov	r4, s16
    ae7e:	e007      	b.n	ae90 <_vfiprintf_r+0x7c8>
    ae80:	f100 0c02 	add.w	ip, r0, #2
    ae84:	f109 0908 	add.w	r9, r9, #8
    ae88:	4610      	mov	r0, r2
    ae8a:	3d10      	subs	r5, #16
    ae8c:	2d10      	cmp	r5, #16
    ae8e:	dd1e      	ble.n	aece <_vfiprintf_r+0x806>
    ae90:	4981      	ldr	r1, [pc, #516]	; (b098 <_vfiprintf_r+0x9d0>)
    ae92:	f8c9 1000 	str.w	r1, [r9]
    ae96:	1c42      	adds	r2, r0, #1
    ae98:	3310      	adds	r3, #16
    ae9a:	2110      	movs	r1, #16
    ae9c:	2a07      	cmp	r2, #7
    ae9e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    aea2:	f8c9 1004 	str.w	r1, [r9, #4]
    aea6:	ddeb      	ble.n	ae80 <_vfiprintf_r+0x7b8>
    aea8:	aa18      	add	r2, sp, #96	; 0x60
    aeaa:	2b00      	cmp	r3, #0
    aeac:	d074      	beq.n	af98 <_vfiprintf_r+0x8d0>
    aeae:	4621      	mov	r1, r4
    aeb0:	4658      	mov	r0, fp
    aeb2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    aeb6:	f7ff fbcb 	bl	a650 <__sprint_r.part.0>
    aeba:	2800      	cmp	r0, #0
    aebc:	f47f addb 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    aec0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    aec4:	3d10      	subs	r5, #16
    aec6:	2d10      	cmp	r5, #16
    aec8:	f100 0c01 	add.w	ip, r0, #1
    aecc:	dce0      	bgt.n	ae90 <_vfiprintf_r+0x7c8>
    aece:	9c09      	ldr	r4, [sp, #36]	; 0x24
    aed0:	4a71      	ldr	r2, [pc, #452]	; (b098 <_vfiprintf_r+0x9d0>)
    aed2:	f8c9 5004 	str.w	r5, [r9, #4]
    aed6:	442b      	add	r3, r5
    aed8:	f1bc 0f07 	cmp.w	ip, #7
    aedc:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    aee0:	f8c9 2000 	str.w	r2, [r9]
    aee4:	f340 8194 	ble.w	b210 <_vfiprintf_r+0xb48>
    aee8:	2b00      	cmp	r3, #0
    aeea:	f000 831f 	beq.w	b52c <_vfiprintf_r+0xe64>
    aeee:	ee18 1a10 	vmov	r1, s16
    aef2:	aa18      	add	r2, sp, #96	; 0x60
    aef4:	4658      	mov	r0, fp
    aef6:	f7ff fbab 	bl	a650 <__sprint_r.part.0>
    aefa:	2800      	cmp	r0, #0
    aefc:	f47f adbb 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    af00:	9a04      	ldr	r2, [sp, #16]
    af02:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    af06:	1abd      	subs	r5, r7, r2
    af08:	2d00      	cmp	r5, #0
    af0a:	f100 0101 	add.w	r1, r0, #1
    af0e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    af12:	f77f ae29 	ble.w	ab68 <_vfiprintf_r+0x4a0>
    af16:	2d10      	cmp	r5, #16
    af18:	dd29      	ble.n	af6e <_vfiprintf_r+0x8a6>
    af1a:	9409      	str	r4, [sp, #36]	; 0x24
    af1c:	2710      	movs	r7, #16
    af1e:	ee18 4a10 	vmov	r4, s16
    af22:	e007      	b.n	af34 <_vfiprintf_r+0x86c>
    af24:	f100 0c02 	add.w	ip, r0, #2
    af28:	f109 0908 	add.w	r9, r9, #8
    af2c:	4610      	mov	r0, r2
    af2e:	3d10      	subs	r5, #16
    af30:	2d10      	cmp	r5, #16
    af32:	dd1a      	ble.n	af6a <_vfiprintf_r+0x8a2>
    af34:	1c42      	adds	r2, r0, #1
    af36:	4958      	ldr	r1, [pc, #352]	; (b098 <_vfiprintf_r+0x9d0>)
    af38:	3310      	adds	r3, #16
    af3a:	2a07      	cmp	r2, #7
    af3c:	e9c9 1700 	strd	r1, r7, [r9]
    af40:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    af44:	ddee      	ble.n	af24 <_vfiprintf_r+0x85c>
    af46:	aa18      	add	r2, sp, #96	; 0x60
    af48:	b303      	cbz	r3, af8c <_vfiprintf_r+0x8c4>
    af4a:	4621      	mov	r1, r4
    af4c:	4658      	mov	r0, fp
    af4e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    af52:	f7ff fb7d 	bl	a650 <__sprint_r.part.0>
    af56:	2800      	cmp	r0, #0
    af58:	f47f ad8d 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    af5c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    af60:	3d10      	subs	r5, #16
    af62:	2d10      	cmp	r5, #16
    af64:	f100 0c01 	add.w	ip, r0, #1
    af68:	dce4      	bgt.n	af34 <_vfiprintf_r+0x86c>
    af6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    af6c:	4661      	mov	r1, ip
    af6e:	4a4a      	ldr	r2, [pc, #296]	; (b098 <_vfiprintf_r+0x9d0>)
    af70:	f8c9 5004 	str.w	r5, [r9, #4]
    af74:	442b      	add	r3, r5
    af76:	2907      	cmp	r1, #7
    af78:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    af7c:	f8c9 2000 	str.w	r2, [r9]
    af80:	f300 80e7 	bgt.w	b152 <_vfiprintf_r+0xa8a>
    af84:	f109 0908 	add.w	r9, r9, #8
    af88:	3101      	adds	r1, #1
    af8a:	e5ed      	b.n	ab68 <_vfiprintf_r+0x4a0>
    af8c:	f04f 0c01 	mov.w	ip, #1
    af90:	4618      	mov	r0, r3
    af92:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    af96:	e7ca      	b.n	af2e <_vfiprintf_r+0x866>
    af98:	f04f 0c01 	mov.w	ip, #1
    af9c:	4618      	mov	r0, r3
    af9e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    afa2:	e772      	b.n	ae8a <_vfiprintf_r+0x7c2>
    afa4:	2b00      	cmp	r3, #0
    afa6:	f000 8104 	beq.w	b1b2 <_vfiprintf_r+0xaea>
    afaa:	ee18 1a10 	vmov	r1, s16
    afae:	aa18      	add	r2, sp, #96	; 0x60
    afb0:	4658      	mov	r0, fp
    afb2:	f7ff fb4d 	bl	a650 <__sprint_r.part.0>
    afb6:	2800      	cmp	r0, #0
    afb8:	f47f ad5d 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    afbc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    afc0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    afc4:	1c41      	adds	r1, r0, #1
    afc6:	e5a7      	b.n	ab18 <_vfiprintf_r+0x450>
    afc8:	2302      	movs	r3, #2
    afca:	aa11      	add	r2, sp, #68	; 0x44
    afcc:	931c      	str	r3, [sp, #112]	; 0x70
    afce:	921b      	str	r2, [sp, #108]	; 0x6c
    afd0:	2101      	movs	r1, #1
    afd2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    afd6:	4608      	mov	r0, r1
    afd8:	f109 0908 	add.w	r9, r9, #8
    afdc:	1c41      	adds	r1, r0, #1
    afde:	e5ba      	b.n	ab56 <_vfiprintf_r+0x48e>
    afe0:	2d10      	cmp	r5, #16
    afe2:	f340 82e5 	ble.w	b5b0 <_vfiprintf_r+0xee8>
    afe6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    afea:	940f      	str	r4, [sp, #60]	; 0x3c
    afec:	4608      	mov	r0, r1
    afee:	ee18 4a10 	vmov	r4, s16
    aff2:	e007      	b.n	b004 <_vfiprintf_r+0x93c>
    aff4:	f100 0c02 	add.w	ip, r0, #2
    aff8:	f109 0908 	add.w	r9, r9, #8
    affc:	4610      	mov	r0, r2
    affe:	3d10      	subs	r5, #16
    b000:	2d10      	cmp	r5, #16
    b002:	dd1d      	ble.n	b040 <_vfiprintf_r+0x978>
    b004:	4925      	ldr	r1, [pc, #148]	; (b09c <_vfiprintf_r+0x9d4>)
    b006:	f8c9 1000 	str.w	r1, [r9]
    b00a:	1c42      	adds	r2, r0, #1
    b00c:	3310      	adds	r3, #16
    b00e:	2110      	movs	r1, #16
    b010:	2a07      	cmp	r2, #7
    b012:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b016:	f8c9 1004 	str.w	r1, [r9, #4]
    b01a:	ddeb      	ble.n	aff4 <_vfiprintf_r+0x92c>
    b01c:	aa18      	add	r2, sp, #96	; 0x60
    b01e:	b303      	cbz	r3, b062 <_vfiprintf_r+0x99a>
    b020:	4621      	mov	r1, r4
    b022:	4658      	mov	r0, fp
    b024:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b028:	f7ff fb12 	bl	a650 <__sprint_r.part.0>
    b02c:	2800      	cmp	r0, #0
    b02e:	f47f ad22 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    b032:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b036:	3d10      	subs	r5, #16
    b038:	2d10      	cmp	r5, #16
    b03a:	f100 0c01 	add.w	ip, r0, #1
    b03e:	dce1      	bgt.n	b004 <_vfiprintf_r+0x93c>
    b040:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    b042:	4660      	mov	r0, ip
    b044:	4a15      	ldr	r2, [pc, #84]	; (b09c <_vfiprintf_r+0x9d4>)
    b046:	f8c9 5004 	str.w	r5, [r9, #4]
    b04a:	442b      	add	r3, r5
    b04c:	2807      	cmp	r0, #7
    b04e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    b052:	f8c9 2000 	str.w	r2, [r9]
    b056:	f300 80c1 	bgt.w	b1dc <_vfiprintf_r+0xb14>
    b05a:	f109 0908 	add.w	r9, r9, #8
    b05e:	1c41      	adds	r1, r0, #1
    b060:	e546      	b.n	aaf0 <_vfiprintf_r+0x428>
    b062:	4618      	mov	r0, r3
    b064:	f04f 0c01 	mov.w	ip, #1
    b068:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b06c:	e7c7      	b.n	affe <_vfiprintf_r+0x936>
    b06e:	0776      	lsls	r6, r6, #29
    b070:	9319      	str	r3, [sp, #100]	; 0x64
    b072:	d553      	bpl.n	b11c <_vfiprintf_r+0xa54>
    b074:	9a06      	ldr	r2, [sp, #24]
    b076:	9903      	ldr	r1, [sp, #12]
    b078:	1a54      	subs	r4, r2, r1
    b07a:	2c00      	cmp	r4, #0
    b07c:	dd4e      	ble.n	b11c <_vfiprintf_r+0xa54>
    b07e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b082:	2c10      	cmp	r4, #16
    b084:	f340 82b0 	ble.w	b5e8 <_vfiprintf_r+0xf20>
    b088:	9919      	ldr	r1, [sp, #100]	; 0x64
    b08a:	ee18 6a10 	vmov	r6, s16
    b08e:	2510      	movs	r5, #16
    b090:	e00d      	b.n	b0ae <_vfiprintf_r+0x9e6>
    b092:	bf00      	nop
    b094:	0000cb04 	.word	0x0000cb04
    b098:	0000cc14 	.word	0x0000cc14
    b09c:	0000cc04 	.word	0x0000cc04
    b0a0:	1c88      	adds	r0, r1, #2
    b0a2:	f109 0908 	add.w	r9, r9, #8
    b0a6:	4611      	mov	r1, r2
    b0a8:	3c10      	subs	r4, #16
    b0aa:	2c10      	cmp	r4, #16
    b0ac:	dd1a      	ble.n	b0e4 <_vfiprintf_r+0xa1c>
    b0ae:	1c4a      	adds	r2, r1, #1
    b0b0:	48b3      	ldr	r0, [pc, #716]	; (b380 <_vfiprintf_r+0xcb8>)
    b0b2:	3310      	adds	r3, #16
    b0b4:	2a07      	cmp	r2, #7
    b0b6:	e9c9 0500 	strd	r0, r5, [r9]
    b0ba:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b0be:	ddef      	ble.n	b0a0 <_vfiprintf_r+0x9d8>
    b0c0:	aa18      	add	r2, sp, #96	; 0x60
    b0c2:	b333      	cbz	r3, b112 <_vfiprintf_r+0xa4a>
    b0c4:	4631      	mov	r1, r6
    b0c6:	4658      	mov	r0, fp
    b0c8:	f7ff fac2 	bl	a650 <__sprint_r.part.0>
    b0cc:	2800      	cmp	r0, #0
    b0ce:	f47f acd2 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    b0d2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    b0d6:	3c10      	subs	r4, #16
    b0d8:	2c10      	cmp	r4, #16
    b0da:	f101 0001 	add.w	r0, r1, #1
    b0de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b0e2:	dce4      	bgt.n	b0ae <_vfiprintf_r+0x9e6>
    b0e4:	4aa6      	ldr	r2, [pc, #664]	; (b380 <_vfiprintf_r+0xcb8>)
    b0e6:	f8c9 4004 	str.w	r4, [r9, #4]
    b0ea:	4423      	add	r3, r4
    b0ec:	2807      	cmp	r0, #7
    b0ee:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    b0f2:	f8c9 2000 	str.w	r2, [r9]
    b0f6:	f77f ad59 	ble.w	abac <_vfiprintf_r+0x4e4>
    b0fa:	b17b      	cbz	r3, b11c <_vfiprintf_r+0xa54>
    b0fc:	ee18 1a10 	vmov	r1, s16
    b100:	aa18      	add	r2, sp, #96	; 0x60
    b102:	4658      	mov	r0, fp
    b104:	f7ff faa4 	bl	a650 <__sprint_r.part.0>
    b108:	2800      	cmp	r0, #0
    b10a:	f47f acb4 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    b10e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b110:	e54c      	b.n	abac <_vfiprintf_r+0x4e4>
    b112:	2001      	movs	r0, #1
    b114:	4619      	mov	r1, r3
    b116:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b11a:	e7c5      	b.n	b0a8 <_vfiprintf_r+0x9e0>
    b11c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    b120:	9903      	ldr	r1, [sp, #12]
    b122:	428a      	cmp	r2, r1
    b124:	bfac      	ite	ge
    b126:	189b      	addge	r3, r3, r2
    b128:	185b      	addlt	r3, r3, r1
    b12a:	9305      	str	r3, [sp, #20]
    b12c:	e549      	b.n	abc2 <_vfiprintf_r+0x4fa>
    b12e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    b132:	058f      	lsls	r7, r1, #22
    b134:	ee18 3a10 	vmov	r3, s16
    b138:	b28a      	uxth	r2, r1
    b13a:	f53f aae8 	bmi.w	a70e <_vfiprintf_r+0x46>
    b13e:	ee18 5a10 	vmov	r5, s16
    b142:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b144:	f7fb fb6a 	bl	681c <__retarget_lock_acquire_recursive>
    b148:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    b14c:	b28a      	uxth	r2, r1
    b14e:	f7ff bade 	b.w	a70e <_vfiprintf_r+0x46>
    b152:	2b00      	cmp	r3, #0
    b154:	f43f ae79 	beq.w	ae4a <_vfiprintf_r+0x782>
    b158:	ee18 1a10 	vmov	r1, s16
    b15c:	aa18      	add	r2, sp, #96	; 0x60
    b15e:	4658      	mov	r0, fp
    b160:	f7ff fa76 	bl	a650 <__sprint_r.part.0>
    b164:	2800      	cmp	r0, #0
    b166:	f47f ac86 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    b16a:	9919      	ldr	r1, [sp, #100]	; 0x64
    b16c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b16e:	3101      	adds	r1, #1
    b170:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b174:	e4f8      	b.n	ab68 <_vfiprintf_r+0x4a0>
    b176:	9219      	str	r2, [sp, #100]	; 0x64
    b178:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b17c:	e45e      	b.n	aa3c <_vfiprintf_r+0x374>
    b17e:	2f00      	cmp	r7, #0
    b180:	f47f abc3 	bne.w	a90a <_vfiprintf_r+0x242>
    b184:	9e03      	ldr	r6, [sp, #12]
    b186:	2700      	movs	r7, #0
    b188:	9704      	str	r7, [sp, #16]
    b18a:	ac44      	add	r4, sp, #272	; 0x110
    b18c:	f7ff bbc5 	b.w	a91a <_vfiprintf_r+0x252>
    b190:	9b03      	ldr	r3, [sp, #12]
    b192:	f013 0310 	ands.w	r3, r3, #16
    b196:	d154      	bne.n	b242 <_vfiprintf_r+0xb7a>
    b198:	9a03      	ldr	r2, [sp, #12]
    b19a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    b19e:	f000 816b 	beq.w	b478 <_vfiprintf_r+0xdb0>
    b1a2:	9907      	ldr	r1, [sp, #28]
    b1a4:	461a      	mov	r2, r3
    b1a6:	f851 3b04 	ldr.w	r3, [r1], #4
    b1aa:	9107      	str	r1, [sp, #28]
    b1ac:	b29b      	uxth	r3, r3
    b1ae:	2101      	movs	r1, #1
    b1b0:	e401      	b.n	a9b6 <_vfiprintf_r+0x2ee>
    b1b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b1b4:	2a00      	cmp	r2, #0
    b1b6:	d164      	bne.n	b282 <_vfiprintf_r+0xbba>
    b1b8:	4618      	mov	r0, r3
    b1ba:	2101      	movs	r1, #1
    b1bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b1c0:	e4c9      	b.n	ab56 <_vfiprintf_r+0x48e>
    b1c2:	2101      	movs	r1, #1
    b1c4:	4618      	mov	r0, r3
    b1c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b1ca:	e4c4      	b.n	ab56 <_vfiprintf_r+0x48e>
    b1cc:	425b      	negs	r3, r3
    b1ce:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    b1d2:	9603      	str	r6, [sp, #12]
    b1d4:	202d      	movs	r0, #45	; 0x2d
    b1d6:	2101      	movs	r1, #1
    b1d8:	f7ff bbee 	b.w	a9b8 <_vfiprintf_r+0x2f0>
    b1dc:	2b00      	cmp	r3, #0
    b1de:	f000 8088 	beq.w	b2f2 <_vfiprintf_r+0xc2a>
    b1e2:	ee18 1a10 	vmov	r1, s16
    b1e6:	aa18      	add	r2, sp, #96	; 0x60
    b1e8:	4658      	mov	r0, fp
    b1ea:	f7ff fa31 	bl	a650 <__sprint_r.part.0>
    b1ee:	2800      	cmp	r0, #0
    b1f0:	f47f ac41 	bne.w	aa76 <_vfiprintf_r+0x3ae>
    b1f4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b1f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b1fc:	1c41      	adds	r1, r0, #1
    b1fe:	e477      	b.n	aaf0 <_vfiprintf_r+0x428>
    b200:	f898 1000 	ldrb.w	r1, [r8]
    b204:	9307      	str	r3, [sp, #28]
    b206:	f7ff bad2 	b.w	a7ae <_vfiprintf_r+0xe6>
    b20a:	ac44      	add	r4, sp, #272	; 0x110
    b20c:	f7ff bb85 	b.w	a91a <_vfiprintf_r+0x252>
    b210:	f109 0908 	add.w	r9, r9, #8
    b214:	f10c 0101 	add.w	r1, ip, #1
    b218:	4660      	mov	r0, ip
    b21a:	e4a0      	b.n	ab5e <_vfiprintf_r+0x496>
    b21c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    b220:	f040 8197 	bne.w	b552 <_vfiprintf_r+0xe8a>
    b224:	f851 3b04 	ldr.w	r3, [r1], #4
    b228:	9107      	str	r1, [sp, #28]
    b22a:	f7ff bbc0 	b.w	a9ae <_vfiprintf_r+0x2e6>
    b22e:	05b3      	lsls	r3, r6, #22
    b230:	f100 8188 	bmi.w	b544 <_vfiprintf_r+0xe7c>
    b234:	f852 3b04 	ldr.w	r3, [r2], #4
    b238:	9207      	str	r2, [sp, #28]
    b23a:	17da      	asrs	r2, r3, #31
    b23c:	4611      	mov	r1, r2
    b23e:	f7ff bb52 	b.w	a8e6 <_vfiprintf_r+0x21e>
    b242:	9907      	ldr	r1, [sp, #28]
    b244:	f851 3b04 	ldr.w	r3, [r1], #4
    b248:	9107      	str	r1, [sp, #28]
    b24a:	2101      	movs	r1, #1
    b24c:	f7ff bbb3 	b.w	a9b6 <_vfiprintf_r+0x2ee>
    b250:	9b07      	ldr	r3, [sp, #28]
    b252:	9805      	ldr	r0, [sp, #20]
    b254:	f853 1b04 	ldr.w	r1, [r3], #4
    b258:	9307      	str	r3, [sp, #28]
    b25a:	17c2      	asrs	r2, r0, #31
    b25c:	e9c1 0200 	strd	r0, r2, [r1]
    b260:	f7ff ba7d 	b.w	a75e <_vfiprintf_r+0x96>
    b264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b266:	2b00      	cmp	r3, #0
    b268:	f43f ab26 	beq.w	a8b8 <_vfiprintf_r+0x1f0>
    b26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b26e:	781b      	ldrb	r3, [r3, #0]
    b270:	2b00      	cmp	r3, #0
    b272:	f43f ab21 	beq.w	a8b8 <_vfiprintf_r+0x1f0>
    b276:	f898 1000 	ldrb.w	r1, [r8]
    b27a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    b27e:	f7ff ba96 	b.w	a7ae <_vfiprintf_r+0xe6>
    b282:	2302      	movs	r3, #2
    b284:	aa11      	add	r2, sp, #68	; 0x44
    b286:	931c      	str	r3, [sp, #112]	; 0x70
    b288:	921b      	str	r2, [sp, #108]	; 0x6c
    b28a:	2001      	movs	r0, #1
    b28c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b290:	e6a2      	b.n	afd8 <_vfiprintf_r+0x910>
    b292:	9603      	str	r6, [sp, #12]
    b294:	e571      	b.n	ad7a <_vfiprintf_r+0x6b2>
    b296:	4b3b      	ldr	r3, [pc, #236]	; (b384 <_vfiprintf_r+0xcbc>)
    b298:	930c      	str	r3, [sp, #48]	; 0x30
    b29a:	f016 0220 	ands.w	r2, r6, #32
    b29e:	d059      	beq.n	b354 <_vfiprintf_r+0xc8c>
    b2a0:	9b07      	ldr	r3, [sp, #28]
    b2a2:	3307      	adds	r3, #7
    b2a4:	f023 0307 	bic.w	r3, r3, #7
    b2a8:	4618      	mov	r0, r3
    b2aa:	685a      	ldr	r2, [r3, #4]
    b2ac:	f850 3b08 	ldr.w	r3, [r0], #8
    b2b0:	9007      	str	r0, [sp, #28]
    b2b2:	07f4      	lsls	r4, r6, #31
    b2b4:	d509      	bpl.n	b2ca <_vfiprintf_r+0xc02>
    b2b6:	ea53 0002 	orrs.w	r0, r3, r2
    b2ba:	d006      	beq.n	b2ca <_vfiprintf_r+0xc02>
    b2bc:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    b2c0:	2130      	movs	r1, #48	; 0x30
    b2c2:	f046 0602 	orr.w	r6, r6, #2
    b2c6:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    b2ca:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    b2ce:	9103      	str	r1, [sp, #12]
    b2d0:	2102      	movs	r1, #2
    b2d2:	f7ff bb70 	b.w	a9b6 <_vfiprintf_r+0x2ee>
    b2d6:	4b2c      	ldr	r3, [pc, #176]	; (b388 <_vfiprintf_r+0xcc0>)
    b2d8:	930c      	str	r3, [sp, #48]	; 0x30
    b2da:	e7de      	b.n	b29a <_vfiprintf_r+0xbd2>
    b2dc:	9b07      	ldr	r3, [sp, #28]
    b2de:	2101      	movs	r1, #1
    b2e0:	f853 2b04 	ldr.w	r2, [r3], #4
    b2e4:	9103      	str	r1, [sp, #12]
    b2e6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    b2ea:	9307      	str	r3, [sp, #28]
    b2ec:	9104      	str	r1, [sp, #16]
    b2ee:	ac2b      	add	r4, sp, #172	; 0xac
    b2f0:	e4df      	b.n	acb2 <_vfiprintf_r+0x5ea>
    b2f2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    b2f6:	2a00      	cmp	r2, #0
    b2f8:	f040 8132 	bne.w	b560 <_vfiprintf_r+0xe98>
    b2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b2fe:	2a00      	cmp	r2, #0
    b300:	f47f ae62 	bne.w	afc8 <_vfiprintf_r+0x900>
    b304:	4618      	mov	r0, r3
    b306:	2101      	movs	r1, #1
    b308:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b30c:	e427      	b.n	ab5e <_vfiprintf_r+0x496>
    b30e:	2100      	movs	r1, #0
    b310:	2208      	movs	r2, #8
    b312:	a816      	add	r0, sp, #88	; 0x58
    b314:	9413      	str	r4, [sp, #76]	; 0x4c
    b316:	f7fb f963 	bl	65e0 <memset>
    b31a:	1c79      	adds	r1, r7, #1
    b31c:	f000 80bc 	beq.w	b498 <_vfiprintf_r+0xdd0>
    b320:	2500      	movs	r5, #0
    b322:	9407      	str	r4, [sp, #28]
    b324:	462c      	mov	r4, r5
    b326:	e00c      	b.n	b342 <_vfiprintf_r+0xc7a>
    b328:	a92b      	add	r1, sp, #172	; 0xac
    b32a:	4658      	mov	r0, fp
    b32c:	f7ff f8ca 	bl	a4c4 <_wcrtomb_r>
    b330:	1c42      	adds	r2, r0, #1
    b332:	4420      	add	r0, r4
    b334:	f000 816b 	beq.w	b60e <_vfiprintf_r+0xf46>
    b338:	42b8      	cmp	r0, r7
    b33a:	dc08      	bgt.n	b34e <_vfiprintf_r+0xc86>
    b33c:	f000 8170 	beq.w	b620 <_vfiprintf_r+0xf58>
    b340:	4604      	mov	r4, r0
    b342:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b344:	5952      	ldr	r2, [r2, r5]
    b346:	ab16      	add	r3, sp, #88	; 0x58
    b348:	3504      	adds	r5, #4
    b34a:	2a00      	cmp	r2, #0
    b34c:	d1ec      	bne.n	b328 <_vfiprintf_r+0xc60>
    b34e:	9404      	str	r4, [sp, #16]
    b350:	9c07      	ldr	r4, [sp, #28]
    b352:	e0af      	b.n	b4b4 <_vfiprintf_r+0xdec>
    b354:	f016 0310 	ands.w	r3, r6, #16
    b358:	9807      	ldr	r0, [sp, #28]
    b35a:	d10c      	bne.n	b376 <_vfiprintf_r+0xcae>
    b35c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    b360:	d005      	beq.n	b36e <_vfiprintf_r+0xca6>
    b362:	461a      	mov	r2, r3
    b364:	f850 3b04 	ldr.w	r3, [r0], #4
    b368:	9007      	str	r0, [sp, #28]
    b36a:	b29b      	uxth	r3, r3
    b36c:	e7a1      	b.n	b2b2 <_vfiprintf_r+0xbea>
    b36e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    b372:	f040 80e1 	bne.w	b538 <_vfiprintf_r+0xe70>
    b376:	f850 3b04 	ldr.w	r3, [r0], #4
    b37a:	9007      	str	r0, [sp, #28]
    b37c:	e799      	b.n	b2b2 <_vfiprintf_r+0xbea>
    b37e:	bf00      	nop
    b380:	0000cc04 	.word	0x0000cc04
    b384:	0000cb04 	.word	0x0000cb04
    b388:	0000cb18 	.word	0x0000cb18
    b38c:	9903      	ldr	r1, [sp, #12]
    b38e:	9704      	str	r7, [sp, #16]
    b390:	ac44      	add	r4, sp, #272	; 0x110
    b392:	469e      	mov	lr, r3
    b394:	ee08 ba90 	vmov	s17, fp
    b398:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    b39c:	f04f 0c00 	mov.w	ip, #0
    b3a0:	4623      	mov	r3, r4
    b3a2:	e006      	b.n	b3b2 <_vfiprintf_r+0xcea>
    b3a4:	f1be 0f0a 	cmp.w	lr, #10
    b3a8:	f172 0200 	sbcs.w	r2, r2, #0
    b3ac:	d339      	bcc.n	b422 <_vfiprintf_r+0xd5a>
    b3ae:	46a6      	mov	lr, r4
    b3b0:	462a      	mov	r2, r5
    b3b2:	49a6      	ldr	r1, [pc, #664]	; (b64c <_vfiprintf_r+0xf84>)
    b3b4:	eb1e 0002 	adds.w	r0, lr, r2
    b3b8:	f140 0000 	adc.w	r0, r0, #0
    b3bc:	460f      	mov	r7, r1
    b3be:	fba1 1400 	umull	r1, r4, r1, r0
    b3c2:	f024 0103 	bic.w	r1, r4, #3
    b3c6:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    b3ca:	1a40      	subs	r0, r0, r1
    b3cc:	ebbe 0100 	subs.w	r1, lr, r0
    b3d0:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    b3d4:	f162 0400 	sbc.w	r4, r2, #0
    b3d8:	fb05 f501 	mul.w	r5, r5, r1
    b3dc:	fb07 5504 	mla	r5, r7, r4, r5
    b3e0:	fba1 4107 	umull	r4, r1, r1, r7
    b3e4:	440d      	add	r5, r1
    b3e6:	2705      	movs	r7, #5
    b3e8:	f004 0101 	and.w	r1, r4, #1
    b3ec:	fba1 1b07 	umull	r1, fp, r1, r7
    b3f0:	1809      	adds	r1, r1, r0
    b3f2:	0864      	lsrs	r4, r4, #1
    b3f4:	3130      	adds	r1, #48	; 0x30
    b3f6:	f803 1c01 	strb.w	r1, [r3, #-1]
    b3fa:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    b3fe:	f10c 0c01 	add.w	ip, ip, #1
    b402:	3b01      	subs	r3, #1
    b404:	086d      	lsrs	r5, r5, #1
    b406:	2e00      	cmp	r6, #0
    b408:	d0cc      	beq.n	b3a4 <_vfiprintf_r+0xcdc>
    b40a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b40c:	7809      	ldrb	r1, [r1, #0]
    b40e:	4561      	cmp	r1, ip
    b410:	d1c8      	bne.n	b3a4 <_vfiprintf_r+0xcdc>
    b412:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    b416:	d0c5      	beq.n	b3a4 <_vfiprintf_r+0xcdc>
    b418:	f1be 0f0a 	cmp.w	lr, #10
    b41c:	f172 0200 	sbcs.w	r2, r2, #0
    b420:	d26c      	bcs.n	b4fc <_vfiprintf_r+0xe34>
    b422:	461c      	mov	r4, r3
    b424:	ab44      	add	r3, sp, #272	; 0x110
    b426:	1b1b      	subs	r3, r3, r4
    b428:	9f04      	ldr	r7, [sp, #16]
    b42a:	9e03      	ldr	r6, [sp, #12]
    b42c:	9304      	str	r3, [sp, #16]
    b42e:	ee18 ba90 	vmov	fp, s17
    b432:	f7ff ba72 	b.w	a91a <_vfiprintf_r+0x252>
    b436:	9603      	str	r6, [sp, #12]
    b438:	f7ff ba62 	b.w	a900 <_vfiprintf_r+0x238>
    b43c:	4658      	mov	r0, fp
    b43e:	f7fa ff59 	bl	62f4 <__sinit>
    b442:	f7ff b95b 	b.w	a6fc <_vfiprintf_r+0x34>
    b446:	2901      	cmp	r1, #1
    b448:	9603      	str	r6, [sp, #12]
    b44a:	f47f accd 	bne.w	ade8 <_vfiprintf_r+0x720>
    b44e:	f7ff ba5c 	b.w	a90a <_vfiprintf_r+0x242>
    b452:	9b07      	ldr	r3, [sp, #28]
    b454:	9905      	ldr	r1, [sp, #20]
    b456:	f853 2b04 	ldr.w	r2, [r3], #4
    b45a:	6011      	str	r1, [r2, #0]
    b45c:	9307      	str	r3, [sp, #28]
    b45e:	f7ff b97e 	b.w	a75e <_vfiprintf_r+0x96>
    b462:	2f06      	cmp	r7, #6
    b464:	463b      	mov	r3, r7
    b466:	9a03      	ldr	r2, [sp, #12]
    b468:	4c79      	ldr	r4, [pc, #484]	; (b650 <_vfiprintf_r+0xf88>)
    b46a:	9207      	str	r2, [sp, #28]
    b46c:	bf28      	it	cs
    b46e:	2306      	movcs	r3, #6
    b470:	9304      	str	r3, [sp, #16]
    b472:	9303      	str	r3, [sp, #12]
    b474:	f7ff bb25 	b.w	aac2 <_vfiprintf_r+0x3fa>
    b478:	9b03      	ldr	r3, [sp, #12]
    b47a:	9907      	ldr	r1, [sp, #28]
    b47c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    b480:	bf14      	ite	ne
    b482:	f851 3b04 	ldrne.w	r3, [r1], #4
    b486:	f851 3b04 	ldreq.w	r3, [r1], #4
    b48a:	9107      	str	r1, [sp, #28]
    b48c:	bf1c      	itt	ne
    b48e:	4602      	movne	r2, r0
    b490:	b2db      	uxtbne	r3, r3
    b492:	2101      	movs	r1, #1
    b494:	f7ff ba8f 	b.w	a9b6 <_vfiprintf_r+0x2ee>
    b498:	ab16      	add	r3, sp, #88	; 0x58
    b49a:	9300      	str	r3, [sp, #0]
    b49c:	2300      	movs	r3, #0
    b49e:	4619      	mov	r1, r3
    b4a0:	aa13      	add	r2, sp, #76	; 0x4c
    b4a2:	4658      	mov	r0, fp
    b4a4:	f7ff f834 	bl	a510 <_wcsrtombs_r>
    b4a8:	4603      	mov	r3, r0
    b4aa:	3301      	adds	r3, #1
    b4ac:	9004      	str	r0, [sp, #16]
    b4ae:	f000 80ae 	beq.w	b60e <_vfiprintf_r+0xf46>
    b4b2:	9413      	str	r4, [sp, #76]	; 0x4c
    b4b4:	9b04      	ldr	r3, [sp, #16]
    b4b6:	2b00      	cmp	r3, #0
    b4b8:	d030      	beq.n	b51c <_vfiprintf_r+0xe54>
    b4ba:	2b63      	cmp	r3, #99	; 0x63
    b4bc:	dc63      	bgt.n	b586 <_vfiprintf_r+0xebe>
    b4be:	2300      	movs	r3, #0
    b4c0:	9308      	str	r3, [sp, #32]
    b4c2:	ac2b      	add	r4, sp, #172	; 0xac
    b4c4:	2208      	movs	r2, #8
    b4c6:	2100      	movs	r1, #0
    b4c8:	a816      	add	r0, sp, #88	; 0x58
    b4ca:	f7fb f889 	bl	65e0 <memset>
    b4ce:	9d04      	ldr	r5, [sp, #16]
    b4d0:	ab16      	add	r3, sp, #88	; 0x58
    b4d2:	9300      	str	r3, [sp, #0]
    b4d4:	aa13      	add	r2, sp, #76	; 0x4c
    b4d6:	462b      	mov	r3, r5
    b4d8:	4621      	mov	r1, r4
    b4da:	4658      	mov	r0, fp
    b4dc:	f7ff f818 	bl	a510 <_wcsrtombs_r>
    b4e0:	4285      	cmp	r5, r0
    b4e2:	f040 80ab 	bne.w	b63c <_vfiprintf_r+0xf74>
    b4e6:	9b03      	ldr	r3, [sp, #12]
    b4e8:	9a04      	ldr	r2, [sp, #16]
    b4ea:	9307      	str	r3, [sp, #28]
    b4ec:	2300      	movs	r3, #0
    b4ee:	54a3      	strb	r3, [r4, r2]
    b4f0:	461f      	mov	r7, r3
    b4f2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b4f6:	9303      	str	r3, [sp, #12]
    b4f8:	f7ff ba16 	b.w	a928 <_vfiprintf_r+0x260>
    b4fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b4fe:	990d      	ldr	r1, [sp, #52]	; 0x34
    b500:	1a9b      	subs	r3, r3, r2
    b502:	4618      	mov	r0, r3
    b504:	9308      	str	r3, [sp, #32]
    b506:	f7fb f8bd 	bl	6684 <strncpy>
    b50a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b50c:	9b08      	ldr	r3, [sp, #32]
    b50e:	784a      	ldrb	r2, [r1, #1]
    b510:	b10a      	cbz	r2, b516 <_vfiprintf_r+0xe4e>
    b512:	3101      	adds	r1, #1
    b514:	910b      	str	r1, [sp, #44]	; 0x2c
    b516:	f04f 0c00 	mov.w	ip, #0
    b51a:	e748      	b.n	b3ae <_vfiprintf_r+0xce6>
    b51c:	9b03      	ldr	r3, [sp, #12]
    b51e:	9307      	str	r3, [sp, #28]
    b520:	9b04      	ldr	r3, [sp, #16]
    b522:	9303      	str	r3, [sp, #12]
    b524:	461f      	mov	r7, r3
    b526:	9308      	str	r3, [sp, #32]
    b528:	f7ff b9fe 	b.w	a928 <_vfiprintf_r+0x260>
    b52c:	2101      	movs	r1, #1
    b52e:	4618      	mov	r0, r3
    b530:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b534:	f7ff bb13 	b.w	ab5e <_vfiprintf_r+0x496>
    b538:	f850 3b04 	ldr.w	r3, [r0], #4
    b53c:	9007      	str	r0, [sp, #28]
    b53e:	4622      	mov	r2, r4
    b540:	b2db      	uxtb	r3, r3
    b542:	e6b6      	b.n	b2b2 <_vfiprintf_r+0xbea>
    b544:	f912 3b04 	ldrsb.w	r3, [r2], #4
    b548:	9207      	str	r2, [sp, #28]
    b54a:	17da      	asrs	r2, r3, #31
    b54c:	4611      	mov	r1, r2
    b54e:	f7ff b9ca 	b.w	a8e6 <_vfiprintf_r+0x21e>
    b552:	f851 3b04 	ldr.w	r3, [r1], #4
    b556:	9107      	str	r1, [sp, #28]
    b558:	4602      	mov	r2, r0
    b55a:	b2db      	uxtb	r3, r3
    b55c:	f7ff ba27 	b.w	a9ae <_vfiprintf_r+0x2e6>
    b560:	2301      	movs	r3, #1
    b562:	931c      	str	r3, [sp, #112]	; 0x70
    b564:	2101      	movs	r1, #1
    b566:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    b56a:	931b      	str	r3, [sp, #108]	; 0x6c
    b56c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b570:	460b      	mov	r3, r1
    b572:	f7ff bacd 	b.w	ab10 <_vfiprintf_r+0x448>
    b576:	9b07      	ldr	r3, [sp, #28]
    b578:	9905      	ldr	r1, [sp, #20]
    b57a:	f853 2b04 	ldr.w	r2, [r3], #4
    b57e:	9307      	str	r3, [sp, #28]
    b580:	8011      	strh	r1, [r2, #0]
    b582:	f7ff b8ec 	b.w	a75e <_vfiprintf_r+0x96>
    b586:	1c59      	adds	r1, r3, #1
    b588:	4658      	mov	r0, fp
    b58a:	f7fa f975 	bl	5878 <_malloc_r>
    b58e:	4604      	mov	r4, r0
    b590:	2800      	cmp	r0, #0
    b592:	d03c      	beq.n	b60e <_vfiprintf_r+0xf46>
    b594:	9008      	str	r0, [sp, #32]
    b596:	e795      	b.n	b4c4 <_vfiprintf_r+0xdfc>
    b598:	6d88      	ldr	r0, [r1, #88]	; 0x58
    b59a:	f7fb f941 	bl	6820 <__retarget_lock_release_recursive>
    b59e:	f7ff b9e9 	b.w	a974 <_vfiprintf_r+0x2ac>
    b5a2:	9b03      	ldr	r3, [sp, #12]
    b5a4:	9307      	str	r3, [sp, #28]
    b5a6:	e9cd 7703 	strd	r7, r7, [sp, #12]
    b5aa:	9f08      	ldr	r7, [sp, #32]
    b5ac:	f7ff b9bc 	b.w	a928 <_vfiprintf_r+0x260>
    b5b0:	9819      	ldr	r0, [sp, #100]	; 0x64
    b5b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b5b4:	3001      	adds	r0, #1
    b5b6:	e545      	b.n	b044 <_vfiprintf_r+0x97c>
    b5b8:	9b03      	ldr	r3, [sp, #12]
    b5ba:	9307      	str	r3, [sp, #28]
    b5bc:	4620      	mov	r0, r4
    b5be:	f7fb f93f 	bl	6840 <strlen>
    b5c2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    b5c6:	462f      	mov	r7, r5
    b5c8:	9004      	str	r0, [sp, #16]
    b5ca:	9303      	str	r3, [sp, #12]
    b5cc:	9508      	str	r5, [sp, #32]
    b5ce:	f7ff b9ab 	b.w	a928 <_vfiprintf_r+0x260>
    b5d2:	ee18 1a10 	vmov	r1, s16
    b5d6:	aa18      	add	r2, sp, #96	; 0x60
    b5d8:	4658      	mov	r0, fp
    b5da:	f7ff f839 	bl	a650 <__sprint_r.part.0>
    b5de:	2800      	cmp	r0, #0
    b5e0:	f43f aa36 	beq.w	aa50 <_vfiprintf_r+0x388>
    b5e4:	f7ff ba4d 	b.w	aa82 <_vfiprintf_r+0x3ba>
    b5e8:	9819      	ldr	r0, [sp, #100]	; 0x64
    b5ea:	3001      	adds	r0, #1
    b5ec:	e57a      	b.n	b0e4 <_vfiprintf_r+0xa1c>
    b5ee:	468c      	mov	ip, r1
    b5f0:	e46e      	b.n	aed0 <_vfiprintf_r+0x808>
    b5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    b5f4:	07d9      	lsls	r1, r3, #31
    b5f6:	d405      	bmi.n	b604 <_vfiprintf_r+0xf3c>
    b5f8:	89ab      	ldrh	r3, [r5, #12]
    b5fa:	059a      	lsls	r2, r3, #22
    b5fc:	d402      	bmi.n	b604 <_vfiprintf_r+0xf3c>
    b5fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
    b600:	f7fb f90e 	bl	6820 <__retarget_lock_release_recursive>
    b604:	f04f 33ff 	mov.w	r3, #4294967295
    b608:	9305      	str	r3, [sp, #20]
    b60a:	f7ff ba49 	b.w	aaa0 <_vfiprintf_r+0x3d8>
    b60e:	ee18 2a10 	vmov	r2, s16
    b612:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    b616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b61a:	8193      	strh	r3, [r2, #12]
    b61c:	f7ff ba35 	b.w	aa8a <_vfiprintf_r+0x3c2>
    b620:	9c07      	ldr	r4, [sp, #28]
    b622:	9704      	str	r7, [sp, #16]
    b624:	e746      	b.n	b4b4 <_vfiprintf_r+0xdec>
    b626:	9b07      	ldr	r3, [sp, #28]
    b628:	f898 1001 	ldrb.w	r1, [r8, #1]
    b62c:	f853 7b04 	ldr.w	r7, [r3], #4
    b630:	9307      	str	r3, [sp, #28]
    b632:	4690      	mov	r8, r2
    b634:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    b638:	f7ff b8b9 	b.w	a7ae <_vfiprintf_r+0xe6>
    b63c:	ee18 2a10 	vmov	r2, s16
    b640:	8993      	ldrh	r3, [r2, #12]
    b642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b646:	8193      	strh	r3, [r2, #12]
    b648:	f7ff ba15 	b.w	aa76 <_vfiprintf_r+0x3ae>
    b64c:	cccccccd 	.word	0xcccccccd
    b650:	0000cb2c 	.word	0x0000cb2c

0000b654 <__sbprintf>:
    b654:	b570      	push	{r4, r5, r6, lr}
    b656:	460c      	mov	r4, r1
    b658:	8989      	ldrh	r1, [r1, #12]
    b65a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    b65e:	f021 0102 	bic.w	r1, r1, #2
    b662:	f8ad 1014 	strh.w	r1, [sp, #20]
    b666:	6e61      	ldr	r1, [r4, #100]	; 0x64
    b668:	911b      	str	r1, [sp, #108]	; 0x6c
    b66a:	89e1      	ldrh	r1, [r4, #14]
    b66c:	f8ad 1016 	strh.w	r1, [sp, #22]
    b670:	69e1      	ldr	r1, [r4, #28]
    b672:	9109      	str	r1, [sp, #36]	; 0x24
    b674:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b676:	910b      	str	r1, [sp, #44]	; 0x2c
    b678:	a91c      	add	r1, sp, #112	; 0x70
    b67a:	9102      	str	r1, [sp, #8]
    b67c:	9106      	str	r1, [sp, #24]
    b67e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b682:	4606      	mov	r6, r0
    b684:	9104      	str	r1, [sp, #16]
    b686:	9107      	str	r1, [sp, #28]
    b688:	a818      	add	r0, sp, #96	; 0x60
    b68a:	2100      	movs	r1, #0
    b68c:	e9cd 3200 	strd	r3, r2, [sp]
    b690:	9108      	str	r1, [sp, #32]
    b692:	f7fb f8bf 	bl	6814 <__retarget_lock_init_recursive>
    b696:	e9dd 3200 	ldrd	r3, r2, [sp]
    b69a:	a902      	add	r1, sp, #8
    b69c:	4630      	mov	r0, r6
    b69e:	f7ff f813 	bl	a6c8 <_vfiprintf_r>
    b6a2:	1e05      	subs	r5, r0, #0
    b6a4:	db07      	blt.n	b6b6 <__sbprintf+0x62>
    b6a6:	a902      	add	r1, sp, #8
    b6a8:	4630      	mov	r0, r6
    b6aa:	f7fd fd69 	bl	9180 <_fflush_r>
    b6ae:	2800      	cmp	r0, #0
    b6b0:	bf18      	it	ne
    b6b2:	f04f 35ff 	movne.w	r5, #4294967295
    b6b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    b6ba:	065b      	lsls	r3, r3, #25
    b6bc:	d503      	bpl.n	b6c6 <__sbprintf+0x72>
    b6be:	89a3      	ldrh	r3, [r4, #12]
    b6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b6c4:	81a3      	strh	r3, [r4, #12]
    b6c6:	9818      	ldr	r0, [sp, #96]	; 0x60
    b6c8:	f7fb f8a6 	bl	6818 <__retarget_lock_close_recursive>
    b6cc:	4628      	mov	r0, r5
    b6ce:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    b6d2:	bd70      	pop	{r4, r5, r6, pc}

0000b6d4 <__sfvwrite_r>:
    b6d4:	6893      	ldr	r3, [r2, #8]
    b6d6:	2b00      	cmp	r3, #0
    b6d8:	f000 8085 	beq.w	b7e6 <__sfvwrite_r+0x112>
    b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6e0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    b6e4:	460c      	mov	r4, r1
    b6e6:	0719      	lsls	r1, r3, #28
    b6e8:	4680      	mov	r8, r0
    b6ea:	b083      	sub	sp, #12
    b6ec:	4617      	mov	r7, r2
    b6ee:	b298      	uxth	r0, r3
    b6f0:	d525      	bpl.n	b73e <__sfvwrite_r+0x6a>
    b6f2:	6923      	ldr	r3, [r4, #16]
    b6f4:	b31b      	cbz	r3, b73e <__sfvwrite_r+0x6a>
    b6f6:	f010 0302 	ands.w	r3, r0, #2
    b6fa:	683d      	ldr	r5, [r7, #0]
    b6fc:	d02d      	beq.n	b75a <__sfvwrite_r+0x86>
    b6fe:	f04f 0a00 	mov.w	sl, #0
    b702:	f8df b2c0 	ldr.w	fp, [pc, #704]	; b9c4 <__sfvwrite_r+0x2f0>
    b706:	4656      	mov	r6, sl
    b708:	46b9      	mov	r9, r7
    b70a:	455e      	cmp	r6, fp
    b70c:	4633      	mov	r3, r6
    b70e:	4652      	mov	r2, sl
    b710:	bf28      	it	cs
    b712:	465b      	movcs	r3, fp
    b714:	4640      	mov	r0, r8
    b716:	2e00      	cmp	r6, #0
    b718:	d052      	beq.n	b7c0 <__sfvwrite_r+0xec>
    b71a:	69e1      	ldr	r1, [r4, #28]
    b71c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    b71e:	47b8      	blx	r7
    b720:	2800      	cmp	r0, #0
    b722:	dd56      	ble.n	b7d2 <__sfvwrite_r+0xfe>
    b724:	f8d9 3008 	ldr.w	r3, [r9, #8]
    b728:	1a1b      	subs	r3, r3, r0
    b72a:	4482      	add	sl, r0
    b72c:	1a36      	subs	r6, r6, r0
    b72e:	f8c9 3008 	str.w	r3, [r9, #8]
    b732:	2b00      	cmp	r3, #0
    b734:	d1e9      	bne.n	b70a <__sfvwrite_r+0x36>
    b736:	2000      	movs	r0, #0
    b738:	b003      	add	sp, #12
    b73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b73e:	4621      	mov	r1, r4
    b740:	4640      	mov	r0, r8
    b742:	f000 f941 	bl	b9c8 <__swsetup_r>
    b746:	2800      	cmp	r0, #0
    b748:	f040 8138 	bne.w	b9bc <__sfvwrite_r+0x2e8>
    b74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b750:	683d      	ldr	r5, [r7, #0]
    b752:	b298      	uxth	r0, r3
    b754:	f010 0302 	ands.w	r3, r0, #2
    b758:	d1d1      	bne.n	b6fe <__sfvwrite_r+0x2a>
    b75a:	f010 0901 	ands.w	r9, r0, #1
    b75e:	d144      	bne.n	b7ea <__sfvwrite_r+0x116>
    b760:	464e      	mov	r6, r9
    b762:	9700      	str	r7, [sp, #0]
    b764:	b346      	cbz	r6, b7b8 <__sfvwrite_r+0xe4>
    b766:	0582      	lsls	r2, r0, #22
    b768:	f8d4 b008 	ldr.w	fp, [r4, #8]
    b76c:	f140 8085 	bpl.w	b87a <__sfvwrite_r+0x1a6>
    b770:	45b3      	cmp	fp, r6
    b772:	465a      	mov	r2, fp
    b774:	f200 80b4 	bhi.w	b8e0 <__sfvwrite_r+0x20c>
    b778:	f410 6f90 	tst.w	r0, #1152	; 0x480
    b77c:	f040 80c1 	bne.w	b902 <__sfvwrite_r+0x22e>
    b780:	6820      	ldr	r0, [r4, #0]
    b782:	9201      	str	r2, [sp, #4]
    b784:	4649      	mov	r1, r9
    b786:	f7fa feaf 	bl	64e8 <memmove>
    b78a:	68a3      	ldr	r3, [r4, #8]
    b78c:	9a01      	ldr	r2, [sp, #4]
    b78e:	eba3 010b 	sub.w	r1, r3, fp
    b792:	6823      	ldr	r3, [r4, #0]
    b794:	60a1      	str	r1, [r4, #8]
    b796:	4413      	add	r3, r2
    b798:	46b2      	mov	sl, r6
    b79a:	6023      	str	r3, [r4, #0]
    b79c:	2600      	movs	r6, #0
    b79e:	9a00      	ldr	r2, [sp, #0]
    b7a0:	6893      	ldr	r3, [r2, #8]
    b7a2:	eba3 030a 	sub.w	r3, r3, sl
    b7a6:	44d1      	add	r9, sl
    b7a8:	6093      	str	r3, [r2, #8]
    b7aa:	2b00      	cmp	r3, #0
    b7ac:	d0c3      	beq.n	b736 <__sfvwrite_r+0x62>
    b7ae:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    b7b2:	b280      	uxth	r0, r0
    b7b4:	2e00      	cmp	r6, #0
    b7b6:	d1d6      	bne.n	b766 <__sfvwrite_r+0x92>
    b7b8:	e9d5 9600 	ldrd	r9, r6, [r5]
    b7bc:	3508      	adds	r5, #8
    b7be:	e7d1      	b.n	b764 <__sfvwrite_r+0x90>
    b7c0:	e9d5 a600 	ldrd	sl, r6, [r5]
    b7c4:	3508      	adds	r5, #8
    b7c6:	e7a0      	b.n	b70a <__sfvwrite_r+0x36>
    b7c8:	4621      	mov	r1, r4
    b7ca:	4640      	mov	r0, r8
    b7cc:	f7fd fcd8 	bl	9180 <_fflush_r>
    b7d0:	b388      	cbz	r0, b836 <__sfvwrite_r+0x162>
    b7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b7da:	f04f 30ff 	mov.w	r0, #4294967295
    b7de:	81a3      	strh	r3, [r4, #12]
    b7e0:	b003      	add	sp, #12
    b7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7e6:	2000      	movs	r0, #0
    b7e8:	4770      	bx	lr
    b7ea:	461e      	mov	r6, r3
    b7ec:	46ba      	mov	sl, r7
    b7ee:	4699      	mov	r9, r3
    b7f0:	4618      	mov	r0, r3
    b7f2:	9500      	str	r5, [sp, #0]
    b7f4:	461f      	mov	r7, r3
    b7f6:	b366      	cbz	r6, b852 <__sfvwrite_r+0x17e>
    b7f8:	2800      	cmp	r0, #0
    b7fa:	d032      	beq.n	b862 <__sfvwrite_r+0x18e>
    b7fc:	464a      	mov	r2, r9
    b7fe:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    b802:	6820      	ldr	r0, [r4, #0]
    b804:	68a5      	ldr	r5, [r4, #8]
    b806:	42b2      	cmp	r2, r6
    b808:	bf28      	it	cs
    b80a:	4632      	movcs	r2, r6
    b80c:	4288      	cmp	r0, r1
    b80e:	d904      	bls.n	b81a <__sfvwrite_r+0x146>
    b810:	eb05 0b03 	add.w	fp, r5, r3
    b814:	455a      	cmp	r2, fp
    b816:	f300 80a7 	bgt.w	b968 <__sfvwrite_r+0x294>
    b81a:	4293      	cmp	r3, r2
    b81c:	dc64      	bgt.n	b8e8 <__sfvwrite_r+0x214>
    b81e:	69e1      	ldr	r1, [r4, #28]
    b820:	6a65      	ldr	r5, [r4, #36]	; 0x24
    b822:	463a      	mov	r2, r7
    b824:	4640      	mov	r0, r8
    b826:	47a8      	blx	r5
    b828:	f1b0 0b00 	subs.w	fp, r0, #0
    b82c:	ddd1      	ble.n	b7d2 <__sfvwrite_r+0xfe>
    b82e:	ebb9 090b 	subs.w	r9, r9, fp
    b832:	d0c9      	beq.n	b7c8 <__sfvwrite_r+0xf4>
    b834:	2001      	movs	r0, #1
    b836:	f8da 3008 	ldr.w	r3, [sl, #8]
    b83a:	eba3 030b 	sub.w	r3, r3, fp
    b83e:	445f      	add	r7, fp
    b840:	eba6 060b 	sub.w	r6, r6, fp
    b844:	f8ca 3008 	str.w	r3, [sl, #8]
    b848:	2b00      	cmp	r3, #0
    b84a:	f43f af74 	beq.w	b736 <__sfvwrite_r+0x62>
    b84e:	2e00      	cmp	r6, #0
    b850:	d1d2      	bne.n	b7f8 <__sfvwrite_r+0x124>
    b852:	9a00      	ldr	r2, [sp, #0]
    b854:	6856      	ldr	r6, [r2, #4]
    b856:	4613      	mov	r3, r2
    b858:	3208      	adds	r2, #8
    b85a:	9200      	str	r2, [sp, #0]
    b85c:	2e00      	cmp	r6, #0
    b85e:	d0f8      	beq.n	b852 <__sfvwrite_r+0x17e>
    b860:	681f      	ldr	r7, [r3, #0]
    b862:	4632      	mov	r2, r6
    b864:	210a      	movs	r1, #10
    b866:	4638      	mov	r0, r7
    b868:	f7fd fcd2 	bl	9210 <memchr>
    b86c:	2800      	cmp	r0, #0
    b86e:	f000 809c 	beq.w	b9aa <__sfvwrite_r+0x2d6>
    b872:	3001      	adds	r0, #1
    b874:	eba0 0907 	sub.w	r9, r0, r7
    b878:	e7c0      	b.n	b7fc <__sfvwrite_r+0x128>
    b87a:	6820      	ldr	r0, [r4, #0]
    b87c:	6923      	ldr	r3, [r4, #16]
    b87e:	4298      	cmp	r0, r3
    b880:	d816      	bhi.n	b8b0 <__sfvwrite_r+0x1dc>
    b882:	6962      	ldr	r2, [r4, #20]
    b884:	42b2      	cmp	r2, r6
    b886:	d813      	bhi.n	b8b0 <__sfvwrite_r+0x1dc>
    b888:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    b88c:	42b3      	cmp	r3, r6
    b88e:	bf28      	it	cs
    b890:	4633      	movcs	r3, r6
    b892:	69e1      	ldr	r1, [r4, #28]
    b894:	fb93 f3f2 	sdiv	r3, r3, r2
    b898:	6a67      	ldr	r7, [r4, #36]	; 0x24
    b89a:	fb02 f303 	mul.w	r3, r2, r3
    b89e:	4640      	mov	r0, r8
    b8a0:	464a      	mov	r2, r9
    b8a2:	47b8      	blx	r7
    b8a4:	f1b0 0a00 	subs.w	sl, r0, #0
    b8a8:	dd93      	ble.n	b7d2 <__sfvwrite_r+0xfe>
    b8aa:	eba6 060a 	sub.w	r6, r6, sl
    b8ae:	e776      	b.n	b79e <__sfvwrite_r+0xca>
    b8b0:	45b3      	cmp	fp, r6
    b8b2:	46da      	mov	sl, fp
    b8b4:	bf28      	it	cs
    b8b6:	46b2      	movcs	sl, r6
    b8b8:	4652      	mov	r2, sl
    b8ba:	4649      	mov	r1, r9
    b8bc:	f7fa fe14 	bl	64e8 <memmove>
    b8c0:	68a3      	ldr	r3, [r4, #8]
    b8c2:	6822      	ldr	r2, [r4, #0]
    b8c4:	eba3 030a 	sub.w	r3, r3, sl
    b8c8:	4452      	add	r2, sl
    b8ca:	60a3      	str	r3, [r4, #8]
    b8cc:	6022      	str	r2, [r4, #0]
    b8ce:	2b00      	cmp	r3, #0
    b8d0:	d1eb      	bne.n	b8aa <__sfvwrite_r+0x1d6>
    b8d2:	4621      	mov	r1, r4
    b8d4:	4640      	mov	r0, r8
    b8d6:	f7fd fc53 	bl	9180 <_fflush_r>
    b8da:	2800      	cmp	r0, #0
    b8dc:	d0e5      	beq.n	b8aa <__sfvwrite_r+0x1d6>
    b8de:	e778      	b.n	b7d2 <__sfvwrite_r+0xfe>
    b8e0:	6820      	ldr	r0, [r4, #0]
    b8e2:	46b3      	mov	fp, r6
    b8e4:	4632      	mov	r2, r6
    b8e6:	e74c      	b.n	b782 <__sfvwrite_r+0xae>
    b8e8:	4639      	mov	r1, r7
    b8ea:	9201      	str	r2, [sp, #4]
    b8ec:	f7fa fdfc 	bl	64e8 <memmove>
    b8f0:	9a01      	ldr	r2, [sp, #4]
    b8f2:	68a3      	ldr	r3, [r4, #8]
    b8f4:	1a9b      	subs	r3, r3, r2
    b8f6:	60a3      	str	r3, [r4, #8]
    b8f8:	6823      	ldr	r3, [r4, #0]
    b8fa:	4413      	add	r3, r2
    b8fc:	6023      	str	r3, [r4, #0]
    b8fe:	4693      	mov	fp, r2
    b900:	e795      	b.n	b82e <__sfvwrite_r+0x15a>
    b902:	6823      	ldr	r3, [r4, #0]
    b904:	6921      	ldr	r1, [r4, #16]
    b906:	eba3 0b01 	sub.w	fp, r3, r1
    b90a:	6963      	ldr	r3, [r4, #20]
    b90c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    b910:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    b914:	f10b 0301 	add.w	r3, fp, #1
    b918:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    b91c:	4433      	add	r3, r6
    b91e:	4553      	cmp	r3, sl
    b920:	4652      	mov	r2, sl
    b922:	bf84      	itt	hi
    b924:	469a      	movhi	sl, r3
    b926:	4652      	movhi	r2, sl
    b928:	0543      	lsls	r3, r0, #21
    b92a:	d52c      	bpl.n	b986 <__sfvwrite_r+0x2b2>
    b92c:	4611      	mov	r1, r2
    b92e:	4640      	mov	r0, r8
    b930:	f7f9 ffa2 	bl	5878 <_malloc_r>
    b934:	2800      	cmp	r0, #0
    b936:	d03b      	beq.n	b9b0 <__sfvwrite_r+0x2dc>
    b938:	465a      	mov	r2, fp
    b93a:	6921      	ldr	r1, [r4, #16]
    b93c:	9001      	str	r0, [sp, #4]
    b93e:	f7f8 fad7 	bl	3ef0 <memcpy>
    b942:	89a2      	ldrh	r2, [r4, #12]
    b944:	9b01      	ldr	r3, [sp, #4]
    b946:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    b94a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b94e:	81a2      	strh	r2, [r4, #12]
    b950:	eb03 000b 	add.w	r0, r3, fp
    b954:	6123      	str	r3, [r4, #16]
    b956:	ebaa 030b 	sub.w	r3, sl, fp
    b95a:	f8c4 a014 	str.w	sl, [r4, #20]
    b95e:	60a3      	str	r3, [r4, #8]
    b960:	6020      	str	r0, [r4, #0]
    b962:	46b3      	mov	fp, r6
    b964:	4632      	mov	r2, r6
    b966:	e70c      	b.n	b782 <__sfvwrite_r+0xae>
    b968:	4639      	mov	r1, r7
    b96a:	465a      	mov	r2, fp
    b96c:	f7fa fdbc 	bl	64e8 <memmove>
    b970:	6823      	ldr	r3, [r4, #0]
    b972:	445b      	add	r3, fp
    b974:	6023      	str	r3, [r4, #0]
    b976:	4621      	mov	r1, r4
    b978:	4640      	mov	r0, r8
    b97a:	f7fd fc01 	bl	9180 <_fflush_r>
    b97e:	2800      	cmp	r0, #0
    b980:	f43f af55 	beq.w	b82e <__sfvwrite_r+0x15a>
    b984:	e725      	b.n	b7d2 <__sfvwrite_r+0xfe>
    b986:	4640      	mov	r0, r8
    b988:	f7fa fa32 	bl	5df0 <_realloc_r>
    b98c:	4603      	mov	r3, r0
    b98e:	2800      	cmp	r0, #0
    b990:	d1de      	bne.n	b950 <__sfvwrite_r+0x27c>
    b992:	6921      	ldr	r1, [r4, #16]
    b994:	4640      	mov	r0, r8
    b996:	f7fb f821 	bl	69dc <_free_r>
    b99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b99e:	220c      	movs	r2, #12
    b9a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b9a4:	f8c8 2000 	str.w	r2, [r8]
    b9a8:	e715      	b.n	b7d6 <__sfvwrite_r+0x102>
    b9aa:	1c72      	adds	r2, r6, #1
    b9ac:	4691      	mov	r9, r2
    b9ae:	e726      	b.n	b7fe <__sfvwrite_r+0x12a>
    b9b0:	220c      	movs	r2, #12
    b9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b9b6:	f8c8 2000 	str.w	r2, [r8]
    b9ba:	e70c      	b.n	b7d6 <__sfvwrite_r+0x102>
    b9bc:	f04f 30ff 	mov.w	r0, #4294967295
    b9c0:	e6ba      	b.n	b738 <__sfvwrite_r+0x64>
    b9c2:	bf00      	nop
    b9c4:	7ffffc00 	.word	0x7ffffc00

0000b9c8 <__swsetup_r>:
    b9c8:	b538      	push	{r3, r4, r5, lr}
    b9ca:	4b31      	ldr	r3, [pc, #196]	; (ba90 <__swsetup_r+0xc8>)
    b9cc:	681b      	ldr	r3, [r3, #0]
    b9ce:	4605      	mov	r5, r0
    b9d0:	460c      	mov	r4, r1
    b9d2:	b113      	cbz	r3, b9da <__swsetup_r+0x12>
    b9d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    b9d6:	2a00      	cmp	r2, #0
    b9d8:	d04e      	beq.n	ba78 <__swsetup_r+0xb0>
    b9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b9de:	0718      	lsls	r0, r3, #28
    b9e0:	b29a      	uxth	r2, r3
    b9e2:	d51c      	bpl.n	ba1e <__swsetup_r+0x56>
    b9e4:	6921      	ldr	r1, [r4, #16]
    b9e6:	b329      	cbz	r1, ba34 <__swsetup_r+0x6c>
    b9e8:	f012 0001 	ands.w	r0, r2, #1
    b9ec:	d007      	beq.n	b9fe <__swsetup_r+0x36>
    b9ee:	2000      	movs	r0, #0
    b9f0:	60a0      	str	r0, [r4, #8]
    b9f2:	6960      	ldr	r0, [r4, #20]
    b9f4:	4240      	negs	r0, r0
    b9f6:	61a0      	str	r0, [r4, #24]
    b9f8:	b139      	cbz	r1, ba0a <__swsetup_r+0x42>
    b9fa:	2000      	movs	r0, #0
    b9fc:	bd38      	pop	{r3, r4, r5, pc}
    b9fe:	0795      	lsls	r5, r2, #30
    ba00:	bf58      	it	pl
    ba02:	6960      	ldrpl	r0, [r4, #20]
    ba04:	60a0      	str	r0, [r4, #8]
    ba06:	2900      	cmp	r1, #0
    ba08:	d1f7      	bne.n	b9fa <__swsetup_r+0x32>
    ba0a:	0612      	lsls	r2, r2, #24
    ba0c:	bf58      	it	pl
    ba0e:	4608      	movpl	r0, r1
    ba10:	d5f4      	bpl.n	b9fc <__swsetup_r+0x34>
    ba12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba16:	81a3      	strh	r3, [r4, #12]
    ba18:	f04f 30ff 	mov.w	r0, #4294967295
    ba1c:	bd38      	pop	{r3, r4, r5, pc}
    ba1e:	06d1      	lsls	r1, r2, #27
    ba20:	d52e      	bpl.n	ba80 <__swsetup_r+0xb8>
    ba22:	0752      	lsls	r2, r2, #29
    ba24:	d414      	bmi.n	ba50 <__swsetup_r+0x88>
    ba26:	6921      	ldr	r1, [r4, #16]
    ba28:	f043 0308 	orr.w	r3, r3, #8
    ba2c:	81a3      	strh	r3, [r4, #12]
    ba2e:	b29a      	uxth	r2, r3
    ba30:	2900      	cmp	r1, #0
    ba32:	d1d9      	bne.n	b9e8 <__swsetup_r+0x20>
    ba34:	f402 7020 	and.w	r0, r2, #640	; 0x280
    ba38:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    ba3c:	d0d4      	beq.n	b9e8 <__swsetup_r+0x20>
    ba3e:	4621      	mov	r1, r4
    ba40:	4628      	mov	r0, r5
    ba42:	f000 f947 	bl	bcd4 <__smakebuf_r>
    ba46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ba4a:	6921      	ldr	r1, [r4, #16]
    ba4c:	b29a      	uxth	r2, r3
    ba4e:	e7cb      	b.n	b9e8 <__swsetup_r+0x20>
    ba50:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ba52:	b151      	cbz	r1, ba6a <__swsetup_r+0xa2>
    ba54:	f104 0240 	add.w	r2, r4, #64	; 0x40
    ba58:	4291      	cmp	r1, r2
    ba5a:	d004      	beq.n	ba66 <__swsetup_r+0x9e>
    ba5c:	4628      	mov	r0, r5
    ba5e:	f7fa ffbd 	bl	69dc <_free_r>
    ba62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ba66:	2200      	movs	r2, #0
    ba68:	6322      	str	r2, [r4, #48]	; 0x30
    ba6a:	6921      	ldr	r1, [r4, #16]
    ba6c:	2200      	movs	r2, #0
    ba6e:	e9c4 1200 	strd	r1, r2, [r4]
    ba72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    ba76:	e7d7      	b.n	ba28 <__swsetup_r+0x60>
    ba78:	4618      	mov	r0, r3
    ba7a:	f7fa fc3b 	bl	62f4 <__sinit>
    ba7e:	e7ac      	b.n	b9da <__swsetup_r+0x12>
    ba80:	2209      	movs	r2, #9
    ba82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba86:	602a      	str	r2, [r5, #0]
    ba88:	f04f 30ff 	mov.w	r0, #4294967295
    ba8c:	81a3      	strh	r3, [r4, #12]
    ba8e:	bd38      	pop	{r3, r4, r5, pc}
    ba90:	1fff0ec0 	.word	0x1fff0ec0

0000ba94 <__fputwc>:
    ba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba98:	b082      	sub	sp, #8
    ba9a:	4682      	mov	sl, r0
    ba9c:	4688      	mov	r8, r1
    ba9e:	4614      	mov	r4, r2
    baa0:	f7fa fe22 	bl	66e8 <__locale_mb_cur_max>
    baa4:	2801      	cmp	r0, #1
    baa6:	d103      	bne.n	bab0 <__fputwc+0x1c>
    baa8:	f108 33ff 	add.w	r3, r8, #4294967295
    baac:	2bfe      	cmp	r3, #254	; 0xfe
    baae:	d936      	bls.n	bb1e <__fputwc+0x8a>
    bab0:	f10d 0904 	add.w	r9, sp, #4
    bab4:	4642      	mov	r2, r8
    bab6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    baba:	4649      	mov	r1, r9
    babc:	4650      	mov	r0, sl
    babe:	f7fe fd01 	bl	a4c4 <_wcrtomb_r>
    bac2:	1c42      	adds	r2, r0, #1
    bac4:	4606      	mov	r6, r0
    bac6:	d032      	beq.n	bb2e <__fputwc+0x9a>
    bac8:	b320      	cbz	r0, bb14 <__fputwc+0x80>
    baca:	f89d c004 	ldrb.w	ip, [sp, #4]
    bace:	2500      	movs	r5, #0
    bad0:	e009      	b.n	bae6 <__fputwc+0x52>
    bad2:	6823      	ldr	r3, [r4, #0]
    bad4:	1c5a      	adds	r2, r3, #1
    bad6:	6022      	str	r2, [r4, #0]
    bad8:	f883 c000 	strb.w	ip, [r3]
    badc:	3501      	adds	r5, #1
    bade:	42b5      	cmp	r5, r6
    bae0:	d218      	bcs.n	bb14 <__fputwc+0x80>
    bae2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    bae6:	68a3      	ldr	r3, [r4, #8]
    bae8:	3b01      	subs	r3, #1
    baea:	2b00      	cmp	r3, #0
    baec:	60a3      	str	r3, [r4, #8]
    baee:	daf0      	bge.n	bad2 <__fputwc+0x3e>
    baf0:	69a7      	ldr	r7, [r4, #24]
    baf2:	42bb      	cmp	r3, r7
    baf4:	4661      	mov	r1, ip
    baf6:	4622      	mov	r2, r4
    baf8:	4650      	mov	r0, sl
    bafa:	db02      	blt.n	bb02 <__fputwc+0x6e>
    bafc:	f1bc 0f0a 	cmp.w	ip, #10
    bb00:	d1e7      	bne.n	bad2 <__fputwc+0x3e>
    bb02:	f000 f953 	bl	bdac <__swbuf_r>
    bb06:	1c43      	adds	r3, r0, #1
    bb08:	d1e8      	bne.n	badc <__fputwc+0x48>
    bb0a:	4606      	mov	r6, r0
    bb0c:	4630      	mov	r0, r6
    bb0e:	b002      	add	sp, #8
    bb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb14:	4646      	mov	r6, r8
    bb16:	4630      	mov	r0, r6
    bb18:	b002      	add	sp, #8
    bb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb1e:	fa5f fc88 	uxtb.w	ip, r8
    bb22:	f88d c004 	strb.w	ip, [sp, #4]
    bb26:	4606      	mov	r6, r0
    bb28:	f10d 0904 	add.w	r9, sp, #4
    bb2c:	e7cf      	b.n	bace <__fputwc+0x3a>
    bb2e:	89a3      	ldrh	r3, [r4, #12]
    bb30:	4630      	mov	r0, r6
    bb32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb36:	81a3      	strh	r3, [r4, #12]
    bb38:	b002      	add	sp, #8
    bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb3e:	bf00      	nop

0000bb40 <_fputwc_r>:
    bb40:	b530      	push	{r4, r5, lr}
    bb42:	6e53      	ldr	r3, [r2, #100]	; 0x64
    bb44:	f013 0f01 	tst.w	r3, #1
    bb48:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    bb4c:	4614      	mov	r4, r2
    bb4e:	b083      	sub	sp, #12
    bb50:	4605      	mov	r5, r0
    bb52:	b29a      	uxth	r2, r3
    bb54:	d101      	bne.n	bb5a <_fputwc_r+0x1a>
    bb56:	0598      	lsls	r0, r3, #22
    bb58:	d51c      	bpl.n	bb94 <_fputwc_r+0x54>
    bb5a:	0490      	lsls	r0, r2, #18
    bb5c:	d406      	bmi.n	bb6c <_fputwc_r+0x2c>
    bb5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    bb60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bb64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    bb68:	81a3      	strh	r3, [r4, #12]
    bb6a:	6662      	str	r2, [r4, #100]	; 0x64
    bb6c:	4622      	mov	r2, r4
    bb6e:	4628      	mov	r0, r5
    bb70:	f7ff ff90 	bl	ba94 <__fputwc>
    bb74:	6e63      	ldr	r3, [r4, #100]	; 0x64
    bb76:	07da      	lsls	r2, r3, #31
    bb78:	4605      	mov	r5, r0
    bb7a:	d402      	bmi.n	bb82 <_fputwc_r+0x42>
    bb7c:	89a3      	ldrh	r3, [r4, #12]
    bb7e:	059b      	lsls	r3, r3, #22
    bb80:	d502      	bpl.n	bb88 <_fputwc_r+0x48>
    bb82:	4628      	mov	r0, r5
    bb84:	b003      	add	sp, #12
    bb86:	bd30      	pop	{r4, r5, pc}
    bb88:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bb8a:	f7fa fe49 	bl	6820 <__retarget_lock_release_recursive>
    bb8e:	4628      	mov	r0, r5
    bb90:	b003      	add	sp, #12
    bb92:	bd30      	pop	{r4, r5, pc}
    bb94:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bb96:	9101      	str	r1, [sp, #4]
    bb98:	f7fa fe40 	bl	681c <__retarget_lock_acquire_recursive>
    bb9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bba0:	9901      	ldr	r1, [sp, #4]
    bba2:	b29a      	uxth	r2, r3
    bba4:	e7d9      	b.n	bb5a <_fputwc_r+0x1a>
    bba6:	bf00      	nop

0000bba8 <_wcsnrtombs_l>:
    bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbac:	b08b      	sub	sp, #44	; 0x2c
    bbae:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    bbb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
    bbb4:	9103      	str	r1, [sp, #12]
    bbb6:	4681      	mov	r9, r0
    bbb8:	9205      	str	r2, [sp, #20]
    bbba:	461e      	mov	r6, r3
    bbbc:	f1b8 0f00 	cmp.w	r8, #0
    bbc0:	d05c      	beq.n	bc7c <_wcsnrtombs_l+0xd4>
    bbc2:	9b03      	ldr	r3, [sp, #12]
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d05e      	beq.n	bc86 <_wcsnrtombs_l+0xde>
    bbc8:	9b05      	ldr	r3, [sp, #20]
    bbca:	681d      	ldr	r5, [r3, #0]
    bbcc:	2f00      	cmp	r7, #0
    bbce:	d06a      	beq.n	bca6 <_wcsnrtombs_l+0xfe>
    bbd0:	1e74      	subs	r4, r6, #1
    bbd2:	b34e      	cbz	r6, bc28 <_wcsnrtombs_l+0x80>
    bbd4:	9b03      	ldr	r3, [sp, #12]
    bbd6:	9304      	str	r3, [sp, #16]
    bbd8:	3d04      	subs	r5, #4
    bbda:	2600      	movs	r6, #0
    bbdc:	9501      	str	r5, [sp, #4]
    bbde:	e00b      	b.n	bbf8 <_wcsnrtombs_l+0x50>
    bbe0:	9b03      	ldr	r3, [sp, #12]
    bbe2:	bb2b      	cbnz	r3, bc30 <_wcsnrtombs_l+0x88>
    bbe4:	9b01      	ldr	r3, [sp, #4]
    bbe6:	681a      	ldr	r2, [r3, #0]
    bbe8:	2a00      	cmp	r2, #0
    bbea:	d03a      	beq.n	bc62 <_wcsnrtombs_l+0xba>
    bbec:	45bc      	cmp	ip, r7
    bbee:	d25c      	bcs.n	bcaa <_wcsnrtombs_l+0x102>
    bbf0:	3c01      	subs	r4, #1
    bbf2:	1c63      	adds	r3, r4, #1
    bbf4:	4666      	mov	r6, ip
    bbf6:	d017      	beq.n	bc28 <_wcsnrtombs_l+0x80>
    bbf8:	f8d8 3000 	ldr.w	r3, [r8]
    bbfc:	9302      	str	r3, [sp, #8]
    bbfe:	9b01      	ldr	r3, [sp, #4]
    bc00:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    bc04:	f853 2f04 	ldr.w	r2, [r3, #4]!
    bc08:	9301      	str	r3, [sp, #4]
    bc0a:	a907      	add	r1, sp, #28
    bc0c:	4643      	mov	r3, r8
    bc0e:	4648      	mov	r0, r9
    bc10:	f8d8 b004 	ldr.w	fp, [r8, #4]
    bc14:	47a8      	blx	r5
    bc16:	1c42      	adds	r2, r0, #1
    bc18:	d03a      	beq.n	bc90 <_wcsnrtombs_l+0xe8>
    bc1a:	eb00 0c06 	add.w	ip, r0, r6
    bc1e:	45bc      	cmp	ip, r7
    bc20:	d9de      	bls.n	bbe0 <_wcsnrtombs_l+0x38>
    bc22:	9b02      	ldr	r3, [sp, #8]
    bc24:	e9c8 3b00 	strd	r3, fp, [r8]
    bc28:	4630      	mov	r0, r6
    bc2a:	b00b      	add	sp, #44	; 0x2c
    bc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc30:	2800      	cmp	r0, #0
    bc32:	dd0e      	ble.n	bc52 <_wcsnrtombs_l+0xaa>
    bc34:	9b04      	ldr	r3, [sp, #16]
    bc36:	9d01      	ldr	r5, [sp, #4]
    bc38:	4418      	add	r0, r3
    bc3a:	1e5a      	subs	r2, r3, #1
    bc3c:	a907      	add	r1, sp, #28
    bc3e:	f100 3eff 	add.w	lr, r0, #4294967295
    bc42:	f811 3b01 	ldrb.w	r3, [r1], #1
    bc46:	f802 3f01 	strb.w	r3, [r2, #1]!
    bc4a:	4572      	cmp	r2, lr
    bc4c:	d1f9      	bne.n	bc42 <_wcsnrtombs_l+0x9a>
    bc4e:	9501      	str	r5, [sp, #4]
    bc50:	9004      	str	r0, [sp, #16]
    bc52:	9b05      	ldr	r3, [sp, #20]
    bc54:	681a      	ldr	r2, [r3, #0]
    bc56:	3204      	adds	r2, #4
    bc58:	601a      	str	r2, [r3, #0]
    bc5a:	9b01      	ldr	r3, [sp, #4]
    bc5c:	681a      	ldr	r2, [r3, #0]
    bc5e:	2a00      	cmp	r2, #0
    bc60:	d1c4      	bne.n	bbec <_wcsnrtombs_l+0x44>
    bc62:	9b03      	ldr	r3, [sp, #12]
    bc64:	b10b      	cbz	r3, bc6a <_wcsnrtombs_l+0xc2>
    bc66:	9b05      	ldr	r3, [sp, #20]
    bc68:	601a      	str	r2, [r3, #0]
    bc6a:	f10c 36ff 	add.w	r6, ip, #4294967295
    bc6e:	2200      	movs	r2, #0
    bc70:	4630      	mov	r0, r6
    bc72:	f8c8 2000 	str.w	r2, [r8]
    bc76:	b00b      	add	sp, #44	; 0x2c
    bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc7c:	9b03      	ldr	r3, [sp, #12]
    bc7e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    bc82:	2b00      	cmp	r3, #0
    bc84:	d1a0      	bne.n	bbc8 <_wcsnrtombs_l+0x20>
    bc86:	9b05      	ldr	r3, [sp, #20]
    bc88:	f04f 37ff 	mov.w	r7, #4294967295
    bc8c:	681d      	ldr	r5, [r3, #0]
    bc8e:	e79f      	b.n	bbd0 <_wcsnrtombs_l+0x28>
    bc90:	4606      	mov	r6, r0
    bc92:	218a      	movs	r1, #138	; 0x8a
    bc94:	2200      	movs	r2, #0
    bc96:	4630      	mov	r0, r6
    bc98:	f8c9 1000 	str.w	r1, [r9]
    bc9c:	f8c8 2000 	str.w	r2, [r8]
    bca0:	b00b      	add	sp, #44	; 0x2c
    bca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bca6:	463e      	mov	r6, r7
    bca8:	e7be      	b.n	bc28 <_wcsnrtombs_l+0x80>
    bcaa:	4666      	mov	r6, ip
    bcac:	e7bc      	b.n	bc28 <_wcsnrtombs_l+0x80>
    bcae:	bf00      	nop

0000bcb0 <_wcsnrtombs_r>:
    bcb0:	b510      	push	{r4, lr}
    bcb2:	b084      	sub	sp, #16
    bcb4:	4c05      	ldr	r4, [pc, #20]	; (bccc <_wcsnrtombs_r+0x1c>)
    bcb6:	9806      	ldr	r0, [sp, #24]
    bcb8:	9000      	str	r0, [sp, #0]
    bcba:	9807      	ldr	r0, [sp, #28]
    bcbc:	9001      	str	r0, [sp, #4]
    bcbe:	4804      	ldr	r0, [pc, #16]	; (bcd0 <_wcsnrtombs_r+0x20>)
    bcc0:	6800      	ldr	r0, [r0, #0]
    bcc2:	9402      	str	r4, [sp, #8]
    bcc4:	f7ff ff70 	bl	bba8 <_wcsnrtombs_l>
    bcc8:	b004      	add	sp, #16
    bcca:	bd10      	pop	{r4, pc}
    bccc:	1fff0c30 	.word	0x1fff0c30
    bcd0:	1fff0ec0 	.word	0x1fff0ec0

0000bcd4 <__smakebuf_r>:
    bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bcd8:	898b      	ldrh	r3, [r1, #12]
    bcda:	460c      	mov	r4, r1
    bcdc:	0799      	lsls	r1, r3, #30
    bcde:	b096      	sub	sp, #88	; 0x58
    bce0:	d508      	bpl.n	bcf4 <__smakebuf_r+0x20>
    bce2:	f104 0343 	add.w	r3, r4, #67	; 0x43
    bce6:	2201      	movs	r2, #1
    bce8:	e9c4 3204 	strd	r3, r2, [r4, #16]
    bcec:	6023      	str	r3, [r4, #0]
    bcee:	b016      	add	sp, #88	; 0x58
    bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bcf8:	2900      	cmp	r1, #0
    bcfa:	4606      	mov	r6, r0
    bcfc:	db25      	blt.n	bd4a <__smakebuf_r+0x76>
    bcfe:	466a      	mov	r2, sp
    bd00:	f000 f8ac 	bl	be5c <_fstat_r>
    bd04:	2800      	cmp	r0, #0
    bd06:	db1f      	blt.n	bd48 <__smakebuf_r+0x74>
    bd08:	9d01      	ldr	r5, [sp, #4]
    bd0a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    bd0e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    bd12:	fab5 f585 	clz	r5, r5
    bd16:	f44f 6880 	mov.w	r8, #1024	; 0x400
    bd1a:	096d      	lsrs	r5, r5, #5
    bd1c:	f44f 6700 	mov.w	r7, #2048	; 0x800
    bd20:	4641      	mov	r1, r8
    bd22:	4630      	mov	r0, r6
    bd24:	f7f9 fda8 	bl	5878 <_malloc_r>
    bd28:	b1e0      	cbz	r0, bd64 <__smakebuf_r+0x90>
    bd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bd2e:	f8c4 8014 	str.w	r8, [r4, #20]
    bd32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd36:	6020      	str	r0, [r4, #0]
    bd38:	6120      	str	r0, [r4, #16]
    bd3a:	81a3      	strh	r3, [r4, #12]
    bd3c:	bb35      	cbnz	r5, bd8c <__smakebuf_r+0xb8>
    bd3e:	433b      	orrs	r3, r7
    bd40:	81a3      	strh	r3, [r4, #12]
    bd42:	b016      	add	sp, #88	; 0x58
    bd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd48:	89a3      	ldrh	r3, [r4, #12]
    bd4a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    bd4e:	d019      	beq.n	bd84 <__smakebuf_r+0xb0>
    bd50:	f04f 0840 	mov.w	r8, #64	; 0x40
    bd54:	2500      	movs	r5, #0
    bd56:	4641      	mov	r1, r8
    bd58:	4630      	mov	r0, r6
    bd5a:	462f      	mov	r7, r5
    bd5c:	f7f9 fd8c 	bl	5878 <_malloc_r>
    bd60:	2800      	cmp	r0, #0
    bd62:	d1e2      	bne.n	bd2a <__smakebuf_r+0x56>
    bd64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bd68:	059a      	lsls	r2, r3, #22
    bd6a:	d4c0      	bmi.n	bcee <__smakebuf_r+0x1a>
    bd6c:	f023 0303 	bic.w	r3, r3, #3
    bd70:	f104 0243 	add.w	r2, r4, #67	; 0x43
    bd74:	f043 0302 	orr.w	r3, r3, #2
    bd78:	2101      	movs	r1, #1
    bd7a:	e9c4 2104 	strd	r2, r1, [r4, #16]
    bd7e:	81a3      	strh	r3, [r4, #12]
    bd80:	6022      	str	r2, [r4, #0]
    bd82:	e7b4      	b.n	bcee <__smakebuf_r+0x1a>
    bd84:	f44f 6880 	mov.w	r8, #1024	; 0x400
    bd88:	462f      	mov	r7, r5
    bd8a:	e7c9      	b.n	bd20 <__smakebuf_r+0x4c>
    bd8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bd90:	4630      	mov	r0, r6
    bd92:	f000 f879 	bl	be88 <_isatty_r>
    bd96:	b910      	cbnz	r0, bd9e <__smakebuf_r+0xca>
    bd98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bd9c:	e7cf      	b.n	bd3e <__smakebuf_r+0x6a>
    bd9e:	89a3      	ldrh	r3, [r4, #12]
    bda0:	f023 0303 	bic.w	r3, r3, #3
    bda4:	f043 0301 	orr.w	r3, r3, #1
    bda8:	b21b      	sxth	r3, r3
    bdaa:	e7c8      	b.n	bd3e <__smakebuf_r+0x6a>

0000bdac <__swbuf_r>:
    bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdae:	460d      	mov	r5, r1
    bdb0:	4614      	mov	r4, r2
    bdb2:	4606      	mov	r6, r0
    bdb4:	b110      	cbz	r0, bdbc <__swbuf_r+0x10>
    bdb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d04c      	beq.n	be56 <__swbuf_r+0xaa>
    bdbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    bdc0:	69a3      	ldr	r3, [r4, #24]
    bdc2:	60a3      	str	r3, [r4, #8]
    bdc4:	0717      	lsls	r7, r2, #28
    bdc6:	b290      	uxth	r0, r2
    bdc8:	d51b      	bpl.n	be02 <__swbuf_r+0x56>
    bdca:	6923      	ldr	r3, [r4, #16]
    bdcc:	b1cb      	cbz	r3, be02 <__swbuf_r+0x56>
    bdce:	b2ed      	uxtb	r5, r5
    bdd0:	0481      	lsls	r1, r0, #18
    bdd2:	462f      	mov	r7, r5
    bdd4:	d522      	bpl.n	be1c <__swbuf_r+0x70>
    bdd6:	6822      	ldr	r2, [r4, #0]
    bdd8:	6961      	ldr	r1, [r4, #20]
    bdda:	1ad3      	subs	r3, r2, r3
    bddc:	4299      	cmp	r1, r3
    bdde:	dd29      	ble.n	be34 <__swbuf_r+0x88>
    bde0:	3301      	adds	r3, #1
    bde2:	68a1      	ldr	r1, [r4, #8]
    bde4:	3901      	subs	r1, #1
    bde6:	60a1      	str	r1, [r4, #8]
    bde8:	1c51      	adds	r1, r2, #1
    bdea:	6021      	str	r1, [r4, #0]
    bdec:	7015      	strb	r5, [r2, #0]
    bdee:	6962      	ldr	r2, [r4, #20]
    bdf0:	429a      	cmp	r2, r3
    bdf2:	d027      	beq.n	be44 <__swbuf_r+0x98>
    bdf4:	89a3      	ldrh	r3, [r4, #12]
    bdf6:	07db      	lsls	r3, r3, #31
    bdf8:	d501      	bpl.n	bdfe <__swbuf_r+0x52>
    bdfa:	2d0a      	cmp	r5, #10
    bdfc:	d022      	beq.n	be44 <__swbuf_r+0x98>
    bdfe:	4638      	mov	r0, r7
    be00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be02:	4621      	mov	r1, r4
    be04:	4630      	mov	r0, r6
    be06:	f7ff fddf 	bl	b9c8 <__swsetup_r>
    be0a:	bb08      	cbnz	r0, be50 <__swbuf_r+0xa4>
    be0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    be10:	6923      	ldr	r3, [r4, #16]
    be12:	b290      	uxth	r0, r2
    be14:	b2ed      	uxtb	r5, r5
    be16:	0481      	lsls	r1, r0, #18
    be18:	462f      	mov	r7, r5
    be1a:	d4dc      	bmi.n	bdd6 <__swbuf_r+0x2a>
    be1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    be20:	81a2      	strh	r2, [r4, #12]
    be22:	6e62      	ldr	r2, [r4, #100]	; 0x64
    be24:	6961      	ldr	r1, [r4, #20]
    be26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    be2a:	6662      	str	r2, [r4, #100]	; 0x64
    be2c:	6822      	ldr	r2, [r4, #0]
    be2e:	1ad3      	subs	r3, r2, r3
    be30:	4299      	cmp	r1, r3
    be32:	dcd5      	bgt.n	bde0 <__swbuf_r+0x34>
    be34:	4621      	mov	r1, r4
    be36:	4630      	mov	r0, r6
    be38:	f7fd f9a2 	bl	9180 <_fflush_r>
    be3c:	b940      	cbnz	r0, be50 <__swbuf_r+0xa4>
    be3e:	6822      	ldr	r2, [r4, #0]
    be40:	2301      	movs	r3, #1
    be42:	e7ce      	b.n	bde2 <__swbuf_r+0x36>
    be44:	4621      	mov	r1, r4
    be46:	4630      	mov	r0, r6
    be48:	f7fd f99a 	bl	9180 <_fflush_r>
    be4c:	2800      	cmp	r0, #0
    be4e:	d0d6      	beq.n	bdfe <__swbuf_r+0x52>
    be50:	f04f 37ff 	mov.w	r7, #4294967295
    be54:	e7d3      	b.n	bdfe <__swbuf_r+0x52>
    be56:	f7fa fa4d 	bl	62f4 <__sinit>
    be5a:	e7af      	b.n	bdbc <__swbuf_r+0x10>

0000be5c <_fstat_r>:
    be5c:	b570      	push	{r4, r5, r6, lr}
    be5e:	460c      	mov	r4, r1
    be60:	4d08      	ldr	r5, [pc, #32]	; (be84 <_fstat_r+0x28>)
    be62:	4603      	mov	r3, r0
    be64:	2600      	movs	r6, #0
    be66:	4620      	mov	r0, r4
    be68:	4611      	mov	r1, r2
    be6a:	461c      	mov	r4, r3
    be6c:	602e      	str	r6, [r5, #0]
    be6e:	f7f8 f961 	bl	4134 <_fstat>
    be72:	1c43      	adds	r3, r0, #1
    be74:	d000      	beq.n	be78 <_fstat_r+0x1c>
    be76:	bd70      	pop	{r4, r5, r6, pc}
    be78:	682b      	ldr	r3, [r5, #0]
    be7a:	2b00      	cmp	r3, #0
    be7c:	d0fb      	beq.n	be76 <_fstat_r+0x1a>
    be7e:	6023      	str	r3, [r4, #0]
    be80:	bd70      	pop	{r4, r5, r6, pc}
    be82:	bf00      	nop
    be84:	1fff63d4 	.word	0x1fff63d4

0000be88 <_isatty_r>:
    be88:	b538      	push	{r3, r4, r5, lr}
    be8a:	4d07      	ldr	r5, [pc, #28]	; (bea8 <_isatty_r+0x20>)
    be8c:	2200      	movs	r2, #0
    be8e:	4604      	mov	r4, r0
    be90:	4608      	mov	r0, r1
    be92:	602a      	str	r2, [r5, #0]
    be94:	f7f8 f954 	bl	4140 <_isatty>
    be98:	1c43      	adds	r3, r0, #1
    be9a:	d000      	beq.n	be9e <_isatty_r+0x16>
    be9c:	bd38      	pop	{r3, r4, r5, pc}
    be9e:	682b      	ldr	r3, [r5, #0]
    bea0:	2b00      	cmp	r3, #0
    bea2:	d0fb      	beq.n	be9c <_isatty_r+0x14>
    bea4:	6023      	str	r3, [r4, #0]
    bea6:	bd38      	pop	{r3, r4, r5, pc}
    bea8:	1fff63d4 	.word	0x1fff63d4

0000beac <__aeabi_dmul>:
    beac:	b570      	push	{r4, r5, r6, lr}
    beae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    beb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    beb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    beba:	bf1d      	ittte	ne
    bebc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bec0:	ea94 0f0c 	teqne	r4, ip
    bec4:	ea95 0f0c 	teqne	r5, ip
    bec8:	f000 f8de 	bleq	c088 <__aeabi_dmul+0x1dc>
    becc:	442c      	add	r4, r5
    bece:	ea81 0603 	eor.w	r6, r1, r3
    bed2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    bed6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    beda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    bede:	bf18      	it	ne
    bee0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    bee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    beec:	d038      	beq.n	bf60 <__aeabi_dmul+0xb4>
    beee:	fba0 ce02 	umull	ip, lr, r0, r2
    bef2:	f04f 0500 	mov.w	r5, #0
    bef6:	fbe1 e502 	umlal	lr, r5, r1, r2
    befa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    befe:	fbe0 e503 	umlal	lr, r5, r0, r3
    bf02:	f04f 0600 	mov.w	r6, #0
    bf06:	fbe1 5603 	umlal	r5, r6, r1, r3
    bf0a:	f09c 0f00 	teq	ip, #0
    bf0e:	bf18      	it	ne
    bf10:	f04e 0e01 	orrne.w	lr, lr, #1
    bf14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    bf18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    bf1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    bf20:	d204      	bcs.n	bf2c <__aeabi_dmul+0x80>
    bf22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    bf26:	416d      	adcs	r5, r5
    bf28:	eb46 0606 	adc.w	r6, r6, r6
    bf2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    bf30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    bf34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    bf38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    bf3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    bf40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    bf44:	bf88      	it	hi
    bf46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    bf4a:	d81e      	bhi.n	bf8a <__aeabi_dmul+0xde>
    bf4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    bf50:	bf08      	it	eq
    bf52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    bf56:	f150 0000 	adcs.w	r0, r0, #0
    bf5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bf5e:	bd70      	pop	{r4, r5, r6, pc}
    bf60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    bf64:	ea46 0101 	orr.w	r1, r6, r1
    bf68:	ea40 0002 	orr.w	r0, r0, r2
    bf6c:	ea81 0103 	eor.w	r1, r1, r3
    bf70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    bf74:	bfc2      	ittt	gt
    bf76:	ebd4 050c 	rsbsgt	r5, r4, ip
    bf7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    bf7e:	bd70      	popgt	{r4, r5, r6, pc}
    bf80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bf84:	f04f 0e00 	mov.w	lr, #0
    bf88:	3c01      	subs	r4, #1
    bf8a:	f300 80ab 	bgt.w	c0e4 <__aeabi_dmul+0x238>
    bf8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    bf92:	bfde      	ittt	le
    bf94:	2000      	movle	r0, #0
    bf96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    bf9a:	bd70      	pople	{r4, r5, r6, pc}
    bf9c:	f1c4 0400 	rsb	r4, r4, #0
    bfa0:	3c20      	subs	r4, #32
    bfa2:	da35      	bge.n	c010 <__aeabi_dmul+0x164>
    bfa4:	340c      	adds	r4, #12
    bfa6:	dc1b      	bgt.n	bfe0 <__aeabi_dmul+0x134>
    bfa8:	f104 0414 	add.w	r4, r4, #20
    bfac:	f1c4 0520 	rsb	r5, r4, #32
    bfb0:	fa00 f305 	lsl.w	r3, r0, r5
    bfb4:	fa20 f004 	lsr.w	r0, r0, r4
    bfb8:	fa01 f205 	lsl.w	r2, r1, r5
    bfbc:	ea40 0002 	orr.w	r0, r0, r2
    bfc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    bfc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bfc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    bfcc:	fa21 f604 	lsr.w	r6, r1, r4
    bfd0:	eb42 0106 	adc.w	r1, r2, r6
    bfd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bfd8:	bf08      	it	eq
    bfda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bfde:	bd70      	pop	{r4, r5, r6, pc}
    bfe0:	f1c4 040c 	rsb	r4, r4, #12
    bfe4:	f1c4 0520 	rsb	r5, r4, #32
    bfe8:	fa00 f304 	lsl.w	r3, r0, r4
    bfec:	fa20 f005 	lsr.w	r0, r0, r5
    bff0:	fa01 f204 	lsl.w	r2, r1, r4
    bff4:	ea40 0002 	orr.w	r0, r0, r2
    bff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bffc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c000:	f141 0100 	adc.w	r1, r1, #0
    c004:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c008:	bf08      	it	eq
    c00a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c00e:	bd70      	pop	{r4, r5, r6, pc}
    c010:	f1c4 0520 	rsb	r5, r4, #32
    c014:	fa00 f205 	lsl.w	r2, r0, r5
    c018:	ea4e 0e02 	orr.w	lr, lr, r2
    c01c:	fa20 f304 	lsr.w	r3, r0, r4
    c020:	fa01 f205 	lsl.w	r2, r1, r5
    c024:	ea43 0302 	orr.w	r3, r3, r2
    c028:	fa21 f004 	lsr.w	r0, r1, r4
    c02c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c030:	fa21 f204 	lsr.w	r2, r1, r4
    c034:	ea20 0002 	bic.w	r0, r0, r2
    c038:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c03c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c040:	bf08      	it	eq
    c042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c046:	bd70      	pop	{r4, r5, r6, pc}
    c048:	f094 0f00 	teq	r4, #0
    c04c:	d10f      	bne.n	c06e <__aeabi_dmul+0x1c2>
    c04e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c052:	0040      	lsls	r0, r0, #1
    c054:	eb41 0101 	adc.w	r1, r1, r1
    c058:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c05c:	bf08      	it	eq
    c05e:	3c01      	subeq	r4, #1
    c060:	d0f7      	beq.n	c052 <__aeabi_dmul+0x1a6>
    c062:	ea41 0106 	orr.w	r1, r1, r6
    c066:	f095 0f00 	teq	r5, #0
    c06a:	bf18      	it	ne
    c06c:	4770      	bxne	lr
    c06e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c072:	0052      	lsls	r2, r2, #1
    c074:	eb43 0303 	adc.w	r3, r3, r3
    c078:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c07c:	bf08      	it	eq
    c07e:	3d01      	subeq	r5, #1
    c080:	d0f7      	beq.n	c072 <__aeabi_dmul+0x1c6>
    c082:	ea43 0306 	orr.w	r3, r3, r6
    c086:	4770      	bx	lr
    c088:	ea94 0f0c 	teq	r4, ip
    c08c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c090:	bf18      	it	ne
    c092:	ea95 0f0c 	teqne	r5, ip
    c096:	d00c      	beq.n	c0b2 <__aeabi_dmul+0x206>
    c098:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c09c:	bf18      	it	ne
    c09e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c0a2:	d1d1      	bne.n	c048 <__aeabi_dmul+0x19c>
    c0a4:	ea81 0103 	eor.w	r1, r1, r3
    c0a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c0ac:	f04f 0000 	mov.w	r0, #0
    c0b0:	bd70      	pop	{r4, r5, r6, pc}
    c0b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c0b6:	bf06      	itte	eq
    c0b8:	4610      	moveq	r0, r2
    c0ba:	4619      	moveq	r1, r3
    c0bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c0c0:	d019      	beq.n	c0f6 <__aeabi_dmul+0x24a>
    c0c2:	ea94 0f0c 	teq	r4, ip
    c0c6:	d102      	bne.n	c0ce <__aeabi_dmul+0x222>
    c0c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c0cc:	d113      	bne.n	c0f6 <__aeabi_dmul+0x24a>
    c0ce:	ea95 0f0c 	teq	r5, ip
    c0d2:	d105      	bne.n	c0e0 <__aeabi_dmul+0x234>
    c0d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c0d8:	bf1c      	itt	ne
    c0da:	4610      	movne	r0, r2
    c0dc:	4619      	movne	r1, r3
    c0de:	d10a      	bne.n	c0f6 <__aeabi_dmul+0x24a>
    c0e0:	ea81 0103 	eor.w	r1, r1, r3
    c0e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c0e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c0ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c0f0:	f04f 0000 	mov.w	r0, #0
    c0f4:	bd70      	pop	{r4, r5, r6, pc}
    c0f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c0fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c0fe:	bd70      	pop	{r4, r5, r6, pc}

0000c100 <__aeabi_ddiv>:
    c100:	b570      	push	{r4, r5, r6, lr}
    c102:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c106:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c10a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c10e:	bf1d      	ittte	ne
    c110:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c114:	ea94 0f0c 	teqne	r4, ip
    c118:	ea95 0f0c 	teqne	r5, ip
    c11c:	f000 f8a7 	bleq	c26e <__aeabi_ddiv+0x16e>
    c120:	eba4 0405 	sub.w	r4, r4, r5
    c124:	ea81 0e03 	eor.w	lr, r1, r3
    c128:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c12c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c130:	f000 8088 	beq.w	c244 <__aeabi_ddiv+0x144>
    c134:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c138:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c13c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c140:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c144:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c148:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c14c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c150:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c154:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c158:	429d      	cmp	r5, r3
    c15a:	bf08      	it	eq
    c15c:	4296      	cmpeq	r6, r2
    c15e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c162:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c166:	d202      	bcs.n	c16e <__aeabi_ddiv+0x6e>
    c168:	085b      	lsrs	r3, r3, #1
    c16a:	ea4f 0232 	mov.w	r2, r2, rrx
    c16e:	1ab6      	subs	r6, r6, r2
    c170:	eb65 0503 	sbc.w	r5, r5, r3
    c174:	085b      	lsrs	r3, r3, #1
    c176:	ea4f 0232 	mov.w	r2, r2, rrx
    c17a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c17e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c182:	ebb6 0e02 	subs.w	lr, r6, r2
    c186:	eb75 0e03 	sbcs.w	lr, r5, r3
    c18a:	bf22      	ittt	cs
    c18c:	1ab6      	subcs	r6, r6, r2
    c18e:	4675      	movcs	r5, lr
    c190:	ea40 000c 	orrcs.w	r0, r0, ip
    c194:	085b      	lsrs	r3, r3, #1
    c196:	ea4f 0232 	mov.w	r2, r2, rrx
    c19a:	ebb6 0e02 	subs.w	lr, r6, r2
    c19e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c1a2:	bf22      	ittt	cs
    c1a4:	1ab6      	subcs	r6, r6, r2
    c1a6:	4675      	movcs	r5, lr
    c1a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c1ac:	085b      	lsrs	r3, r3, #1
    c1ae:	ea4f 0232 	mov.w	r2, r2, rrx
    c1b2:	ebb6 0e02 	subs.w	lr, r6, r2
    c1b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c1ba:	bf22      	ittt	cs
    c1bc:	1ab6      	subcs	r6, r6, r2
    c1be:	4675      	movcs	r5, lr
    c1c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c1c4:	085b      	lsrs	r3, r3, #1
    c1c6:	ea4f 0232 	mov.w	r2, r2, rrx
    c1ca:	ebb6 0e02 	subs.w	lr, r6, r2
    c1ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    c1d2:	bf22      	ittt	cs
    c1d4:	1ab6      	subcs	r6, r6, r2
    c1d6:	4675      	movcs	r5, lr
    c1d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c1dc:	ea55 0e06 	orrs.w	lr, r5, r6
    c1e0:	d018      	beq.n	c214 <__aeabi_ddiv+0x114>
    c1e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c1e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c1ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c1ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c1f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c1f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c1fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c1fe:	d1c0      	bne.n	c182 <__aeabi_ddiv+0x82>
    c200:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c204:	d10b      	bne.n	c21e <__aeabi_ddiv+0x11e>
    c206:	ea41 0100 	orr.w	r1, r1, r0
    c20a:	f04f 0000 	mov.w	r0, #0
    c20e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c212:	e7b6      	b.n	c182 <__aeabi_ddiv+0x82>
    c214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c218:	bf04      	itt	eq
    c21a:	4301      	orreq	r1, r0
    c21c:	2000      	moveq	r0, #0
    c21e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c222:	bf88      	it	hi
    c224:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c228:	f63f aeaf 	bhi.w	bf8a <__aeabi_dmul+0xde>
    c22c:	ebb5 0c03 	subs.w	ip, r5, r3
    c230:	bf04      	itt	eq
    c232:	ebb6 0c02 	subseq.w	ip, r6, r2
    c236:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c23a:	f150 0000 	adcs.w	r0, r0, #0
    c23e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c242:	bd70      	pop	{r4, r5, r6, pc}
    c244:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c248:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c24c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c250:	bfc2      	ittt	gt
    c252:	ebd4 050c 	rsbsgt	r5, r4, ip
    c256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c25a:	bd70      	popgt	{r4, r5, r6, pc}
    c25c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c260:	f04f 0e00 	mov.w	lr, #0
    c264:	3c01      	subs	r4, #1
    c266:	e690      	b.n	bf8a <__aeabi_dmul+0xde>
    c268:	ea45 0e06 	orr.w	lr, r5, r6
    c26c:	e68d      	b.n	bf8a <__aeabi_dmul+0xde>
    c26e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c272:	ea94 0f0c 	teq	r4, ip
    c276:	bf08      	it	eq
    c278:	ea95 0f0c 	teqeq	r5, ip
    c27c:	f43f af3b 	beq.w	c0f6 <__aeabi_dmul+0x24a>
    c280:	ea94 0f0c 	teq	r4, ip
    c284:	d10a      	bne.n	c29c <__aeabi_ddiv+0x19c>
    c286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c28a:	f47f af34 	bne.w	c0f6 <__aeabi_dmul+0x24a>
    c28e:	ea95 0f0c 	teq	r5, ip
    c292:	f47f af25 	bne.w	c0e0 <__aeabi_dmul+0x234>
    c296:	4610      	mov	r0, r2
    c298:	4619      	mov	r1, r3
    c29a:	e72c      	b.n	c0f6 <__aeabi_dmul+0x24a>
    c29c:	ea95 0f0c 	teq	r5, ip
    c2a0:	d106      	bne.n	c2b0 <__aeabi_ddiv+0x1b0>
    c2a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c2a6:	f43f aefd 	beq.w	c0a4 <__aeabi_dmul+0x1f8>
    c2aa:	4610      	mov	r0, r2
    c2ac:	4619      	mov	r1, r3
    c2ae:	e722      	b.n	c0f6 <__aeabi_dmul+0x24a>
    c2b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c2b4:	bf18      	it	ne
    c2b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c2ba:	f47f aec5 	bne.w	c048 <__aeabi_dmul+0x19c>
    c2be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c2c2:	f47f af0d 	bne.w	c0e0 <__aeabi_dmul+0x234>
    c2c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c2ca:	f47f aeeb 	bne.w	c0a4 <__aeabi_dmul+0x1f8>
    c2ce:	e712      	b.n	c0f6 <__aeabi_dmul+0x24a>

0000c2d0 <__aeabi_d2iz>:
    c2d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c2d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c2d8:	d215      	bcs.n	c306 <__aeabi_d2iz+0x36>
    c2da:	d511      	bpl.n	c300 <__aeabi_d2iz+0x30>
    c2dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c2e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c2e4:	d912      	bls.n	c30c <__aeabi_d2iz+0x3c>
    c2e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c2ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c2ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c2f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2f6:	fa23 f002 	lsr.w	r0, r3, r2
    c2fa:	bf18      	it	ne
    c2fc:	4240      	negne	r0, r0
    c2fe:	4770      	bx	lr
    c300:	f04f 0000 	mov.w	r0, #0
    c304:	4770      	bx	lr
    c306:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c30a:	d105      	bne.n	c318 <__aeabi_d2iz+0x48>
    c30c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c310:	bf08      	it	eq
    c312:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c316:	4770      	bx	lr
    c318:	f04f 0000 	mov.w	r0, #0
    c31c:	4770      	bx	lr
    c31e:	bf00      	nop
    c320:	4f464946 	.word	0x4f464946
    c324:	616e4520 	.word	0x616e4520
    c328:	64656c62 	.word	0x64656c62
    c32c:	3e2d2d20 	.word	0x3e2d2d20
    c330:	00000020 	.word	0x00000020
    c334:	65746e49 	.word	0x65746e49
    c338:	70757272 	.word	0x70757272
    c33c:	6e452074 	.word	0x6e452074
    c340:	656c6261 	.word	0x656c6261
    c344:	00000064 	.word	0x00000064
    c348:	65746e49 	.word	0x65746e49
    c34c:	70757272 	.word	0x70757272
    c350:	69442074 	.word	0x69442074
    c354:	6c626173 	.word	0x6c626173
    c358:	00006465 	.word	0x00006465
    c35c:	46494609 	.word	0x46494609
    c360:	6946204f 	.word	0x6946204f
    c364:	7265746c 	.word	0x7265746c
    c368:	6e692073 	.word	0x6e692073
    c36c:	65737520 	.word	0x65737520
    c370:	0000203a 	.word	0x0000203a
    c374:	6d655209 	.word	0x6d655209
    c378:	696e6961 	.word	0x696e6961
    c37c:	4d20676e 	.word	0x4d20676e
    c380:	626c6961 	.word	0x626c6961
    c384:	7365786f 	.word	0x7365786f
    c388:	0000203a 	.word	0x0000203a
    c38c:	424d0909 	.word	0x424d0909
    c390:	00000000 	.word	0x00000000
    c394:	646f6320 	.word	0x646f6320
    c398:	52203a65 	.word	0x52203a65
    c39c:	4e495f58 	.word	0x4e495f58
    c3a0:	49544341 	.word	0x49544341
    c3a4:	00004556 	.word	0x00004556
    c3a8:	646f6320 	.word	0x646f6320
    c3ac:	52203a65 	.word	0x52203a65
    c3b0:	4d455f58 	.word	0x4d455f58
    c3b4:	00595450 	.word	0x00595450
    c3b8:	78452809 	.word	0x78452809
    c3bc:	646e6574 	.word	0x646e6574
    c3c0:	46206465 	.word	0x46206465
    c3c4:	656d6172 	.word	0x656d6172
    c3c8:	00000029 	.word	0x00000029
    c3cc:	74532809 	.word	0x74532809
    c3d0:	61646e61 	.word	0x61646e61
    c3d4:	46206472 	.word	0x46206472
    c3d8:	656d6172 	.word	0x656d6172
    c3dc:	00000029 	.word	0x00000029
    c3e0:	646f6320 	.word	0x646f6320
    c3e4:	52203a65 	.word	0x52203a65
    c3e8:	55465f58 	.word	0x55465f58
    c3ec:	00004c4c 	.word	0x00004c4c
    c3f0:	646f6320 	.word	0x646f6320
    c3f4:	52203a65 	.word	0x52203a65
    c3f8:	564f5f58 	.word	0x564f5f58
    c3fc:	55525245 	.word	0x55525245
    c400:	0000004e 	.word	0x0000004e
    c404:	646f6320 	.word	0x646f6320
    c408:	52203a65 	.word	0x52203a65
    c40c:	41525f58 	.word	0x41525f58
    c410:	4557534e 	.word	0x4557534e
    c414:	00000052 	.word	0x00000052
    c418:	646f6320 	.word	0x646f6320
    c41c:	52203a65 	.word	0x52203a65
    c420:	55425f58 	.word	0x55425f58
    c424:	00005953 	.word	0x00005953
    c428:	646f6320 	.word	0x646f6320
    c42c:	54203a65 	.word	0x54203a65
    c430:	4e495f58 	.word	0x4e495f58
    c434:	49544341 	.word	0x49544341
    c438:	00004556 	.word	0x00004556
    c43c:	646f6320 	.word	0x646f6320
    c440:	54203a65 	.word	0x54203a65
    c444:	42415f58 	.word	0x42415f58
    c448:	0054524f 	.word	0x0054524f
    c44c:	646f6320 	.word	0x646f6320
    c450:	54203a65 	.word	0x54203a65
    c454:	41445f58 	.word	0x41445f58
    c458:	28204154 	.word	0x28204154
    c45c:	6e617254 	.word	0x6e617254
    c460:	74696d73 	.word	0x74696d73
    c464:	676e6974 	.word	0x676e6974
    c468:	00000029 	.word	0x00000029
    c46c:	74784528 	.word	0x74784528
    c470:	65646e65 	.word	0x65646e65
    c474:	72462064 	.word	0x72462064
    c478:	29656d61 	.word	0x29656d61
    c47c:	00000000 	.word	0x00000000
    c480:	61745328 	.word	0x61745328
    c484:	7261646e 	.word	0x7261646e
    c488:	72462064 	.word	0x72462064
    c48c:	29656d61 	.word	0x29656d61
    c490:	00000000 	.word	0x00000000
    c494:	3a444928 	.word	0x3a444928
    c498:	00783020 	.word	0x00783020
    c49c:	79615028 	.word	0x79615028
    c4a0:	64616f6c 	.word	0x64616f6c
    c4a4:	0000203a 	.word	0x0000203a
    c4a8:	646f6320 	.word	0x646f6320
    c4ac:	54203a65 	.word	0x54203a65
    c4b0:	41545f58 	.word	0x41545f58
    c4b4:	4557534e 	.word	0x4557534e
    c4b8:	00000052 	.word	0x00000052
    c4bc:	4f464946 	.word	0x4f464946
    c4c0:	73694420 	.word	0x73694420
    c4c4:	656c6261 	.word	0x656c6261
    c4c8:	4d090a64 	.word	0x4d090a64
    c4cc:	626c6961 	.word	0x626c6961
    c4d0:	7365786f 	.word	0x7365786f
    c4d4:	ff000a3a 	.word	0xff000a3a
    c4d8:	74726f50 	.word	0x74726f50
    c4dc:	2520203a 	.word	0x2520203a
    c4e0:	43202c64 	.word	0x43202c64
    c4e4:	65746e65 	.word	0x65746e65
    c4e8:	25203a72 	.word	0x25203a72
    c4ec:	53202c64 	.word	0x53202c64
    c4f0:	62726174 	.word	0x62726174
    c4f4:	6472616f 	.word	0x6472616f
    c4f8:	6425203a 	.word	0x6425203a
    c4fc:	202d2020 	.word	0x202d2020
    c500:	314e4143 	.word	0x314e4143
    c504:	2520203a 	.word	0x2520203a
    c508:	20583830 	.word	0x20583830
    c50c:	00000000 	.word	0x00000000
    c510:	58323025 	.word	0x58323025
    c514:	ffff0020 	.word	0xffff0020

0000c518 <vtable for FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>>:
	...
    c520:	000037e1 00000485 000029fd 00000711     .7.......)......
    c530:	00002869 00000715 00000719              i(..........

0000c53c <vtable for FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>>:
	...
    c544:	00002f75 000005c5 00001f45 00000705     u/......E.......
    c554:	00002181 00000709 0000070d 01010000     .!..............
    c564:	01010100 01010201 02010202 03020103     ................
    c574:	02040202 02020502 06020305 03070203     ................
    c584:	03040702 07030407 05070405 05060704     ................
    c594:	07060607 07070606 00070707 00000000     ................
    c5a4:	00000000 08000000 00000000 00000000     ................
    c5b4:	00000000                                ....

0000c5b8 <digital_pin_to_info_PGM>:
    c5b8:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    c5c8:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    c5d8:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    c5e8:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    c5f8:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    c608:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    c618:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    c628:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    c638:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    c648:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    c658:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    c668:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    c678:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
    c688:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
    c698:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
    c6a8:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
    c6b8:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
    c6c8:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
    c6d8:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
    c6e8:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
    c6f8:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
    c708:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
    c718:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
    c728:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
    c738:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
    c748:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
    c758:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
    c768:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
    c778:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
    c788:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
    c798:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
    c7a8:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@

0000c7b8 <vtable for usb_serial_class>:
	...
    c7c0:	00004db5 00004dad 00004da9 00004da5     .M...M...M...M..
    c7d0:	00004da1 00004d9d 00004d99 00004d95     .M...M...M...M..

0000c7e0 <_serialEvent_default>:
    c7e0:	ffffff00                                ....

0000c7e4 <usb_descriptor_list>:
    c7e4:	00000100 1fff07b4 00000012 00000200     ................
    c7f4:	1fff0770 00000043 00000300 1fff07c8     p...C...........
    c804:	00000000 04090301 1fff07cc 00000000     ................
    c814:	04090302 1fff07e4 00000000 04090303     ................
    c824:	1fff07fc 00000000 00000000 00000000     ................
    c834:	00000000                                ....

0000c838 <usb_endpoint_config_table>:
    c838:	15191500                                ....

0000c83c <_ctype_>:
    c83c:	20202000 20202020 28282020 20282828     .         ((((( 
    c84c:	20202020 20202020 20202020 20202020                     
    c85c:	10108820 10101010 10101010 10101010      ...............
    c86c:	04040410 04040404 10040404 10101010     ................
    c87c:	41411010 41414141 01010101 01010101     ..AAAAAA........
    c88c:	01010101 01010101 01010101 10101010     ................
    c89c:	42421010 42424242 02020202 02020202     ..BBBBBB........
    c8ac:	02020202 02020202 02020202 10101010     ................
    c8bc:	00000020 00000000 00000000 00000000      ...............
	...
    c93c:	ffffff00 0000002e 435f434c 414c4c4f     ........LC_COLLA
    c94c:	00004554 435f434c 45505954 00000000     TE..LC_CTYPE....
    c95c:	4d5f434c 54454e4f 00595241 4e5f434c     LC_MONETARY.LC_N
    c96c:	52454d55 00004349 545f434c 00454d49     UMERIC..LC_TIME.
    c97c:	4d5f434c 41535345 00534547 6c6c6142     LC_MESSAGES.Ball
    c98c:	7320636f 65636375 64656465 00000000     oc succeeded....
    c99c:	7461642f 656a2f61 6e696b6e 6f772f73     /data/jenkins/wo
    c9ac:	70736b72 2f656361 2d554e47 6c6f6f74     rkspace/GNU-tool
    c9bc:	69616863 72612f6e 31312d6d 6372732f     chain/arm-11/src
    c9cc:	77656e2f 2d62696c 77677963 6e2f6e69     /newlib-cygwin/n
    c9dc:	696c7765 696c2f62 732f6362 696c6474     ewlib/libc/stdli
    c9ec:	706d2f62 2e636572 ffff0063              b/mprec.c...

0000c9f8 <__mprec_bigtens>:
    c9f8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    ca08:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    ca18:	7f73bf3c 75154fdd                       <.s..O.u

0000ca20 <__mprec_tens>:
    ca20:	00000000 3ff00000 00000000 40240000     .......?......$@
    ca30:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    ca40:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    ca50:	00000000 412e8480 00000000 416312d0     .......A......cA
    ca60:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    ca70:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    ca80:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    ca90:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    caa0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    cab0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    cac0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    cad0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    cae0:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
    caf0:	0000007d 00464e49 00666e69 004e414e     }...INF.inf.NAN.
    cb00:	006e616e 33323130 37363534 62613938     nan.0123456789ab
    cb10:	66656463 00000000 33323130 37363534     cdef....01234567
    cb20:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
    cb30:	0000296c ffff0030 20202020 20202020     l)..0...        
    cb40:	20202020 20202020 30303030 30303030             00000000
    cb50:	30303030 30303030 7566202c 6974636e     00000000, functi
    cb60:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
    cb70:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
    cb80:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
    cb90:	25732564 ff000a73 69666e49 7974696e     d%s%s...Infinity
    cba0:	00000000 004e614e 7461642f 656a2f61     ....NaN./data/je
    cbb0:	6e696b6e 6f772f73 70736b72 2f656361     nkins/workspace/
    cbc0:	2d554e47 6c6f6f74 69616863 72612f6e     GNU-toolchain/ar
    cbd0:	31312d6d 6372732f 77656e2f 2d62696c     m-11/src/newlib-
    cbe0:	77677963 6e2f6e69 696c7765 696c2f62     cygwin/newlib/li
    cbf0:	732f6362 696c6474 74642f62 632e616f     bc/stdlib/dtoa.c
    cc00:	ffffff00 20202020 20202020 20202020     ....            
    cc10:	20202020 30303030 30303030 30303030         000000000000
    cc20:	30303030                                0000

0000cc24 <_init>:
    cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc26:	bf00      	nop
    cc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc2a:	bc08      	pop	{r3}
    cc2c:	469e      	mov	lr, r3
    cc2e:	4770      	bx	lr

0000cc30 <__init_array_start>:
    cc30:	0000691d 	.word	0x0000691d

0000cc34 <__frame_dummy_init_array_entry>:
    cc34:	00000435 00003d11                       5....=..

Disassembly of section .fini:

0000cc3c <_fini>:
    cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc3e:	bf00      	nop
